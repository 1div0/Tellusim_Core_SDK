// Copyright (C) 2018-2025, Tellusim Technologies Inc. All rights reserved
// https://tellusim.com/

#ifndef __TELLUSIM_OBJC_API_H__
#define __TELLUSIM_OBJC_API_H__

#include "TellusimObjCBase.h"

#ifdef __cplusplus
extern "C" {
#endif

/// Interfaces
@class TSString;
@class TSApp;
@class TSAsync;
@class TSStream;
@class TSBlob;
@class TSFile;
@class TSSocket;
@class TSSocketSSL;
@class TSSource;
@class TSDate;
@class TSInfo;
@class TSDirectory;
@class TSArchive;
@class TSImage;
@class TSImageSampler;
@class TSMeshNode;
@class TSMeshIndices;
@class TSMeshAttribute;
@class TSMeshJoint;
@class TSMeshMaterial;
@class TSMeshGeometry;
@class TSMeshTransform;
@class TSMeshAnimation;
@class TSMeshAttachment;
@class TSMesh;
@class TSJson;
@class TSXml;
@class TSBuffer;
@class TSBufferTable;
@class TSD3D12Buffer;
@class TSD3D11Buffer;
@class TSMTLBuffer;
@class TSVKBuffer;
@class TSGLBuffer;
@class TSGLESBuffer;
@class TSCUBuffer;
@class TSHIPBuffer;
@class TSFUBuffer;
@class TSCommand;
@class TSD3D12Command;
@class TSMTLCommand;
@class TSVKCommand;
@class TSFUCommand;
@class TSCompute;
@class TSD3D12Compute;
@class TSMTLCompute;
@class TSVKCompute;
@class TSFUCompute;
@class TSContext;
@class TSD3D12Context;
@class TSD3D11Context;
@class TSMTLContext;
@class TSVKContext;
@class TSGLContext;
@class TSGLESContext;
@class TSWGContext;
@class TSCUContext;
@class TSHIPContext;
@class TSQuery;
@class TSFUQuery;
@class TSFence;
@class TSVKFence;
@class TSFUFence;
@class TSShader;
@class TSShaderCompiler;
@class TSD3D12Shader;
@class TSD3D11Shader;
@class TSMTLShader;
@class TSVKShader;
@class TSGLShader;
@class TSGLESShader;
@class TSCUShader;
@class TSHIPShader;
@class TSFUShader;
@class TSSampler;
@class TSMTLSampler;
@class TSFUSampler;
@class TSTexture;
@class TSTextureTable;
@class TSD3D12Texture;
@class TSD3D11Texture;
@class TSMTLTexture;
@class TSVKTexture;
@class TSGLTexture;
@class TSGLESTexture;
@class TSCUTexture;
@class TSHIPTexture;
@class TSFUTexture;
@class TSTracing;
@class TSD3D12Tracing;
@class TSMTLTracing;
@class TSVKTracing;
@class TSFUTracing;
@class TSTarget;
@class TSD3D12Target;
@class TSD3D11Target;
@class TSMTLTarget;
@class TSVKTarget;
@class TSGLTarget;
@class TSGLESTarget;
@class TSFUTarget;
@class TSDevice;
@class TSD3D12Device;
@class TSD3D11Device;
@class TSMTLDevice;
@class TSVKDevice;
@class TSFUDevice;
@class TSKernel;
@class TSD3D12Kernel;
@class TSMTLKernel;
@class TSFUKernel;
@class TSPipeline;
@class TSD3D12Pipeline;
@class TSMTLPipeline;
@class TSFUPipeline;
@class TSTraversal;
@class TSD3D12Traversal;
@class TSFUTraversal;
@class TSSurface;
@class TSD3D12Surface;
@class TSD3D11Surface;
@class TSMTLSurface;
@class TSVKSurface;
@class TSGLSurface;
@class TSGLESSurface;
@class TSWindow;
@class TSFont;
@class TSCanvasElement;
@class TSCanvasText;
@class TSCanvasMesh;
@class TSCanvasRect;
@class TSCanvasTriangle;
@class TSCanvasEllipse;
@class TSCanvasShape;
@class TSCanvasStrip;
@class TSCanvas;
@class TSControl;
@class TSControlRoot;
@class TSControlText;
@class TSControlRect;
@class TSControlGrid;
@class TSControlGroup;
@class TSControlPanel;
@class TSControlDialog;
@class TSControlWindow;
@class TSControlCheck;
@class TSControlCombo;
@class TSControlButton;
@class TSControlSlider;
@class TSControlScroll;
@class TSControlSplit;
@class TSControlArea;
@class TSControlTree;
@class TSControlEdit;
@class TSDialogMessage;
@class TSDialogFileOpen;
@class TSDialogFileSave;
@class TSDialogDirectory;
@class TSDialogProgress;
@class TSDialogColor;
@class TSDialogMenu;
@class TSCubeFilter;
@class TSDecoderJPEG;
@class TSEncoderBC15;
@class TSEncoderBC67;
@class TSEncoderASTC;
@class TSMeshModel;
@class TSSeparableFilter;
@class TSPrefixScan;
@class TSRadixSort;
@class TSBitonicSort;
@class TSSpatialGrid;
@class TSSpatialTree;
@class TSFourierTransform;
@class TSTensorGraph;
@class TSController;
@class TSDesktop;

/// Tellusim::Vendor
typedef NS_ENUM(NSInteger, TS_Vendor) {
	TS_VendorARM NS_SWIFT_NAME(ARM) = 0x13b5,
	TS_VendorAMD NS_SWIFT_NAME(AMD) = 0x1002,
	TS_VendorApple NS_SWIFT_NAME(Apple) = 0x106b,
	TS_VendorIntel NS_SWIFT_NAME(Intel) = 0x8086,
	TS_VendorNvidia NS_SWIFT_NAME(Nvidia) = 0x10de,
	TS_VendorQualcomm NS_SWIFT_NAME(Qualcomm) = 0x5143,
} NS_SWIFT_NAME(Vendor);

/// Tellusim::Platform
typedef NS_ENUM(NSInteger, TS_Platform) {
	TS_PlatformUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_PlatformFusion NS_SWIFT_NAME(Fusion),
	TS_PlatformD3D12 NS_SWIFT_NAME(D3D12),
	TS_PlatformD3D11 NS_SWIFT_NAME(D3D11),
	TS_PlatformMTL NS_SWIFT_NAME(MTL),
	TS_PlatformVK NS_SWIFT_NAME(VK),
	TS_PlatformGL NS_SWIFT_NAME(GL),
	TS_PlatformGLES NS_SWIFT_NAME(GLES),
	TS_PlatformWG NS_SWIFT_NAME(WG),
	TS_PlatformCU NS_SWIFT_NAME(CU),
	TS_PlatformHIP NS_SWIFT_NAME(HIP),
	TS_PlatformAny NS_SWIFT_NAME(Any),
	TS_PlatformNumPlatforms NS_SWIFT_NAME(NumPlatforms),
} NS_SWIFT_NAME(Platform);

/// Tellusim::BindFlags
typedef NS_ENUM(NSInteger, TS_BindFlags) {
	TS_BindFlagsBindFlagNone NS_SWIFT_NAME(BindFlagNone) = 0,
	TS_BindFlagsBindFlagFixed NS_SWIFT_NAME(BindFlagFixed) = 1,
	TS_BindFlagsBindFlagRead NS_SWIFT_NAME(BindFlagRead) = 2,
} NS_SWIFT_NAME(BindFlags);

/// Tellusim::TableType
typedef NS_ENUM(NSInteger, TS_TableType) {
	TS_TableTypeTexture NS_SWIFT_NAME(Texture) = 0,
	TS_TableTypeStorage NS_SWIFT_NAME(Storage),
	TS_TableTypeNumTableTypes NS_SWIFT_NAME(NumTableTypes),
} NS_SWIFT_NAME(TableType);

/// Tellusim::Format
typedef NS_ENUM(NSInteger, TS_Format) {
	TS_FormatUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_FormatRi8 NS_SWIFT_NAME(Ri8),
	TS_FormatRu8 NS_SWIFT_NAME(Ru8),
	TS_FormatRi8n NS_SWIFT_NAME(Ri8n),
	TS_FormatRu8n NS_SWIFT_NAME(Ru8n),
	TS_FormatRGi8 NS_SWIFT_NAME(RGi8),
	TS_FormatRGu8 NS_SWIFT_NAME(RGu8),
	TS_FormatRGi8n NS_SWIFT_NAME(RGi8n),
	TS_FormatRGu8n NS_SWIFT_NAME(RGu8n),
	TS_FormatRGBi8 NS_SWIFT_NAME(RGBi8),
	TS_FormatRGBu8 NS_SWIFT_NAME(RGBu8),
	TS_FormatRGBi8n NS_SWIFT_NAME(RGBi8n),
	TS_FormatRGBu8n NS_SWIFT_NAME(RGBu8n),
	TS_FormatRGBu8ns NS_SWIFT_NAME(RGBu8ns),
	TS_FormatRGBAi8 NS_SWIFT_NAME(RGBAi8),
	TS_FormatRGBAu8 NS_SWIFT_NAME(RGBAu8),
	TS_FormatRGBAi8n NS_SWIFT_NAME(RGBAi8n),
	TS_FormatRGBAu8n NS_SWIFT_NAME(RGBAu8n),
	TS_FormatRGBAu8ns NS_SWIFT_NAME(RGBAu8ns),
	TS_FormatBGRAu8n NS_SWIFT_NAME(BGRAu8n),
	TS_FormatBGRAu8ns NS_SWIFT_NAME(BGRAu8ns),
	TS_FormatRi16 NS_SWIFT_NAME(Ri16),
	TS_FormatRu16 NS_SWIFT_NAME(Ru16),
	TS_FormatRi16n NS_SWIFT_NAME(Ri16n),
	TS_FormatRu16n NS_SWIFT_NAME(Ru16n),
	TS_FormatRf16 NS_SWIFT_NAME(Rf16),
	TS_FormatRGi16 NS_SWIFT_NAME(RGi16),
	TS_FormatRGu16 NS_SWIFT_NAME(RGu16),
	TS_FormatRGi16n NS_SWIFT_NAME(RGi16n),
	TS_FormatRGu16n NS_SWIFT_NAME(RGu16n),
	TS_FormatRGf16 NS_SWIFT_NAME(RGf16),
	TS_FormatRGBi16 NS_SWIFT_NAME(RGBi16),
	TS_FormatRGBu16 NS_SWIFT_NAME(RGBu16),
	TS_FormatRGBi16n NS_SWIFT_NAME(RGBi16n),
	TS_FormatRGBu16n NS_SWIFT_NAME(RGBu16n),
	TS_FormatRGBf16 NS_SWIFT_NAME(RGBf16),
	TS_FormatRGBAi16 NS_SWIFT_NAME(RGBAi16),
	TS_FormatRGBAu16 NS_SWIFT_NAME(RGBAu16),
	TS_FormatRGBAi16n NS_SWIFT_NAME(RGBAi16n),
	TS_FormatRGBAu16n NS_SWIFT_NAME(RGBAu16n),
	TS_FormatRGBAf16 NS_SWIFT_NAME(RGBAf16),
	TS_FormatRi32 NS_SWIFT_NAME(Ri32),
	TS_FormatRu32 NS_SWIFT_NAME(Ru32),
	TS_FormatRf32 NS_SWIFT_NAME(Rf32),
	TS_FormatRGi32 NS_SWIFT_NAME(RGi32),
	TS_FormatRGu32 NS_SWIFT_NAME(RGu32),
	TS_FormatRGf32 NS_SWIFT_NAME(RGf32),
	TS_FormatRGBi32 NS_SWIFT_NAME(RGBi32),
	TS_FormatRGBu32 NS_SWIFT_NAME(RGBu32),
	TS_FormatRGBf32 NS_SWIFT_NAME(RGBf32),
	TS_FormatRGBAi32 NS_SWIFT_NAME(RGBAi32),
	TS_FormatRGBAu32 NS_SWIFT_NAME(RGBAu32),
	TS_FormatRGBAf32 NS_SWIFT_NAME(RGBAf32),
	TS_FormatRi64 NS_SWIFT_NAME(Ri64),
	TS_FormatRu64 NS_SWIFT_NAME(Ru64),
	TS_FormatRf64 NS_SWIFT_NAME(Rf64),
	TS_FormatRGi64 NS_SWIFT_NAME(RGi64),
	TS_FormatRGu64 NS_SWIFT_NAME(RGu64),
	TS_FormatRGf64 NS_SWIFT_NAME(RGf64),
	TS_FormatRGBi64 NS_SWIFT_NAME(RGBi64),
	TS_FormatRGBu64 NS_SWIFT_NAME(RGBu64),
	TS_FormatRGBf64 NS_SWIFT_NAME(RGBf64),
	TS_FormatRGBAi64 NS_SWIFT_NAME(RGBAi64),
	TS_FormatRGBAu64 NS_SWIFT_NAME(RGBAu64),
	TS_FormatRGBAf64 NS_SWIFT_NAME(RGBAf64),
	TS_FormatRGBAu4n NS_SWIFT_NAME(RGBAu4n),
	TS_FormatRGBu5Au1n NS_SWIFT_NAME(RGBu5Au1n),
	TS_FormatRu5Gu6Bu5n NS_SWIFT_NAME(Ru5Gu6Bu5n),
	TS_FormatRGBu10Au2 NS_SWIFT_NAME(RGBu10Au2),
	TS_FormatRGBu10Au2n NS_SWIFT_NAME(RGBu10Au2n),
	TS_FormatRGf11Bf10 NS_SWIFT_NAME(RGf11Bf10),
	TS_FormatRGBf9Eu5 NS_SWIFT_NAME(RGBf9Eu5),
	TS_FormatRGBf21 NS_SWIFT_NAME(RGBf21),
	TS_FormatBC1RGBu8n NS_SWIFT_NAME(BC1RGBu8n),
	TS_FormatBC1RGBu8ns NS_SWIFT_NAME(BC1RGBu8ns),
	TS_FormatBC1RGBAu8n NS_SWIFT_NAME(BC1RGBAu8n),
	TS_FormatBC1RGBAu8ns NS_SWIFT_NAME(BC1RGBAu8ns),
	TS_FormatBC2RGBAu8n NS_SWIFT_NAME(BC2RGBAu8n),
	TS_FormatBC2RGBAu8ns NS_SWIFT_NAME(BC2RGBAu8ns),
	TS_FormatBC3RGBAu8n NS_SWIFT_NAME(BC3RGBAu8n),
	TS_FormatBC3RGBAu8ns NS_SWIFT_NAME(BC3RGBAu8ns),
	TS_FormatBC4Ri8n NS_SWIFT_NAME(BC4Ri8n),
	TS_FormatBC4Ru8n NS_SWIFT_NAME(BC4Ru8n),
	TS_FormatBC5RGi8n NS_SWIFT_NAME(BC5RGi8n),
	TS_FormatBC5RGu8n NS_SWIFT_NAME(BC5RGu8n),
	TS_FormatBC6RGBf16s NS_SWIFT_NAME(BC6RGBf16s),
	TS_FormatBC6RGBf16u NS_SWIFT_NAME(BC6RGBf16u),
	TS_FormatBC7RGBAu8n NS_SWIFT_NAME(BC7RGBAu8n),
	TS_FormatBC7RGBAu8ns NS_SWIFT_NAME(BC7RGBAu8ns),
	TS_FormatEACRi8n NS_SWIFT_NAME(EACRi8n),
	TS_FormatEACRu8n NS_SWIFT_NAME(EACRu8n),
	TS_FormatEACRGi8n NS_SWIFT_NAME(EACRGi8n),
	TS_FormatEACRGu8n NS_SWIFT_NAME(EACRGu8n),
	TS_FormatETC2RGBu8n NS_SWIFT_NAME(ETC2RGBu8n),
	TS_FormatETC2RGBu8ns NS_SWIFT_NAME(ETC2RGBu8ns),
	TS_FormatETC2RGBAu8n NS_SWIFT_NAME(ETC2RGBAu8n),
	TS_FormatETC2RGBAu8ns NS_SWIFT_NAME(ETC2RGBAu8ns),
	TS_FormatETC2RGBu8Au1n NS_SWIFT_NAME(ETC2RGBu8Au1n),
	TS_FormatETC2RGBu8Au1ns NS_SWIFT_NAME(ETC2RGBu8Au1ns),
	TS_FormatASTC44RGBAu8n NS_SWIFT_NAME(ASTC44RGBAu8n),
	TS_FormatASTC44RGBAu8ns NS_SWIFT_NAME(ASTC44RGBAu8ns),
	TS_FormatASTC44RGBAf16 NS_SWIFT_NAME(ASTC44RGBAf16),
	TS_FormatASTC54RGBAu8n NS_SWIFT_NAME(ASTC54RGBAu8n),
	TS_FormatASTC54RGBAu8ns NS_SWIFT_NAME(ASTC54RGBAu8ns),
	TS_FormatASTC54RGBAf16 NS_SWIFT_NAME(ASTC54RGBAf16),
	TS_FormatASTC55RGBAu8n NS_SWIFT_NAME(ASTC55RGBAu8n),
	TS_FormatASTC55RGBAu8ns NS_SWIFT_NAME(ASTC55RGBAu8ns),
	TS_FormatASTC55RGBAf16 NS_SWIFT_NAME(ASTC55RGBAf16),
	TS_FormatASTC65RGBAu8n NS_SWIFT_NAME(ASTC65RGBAu8n),
	TS_FormatASTC65RGBAu8ns NS_SWIFT_NAME(ASTC65RGBAu8ns),
	TS_FormatASTC65RGBAf16 NS_SWIFT_NAME(ASTC65RGBAf16),
	TS_FormatASTC66RGBAu8n NS_SWIFT_NAME(ASTC66RGBAu8n),
	TS_FormatASTC66RGBAu8ns NS_SWIFT_NAME(ASTC66RGBAu8ns),
	TS_FormatASTC66RGBAf16 NS_SWIFT_NAME(ASTC66RGBAf16),
	TS_FormatASTC85RGBAu8n NS_SWIFT_NAME(ASTC85RGBAu8n),
	TS_FormatASTC85RGBAu8ns NS_SWIFT_NAME(ASTC85RGBAu8ns),
	TS_FormatASTC85RGBAf16 NS_SWIFT_NAME(ASTC85RGBAf16),
	TS_FormatASTC86RGBAu8n NS_SWIFT_NAME(ASTC86RGBAu8n),
	TS_FormatASTC86RGBAu8ns NS_SWIFT_NAME(ASTC86RGBAu8ns),
	TS_FormatASTC86RGBAf16 NS_SWIFT_NAME(ASTC86RGBAf16),
	TS_FormatASTC88RGBAu8n NS_SWIFT_NAME(ASTC88RGBAu8n),
	TS_FormatASTC88RGBAu8ns NS_SWIFT_NAME(ASTC88RGBAu8ns),
	TS_FormatASTC88RGBAf16 NS_SWIFT_NAME(ASTC88RGBAf16),
	TS_FormatDu16 NS_SWIFT_NAME(Du16),
	TS_FormatDu16Su8 NS_SWIFT_NAME(Du16Su8),
	TS_FormatDu24 NS_SWIFT_NAME(Du24),
	TS_FormatDu24Su8 NS_SWIFT_NAME(Du24Su8),
	TS_FormatDf32 NS_SWIFT_NAME(Df32),
	TS_FormatDf32Su8 NS_SWIFT_NAME(Df32Su8),
	TS_FormatNumFormats NS_SWIFT_NAME(NumFormats),
} NS_SWIFT_NAME(Format);

/// Tellusim::App::
typedef NS_ENUM(NSInteger, TS_App) {
	TS_AppVersion_19 NS_SWIFT_NAME(Version_19) = 20221010,
	TS_AppVersion_20 NS_SWIFT_NAME(Version_20) = 20221109,
	TS_AppVersion_21 NS_SWIFT_NAME(Version_21) = 20221122,
	TS_AppVersion_22 NS_SWIFT_NAME(Version_22) = 20221222,
	TS_AppVersion_23 NS_SWIFT_NAME(Version_23) = 20230117,
	TS_AppVersion_24 NS_SWIFT_NAME(Version_24) = 20230217,
	TS_AppVersion_25 NS_SWIFT_NAME(Version_25) = 20230402,
	TS_AppVersion_26 NS_SWIFT_NAME(Version_26) = 20230509,
	TS_AppVersion_27 NS_SWIFT_NAME(Version_27) = 20230612,
	TS_AppVersion_28 NS_SWIFT_NAME(Version_28) = 20230718,
	TS_AppVersion_29 NS_SWIFT_NAME(Version_29) = 20230824,
	TS_AppVersion_30 NS_SWIFT_NAME(Version_30) = 20231029,
	TS_AppVersion_31 NS_SWIFT_NAME(Version_31) = 20231113,
	TS_AppVersion_32 NS_SWIFT_NAME(Version_32) = 20231212,
	TS_AppVersion_33 NS_SWIFT_NAME(Version_33) = 20240116,
	TS_AppVersion_34 NS_SWIFT_NAME(Version_34) = 20240216,
	TS_AppVersion_35 NS_SWIFT_NAME(Version_35) = 20240320,
	TS_AppVersion_36 NS_SWIFT_NAME(Version_36) = 20240427,
	TS_AppVersion_37 NS_SWIFT_NAME(Version_37) = 20240515,
	TS_AppVersion_38 NS_SWIFT_NAME(Version_38) = 20250215,
	TS_AppVersion_39 NS_SWIFT_NAME(Version_39) = 20250322,
	TS_AppVersion_40 NS_SWIFT_NAME(Version_40) = 20250429,
	TS_AppVersion_41 NS_SWIFT_NAME(Version_41) = 20250816,
	TS_AppVersion NS_SWIFT_NAME(Version) = 20250816,
} NS_SWIFT_NAME(App.Values);

/// Tellusim::Socket::Type
typedef NS_ENUM(NSInteger, TS_SocketType) {
	TS_SocketTypeStream NS_SWIFT_NAME(Stream) = 0,
	TS_SocketTypeDatagram NS_SWIFT_NAME(Datagram),
	TS_SocketTypeNumTypes NS_SWIFT_NAME(NumTypes),
} NS_SWIFT_NAME(Socket.Kind);

/// Tellusim::Directory::Attributes
typedef NS_ENUM(NSInteger, TS_DirectoryAttributes) {
	TS_DirectoryAttributesNone NS_SWIFT_NAME(None) = 0,
	TS_DirectoryAttributesRead NS_SWIFT_NAME(Read) = 1,
	TS_DirectoryAttributesWrite NS_SWIFT_NAME(Write) = 2,
	TS_DirectoryAttributesHidden NS_SWIFT_NAME(Hidden) = 4,
	TS_DirectoryAttributesExecute NS_SWIFT_NAME(Execute) = 8,
	TS_DirectoryAttributesTemporary NS_SWIFT_NAME(Temporary) = 16,
	TS_DirectoryAttributesNumAttributes NS_SWIFT_NAME(NumAttributes) = 5,
} NS_SWIFT_NAME(Directory.Attributes);

/// Tellusim::Image::Type
typedef NS_ENUM(NSInteger, TS_ImageType) {
	TS_ImageTypeUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_ImageType2D NS_SWIFT_NAME(Kind2D),
	TS_ImageType3D NS_SWIFT_NAME(Kind3D),
	TS_ImageTypeCube NS_SWIFT_NAME(Cube),
	TS_ImageTypeNumTypes NS_SWIFT_NAME(NumTypes),
} NS_SWIFT_NAME(Image.Kind);

/// Tellusim::Image::Flags
typedef NS_ENUM(NSInteger, TS_ImageFlags) {
	TS_ImageFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_ImageFlagsMipmaps NS_SWIFT_NAME(Mipmaps) = 1,
	TS_ImageFlagsNoClear NS_SWIFT_NAME(NoClear) = 2,
	TS_ImageFlagsNoAllocate NS_SWIFT_NAME(NoAllocate) = 4,
	TS_ImageFlagsFast NS_SWIFT_NAME(Fast) = 8,
	TS_ImageFlagsBest NS_SWIFT_NAME(Best) = 16,
	TS_ImageFlagsPerceptual NS_SWIFT_NAME(Perceptual) = 32,
	TS_ImageFlagsPanorama NS_SWIFT_NAME(Panorama) = 64,
	TS_ImageFlagsNormalize NS_SWIFT_NAME(Normalize) = 128,
	TS_ImageFlagsGamma NS_SWIFT_NAME(Gamma) = 256,
	TS_ImageFlagsSRGB NS_SWIFT_NAME(SRGB) = 512,
	TS_ImageFlagsNumFlags NS_SWIFT_NAME(Num) = 10,
} NS_SWIFT_NAME(Image.Flags);

/// Tellusim::Image::Filter
typedef NS_ENUM(NSInteger, TS_ImageFilter) {
	TS_ImageFilterUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_ImageFilterPoint NS_SWIFT_NAME(Point),
	TS_ImageFilterLinear NS_SWIFT_NAME(Linear),
	TS_ImageFilterCubic NS_SWIFT_NAME(Cubic),
	TS_ImageFilterSinc NS_SWIFT_NAME(Sinc),
	TS_ImageFilterBox NS_SWIFT_NAME(Box),
	TS_ImageFilterMax NS_SWIFT_NAME(Max),
	TS_ImageFilterMin NS_SWIFT_NAME(Min),
	TS_ImageFilterMip NS_SWIFT_NAME(Mip),
	TS_ImageFilterCR NS_SWIFT_NAME(CR),
	TS_ImageFilterNumFilters NS_SWIFT_NAME(NumFilters),
} NS_SWIFT_NAME(Image.Filter);

/// Tellusim::MeshIndices::Type
typedef NS_ENUM(NSInteger, TS_MeshIndicesType) {
	TS_MeshIndicesTypeUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_MeshIndicesTypePoint NS_SWIFT_NAME(Point),
	TS_MeshIndicesTypeLine NS_SWIFT_NAME(Line),
	TS_MeshIndicesTypeTriangle NS_SWIFT_NAME(Triangle),
	TS_MeshIndicesTypeQuadrilateral NS_SWIFT_NAME(Quadrilateral),
	TS_MeshIndicesTypeTetrahedron NS_SWIFT_NAME(Tetrahedron),
	TS_MeshIndicesTypeMaterial NS_SWIFT_NAME(Material),
	TS_MeshIndicesTypeIsland NS_SWIFT_NAME(Island),
	TS_MeshIndicesTypeGroup NS_SWIFT_NAME(Group),
	TS_MeshIndicesTypeJoint NS_SWIFT_NAME(Joint),
	TS_MeshIndicesTypeEdge NS_SWIFT_NAME(Edge),
	TS_MeshIndicesTypeNumTypes NS_SWIFT_NAME(NumTypes),
} NS_SWIFT_NAME(MeshIndices.Kind);

/// Tellusim::MeshAttribute::Type
typedef NS_ENUM(NSInteger, TS_MeshAttributeType) {
	TS_MeshAttributeTypeUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_MeshAttributeTypePosition NS_SWIFT_NAME(Position),
	TS_MeshAttributeTypeBasis NS_SWIFT_NAME(Basis),
	TS_MeshAttributeTypeNormal NS_SWIFT_NAME(Normal),
	TS_MeshAttributeTypeTangent NS_SWIFT_NAME(Tangent),
	TS_MeshAttributeTypeBinormal NS_SWIFT_NAME(Binormal),
	TS_MeshAttributeTypeTexCoord NS_SWIFT_NAME(TexCoord),
	TS_MeshAttributeTypeWeights NS_SWIFT_NAME(Weights),
	TS_MeshAttributeTypeJoints NS_SWIFT_NAME(Joints),
	TS_MeshAttributeTypeColor NS_SWIFT_NAME(Color),
	TS_MeshAttributeTypeCrease NS_SWIFT_NAME(Crease),
	TS_MeshAttributeTypeIndex NS_SWIFT_NAME(Index),
	TS_MeshAttributeTypeNumTypes NS_SWIFT_NAME(NumTypes),
} NS_SWIFT_NAME(MeshAttribute.Kind);

/// Tellusim::MeshMaterial::Flags
typedef NS_ENUM(NSInteger, TS_MeshMaterialFlags) {
	TS_MeshMaterialFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_MeshMaterialFlagsBool NS_SWIFT_NAME(Bool) = 1,
	TS_MeshMaterialFlagsScalarf32 NS_SWIFT_NAME(Scalarf32) = 2,
	TS_MeshMaterialFlagsVector4f NS_SWIFT_NAME(Vector4f) = 4,
	TS_MeshMaterialFlagsMatrix3x2f NS_SWIFT_NAME(Matrix3x2f) = 8,
	TS_MeshMaterialFlagsColor NS_SWIFT_NAME(Color) = 16,
	TS_MeshMaterialFlagsName NS_SWIFT_NAME(Name) = 32,
	TS_MeshMaterialFlagsLayout NS_SWIFT_NAME(Layout) = 64,
	TS_MeshMaterialFlagsBlob NS_SWIFT_NAME(Blob) = 128,
	TS_MeshMaterialFlagsImage NS_SWIFT_NAME(Image) = 256,
	TS_MeshMaterialFlagsTexture NS_SWIFT_NAME(Texture) = 416,
} NS_SWIFT_NAME(MeshMaterial.Flags);

/// Tellusim::MeshAttachment::Type
typedef NS_ENUM(NSInteger, TS_MeshAttachmentType) {
	TS_MeshAttachmentTypeUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_MeshAttachmentTypeLightGlobal NS_SWIFT_NAME(LightGlobal),
	TS_MeshAttachmentTypeLightPoint NS_SWIFT_NAME(LightPoint),
	TS_MeshAttachmentTypeLightSpot NS_SWIFT_NAME(LightSpot),
	TS_MeshAttachmentTypeLightImage NS_SWIFT_NAME(LightImage),
	TS_MeshAttachmentTypeCameraPerspective NS_SWIFT_NAME(CameraPerspective),
	TS_MeshAttachmentTypeCameraOrthographic NS_SWIFT_NAME(CameraOrthographic),
	TS_MeshAttachmentTypeNumTypes NS_SWIFT_NAME(NumTypes),
} NS_SWIFT_NAME(MeshAttachment.Kind);

/// Tellusim::MeshAttachment::Flags
typedef NS_ENUM(NSInteger, TS_MeshAttachmentFlags) {
	TS_MeshAttachmentFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_MeshAttachmentFlagsBool NS_SWIFT_NAME(Bool) = 1,
	TS_MeshAttachmentFlagsScalarf32 NS_SWIFT_NAME(Scalarf32) = 2,
	TS_MeshAttachmentFlagsVector4f NS_SWIFT_NAME(Vector4f) = 4,
	TS_MeshAttachmentFlagsColor NS_SWIFT_NAME(Color) = 8,
	TS_MeshAttachmentFlagsName NS_SWIFT_NAME(Name) = 16,
} NS_SWIFT_NAME(MeshAttachment.Flags);

/// Tellusim::Mesh::Flags
typedef NS_ENUM(NSInteger, TS_MeshFlags) {
	TS_MeshFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_MeshFlagsEmbed NS_SWIFT_NAME(Embed) = 1,
	TS_MeshFlags32Bit NS_SWIFT_NAME(Kind32Bit) = 2,
} NS_SWIFT_NAME(Mesh.Flags);

/// Tellusim::Mesh::Basis
typedef NS_ENUM(NSInteger, TS_MeshBasis) {
	TS_MeshBasisUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_MeshBasisXUpRight NS_SWIFT_NAME(XUpRight),
	TS_MeshBasisYUpRight NS_SWIFT_NAME(YUpRight),
	TS_MeshBasisZUpRight NS_SWIFT_NAME(ZUpRight),
	TS_MeshBasisXUpLeft NS_SWIFT_NAME(XUpLeft),
	TS_MeshBasisYUpLeft NS_SWIFT_NAME(YUpLeft),
	TS_MeshBasisZUpLeft NS_SWIFT_NAME(ZUpLeft),
	TS_MeshBasisZUpMaya NS_SWIFT_NAME(ZUpMaya),
	TS_MeshBasisNumBases NS_SWIFT_NAME(NumBases),
} NS_SWIFT_NAME(Mesh.Basis);

/// Tellusim::Mesh::Axis
typedef NS_ENUM(NSInteger, TS_MeshAxis) {
	TS_MeshAxisUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_MeshAxisPX NS_SWIFT_NAME(PX),
	TS_MeshAxisPY NS_SWIFT_NAME(PY),
	TS_MeshAxisPZ NS_SWIFT_NAME(PZ),
	TS_MeshAxisNX NS_SWIFT_NAME(NX),
	TS_MeshAxisNY NS_SWIFT_NAME(NY),
	TS_MeshAxisNZ NS_SWIFT_NAME(NZ),
	TS_MeshAxisNumAxes NS_SWIFT_NAME(NumAxes),
} NS_SWIFT_NAME(Mesh.Axis);

/// Tellusim::Json::Type
typedef NS_ENUM(NSInteger, TS_JsonType) {
	TS_JsonTypeUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_JsonTypeNull NS_SWIFT_NAME(Null),
	TS_JsonTypeBool NS_SWIFT_NAME(Bool),
	TS_JsonTypeNumber NS_SWIFT_NAME(Number),
	TS_JsonTypeString NS_SWIFT_NAME(String),
	TS_JsonTypeObject NS_SWIFT_NAME(Object),
	TS_JsonTypeArray NS_SWIFT_NAME(Array),
	TS_JsonTypeNumTypes NS_SWIFT_NAME(NumTypes),
} NS_SWIFT_NAME(Json.Kind);

/// Tellusim::Buffer::Flags
typedef NS_ENUM(NSInteger, TS_BufferFlags) {
	TS_BufferFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_BufferFlagsRead NS_SWIFT_NAME(Read) = 1,
	TS_BufferFlagsWrite NS_SWIFT_NAME(Write) = 2,
	TS_BufferFlagsSource NS_SWIFT_NAME(Source) = 4,
	TS_BufferFlagsSparse NS_SWIFT_NAME(Sparse) = 8,
	TS_BufferFlagsShared NS_SWIFT_NAME(Shared) = 16,
	TS_BufferFlagsMapped NS_SWIFT_NAME(Mapped) = 32,
	TS_BufferFlagsExtern NS_SWIFT_NAME(Extern) = 64,
	TS_BufferFlagsInterop NS_SWIFT_NAME(Interop) = 128,
	TS_BufferFlagsDynamic NS_SWIFT_NAME(Dynamic) = 256,
	TS_BufferFlagsUniform NS_SWIFT_NAME(Uniform) = 512,
	TS_BufferFlagsStorage NS_SWIFT_NAME(Storage) = 1024,
	TS_BufferFlagsAddress NS_SWIFT_NAME(Address) = 2048,
	TS_BufferFlagsTracing NS_SWIFT_NAME(Tracing) = 4096,
	TS_BufferFlagsScratch NS_SWIFT_NAME(Scratch) = 8192,
	TS_BufferFlagsBinding NS_SWIFT_NAME(Binding) = 16384,
	TS_BufferFlagsIndirect NS_SWIFT_NAME(Indirect) = 32768,
	TS_BufferFlagsConditional NS_SWIFT_NAME(Conditional) = 65536,
	TS_BufferFlagsVertex NS_SWIFT_NAME(Vertex) = 131072,
	TS_BufferFlagsIndex NS_SWIFT_NAME(Index) = 262144,
	TS_BufferFlagsTexel NS_SWIFT_NAME(Texel) = 524288,
	TS_BufferFlagsAccel NS_SWIFT_NAME(Accel) = 1048576,
	TS_BufferFlagsDefaultFlags NS_SWIFT_NAME(Default) = 0,
	TS_BufferFlagsNumFlags NS_SWIFT_NAME(Num) = 21,
} NS_SWIFT_NAME(Buffer.Flags);

/// Tellusim::Query::Type
typedef NS_ENUM(NSInteger, TS_QueryType) {
	TS_QueryTypeUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_QueryTypeTime NS_SWIFT_NAME(Time),
	TS_QueryTypeClock NS_SWIFT_NAME(Clock),
	TS_QueryTypeSamples NS_SWIFT_NAME(Samples),
	TS_QueryTypeSamples1 NS_SWIFT_NAME(Samples1),
	TS_QueryTypeStatistics NS_SWIFT_NAME(Statistics),
	TS_QueryTypeNumTypes NS_SWIFT_NAME(NumTypes),
} NS_SWIFT_NAME(Query.Kind);

/// Tellusim::Fence::Flags
typedef NS_ENUM(NSInteger, TS_FenceFlags) {
	TS_FenceFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_FenceFlagsSemaphore NS_SWIFT_NAME(Semaphore) = 1,
	TS_FenceFlagsSignaled NS_SWIFT_NAME(Signaled) = 2,
	TS_FenceFlagsShared NS_SWIFT_NAME(Shared) = 4,
	TS_FenceFlagsExtern NS_SWIFT_NAME(Extern) = 8,
	TS_FenceFlagsDefaultFlags NS_SWIFT_NAME(Default) = 0,
	TS_FenceFlagsNumFlags NS_SWIFT_NAME(Num) = 4,
} NS_SWIFT_NAME(Fence.Flags);

/// Tellusim::Shader::Type
typedef NS_ENUM(NSInteger, TS_ShaderType) {
	TS_ShaderTypeUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_ShaderTypeVertex NS_SWIFT_NAME(Vertex),
	TS_ShaderTypeControl NS_SWIFT_NAME(Control),
	TS_ShaderTypeEvaluate NS_SWIFT_NAME(Evaluate),
	TS_ShaderTypeGeometry NS_SWIFT_NAME(Geometry),
	TS_ShaderTypeFragment NS_SWIFT_NAME(Fragment),
	TS_ShaderTypeCompute NS_SWIFT_NAME(Compute),
	TS_ShaderTypeTask NS_SWIFT_NAME(Task),
	TS_ShaderTypeMesh NS_SWIFT_NAME(Mesh),
	TS_ShaderTypeRayGen NS_SWIFT_NAME(RayGen),
	TS_ShaderTypeRayMiss NS_SWIFT_NAME(RayMiss),
	TS_ShaderTypeClosest NS_SWIFT_NAME(Closest),
	TS_ShaderTypeFirstHit NS_SWIFT_NAME(FirstHit),
	TS_ShaderTypeIntersection NS_SWIFT_NAME(Intersection),
	TS_ShaderTypeCallable NS_SWIFT_NAME(Callable),
	TS_ShaderTypeNumTypes NS_SWIFT_NAME(NumTypes),
} NS_SWIFT_NAME(Shader.Kind);

/// Tellusim::Shader::Mask
typedef NS_ENUM(NSInteger, TS_ShaderMask) {
	TS_ShaderMaskNone NS_SWIFT_NAME(None) = 0,
	TS_ShaderMaskVertex NS_SWIFT_NAME(Vertex) = 2,
	TS_ShaderMaskControl NS_SWIFT_NAME(Control) = 4,
	TS_ShaderMaskEvaluate NS_SWIFT_NAME(Evaluate) = 8,
	TS_ShaderMaskGeometry NS_SWIFT_NAME(Geometry) = 16,
	TS_ShaderMaskFragment NS_SWIFT_NAME(Fragment) = 32,
	TS_ShaderMaskCompute NS_SWIFT_NAME(Compute) = 64,
	TS_ShaderMaskTask NS_SWIFT_NAME(Task) = 128,
	TS_ShaderMaskMesh NS_SWIFT_NAME(Mesh) = 256,
	TS_ShaderMaskRayGen NS_SWIFT_NAME(RayGen) = 512,
	TS_ShaderMaskRayMiss NS_SWIFT_NAME(RayMiss) = 1024,
	TS_ShaderMaskClosest NS_SWIFT_NAME(Closest) = 2048,
	TS_ShaderMaskFirstHit NS_SWIFT_NAME(FirstHit) = 4096,
	TS_ShaderMaskIntersection NS_SWIFT_NAME(Intersection) = 8192,
	TS_ShaderMaskCallable NS_SWIFT_NAME(Callable) = 16384,
	TS_ShaderMaskVertexFragment NS_SWIFT_NAME(VertexFragment) = 34,
	TS_ShaderMaskGraphics NS_SWIFT_NAME(Graphics) = 62,
	TS_ShaderMaskTracing NS_SWIFT_NAME(Tracing) = 32256,
	TS_ShaderMaskAll NS_SWIFT_NAME(All) = 32766,
} NS_SWIFT_NAME(Shader.Mask);

/// Tellusim::ShaderCompiler::Flags
typedef NS_ENUM(NSInteger, TS_ShaderCompilerFlags) {
	TS_ShaderCompilerFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_ShaderCompilerFlagsMSLIndirect NS_SWIFT_NAME(MSLIndirect) = 1,
} NS_SWIFT_NAME(ShaderCompiler.Flags);

/// Tellusim::Sampler::Filter
typedef NS_ENUM(NSInteger, TS_SamplerFilter) {
	TS_SamplerFilterPoint NS_SWIFT_NAME(Point) = 0,
	TS_SamplerFilterLinear NS_SWIFT_NAME(Linear),
	TS_SamplerFilterBipoint NS_SWIFT_NAME(Bipoint),
	TS_SamplerFilterBilinear NS_SWIFT_NAME(Bilinear),
	TS_SamplerFilterTrilinear NS_SWIFT_NAME(Trilinear),
	TS_SamplerFilterNumFilters NS_SWIFT_NAME(NumFilters),
} NS_SWIFT_NAME(Sampler.Filter);

/// Tellusim::Sampler::
typedef NS_ENUM(NSInteger, TS_Sampler) {
	TS_SamplerMinAnisotropy NS_SWIFT_NAME(MinAnisotropy) = 1,
	TS_SamplerMaxAnisotropy NS_SWIFT_NAME(MaxAnisotropy) = 16,
} NS_SWIFT_NAME(Sampler.Values);

/// Tellusim::Sampler::WrapMode
typedef NS_ENUM(NSInteger, TS_SamplerWrapMode) {
	TS_SamplerWrapModeClamp NS_SWIFT_NAME(Clamp) = 0,
	TS_SamplerWrapModeRepeat NS_SWIFT_NAME(Repeat),
	TS_SamplerWrapModeMirror NS_SWIFT_NAME(Mirror),
	TS_SamplerWrapModeBorder NS_SWIFT_NAME(Border),
	TS_SamplerWrapModeNumWrapModes NS_SWIFT_NAME(NumWrapModes),
} NS_SWIFT_NAME(Sampler.WrapMode);

/// Tellusim::Sampler::CompareFunc
typedef NS_ENUM(NSInteger, TS_SamplerCompareFunc) {
	TS_SamplerCompareFuncNone NS_SWIFT_NAME(None) = 0,
	TS_SamplerCompareFuncEqual NS_SWIFT_NAME(Equal),
	TS_SamplerCompareFuncLess NS_SWIFT_NAME(Less),
	TS_SamplerCompareFuncGreater NS_SWIFT_NAME(Greater),
	TS_SamplerCompareFuncNotEqual NS_SWIFT_NAME(NotEqual),
	TS_SamplerCompareFuncLessEqual NS_SWIFT_NAME(LessEqual),
	TS_SamplerCompareFuncGreaterEqual NS_SWIFT_NAME(GreaterEqual),
	TS_SamplerCompareFuncNumCompareFunctions NS_SWIFT_NAME(NumCompareFunctions),
} NS_SWIFT_NAME(Sampler.CompareFunc);

/// Tellusim::Sampler::ReductionMode
typedef NS_ENUM(NSInteger, TS_SamplerReductionMode) {
	TS_SamplerReductionModeAverage NS_SWIFT_NAME(Average) = 0,
	TS_SamplerReductionModeMin NS_SWIFT_NAME(Min),
	TS_SamplerReductionModeMax NS_SWIFT_NAME(Max),
	TS_SamplerReductionModeNumReductionModes NS_SWIFT_NAME(NumReductionModes),
} NS_SWIFT_NAME(Sampler.ReductionMode);

/// Tellusim::Texture::Type
typedef NS_ENUM(NSInteger, TS_TextureType) {
	TS_TextureTypeUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_TextureType2D NS_SWIFT_NAME(Kind2D),
	TS_TextureType3D NS_SWIFT_NAME(Kind3D),
	TS_TextureTypeCube NS_SWIFT_NAME(Cube),
	TS_TextureTypeNumTypes NS_SWIFT_NAME(NumTypes),
} NS_SWIFT_NAME(Texture.Kind);

/// Tellusim::Texture::Flags
typedef NS_ENUM(NSInteger, TS_TextureFlags) {
	TS_TextureFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_TextureFlagsRead NS_SWIFT_NAME(Read) = 1,
	TS_TextureFlagsWrite NS_SWIFT_NAME(Write) = 2,
	TS_TextureFlagsTarget NS_SWIFT_NAME(Target) = 4,
	TS_TextureFlagsBuffer NS_SWIFT_NAME(Buffer) = 8,
	TS_TextureFlagsSource NS_SWIFT_NAME(Source) = 16,
	TS_TextureFlagsSparse NS_SWIFT_NAME(Sparse) = 32,
	TS_TextureFlagsShared NS_SWIFT_NAME(Shared) = 64,
	TS_TextureFlagsExtern NS_SWIFT_NAME(Extern) = 128,
	TS_TextureFlagsInterop NS_SWIFT_NAME(Interop) = 256,
	TS_TextureFlagsSurface NS_SWIFT_NAME(Surface) = 512,
	TS_TextureFlagsMutable NS_SWIFT_NAME(Mutable) = 1024,
	TS_TextureFlagsMipmaps NS_SWIFT_NAME(Mipmaps) = 2048,
	TS_TextureFlagsGenerate NS_SWIFT_NAME(Generate) = 4096,
	TS_TextureFlagsFormatNorm NS_SWIFT_NAME(FormatNorm) = 8192,
	TS_TextureFlagsFormatSRGB NS_SWIFT_NAME(FormatSRGB) = 16384,
	TS_TextureFlagsFormatSigned NS_SWIFT_NAME(FormatSigned) = 32768,
	TS_TextureFlagsMultisample2 NS_SWIFT_NAME(Multisample2) = 65536,
	TS_TextureFlagsMultisample4 NS_SWIFT_NAME(Multisample4) = 131072,
	TS_TextureFlagsMultisample8 NS_SWIFT_NAME(Multisample8) = 262144,
	TS_TextureFlagsClearOne NS_SWIFT_NAME(ClearOne) = 524288,
	TS_TextureFlagsClearZero NS_SWIFT_NAME(ClearZero) = 1048576,
	TS_TextureFlagsClearNormal NS_SWIFT_NAME(ClearNormal) = 2097152,
	TS_TextureFlagsMultisample NS_SWIFT_NAME(Multisample) = 458752,
	TS_TextureFlagsDefaultFlags NS_SWIFT_NAME(Default) = 0,
	TS_TextureFlagsNumFlags NS_SWIFT_NAME(Num) = 22,
} NS_SWIFT_NAME(Texture.Flags);

/// Tellusim::Tracing::Type
typedef NS_ENUM(NSInteger, TS_TracingType) {
	TS_TracingTypeUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_TracingTypeInstance NS_SWIFT_NAME(Instance),
	TS_TracingTypeTriangle NS_SWIFT_NAME(Triangle),
	TS_TracingTypeBound NS_SWIFT_NAME(Bound),
	TS_TracingTypeNumTypes NS_SWIFT_NAME(NumTypes),
} NS_SWIFT_NAME(Tracing.Kind);

/// Tellusim::Tracing::Flags
typedef NS_ENUM(NSInteger, TS_TracingFlags) {
	TS_TracingFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_TracingFlagsInfo NS_SWIFT_NAME(Info) = 1,
	TS_TracingFlagsUpdate NS_SWIFT_NAME(Update) = 2,
	TS_TracingFlagsCompact NS_SWIFT_NAME(Compact) = 4,
	TS_TracingFlagsTransparent NS_SWIFT_NAME(Transparent) = 8,
	TS_TracingFlagsFastBuild NS_SWIFT_NAME(FastBuild) = 16,
	TS_TracingFlagsFastTrace NS_SWIFT_NAME(FastTrace) = 32,
	TS_TracingFlagsDefaultFlags NS_SWIFT_NAME(Default) = 0,
	TS_TracingFlagsNumFlags NS_SWIFT_NAME(Num) = 6,
} NS_SWIFT_NAME(Tracing.Flags);

/// Tellusim::Tracing::
typedef NS_ENUM(NSInteger, TS_Tracing) {
	TS_TracingInstanceSize NS_SWIFT_NAME(InstanceSize) = 64,
} NS_SWIFT_NAME(Tracing.Values);

/// Tellusim::Target::Operation
typedef NS_ENUM(NSInteger, TS_TargetOperation) {
	TS_TargetOperationBeginLoad NS_SWIFT_NAME(BeginLoad) = 1,
	TS_TargetOperationBeginClear NS_SWIFT_NAME(BeginClear) = 2,
	TS_TargetOperationBeginDiscard NS_SWIFT_NAME(BeginDiscard) = 4,
	TS_TargetOperationBeginMask NS_SWIFT_NAME(BeginMask) = 7,
	TS_TargetOperationEndStore NS_SWIFT_NAME(EndStore) = 8,
	TS_TargetOperationEndResolve NS_SWIFT_NAME(EndResolve) = 16,
	TS_TargetOperationEndDiscard NS_SWIFT_NAME(EndDiscard) = 32,
	TS_TargetOperationEndMask NS_SWIFT_NAME(EndMask) = 56,
	TS_TargetOperationOpNone NS_SWIFT_NAME(OpNone) = 0,
	TS_TargetOperationOpLoad NS_SWIFT_NAME(OpLoad) = 1,
	TS_TargetOperationOpLoadStore NS_SWIFT_NAME(OpLoadStore) = 9,
	TS_TargetOperationOpClearStore NS_SWIFT_NAME(OpClearStore) = 10,
	TS_TargetOperationOpClearDiscard NS_SWIFT_NAME(OpClearDiscard) = 34,
	TS_TargetOperationOpDefault NS_SWIFT_NAME(OpDefault) = 10,
} NS_SWIFT_NAME(Target.Operation);

/// Tellusim::Pipeline::Primitive
typedef NS_ENUM(NSInteger, TS_PipelinePrimitive) {
	TS_PipelinePrimitivePoint NS_SWIFT_NAME(Point) = 0,
	TS_PipelinePrimitivePointPatch NS_SWIFT_NAME(PointPatch),
	TS_PipelinePrimitiveLine NS_SWIFT_NAME(Line),
	TS_PipelinePrimitiveLineAdj NS_SWIFT_NAME(LineAdj),
	TS_PipelinePrimitiveLineStrip NS_SWIFT_NAME(LineStrip),
	TS_PipelinePrimitiveLinePatch NS_SWIFT_NAME(LinePatch),
	TS_PipelinePrimitiveTriangle NS_SWIFT_NAME(Triangle),
	TS_PipelinePrimitiveTriangleAdj NS_SWIFT_NAME(TriangleAdj),
	TS_PipelinePrimitiveTriangleStrip NS_SWIFT_NAME(TriangleStrip),
	TS_PipelinePrimitiveTrianglePatch NS_SWIFT_NAME(TrianglePatch),
	TS_PipelinePrimitiveQuadrilateralPatch NS_SWIFT_NAME(QuadrilateralPatch),
	TS_PipelinePrimitiveNumPrimitiveTypes NS_SWIFT_NAME(NumPrimitiveTypes),
} NS_SWIFT_NAME(Pipeline.Primitive);

/// Tellusim::Pipeline::Attribute
typedef NS_ENUM(NSInteger, TS_PipelineAttribute) {
	TS_PipelineAttributePosition NS_SWIFT_NAME(Position) = 0,
	TS_PipelineAttributeBasis NS_SWIFT_NAME(Basis),
	TS_PipelineAttributeNormal NS_SWIFT_NAME(Normal),
	TS_PipelineAttributeTangent NS_SWIFT_NAME(Tangent),
	TS_PipelineAttributeBinormal NS_SWIFT_NAME(Binormal),
	TS_PipelineAttributeTexCoord NS_SWIFT_NAME(TexCoord),
	TS_PipelineAttributeWeights NS_SWIFT_NAME(Weights),
	TS_PipelineAttributeJoints NS_SWIFT_NAME(Joints),
	TS_PipelineAttributeColor NS_SWIFT_NAME(Color),
	TS_PipelineAttributeIndex NS_SWIFT_NAME(Index),
	TS_PipelineAttributeNumAttributeTypes NS_SWIFT_NAME(NumAttributeTypes),
} NS_SWIFT_NAME(Pipeline.Attribute);

/// Tellusim::Pipeline::FillMode
typedef NS_ENUM(NSInteger, TS_PipelineFillMode) {
	TS_PipelineFillModeLine NS_SWIFT_NAME(Line) = 0,
	TS_PipelineFillModeSolid NS_SWIFT_NAME(Solid),
	TS_PipelineFillModeNumFillModes NS_SWIFT_NAME(NumFillModes),
} NS_SWIFT_NAME(Pipeline.FillMode);

/// Tellusim::Pipeline::CullMode
typedef NS_ENUM(NSInteger, TS_PipelineCullMode) {
	TS_PipelineCullModeNone NS_SWIFT_NAME(None) = 0,
	TS_PipelineCullModeBack NS_SWIFT_NAME(Back),
	TS_PipelineCullModeFront NS_SWIFT_NAME(Front),
	TS_PipelineCullModeNumCullModes NS_SWIFT_NAME(NumCullModes),
} NS_SWIFT_NAME(Pipeline.CullMode);

/// Tellusim::Pipeline::FrontMode
typedef NS_ENUM(NSInteger, TS_PipelineFrontMode) {
	TS_PipelineFrontModeCCW NS_SWIFT_NAME(CCW) = 0,
	TS_PipelineFrontModeCW NS_SWIFT_NAME(CW),
	TS_PipelineFrontModeNumFrontModes NS_SWIFT_NAME(NumFrontModes),
} NS_SWIFT_NAME(Pipeline.FrontMode);

/// Tellusim::Pipeline::BlendOp
typedef NS_ENUM(NSInteger, TS_PipelineBlendOp) {
	TS_PipelineBlendOpAdd NS_SWIFT_NAME(Add) = 0,
	TS_PipelineBlendOpSub NS_SWIFT_NAME(Sub),
	TS_PipelineBlendOpMin NS_SWIFT_NAME(Min),
	TS_PipelineBlendOpMax NS_SWIFT_NAME(Max),
	TS_PipelineBlendOpNumBlendOperations NS_SWIFT_NAME(NumBlendOperations),
} NS_SWIFT_NAME(Pipeline.BlendOp);

/// Tellusim::Pipeline::BlendFunc
typedef NS_ENUM(NSInteger, TS_PipelineBlendFunc) {
	TS_PipelineBlendFuncNone NS_SWIFT_NAME(None) = 0,
	TS_PipelineBlendFuncZero NS_SWIFT_NAME(Zero),
	TS_PipelineBlendFuncOne NS_SWIFT_NAME(One),
	TS_PipelineBlendFuncSrcColor NS_SWIFT_NAME(SrcColor),
	TS_PipelineBlendFuncSrcAlpha NS_SWIFT_NAME(SrcAlpha),
	TS_PipelineBlendFuncSrc1Color NS_SWIFT_NAME(Src1Color),
	TS_PipelineBlendFuncSrc1Alpha NS_SWIFT_NAME(Src1Alpha),
	TS_PipelineBlendFuncDestColor NS_SWIFT_NAME(DestColor),
	TS_PipelineBlendFuncDestAlpha NS_SWIFT_NAME(DestAlpha),
	TS_PipelineBlendFuncFactorColor NS_SWIFT_NAME(FactorColor),
	TS_PipelineBlendFuncFactorAlpha NS_SWIFT_NAME(FactorAlpha),
	TS_PipelineBlendFuncInvSrcColor NS_SWIFT_NAME(InvSrcColor),
	TS_PipelineBlendFuncInvSrcAlpha NS_SWIFT_NAME(InvSrcAlpha),
	TS_PipelineBlendFuncInvSrc1Color NS_SWIFT_NAME(InvSrc1Color),
	TS_PipelineBlendFuncInvSrc1Alpha NS_SWIFT_NAME(InvSrc1Alpha),
	TS_PipelineBlendFuncInvDestColor NS_SWIFT_NAME(InvDestColor),
	TS_PipelineBlendFuncInvDestAlpha NS_SWIFT_NAME(InvDestAlpha),
	TS_PipelineBlendFuncInvFactorColor NS_SWIFT_NAME(InvFactorColor),
	TS_PipelineBlendFuncInvFactorAlpha NS_SWIFT_NAME(InvFactorAlpha),
	TS_PipelineBlendFuncNumBlendFunctions NS_SWIFT_NAME(NumBlendFunctions),
} NS_SWIFT_NAME(Pipeline.BlendFunc);

/// Tellusim::Pipeline::ColorMask
typedef NS_ENUM(NSInteger, TS_PipelineColorMask) {
	TS_PipelineColorMaskNone NS_SWIFT_NAME(None) = 0,
	TS_PipelineColorMaskR NS_SWIFT_NAME(R) = 1,
	TS_PipelineColorMaskG NS_SWIFT_NAME(G) = 2,
	TS_PipelineColorMaskB NS_SWIFT_NAME(B) = 4,
	TS_PipelineColorMaskA NS_SWIFT_NAME(A) = 8,
	TS_PipelineColorMaskUnknown NS_SWIFT_NAME(Unknown) = 16,
	TS_PipelineColorMaskRGB NS_SWIFT_NAME(RGB) = 7,
	TS_PipelineColorMaskAll NS_SWIFT_NAME(All) = 15,
} NS_SWIFT_NAME(Pipeline.ColorMask);

/// Tellusim::Pipeline::DepthMask
typedef NS_ENUM(NSInteger, TS_PipelineDepthMask) {
	TS_PipelineDepthMaskNone NS_SWIFT_NAME(None) = 0,
	TS_PipelineDepthMaskRead NS_SWIFT_NAME(Read),
	TS_PipelineDepthMaskWrite NS_SWIFT_NAME(Write),
	TS_PipelineDepthMaskNumDepthMasks NS_SWIFT_NAME(NumDepthMasks),
} NS_SWIFT_NAME(Pipeline.DepthMask);

/// Tellusim::Pipeline::DepthFunc
typedef NS_ENUM(NSInteger, TS_PipelineDepthFunc) {
	TS_PipelineDepthFuncNone NS_SWIFT_NAME(None) = 0,
	TS_PipelineDepthFuncNever NS_SWIFT_NAME(Never),
	TS_PipelineDepthFuncAlways NS_SWIFT_NAME(Always),
	TS_PipelineDepthFuncEqual NS_SWIFT_NAME(Equal),
	TS_PipelineDepthFuncLess NS_SWIFT_NAME(Less),
	TS_PipelineDepthFuncGreater NS_SWIFT_NAME(Greater),
	TS_PipelineDepthFuncNotEqual NS_SWIFT_NAME(NotEqual),
	TS_PipelineDepthFuncLessEqual NS_SWIFT_NAME(LessEqual),
	TS_PipelineDepthFuncGreaterEqual NS_SWIFT_NAME(GreaterEqual),
	TS_PipelineDepthFuncNumDepthFunctions NS_SWIFT_NAME(NumDepthFunctions),
} NS_SWIFT_NAME(Pipeline.DepthFunc);

/// Tellusim::Pipeline::StencilOp
typedef NS_ENUM(NSInteger, TS_PipelineStencilOp) {
	TS_PipelineStencilOpKeep NS_SWIFT_NAME(Keep) = 0,
	TS_PipelineStencilOpInvert NS_SWIFT_NAME(Invert),
	TS_PipelineStencilOpReplace NS_SWIFT_NAME(Replace),
	TS_PipelineStencilOpIncrWrap NS_SWIFT_NAME(IncrWrap),
	TS_PipelineStencilOpDecrWrap NS_SWIFT_NAME(DecrWrap),
	TS_PipelineStencilOpIncrSat NS_SWIFT_NAME(IncrSat),
	TS_PipelineStencilOpDecrSat NS_SWIFT_NAME(DecrSat),
	TS_PipelineStencilOpNumStencilOperations NS_SWIFT_NAME(NumStencilOperations),
} NS_SWIFT_NAME(Pipeline.StencilOp);

/// Tellusim::Pipeline::StencilFunc
typedef NS_ENUM(NSInteger, TS_PipelineStencilFunc) {
	TS_PipelineStencilFuncNone NS_SWIFT_NAME(None) = 0,
	TS_PipelineStencilFuncNever NS_SWIFT_NAME(Never),
	TS_PipelineStencilFuncAlways NS_SWIFT_NAME(Always),
	TS_PipelineStencilFuncEqual NS_SWIFT_NAME(Equal),
	TS_PipelineStencilFuncLess NS_SWIFT_NAME(Less),
	TS_PipelineStencilFuncGreater NS_SWIFT_NAME(Greater),
	TS_PipelineStencilFuncNotEqual NS_SWIFT_NAME(NotEqual),
	TS_PipelineStencilFuncLessEqual NS_SWIFT_NAME(LessEqual),
	TS_PipelineStencilFuncGreaterEqual NS_SWIFT_NAME(GreaterEqual),
	TS_PipelineStencilFuncNumStencilFunctions NS_SWIFT_NAME(NumStencilFunctions),
} NS_SWIFT_NAME(Pipeline.StencilFunc);

/// Tellusim::Window::Flags
typedef NS_ENUM(NSInteger, TS_WindowFlags) {
	TS_WindowFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_WindowFlagsTitle NS_SWIFT_NAME(Title) = 1,
	TS_WindowFlagsClose NS_SWIFT_NAME(Close) = 2,
	TS_WindowFlagsFrame NS_SWIFT_NAME(Frame) = 4,
	TS_WindowFlagsResize NS_SWIFT_NAME(Resize) = 8,
	TS_WindowFlagsMinimize NS_SWIFT_NAME(Minimize) = 16,
	TS_WindowFlagsMaximize NS_SWIFT_NAME(Maximize) = 32,
	TS_WindowFlagsTransient NS_SWIFT_NAME(Transient) = 64,
	TS_WindowFlagsFullscreen NS_SWIFT_NAME(Fullscreen) = 128,
	TS_WindowFlagsTransparent NS_SWIFT_NAME(Transparent) = 256,
	TS_WindowFlagsFileDropped NS_SWIFT_NAME(FileDropped) = 512,
	TS_WindowFlagsMultisample2 NS_SWIFT_NAME(Multisample2) = 1024,
	TS_WindowFlagsMultisample4 NS_SWIFT_NAME(Multisample4) = 2048,
	TS_WindowFlagsMultisample8 NS_SWIFT_NAME(Multisample8) = 4096,
	TS_WindowFlagsVerticalSync NS_SWIFT_NAME(VerticalSync) = 8192,
	TS_WindowFlagsRefreshSync NS_SWIFT_NAME(RefreshSync) = 16384,
	TS_WindowFlagsColorRGBAu8ns NS_SWIFT_NAME(ColorRGBAu8ns) = 32768,
	TS_WindowFlagsColorRGBu10Au2n NS_SWIFT_NAME(ColorRGBu10Au2n) = 65536,
	TS_WindowFlagsColorRGBAf16 NS_SWIFT_NAME(ColorRGBAf16) = 131072,
	TS_WindowFlagsMultisample NS_SWIFT_NAME(Multisample) = 7168,
	TS_WindowFlagsDefaultFlags NS_SWIFT_NAME(Default) = 59,
	TS_WindowFlagsNumFlags NS_SWIFT_NAME(Num) = 18,
} NS_SWIFT_NAME(Window.Flags);

/// Tellusim::Window::Cursor
typedef NS_ENUM(NSInteger, TS_WindowCursor) {
	TS_WindowCursorArrow NS_SWIFT_NAME(Arrow) = 0,
	TS_WindowCursorInvalid NS_SWIFT_NAME(Invalid),
	TS_WindowCursorLeft NS_SWIFT_NAME(Left),
	TS_WindowCursorRight NS_SWIFT_NAME(Right),
	TS_WindowCursorBottom NS_SWIFT_NAME(Bottom),
	TS_WindowCursorTop NS_SWIFT_NAME(Top),
	TS_WindowCursorWidth NS_SWIFT_NAME(Width),
	TS_WindowCursorHeight NS_SWIFT_NAME(Height),
	TS_WindowCursorMajor NS_SWIFT_NAME(Major),
	TS_WindowCursorMinor NS_SWIFT_NAME(Minor),
	TS_WindowCursorAll NS_SWIFT_NAME(All),
	TS_WindowCursorNumCursors NS_SWIFT_NAME(NumCursors),
} NS_SWIFT_NAME(Window.Cursor);

/// Tellusim::Window::Button
typedef NS_ENUM(NSInteger, TS_WindowButton) {
	TS_WindowButtonNone NS_SWIFT_NAME(None) = 0,
	TS_WindowButtonLeft NS_SWIFT_NAME(Left) = 1,
	TS_WindowButtonLeft2 NS_SWIFT_NAME(Left2) = 2,
	TS_WindowButtonRight NS_SWIFT_NAME(Right) = 4,
	TS_WindowButtonRight2 NS_SWIFT_NAME(Right2) = 8,
	TS_WindowButtonMiddle NS_SWIFT_NAME(Middle) = 16,
	TS_WindowButtonMiddle2 NS_SWIFT_NAME(Middle2) = 32,
	TS_WindowButtonBack NS_SWIFT_NAME(Back) = 64,
	TS_WindowButtonBack2 NS_SWIFT_NAME(Back2) = 128,
	TS_WindowButtonForward NS_SWIFT_NAME(Forward) = 256,
	TS_WindowButtonForward2 NS_SWIFT_NAME(Forward2) = 512,
	TS_WindowButtonNumButtons NS_SWIFT_NAME(NumButtons) = 10,
} NS_SWIFT_NAME(Window.Button);

/// Tellusim::Window::Axis
typedef NS_ENUM(NSInteger, TS_WindowAxis) {
	TS_WindowAxisX NS_SWIFT_NAME(X) = 0,
	TS_WindowAxisY NS_SWIFT_NAME(Y),
	TS_WindowAxisZ NS_SWIFT_NAME(Z),
	TS_WindowAxisW NS_SWIFT_NAME(W),
	TS_WindowAxisNumAxes NS_SWIFT_NAME(NumAxes),
} NS_SWIFT_NAME(Window.Axis);

/// Tellusim::Window::
typedef NS_ENUM(NSInteger, TS_Window) {
	TS_WindowNumTouches NS_SWIFT_NAME(NumTouches) = 16,
} NS_SWIFT_NAME(Window.Values);

/// Tellusim::Window::Key
typedef NS_ENUM(NSInteger, TS_WindowKey) {
	TS_WindowKeyNone NS_SWIFT_NAME(None) = 128,
	TS_WindowKeyEsc NS_SWIFT_NAME(Esc),
	TS_WindowKeyTab NS_SWIFT_NAME(Tab),
	TS_WindowKeyBackspace NS_SWIFT_NAME(Backspace),
	TS_WindowKeyDelete NS_SWIFT_NAME(Delete),
	TS_WindowKeyInsert NS_SWIFT_NAME(Insert),
	TS_WindowKeyReturn NS_SWIFT_NAME(Return),
	TS_WindowKeyPause NS_SWIFT_NAME(Pause),
	TS_WindowKeyPrior NS_SWIFT_NAME(Prior),
	TS_WindowKeyNext NS_SWIFT_NAME(Next),
	TS_WindowKeyEnd NS_SWIFT_NAME(End),
	TS_WindowKeyHome NS_SWIFT_NAME(Home),
	TS_WindowKeyUp NS_SWIFT_NAME(Up),
	TS_WindowKeyDown NS_SWIFT_NAME(Down),
	TS_WindowKeyLeft NS_SWIFT_NAME(Left),
	TS_WindowKeyRight NS_SWIFT_NAME(Right),
	TS_WindowKeyNum NS_SWIFT_NAME(Num),
	TS_WindowKeyCaps NS_SWIFT_NAME(Caps),
	TS_WindowKeyScroll NS_SWIFT_NAME(Scroll),
	TS_WindowKeyShift NS_SWIFT_NAME(Shift),
	TS_WindowKeyCtrl NS_SWIFT_NAME(Ctrl),
	TS_WindowKeyAlt NS_SWIFT_NAME(Alt),
	TS_WindowKeyWin NS_SWIFT_NAME(Win),
	TS_WindowKeyCmd NS_SWIFT_NAME(Cmd),
	TS_WindowKeyMenu NS_SWIFT_NAME(Menu),
	TS_WindowKeyF1 NS_SWIFT_NAME(F1),
	TS_WindowKeyF2 NS_SWIFT_NAME(F2),
	TS_WindowKeyF3 NS_SWIFT_NAME(F3),
	TS_WindowKeyF4 NS_SWIFT_NAME(F4),
	TS_WindowKeyF5 NS_SWIFT_NAME(F5),
	TS_WindowKeyF6 NS_SWIFT_NAME(F6),
	TS_WindowKeyF7 NS_SWIFT_NAME(F7),
	TS_WindowKeyF8 NS_SWIFT_NAME(F8),
	TS_WindowKeyF9 NS_SWIFT_NAME(F9),
	TS_WindowKeyF10 NS_SWIFT_NAME(F10),
	TS_WindowKeyF11 NS_SWIFT_NAME(F11),
	TS_WindowKeyF12 NS_SWIFT_NAME(F12),
	TS_WindowKeyNumKeys NS_SWIFT_NAME(NumKeys),
} NS_SWIFT_NAME(Window.Key);

/// Tellusim::CanvasElement::Type
typedef NS_ENUM(NSInteger, TS_CanvasElementType) {
	TS_CanvasElementTypeUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_CanvasElementTypeText NS_SWIFT_NAME(Text),
	TS_CanvasElementTypeMesh NS_SWIFT_NAME(Mesh),
	TS_CanvasElementTypeRect NS_SWIFT_NAME(Rect),
	TS_CanvasElementTypeTriangle NS_SWIFT_NAME(Triangle),
	TS_CanvasElementTypeEllipse NS_SWIFT_NAME(Ellipse),
	TS_CanvasElementTypeShape NS_SWIFT_NAME(Shape),
	TS_CanvasElementTypeStrip NS_SWIFT_NAME(Strip),
	TS_CanvasElementTypeNumTypes NS_SWIFT_NAME(NumTypes),
} NS_SWIFT_NAME(CanvasElement.Kind);

/// Tellusim::CanvasElement::Mode
typedef NS_ENUM(NSInteger, TS_CanvasElementMode) {
	TS_CanvasElementModeSolid NS_SWIFT_NAME(Solid) = 0,
	TS_CanvasElementModeTexture NS_SWIFT_NAME(Texture),
	TS_CanvasElementModeTextureFetch NS_SWIFT_NAME(TextureFetch),
	TS_CanvasElementModeTextureClamp NS_SWIFT_NAME(TextureClamp),
	TS_CanvasElementModeTextureCubic NS_SWIFT_NAME(TextureCubic),
	TS_CanvasElementModeTextureCubic3x3 NS_SWIFT_NAME(TextureCubic3x3),
	TS_CanvasElementModeTextureCubic5x5 NS_SWIFT_NAME(TextureCubic5x5),
	TS_CanvasElementModeTextureRed NS_SWIFT_NAME(TextureRed),
	TS_CanvasElementModeTextureGreen NS_SWIFT_NAME(TextureGreen),
	TS_CanvasElementModeTextureBlue NS_SWIFT_NAME(TextureBlue),
	TS_CanvasElementModeTextureAlpha NS_SWIFT_NAME(TextureAlpha),
	TS_CanvasElementModeTextureYOG NS_SWIFT_NAME(TextureYOG),
	TS_CanvasElementModeGradient NS_SWIFT_NAME(Gradient),
	TS_CanvasElementModeNumModes NS_SWIFT_NAME(NumModes),
} NS_SWIFT_NAME(CanvasElement.Mode);

/// Tellusim::CanvasElement::Align
typedef NS_ENUM(NSInteger, TS_CanvasElementAlign) {
	TS_CanvasElementAlignNone NS_SWIFT_NAME(None) = 0,
	TS_CanvasElementAlignLeft NS_SWIFT_NAME(Left) = 1,
	TS_CanvasElementAlignRight NS_SWIFT_NAME(Right) = 2,
	TS_CanvasElementAlignBottom NS_SWIFT_NAME(Bottom) = 4,
	TS_CanvasElementAlignTop NS_SWIFT_NAME(Top) = 8,
	TS_CanvasElementAlignCenterX NS_SWIFT_NAME(CenterX) = 16,
	TS_CanvasElementAlignCenterY NS_SWIFT_NAME(CenterY) = 32,
	TS_CanvasElementAlignLeftBottom NS_SWIFT_NAME(LeftBottom) = 5,
	TS_CanvasElementAlignLeftTop NS_SWIFT_NAME(LeftTop) = 9,
	TS_CanvasElementAlignRightBottom NS_SWIFT_NAME(RightBottom) = 6,
	TS_CanvasElementAlignRightTop NS_SWIFT_NAME(RightTop) = 10,
	TS_CanvasElementAlignCenter NS_SWIFT_NAME(Center) = 48,
	TS_CanvasElementAlignNumAligns NS_SWIFT_NAME(NumAligns) = 6,
} NS_SWIFT_NAME(CanvasElement.Align);

/// Tellusim::CanvasElement::Stack
typedef NS_ENUM(NSInteger, TS_CanvasElementStack) {
	TS_CanvasElementStackNone NS_SWIFT_NAME(None) = 0,
	TS_CanvasElementStackPush NS_SWIFT_NAME(Push) = 1,
	TS_CanvasElementStackPop NS_SWIFT_NAME(Pop) = 2,
	TS_CanvasElementStackSet NS_SWIFT_NAME(Set) = 4,
	TS_CanvasElementStackMul NS_SWIFT_NAME(Mul) = 8,
	TS_CanvasElementStackGet NS_SWIFT_NAME(Get) = 16,
} NS_SWIFT_NAME(CanvasElement.Stack);

/// Tellusim::Control::Type
typedef NS_ENUM(NSInteger, TS_ControlType) {
	TS_ControlTypeUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_ControlTypeRoot NS_SWIFT_NAME(Root),
	TS_ControlTypeText NS_SWIFT_NAME(Text),
	TS_ControlTypeRect NS_SWIFT_NAME(Rect),
	TS_ControlTypeGrid NS_SWIFT_NAME(Grid),
	TS_ControlTypeGroup NS_SWIFT_NAME(Group),
	TS_ControlTypePanel NS_SWIFT_NAME(Panel),
	TS_ControlTypeDialog NS_SWIFT_NAME(Dialog),
	TS_ControlTypeWindow NS_SWIFT_NAME(Window),
	TS_ControlTypeCheck NS_SWIFT_NAME(Check),
	TS_ControlTypeCombo NS_SWIFT_NAME(Combo),
	TS_ControlTypeButton NS_SWIFT_NAME(Button),
	TS_ControlTypeSlider NS_SWIFT_NAME(Slider),
	TS_ControlTypeScroll NS_SWIFT_NAME(Scroll),
	TS_ControlTypeSplit NS_SWIFT_NAME(Split),
	TS_ControlTypeArea NS_SWIFT_NAME(Area),
	TS_ControlTypeTree NS_SWIFT_NAME(Tree),
	TS_ControlTypeEdit NS_SWIFT_NAME(Edit),
	TS_ControlTypeNumTypes NS_SWIFT_NAME(NumTypes),
} NS_SWIFT_NAME(Control.Kind);

/// Tellusim::Control::State
typedef NS_ENUM(NSInteger, TS_ControlState) {
	TS_ControlStateUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_ControlStateNormal NS_SWIFT_NAME(Normal),
	TS_ControlStateFocused NS_SWIFT_NAME(Focused),
	TS_ControlStatePressed NS_SWIFT_NAME(Pressed),
	TS_ControlStateDisabled NS_SWIFT_NAME(Disabled),
	TS_ControlStateNumStates NS_SWIFT_NAME(NumStates),
} NS_SWIFT_NAME(Control.State);

/// Tellusim::Control::Mesh
typedef NS_ENUM(NSInteger, TS_ControlMesh) {
	TS_ControlMeshCheck NS_SWIFT_NAME(Check) = 0,
	TS_ControlMeshButton NS_SWIFT_NAME(Button),
	TS_ControlMeshSliderLine NS_SWIFT_NAME(SliderLine),
	TS_ControlMeshHScrollLine NS_SWIFT_NAME(HScrollLine),
	TS_ControlMeshVScrollLine NS_SWIFT_NAME(VScrollLine),
	TS_ControlMeshSliderHandle NS_SWIFT_NAME(SliderHandle),
	TS_ControlMeshHScrollHandle NS_SWIFT_NAME(HScrollHandle),
	TS_ControlMeshVScrollHandle NS_SWIFT_NAME(VScrollHandle),
	TS_ControlMeshBackground NS_SWIFT_NAME(Background),
	TS_ControlMeshSelection NS_SWIFT_NAME(Selection),
	TS_ControlMeshBorder NS_SWIFT_NAME(Border),
	TS_ControlMeshFrame NS_SWIFT_NAME(Frame),
	TS_ControlMeshNumMeshes NS_SWIFT_NAME(NumMeshes),
} NS_SWIFT_NAME(Control.Mesh);

/// Tellusim::Control::Align
typedef NS_ENUM(NSInteger, TS_ControlAlign) {
	TS_ControlAlignNone NS_SWIFT_NAME(None) = 0,
	TS_ControlAlignLeft NS_SWIFT_NAME(Left) = 1,
	TS_ControlAlignRight NS_SWIFT_NAME(Right) = 2,
	TS_ControlAlignBottom NS_SWIFT_NAME(Bottom) = 4,
	TS_ControlAlignTop NS_SWIFT_NAME(Top) = 8,
	TS_ControlAlignCenterX NS_SWIFT_NAME(CenterX) = 16,
	TS_ControlAlignCenterY NS_SWIFT_NAME(CenterY) = 32,
	TS_ControlAlignExpandX NS_SWIFT_NAME(ExpandX) = 64,
	TS_ControlAlignExpandY NS_SWIFT_NAME(ExpandY) = 128,
	TS_ControlAlignOverlap NS_SWIFT_NAME(Overlap) = 256,
	TS_ControlAlignSpacer NS_SWIFT_NAME(Spacer) = 512,
	TS_ControlAlignAspect NS_SWIFT_NAME(Aspect) = 1024,
	TS_ControlAlignLeftBottom NS_SWIFT_NAME(LeftBottom) = 5,
	TS_ControlAlignLeftTop NS_SWIFT_NAME(LeftTop) = 9,
	TS_ControlAlignRightBottom NS_SWIFT_NAME(RightBottom) = 6,
	TS_ControlAlignRightTop NS_SWIFT_NAME(RightTop) = 10,
	TS_ControlAlignCenter NS_SWIFT_NAME(Center) = 48,
	TS_ControlAlignExpand NS_SWIFT_NAME(Expand) = 192,
	TS_ControlAlignNumAligns NS_SWIFT_NAME(NumAligns) = 11,
} NS_SWIFT_NAME(Control.Align);

/// Tellusim::Control::Button
typedef NS_ENUM(NSInteger, TS_ControlButton) {
	TS_ControlButtonNone NS_SWIFT_NAME(None) = 0,
	TS_ControlButtonLeft NS_SWIFT_NAME(Left) = 1,
	TS_ControlButtonLeft2 NS_SWIFT_NAME(Left2) = 2,
	TS_ControlButtonRight NS_SWIFT_NAME(Right) = 4,
	TS_ControlButtonRight2 NS_SWIFT_NAME(Right2) = 8,
	TS_ControlButtonMiddle NS_SWIFT_NAME(Middle) = 16,
	TS_ControlButtonMiddle2 NS_SWIFT_NAME(Middle2) = 32,
	TS_ControlButtonNumButtons NS_SWIFT_NAME(NumButtons) = 6,
} NS_SWIFT_NAME(Control.Button);

/// Tellusim::Control::Axis
typedef NS_ENUM(NSInteger, TS_ControlAxis) {
	TS_ControlAxisUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_ControlAxisX NS_SWIFT_NAME(X),
	TS_ControlAxisY NS_SWIFT_NAME(Y),
	TS_ControlAxisZ NS_SWIFT_NAME(Z),
	TS_ControlAxisW NS_SWIFT_NAME(W),
	TS_ControlAxisNumAxes NS_SWIFT_NAME(NumAxes),
} NS_SWIFT_NAME(Control.Axis);

/// Tellusim::Control::Key
typedef NS_ENUM(NSInteger, TS_ControlKey) {
	TS_ControlKeyNone NS_SWIFT_NAME(None) = 128,
	TS_ControlKeyTab NS_SWIFT_NAME(Tab),
	TS_ControlKeyBackspace NS_SWIFT_NAME(Backspace),
	TS_ControlKeyDelete NS_SWIFT_NAME(Delete),
	TS_ControlKeyInsert NS_SWIFT_NAME(Insert),
	TS_ControlKeyReturn NS_SWIFT_NAME(Return),
	TS_ControlKeyPrior NS_SWIFT_NAME(Prior),
	TS_ControlKeyNext NS_SWIFT_NAME(Next),
	TS_ControlKeyEnd NS_SWIFT_NAME(End),
	TS_ControlKeyHome NS_SWIFT_NAME(Home),
	TS_ControlKeyUp NS_SWIFT_NAME(Up),
	TS_ControlKeyDown NS_SWIFT_NAME(Down),
	TS_ControlKeyLeft NS_SWIFT_NAME(Left),
	TS_ControlKeyRight NS_SWIFT_NAME(Right),
	TS_ControlKeyShift NS_SWIFT_NAME(Shift),
	TS_ControlKeyCtrl NS_SWIFT_NAME(Ctrl),
	TS_ControlKeyAlt NS_SWIFT_NAME(Alt),
	TS_ControlKeyCmd NS_SWIFT_NAME(Cmd),
	TS_ControlKeyNumKeys NS_SWIFT_NAME(NumKeys),
} NS_SWIFT_NAME(Control.Key);

/// Tellusim::ControlEdit::EditMode
typedef NS_ENUM(NSInteger, TS_ControlEditEditMode) {
	TS_ControlEditEditModeText NS_SWIFT_NAME(Text),
	TS_ControlEditEditModePassword NS_SWIFT_NAME(Password),
	TS_ControlEditEditModeNumber NS_SWIFT_NAME(Number),
	TS_ControlEditEditModeSigned NS_SWIFT_NAME(Signed),
	TS_ControlEditEditModeUnsigned NS_SWIFT_NAME(Unsigned),
	TS_ControlEditEditModeHexadecimal NS_SWIFT_NAME(Hexadecimal),
} NS_SWIFT_NAME(ControlEdit.EditMode);

/// Tellusim::DialogMessage::Flags
typedef NS_ENUM(NSInteger, TS_DialogMessageFlags) {
	TS_DialogMessageFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_DialogMessageFlagsYes NS_SWIFT_NAME(Yes) = 1,
	TS_DialogMessageFlagsNo NS_SWIFT_NAME(No) = 2,
	TS_DialogMessageFlagsOk NS_SWIFT_NAME(Ok) = 4,
	TS_DialogMessageFlagsCancel NS_SWIFT_NAME(Cancel) = 8,
	TS_DialogMessageFlagsClose NS_SWIFT_NAME(Close) = 16,
	TS_DialogMessageFlagsMessage NS_SWIFT_NAME(Message) = 32,
	TS_DialogMessageFlagsWarning NS_SWIFT_NAME(Warning) = 64,
	TS_DialogMessageFlagsQuestion NS_SWIFT_NAME(Question) = 128,
	TS_DialogMessageFlagsError NS_SWIFT_NAME(Error) = 256,
	TS_DialogMessageFlagsMouse NS_SWIFT_NAME(Mouse) = 512,
	TS_DialogMessageFlagsYesNo NS_SWIFT_NAME(YesNo) = 3,
	TS_DialogMessageFlagsOkCancel NS_SWIFT_NAME(OkCancel) = 12,
	TS_DialogMessageFlagsDefaultFlags NS_SWIFT_NAME(Default) = 4,
	TS_DialogMessageFlagsNumFlags NS_SWIFT_NAME(Num) = 10,
} NS_SWIFT_NAME(DialogMessage.Flags);

/// Tellusim::DialogMessage::Result
typedef NS_ENUM(NSInteger, TS_DialogMessageResult) {
	TS_DialogMessageResultClose NS_SWIFT_NAME(Close) = 0,
	TS_DialogMessageResultCancel NS_SWIFT_NAME(Cancel),
	TS_DialogMessageResultOk NS_SWIFT_NAME(Ok),
	TS_DialogMessageResultNo NS_SWIFT_NAME(No),
	TS_DialogMessageResultYes NS_SWIFT_NAME(Yes),
	TS_DialogMessageResultNumResults NS_SWIFT_NAME(NumResults),
} NS_SWIFT_NAME(DialogMessage.Result);

/// Tellusim::DialogFileOpen::Flags
typedef NS_ENUM(NSInteger, TS_DialogFileOpenFlags) {
	TS_DialogFileOpenFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_DialogFileOpenFlagsHidden NS_SWIFT_NAME(Hidden) = 1,
	TS_DialogFileOpenFlagsMouse NS_SWIFT_NAME(Mouse) = 2,
	TS_DialogFileOpenFlagsDefaultFlags NS_SWIFT_NAME(Default) = 0,
	TS_DialogFileOpenFlagsNumFlags NS_SWIFT_NAME(Num) = 2,
} NS_SWIFT_NAME(DialogFileOpen.Flags);

/// Tellusim::DialogFileOpen::Result
typedef NS_ENUM(NSInteger, TS_DialogFileOpenResult) {
	TS_DialogFileOpenResultCancel NS_SWIFT_NAME(Cancel) = 0,
	TS_DialogFileOpenResultOk NS_SWIFT_NAME(Ok),
	TS_DialogFileOpenResultNumResults NS_SWIFT_NAME(NumResults),
} NS_SWIFT_NAME(DialogFileOpen.Result);

/// Tellusim::DialogFileSave::Flags
typedef NS_ENUM(NSInteger, TS_DialogFileSaveFlags) {
	TS_DialogFileSaveFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_DialogFileSaveFlagsHidden NS_SWIFT_NAME(Hidden) = 1,
	TS_DialogFileSaveFlagsOverwrite NS_SWIFT_NAME(Overwrite) = 2,
	TS_DialogFileSaveFlagsMouse NS_SWIFT_NAME(Mouse) = 4,
	TS_DialogFileSaveFlagsDefaultFlags NS_SWIFT_NAME(Default) = 2,
	TS_DialogFileSaveFlagsNumFlags NS_SWIFT_NAME(Num) = 3,
} NS_SWIFT_NAME(DialogFileSave.Flags);

/// Tellusim::DialogFileSave::Result
typedef NS_ENUM(NSInteger, TS_DialogFileSaveResult) {
	TS_DialogFileSaveResultCancel NS_SWIFT_NAME(Cancel) = 0,
	TS_DialogFileSaveResultOk NS_SWIFT_NAME(Ok),
	TS_DialogFileSaveResultNumResults NS_SWIFT_NAME(NumResults),
} NS_SWIFT_NAME(DialogFileSave.Result);

/// Tellusim::DialogDirectory::Flags
typedef NS_ENUM(NSInteger, TS_DialogDirectoryFlags) {
	TS_DialogDirectoryFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_DialogDirectoryFlagsMouse NS_SWIFT_NAME(Mouse) = 1,
	TS_DialogDirectoryFlagsDefaultFlags NS_SWIFT_NAME(Default) = 0,
	TS_DialogDirectoryFlagsNumFlags NS_SWIFT_NAME(Num) = 1,
} NS_SWIFT_NAME(DialogDirectory.Flags);

/// Tellusim::DialogDirectory::Result
typedef NS_ENUM(NSInteger, TS_DialogDirectoryResult) {
	TS_DialogDirectoryResultCancel NS_SWIFT_NAME(Cancel) = 0,
	TS_DialogDirectoryResultOk NS_SWIFT_NAME(Ok),
	TS_DialogDirectoryResultNumResults NS_SWIFT_NAME(NumResults),
} NS_SWIFT_NAME(DialogDirectory.Result);

/// Tellusim::DialogProgress::Flags
typedef NS_ENUM(NSInteger, TS_DialogProgressFlags) {
	TS_DialogProgressFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_DialogProgressFlagsMouse NS_SWIFT_NAME(Mouse) = 1,
	TS_DialogProgressFlagsDefaultFlags NS_SWIFT_NAME(Default) = 0,
	TS_DialogProgressFlagsNumFlags NS_SWIFT_NAME(Num) = 1,
} NS_SWIFT_NAME(DialogProgress.Flags);

/// Tellusim::DialogProgress::Result
typedef NS_ENUM(NSInteger, TS_DialogProgressResult) {
	TS_DialogProgressResultCancel NS_SWIFT_NAME(Cancel) = 0,
	TS_DialogProgressResultOk NS_SWIFT_NAME(Ok),
	TS_DialogProgressResultNumResults NS_SWIFT_NAME(NumResults),
} NS_SWIFT_NAME(DialogProgress.Result);

/// Tellusim::DialogColor::Flags
typedef NS_ENUM(NSInteger, TS_DialogColorFlags) {
	TS_DialogColorFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_DialogColorFlagsAlpha NS_SWIFT_NAME(Alpha) = 1,
	TS_DialogColorFlagsMouse NS_SWIFT_NAME(Mouse) = 2,
	TS_DialogColorFlagsDefaultFlags NS_SWIFT_NAME(Default) = 0,
	TS_DialogColorFlagsNumFlags NS_SWIFT_NAME(Num) = 2,
} NS_SWIFT_NAME(DialogColor.Flags);

/// Tellusim::DialogColor::Result
typedef NS_ENUM(NSInteger, TS_DialogColorResult) {
	TS_DialogColorResultCancel NS_SWIFT_NAME(Cancel) = 0,
	TS_DialogColorResultOk NS_SWIFT_NAME(Ok),
	TS_DialogColorResultNumResults NS_SWIFT_NAME(NumResults),
} NS_SWIFT_NAME(DialogColor.Result);

/// Tellusim::DialogMenu::Flags
typedef NS_ENUM(NSInteger, TS_DialogMenuFlags) {
	TS_DialogMenuFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_DialogMenuFlagsMouse NS_SWIFT_NAME(Mouse) = 1,
	TS_DialogMenuFlagsDefaultFlags NS_SWIFT_NAME(Default) = 0,
	TS_DialogMenuFlagsNumFlags NS_SWIFT_NAME(Num) = 1,
} NS_SWIFT_NAME(DialogMenu.Flags);

/// Tellusim::DialogMenu::Result
typedef NS_ENUM(NSInteger, TS_DialogMenuResult) {
	TS_DialogMenuResultCancel NS_SWIFT_NAME(Cancel) = 0,
	TS_DialogMenuResultClick NS_SWIFT_NAME(Click),
	TS_DialogMenuResultNumResults NS_SWIFT_NAME(NumResults),
} NS_SWIFT_NAME(DialogMenu.Result);

/// Tellusim::CubeFilter::Mode
typedef NS_ENUM(NSInteger, TS_CubeFilterMode) {
	TS_CubeFilterModeCube NS_SWIFT_NAME(Cube) = 0,
	TS_CubeFilterModePanorama NS_SWIFT_NAME(Panorama),
	TS_CubeFilterModeNumModes NS_SWIFT_NAME(NumModes),
} NS_SWIFT_NAME(CubeFilter.Mode);

/// Tellusim::CubeFilter::Flags
typedef NS_ENUM(NSInteger, TS_CubeFilterFlags) {
	TS_CubeFilterFlagsCube NS_SWIFT_NAME(Cube) = 1,
	TS_CubeFilterFlagsPanorama NS_SWIFT_NAME(Panorama) = 2,
	TS_CubeFilterFlagsAll NS_SWIFT_NAME(All) = 3,
} NS_SWIFT_NAME(CubeFilter.Flags);

/// Tellusim::DecoderJPEG::Mode
typedef NS_ENUM(NSInteger, TS_DecoderJPEGMode) {
	TS_DecoderJPEGModeR NS_SWIFT_NAME(R) = 0,
	TS_DecoderJPEGModeRG NS_SWIFT_NAME(RG),
	TS_DecoderJPEGModeRGBA NS_SWIFT_NAME(RGBA),
	TS_DecoderJPEGModeYUV444 NS_SWIFT_NAME(YUV444),
	TS_DecoderJPEGModeYUV422H NS_SWIFT_NAME(YUV422H),
	TS_DecoderJPEGModeYUV422V NS_SWIFT_NAME(YUV422V),
	TS_DecoderJPEGModeYUV420 NS_SWIFT_NAME(YUV420),
	TS_DecoderJPEGModeNumModes NS_SWIFT_NAME(NumModes),
} NS_SWIFT_NAME(DecoderJPEG.Mode);

/// Tellusim::DecoderJPEG::Flags
typedef NS_ENUM(NSInteger, TS_DecoderJPEGFlags) {
	TS_DecoderJPEGFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_DecoderJPEGFlagsR NS_SWIFT_NAME(R) = 1,
	TS_DecoderJPEGFlagsRG NS_SWIFT_NAME(RG) = 2,
	TS_DecoderJPEGFlagsRGBA NS_SWIFT_NAME(RGBA) = 4,
	TS_DecoderJPEGFlagsYUV444 NS_SWIFT_NAME(YUV444) = 8,
	TS_DecoderJPEGFlagsYUV422H NS_SWIFT_NAME(YUV422H) = 16,
	TS_DecoderJPEGFlagsYUV422V NS_SWIFT_NAME(YUV422V) = 32,
	TS_DecoderJPEGFlagsYUV420 NS_SWIFT_NAME(YUV420) = 64,
	TS_DecoderJPEGFlagsAll NS_SWIFT_NAME(All) = 127,
} NS_SWIFT_NAME(DecoderJPEG.Flags);

/// Tellusim::EncoderBC15::Mode
typedef NS_ENUM(NSInteger, TS_EncoderBC15Mode) {
	TS_EncoderBC15ModeBC1RGBu8n NS_SWIFT_NAME(BC1RGBu8n) = 0,
	TS_EncoderBC15ModeBC2RGBAu8n NS_SWIFT_NAME(BC2RGBAu8n),
	TS_EncoderBC15ModeBC3RGBAu8n NS_SWIFT_NAME(BC3RGBAu8n),
	TS_EncoderBC15ModeBC4Ru8n NS_SWIFT_NAME(BC4Ru8n),
	TS_EncoderBC15ModeBC5RGu8n NS_SWIFT_NAME(BC5RGu8n),
	TS_EncoderBC15ModeNumModes NS_SWIFT_NAME(NumModes),
} NS_SWIFT_NAME(EncoderBC15.Mode);

/// Tellusim::EncoderBC15::Flags
typedef NS_ENUM(NSInteger, TS_EncoderBC15Flags) {
	TS_EncoderBC15FlagsNone NS_SWIFT_NAME(None) = 0,
	TS_EncoderBC15FlagsBC1RGBu8n NS_SWIFT_NAME(BC1RGBu8n) = 1,
	TS_EncoderBC15FlagsBC2RGBAu8n NS_SWIFT_NAME(BC2RGBAu8n) = 2,
	TS_EncoderBC15FlagsBC3RGBAu8n NS_SWIFT_NAME(BC3RGBAu8n) = 4,
	TS_EncoderBC15FlagsBC4Ru8n NS_SWIFT_NAME(BC4Ru8n) = 8,
	TS_EncoderBC15FlagsBC5RGu8n NS_SWIFT_NAME(BC5RGu8n) = 16,
	TS_EncoderBC15FlagsCube NS_SWIFT_NAME(Cube) = 64,
	TS_EncoderBC15FlagsBC13 NS_SWIFT_NAME(BC13) = 7,
	TS_EncoderBC15FlagsBC45 NS_SWIFT_NAME(BC45) = 24,
	TS_EncoderBC15FlagsAll NS_SWIFT_NAME(All) = 31,
} NS_SWIFT_NAME(EncoderBC15.Flags);

/// Tellusim::EncoderBC67::Mode
typedef NS_ENUM(NSInteger, TS_EncoderBC67Mode) {
	TS_EncoderBC67ModeBC6RGBf16s NS_SWIFT_NAME(BC6RGBf16s) = 0,
	TS_EncoderBC67ModeBC6RGBf16u NS_SWIFT_NAME(BC6RGBf16u),
	TS_EncoderBC67ModeBC7RGBAu8n NS_SWIFT_NAME(BC7RGBAu8n),
	TS_EncoderBC67ModeNumModes NS_SWIFT_NAME(NumModes),
} NS_SWIFT_NAME(EncoderBC67.Mode);

/// Tellusim::EncoderBC67::Flags
typedef NS_ENUM(NSInteger, TS_EncoderBC67Flags) {
	TS_EncoderBC67FlagsNone NS_SWIFT_NAME(None) = 0,
	TS_EncoderBC67FlagsBC6RGBf16s NS_SWIFT_NAME(BC6RGBf16s) = 1,
	TS_EncoderBC67FlagsBC6RGBf16u NS_SWIFT_NAME(BC6RGBf16u) = 2,
	TS_EncoderBC67FlagsBC7RGBAu8n NS_SWIFT_NAME(BC7RGBAu8n) = 4,
	TS_EncoderBC67FlagsCube NS_SWIFT_NAME(Cube) = 16,
	TS_EncoderBC67FlagsAll NS_SWIFT_NAME(All) = 7,
} NS_SWIFT_NAME(EncoderBC67.Flags);

/// Tellusim::EncoderASTC::Mode
typedef NS_ENUM(NSInteger, TS_EncoderASTCMode) {
	TS_EncoderASTCModeASTC44RGBAu8n NS_SWIFT_NAME(ASTC44RGBAu8n) = 0,
	TS_EncoderASTCModeASTC54RGBAu8n NS_SWIFT_NAME(ASTC54RGBAu8n),
	TS_EncoderASTCModeASTC55RGBAu8n NS_SWIFT_NAME(ASTC55RGBAu8n),
	TS_EncoderASTCModeNumModes NS_SWIFT_NAME(NumModes),
} NS_SWIFT_NAME(EncoderASTC.Mode);

/// Tellusim::EncoderASTC::Flags
typedef NS_ENUM(NSInteger, TS_EncoderASTCFlags) {
	TS_EncoderASTCFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_EncoderASTCFlagsASTC44RGBAu8n NS_SWIFT_NAME(ASTC44RGBAu8n) = 1,
	TS_EncoderASTCFlagsASTC54RGBAu8n NS_SWIFT_NAME(ASTC54RGBAu8n) = 2,
	TS_EncoderASTCFlagsASTC55RGBAu8n NS_SWIFT_NAME(ASTC55RGBAu8n) = 4,
	TS_EncoderASTCFlagsCube NS_SWIFT_NAME(Cube) = 16,
	TS_EncoderASTCFlagsAll NS_SWIFT_NAME(All) = 7,
} NS_SWIFT_NAME(EncoderASTC.Flags);

/// Tellusim::MeshModel::Flags
typedef NS_ENUM(NSInteger, TS_MeshModelFlags) {
	TS_MeshModelFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_MeshModelFlagsDirect NS_SWIFT_NAME(Direct) = 1,
	TS_MeshModelFlagsVerbose NS_SWIFT_NAME(Verbose) = 2,
	TS_MeshModelFlagsOptimize NS_SWIFT_NAME(Optimize) = 4,
	TS_MeshModelFlagsMaterials NS_SWIFT_NAME(Materials) = 8,
	TS_MeshModelFlagsIndices10 NS_SWIFT_NAME(Indices10) = 16,
	TS_MeshModelFlagsIndices16 NS_SWIFT_NAME(Indices16) = 32,
	TS_MeshModelFlagsIndices32 NS_SWIFT_NAME(Indices32) = 64,
	TS_MeshModelFlagsMeshlet64x84 NS_SWIFT_NAME(Meshlet64x84) = 128,
	TS_MeshModelFlagsMeshlet64x126 NS_SWIFT_NAME(Meshlet64x126) = 256,
	TS_MeshModelFlagsMeshlet96x169 NS_SWIFT_NAME(Meshlet96x169) = 512,
	TS_MeshModelFlagsMeshlet128x212 NS_SWIFT_NAME(Meshlet128x212) = 1024,
	TS_MeshModelFlagsBufferWrite NS_SWIFT_NAME(BufferWrite) = 2048,
	TS_MeshModelFlagsBufferSource NS_SWIFT_NAME(BufferSource) = 4096,
	TS_MeshModelFlagsBufferStorage NS_SWIFT_NAME(BufferStorage) = 8192,
	TS_MeshModelFlagsBufferTracing NS_SWIFT_NAME(BufferTracing) = 16384,
	TS_MeshModelFlagsBufferAddress NS_SWIFT_NAME(BufferAddress) = 32768,
	TS_MeshModelFlagsBufferTexel NS_SWIFT_NAME(BufferTexel) = 65536,
	TS_MeshModelFlagsMeshlets NS_SWIFT_NAME(Meshlets) = 1920,
	TS_MeshModelFlagsDefaultFlags NS_SWIFT_NAME(Default) = 10,
	TS_MeshModelFlagsNumFlags NS_SWIFT_NAME(Num) = 17,
} NS_SWIFT_NAME(MeshModel.Flags);

/// Tellusim::SeparableFilter::Mode
typedef NS_ENUM(NSInteger, TS_SeparableFilterMode) {
	TS_SeparableFilterModeHorizontal NS_SWIFT_NAME(Horizontal) = 0,
	TS_SeparableFilterModeVertical NS_SWIFT_NAME(Vertical),
	TS_SeparableFilterModeNumModes NS_SWIFT_NAME(NumModes),
} NS_SWIFT_NAME(SeparableFilter.Mode);

/// Tellusim::SeparableFilter::Flags
typedef NS_ENUM(NSInteger, TS_SeparableFilterFlags) {
	TS_SeparableFilterFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_SeparableFilterFlagsRepeat NS_SWIFT_NAME(Repeat) = 1,
	TS_SeparableFilterFlagsZero NS_SWIFT_NAME(Zero) = 2,
	TS_SeparableFilterFlagsDefaultFlags NS_SWIFT_NAME(Default) = 0,
} NS_SWIFT_NAME(SeparableFilter.Flags);

/// Tellusim::PrefixScan::Mode
typedef NS_ENUM(NSInteger, TS_PrefixScanMode) {
	TS_PrefixScanModeSingle NS_SWIFT_NAME(Single) = 0,
	TS_PrefixScanModeMultiple NS_SWIFT_NAME(Multiple),
	TS_PrefixScanModeNumModes NS_SWIFT_NAME(NumModes),
} NS_SWIFT_NAME(PrefixScan.Mode);

/// Tellusim::PrefixScan::Flags
typedef NS_ENUM(NSInteger, TS_PrefixScanFlags) {
	TS_PrefixScanFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_PrefixScanFlagsSingle NS_SWIFT_NAME(Single) = 1,
	TS_PrefixScanFlagsMultiple NS_SWIFT_NAME(Multiple) = 2,
	TS_PrefixScanFlagsIndirect NS_SWIFT_NAME(Indirect) = 4,
	TS_PrefixScanFlagsRepeat NS_SWIFT_NAME(Repeat) = 8,
	TS_PrefixScanFlagsAll NS_SWIFT_NAME(All) = 7,
} NS_SWIFT_NAME(PrefixScan.Flags);

/// Tellusim::RadixSort::Mode
typedef NS_ENUM(NSInteger, TS_RadixSortMode) {
	TS_RadixSortModeSingle NS_SWIFT_NAME(Single) = 0,
	TS_RadixSortModeMultiple NS_SWIFT_NAME(Multiple),
	TS_RadixSortModeNumModes NS_SWIFT_NAME(NumModes),
} NS_SWIFT_NAME(RadixSort.Mode);

/// Tellusim::RadixSort::Flags
typedef NS_ENUM(NSInteger, TS_RadixSortFlags) {
	TS_RadixSortFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_RadixSortFlagsSingle NS_SWIFT_NAME(Single) = 1,
	TS_RadixSortFlagsMultiple NS_SWIFT_NAME(Multiple) = 2,
	TS_RadixSortFlagsIndirect NS_SWIFT_NAME(Indirect) = 4,
	TS_RadixSortFlagsOrder NS_SWIFT_NAME(Order) = 8,
	TS_RadixSortFlagsTracing NS_SWIFT_NAME(Tracing) = 16,
	TS_RadixSortFlagsScratch NS_SWIFT_NAME(Scratch) = 32,
	TS_RadixSortFlagsAll NS_SWIFT_NAME(All) = 15,
} NS_SWIFT_NAME(RadixSort.Flags);

/// Tellusim::BitonicSort::Mode
typedef NS_ENUM(NSInteger, TS_BitonicSortMode) {
	TS_BitonicSortModeSingle NS_SWIFT_NAME(Single) = 0,
	TS_BitonicSortModeMultiple NS_SWIFT_NAME(Multiple),
	TS_BitonicSortModeNumModes NS_SWIFT_NAME(NumModes),
} NS_SWIFT_NAME(BitonicSort.Mode);

/// Tellusim::BitonicSort::Flags
typedef NS_ENUM(NSInteger, TS_BitonicSortFlags) {
	TS_BitonicSortFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_BitonicSortFlagsSingle NS_SWIFT_NAME(Single) = 1,
	TS_BitonicSortFlagsMultiple NS_SWIFT_NAME(Multiple) = 2,
	TS_BitonicSortFlagsIndirect NS_SWIFT_NAME(Indirect) = 4,
	TS_BitonicSortFlagsOrder NS_SWIFT_NAME(Order) = 8,
	TS_BitonicSortFlagsAll NS_SWIFT_NAME(All) = 15,
} NS_SWIFT_NAME(BitonicSort.Flags);

/// Tellusim::SpatialTree::Mode
typedef NS_ENUM(NSInteger, TS_SpatialTreeMode) {
	TS_SpatialTreeModeSingle NS_SWIFT_NAME(Single) = 0,
	TS_SpatialTreeModeMultiple NS_SWIFT_NAME(Multiple),
	TS_SpatialTreeModeNumModes NS_SWIFT_NAME(NumModes),
} NS_SWIFT_NAME(SpatialTree.Mode);

/// Tellusim::SpatialTree::Hash
typedef NS_ENUM(NSInteger, TS_SpatialTreeHash) {
	TS_SpatialTreeHashXYZ10 NS_SWIFT_NAME(XYZ10),
	TS_SpatialTreeHashXYZ9 NS_SWIFT_NAME(XYZ9),
	TS_SpatialTreeHashXYZ8 NS_SWIFT_NAME(XYZ8),
	TS_SpatialTreeHashXY15 NS_SWIFT_NAME(XY15),
	TS_SpatialTreeHashXY14 NS_SWIFT_NAME(XY14),
	TS_SpatialTreeHashXY12 NS_SWIFT_NAME(XY12),
	TS_SpatialTreeHashXY10 NS_SWIFT_NAME(XY10),
} NS_SWIFT_NAME(SpatialTree.Hash);

/// Tellusim::SpatialTree::Flags
typedef NS_ENUM(NSInteger, TS_SpatialTreeFlags) {
	TS_SpatialTreeFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_SpatialTreeFlagsSingle NS_SWIFT_NAME(Single) = 1,
	TS_SpatialTreeFlagsMultiple NS_SWIFT_NAME(Multiple) = 2,
	TS_SpatialTreeFlagsUpdate NS_SWIFT_NAME(Update) = 4,
	TS_SpatialTreeFlagsOptimize NS_SWIFT_NAME(Optimize) = 8,
	TS_SpatialTreeFlagsTracing NS_SWIFT_NAME(Tracing) = 16,
	TS_SpatialTreeFlagsScratch NS_SWIFT_NAME(Scratch) = 32,
	TS_SpatialTreeFlagsAtomic NS_SWIFT_NAME(Atomic) = 64,
	TS_SpatialTreeFlagsLeafNodef16 NS_SWIFT_NAME(LeafNodef16) = 128,
	TS_SpatialTreeFlagsSpatialData NS_SWIFT_NAME(SpatialData) = 256,
	TS_SpatialTreeFlagsSingleUpdate NS_SWIFT_NAME(SingleUpdate) = 5,
	TS_SpatialTreeFlagsMultipleUpdate NS_SWIFT_NAME(MultipleUpdate) = 6,
	TS_SpatialTreeFlagsSingleOptimize NS_SWIFT_NAME(SingleOptimize) = 9,
	TS_SpatialTreeFlagsMultipleOptimize NS_SWIFT_NAME(MultipleOptimize) = 10,
	TS_SpatialTreeFlagsAll NS_SWIFT_NAME(All) = 3,
	TS_SpatialTreeFlagsAllOptimize NS_SWIFT_NAME(AllOptimize) = 11,
} NS_SWIFT_NAME(SpatialTree.Flags);

/// Tellusim::FourierTransform::Mode
typedef NS_ENUM(NSInteger, TS_FourierTransformMode) {
	TS_FourierTransformModeRf16i NS_SWIFT_NAME(Rf16i) = 0,
	TS_FourierTransformModeRf32i NS_SWIFT_NAME(Rf32i),
	TS_FourierTransformModeRGf16i NS_SWIFT_NAME(RGf16i),
	TS_FourierTransformModeRGf32i NS_SWIFT_NAME(RGf32i),
	TS_FourierTransformModeRGBf16c NS_SWIFT_NAME(RGBf16c),
	TS_FourierTransformModeRGBf21c NS_SWIFT_NAME(RGBf21c),
	TS_FourierTransformModeRGBf16p NS_SWIFT_NAME(RGBf16p),
	TS_FourierTransformModeRGBf32p NS_SWIFT_NAME(RGBf32p),
	TS_FourierTransformModeNumModes NS_SWIFT_NAME(NumModes),
} NS_SWIFT_NAME(FourierTransform.Mode);

/// Tellusim::FourierTransform::Flags
typedef NS_ENUM(NSInteger, TS_FourierTransformFlags) {
	TS_FourierTransformFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_FourierTransformFlagsRf16i NS_SWIFT_NAME(Rf16i) = 1,
	TS_FourierTransformFlagsRf32i NS_SWIFT_NAME(Rf32i) = 2,
	TS_FourierTransformFlagsRGf16i NS_SWIFT_NAME(RGf16i) = 4,
	TS_FourierTransformFlagsRGf32i NS_SWIFT_NAME(RGf32i) = 8,
	TS_FourierTransformFlagsRGBf16c NS_SWIFT_NAME(RGBf16c) = 16,
	TS_FourierTransformFlagsRGBf21c NS_SWIFT_NAME(RGBf21c) = 32,
	TS_FourierTransformFlagsRGBf16p NS_SWIFT_NAME(RGBf16p) = 64,
	TS_FourierTransformFlagsRGBf32p NS_SWIFT_NAME(RGBf32p) = 128,
	TS_FourierTransformFlagsNpot NS_SWIFT_NAME(Npot) = 256,
	TS_FourierTransformFlagsInterleaved NS_SWIFT_NAME(Interleaved) = 15,
	TS_FourierTransformFlagsComplex NS_SWIFT_NAME(Complex) = 48,
	TS_FourierTransformFlagsPlanar NS_SWIFT_NAME(Planar) = 192,
	TS_FourierTransformFlagsAll NS_SWIFT_NAME(All) = 511,
} NS_SWIFT_NAME(FourierTransform.Flags);

/// Tellusim::FourierTransform::Operation
typedef NS_ENUM(NSInteger, TS_FourierTransformOperation) {
	TS_FourierTransformOperationForwardCtoC NS_SWIFT_NAME(ForwardCtoC) = 0,
	TS_FourierTransformOperationBackwardCtoC NS_SWIFT_NAME(BackwardCtoC),
	TS_FourierTransformOperationForwardRtoC NS_SWIFT_NAME(ForwardRtoC),
	TS_FourierTransformOperationBackwardCtoR NS_SWIFT_NAME(BackwardCtoR),
	TS_FourierTransformOperationNumOperations NS_SWIFT_NAME(NumOperations),
} NS_SWIFT_NAME(FourierTransform.Operation);

/// Tellusim::TensorGraph::Operation
typedef NS_ENUM(NSInteger, TS_TensorGraphOperation) {
	TS_TensorGraphOperationClear NS_SWIFT_NAME(Clear) = 0,
	TS_TensorGraphOperationRange NS_SWIFT_NAME(Range),
	TS_TensorGraphOperationCopy NS_SWIFT_NAME(Copy),
	TS_TensorGraphOperationCat NS_SWIFT_NAME(Cat),
	TS_TensorGraphOperationTranspose NS_SWIFT_NAME(Transpose),
	TS_TensorGraphOperationMatMul NS_SWIFT_NAME(MatMul),
	TS_TensorGraphOperationMul NS_SWIFT_NAME(Mul),
	TS_TensorGraphOperationMad NS_SWIFT_NAME(Mad),
	TS_TensorGraphOperationDiv NS_SWIFT_NAME(Div),
	TS_TensorGraphOperationAdd NS_SWIFT_NAME(Add),
	TS_TensorGraphOperationConv NS_SWIFT_NAME(Conv),
	TS_TensorGraphOperationDeConv NS_SWIFT_NAME(DeConv),
	TS_TensorGraphOperationBatchNorm NS_SWIFT_NAME(BatchNorm),
	TS_TensorGraphOperationBatchMad NS_SWIFT_NAME(BatchMad),
	TS_TensorGraphOperationSoftMin NS_SWIFT_NAME(SoftMin),
	TS_TensorGraphOperationSoftMax NS_SWIFT_NAME(SoftMax),
	TS_TensorGraphOperationMaxPool NS_SWIFT_NAME(MaxPool),
	TS_TensorGraphOperationAvgPool NS_SWIFT_NAME(AvgPool),
	TS_TensorGraphOperationGELU NS_SWIFT_NAME(GELU),
	TS_TensorGraphOperationReLU NS_SWIFT_NAME(ReLU),
	TS_TensorGraphOperationSiLU NS_SWIFT_NAME(SiLU),
	TS_TensorGraphOperationSigm NS_SWIFT_NAME(Sigm),
	TS_TensorGraphOperationTanh NS_SWIFT_NAME(Tanh),
	TS_TensorGraphOperationSin NS_SWIFT_NAME(Sin),
	TS_TensorGraphOperationCos NS_SWIFT_NAME(Cos),
	TS_TensorGraphOperationExp NS_SWIFT_NAME(Exp),
	TS_TensorGraphOperationNumOperations NS_SWIFT_NAME(NumOperations),
} NS_SWIFT_NAME(TensorGraph.Operation);

/// Tellusim::TensorGraph::Flags
typedef NS_ENUM(NSInteger, TS_TensorGraphFlags) {
	TS_TensorGraphFlagsNone NS_SWIFT_NAME(None) = 0,
	TS_TensorGraphFlagsSizeQuery NS_SWIFT_NAME(SizeQuery) = 1,
	TS_TensorGraphFlagsFormatRf32 NS_SWIFT_NAME(FormatRf32) = 2,
	TS_TensorGraphFlagsFormatRf16 NS_SWIFT_NAME(FormatRf16) = 4,
	TS_TensorGraphFlagsTranspose NS_SWIFT_NAME(Transpose) = 8,
	TS_TensorGraphFlagsWrapClamp NS_SWIFT_NAME(WrapClamp) = 16,
	TS_TensorGraphFlagsWrapRepeat NS_SWIFT_NAME(WrapRepeat) = 32,
	TS_TensorGraphFlagsReadScale NS_SWIFT_NAME(ReadScale) = 64,
	TS_TensorGraphFlagsReadBias NS_SWIFT_NAME(ReadBias) = 128,
	TS_TensorGraphFlagsConvert NS_SWIFT_NAME(Convert) = 256,
	TS_TensorGraphFlagsKernel NS_SWIFT_NAME(Kernel) = 512,
	TS_TensorGraphFlagsGELU NS_SWIFT_NAME(GELU) = 1024,
	TS_TensorGraphFlagsReLU NS_SWIFT_NAME(ReLU) = 2048,
	TS_TensorGraphFlagsSiLU NS_SWIFT_NAME(SiLU) = 4096,
	TS_TensorGraphFlagsSigm NS_SWIFT_NAME(Sigm) = 8192,
	TS_TensorGraphFlagsTanh NS_SWIFT_NAME(Tanh) = 16384,
	TS_TensorGraphFlagsSin NS_SWIFT_NAME(Sin) = 32768,
	TS_TensorGraphFlagsCos NS_SWIFT_NAME(Cos) = 65536,
	TS_TensorGraphFlagsExp NS_SWIFT_NAME(Exp) = 131072,
	TS_TensorGraphFlagsFormat NS_SWIFT_NAME(Format) = 6,
	TS_TensorGraphFlagsWrap NS_SWIFT_NAME(Wrap) = 48,
	TS_TensorGraphFlagsRead NS_SWIFT_NAME(Read) = 192,
	TS_TensorGraphFlagsUnit NS_SWIFT_NAME(Unit) = 7168,
	TS_TensorGraphFlagsMath NS_SWIFT_NAME(Math) = 253952,
	TS_TensorGraphFlagsAll NS_SWIFT_NAME(All) = 262142,
} NS_SWIFT_NAME(TensorGraph.Flags);

/// Tellusim::TensorGraph::Masks
typedef NS_ENUM(NSInteger, TS_TensorGraphMasks) {
	TS_TensorGraphMasksMaskNone NS_SWIFT_NAME(MaskNone) = 0,
	TS_TensorGraphMasksMaskClear NS_SWIFT_NAME(MaskClear) = 1,
	TS_TensorGraphMasksMaskRange NS_SWIFT_NAME(MaskRange) = 2,
	TS_TensorGraphMasksMaskCopy NS_SWIFT_NAME(MaskCopy) = 4,
	TS_TensorGraphMasksMaskCat NS_SWIFT_NAME(MaskCat) = 8,
	TS_TensorGraphMasksMaskTranspose NS_SWIFT_NAME(MaskTranspose) = 16,
	TS_TensorGraphMasksMaskMatMul NS_SWIFT_NAME(MaskMatMul) = 32,
	TS_TensorGraphMasksMaskMul NS_SWIFT_NAME(MaskMul) = 64,
	TS_TensorGraphMasksMaskMad NS_SWIFT_NAME(MaskMad) = 128,
	TS_TensorGraphMasksMaskDiv NS_SWIFT_NAME(MaskDiv) = 256,
	TS_TensorGraphMasksMaskAdd NS_SWIFT_NAME(MaskAdd) = 512,
	TS_TensorGraphMasksMaskConv NS_SWIFT_NAME(MaskConv) = 1024,
	TS_TensorGraphMasksMaskDeConv NS_SWIFT_NAME(MaskDeConv) = 2048,
	TS_TensorGraphMasksMaskBatchNorm NS_SWIFT_NAME(MaskBatchNorm) = 4096,
	TS_TensorGraphMasksMaskBatchMad NS_SWIFT_NAME(MaskBatchMad) = 8192,
	TS_TensorGraphMasksMaskSoftMin NS_SWIFT_NAME(MaskSoftMin) = 16384,
	TS_TensorGraphMasksMaskSoftMax NS_SWIFT_NAME(MaskSoftMax) = 32768,
	TS_TensorGraphMasksMaskMaxPool NS_SWIFT_NAME(MaskMaxPool) = 65536,
	TS_TensorGraphMasksMaskAvgPool NS_SWIFT_NAME(MaskAvgPool) = 131072,
	TS_TensorGraphMasksMaskGELU NS_SWIFT_NAME(MaskGELU) = 262144,
	TS_TensorGraphMasksMaskReLU NS_SWIFT_NAME(MaskReLU) = 524288,
	TS_TensorGraphMasksMaskSiLU NS_SWIFT_NAME(MaskSiLU) = 1048576,
	TS_TensorGraphMasksMaskSigm NS_SWIFT_NAME(MaskSigm) = 2097152,
	TS_TensorGraphMasksMaskTanh NS_SWIFT_NAME(MaskTanh) = 4194304,
	TS_TensorGraphMasksMaskSin NS_SWIFT_NAME(MaskSin) = 8388608,
	TS_TensorGraphMasksMaskCos NS_SWIFT_NAME(MaskCos) = 16777216,
	TS_TensorGraphMasksMaskExp NS_SWIFT_NAME(MaskExp) = 33554432,
	TS_TensorGraphMasksAll NS_SWIFT_NAME(All) = 67108863,
} NS_SWIFT_NAME(TensorGraph.Masks);

/// Tellusim::Controller::Type
typedef NS_ENUM(NSInteger, TS_ControllerType) {
	TS_ControllerTypeUnknown NS_SWIFT_NAME(Unknown) = 0,
	TS_ControllerTypeJoystick NS_SWIFT_NAME(Joystick),
	TS_ControllerTypeGamePad NS_SWIFT_NAME(GamePad),
	TS_ControllerTypeWheel NS_SWIFT_NAME(Wheel),
	TS_ControllerTypeNumTypes NS_SWIFT_NAME(NumTypes),
} NS_SWIFT_NAME(Controller.Kind);

/// Tellusim::Controller::Stick
typedef NS_ENUM(NSInteger, TS_ControllerStick) {
	TS_ControllerStickLeft NS_SWIFT_NAME(Left) = 0,
	TS_ControllerStickRight NS_SWIFT_NAME(Right),
	TS_ControllerStickNumSticks NS_SWIFT_NAME(NumSticks),
} NS_SWIFT_NAME(Controller.Stick);

/// Tellusim::Controller::Axis
typedef NS_ENUM(NSInteger, TS_ControllerAxis) {
	TS_ControllerAxisX NS_SWIFT_NAME(X) = 0,
	TS_ControllerAxisY NS_SWIFT_NAME(Y),
	TS_ControllerAxisZ NS_SWIFT_NAME(Z),
	TS_ControllerAxisRX NS_SWIFT_NAME(RX),
	TS_ControllerAxisRY NS_SWIFT_NAME(RY),
	TS_ControllerAxisRZ NS_SWIFT_NAME(RZ),
	TS_ControllerAxisNumAxes NS_SWIFT_NAME(NumAxes) = 16,
} NS_SWIFT_NAME(Controller.Axis);

/// Tellusim::Controller::Button
typedef NS_ENUM(NSInteger, TS_ControllerButton) {
	TS_ControllerButtonLeft NS_SWIFT_NAME(Left) = 0,
	TS_ControllerButtonRight NS_SWIFT_NAME(Right),
	TS_ControllerButtonDown NS_SWIFT_NAME(Down),
	TS_ControllerButtonUp NS_SWIFT_NAME(Up),
	TS_ControllerButtonHome NS_SWIFT_NAME(Home),
	TS_ControllerButtonShoulderLeft NS_SWIFT_NAME(ShoulderLeft),
	TS_ControllerButtonShoulderRight NS_SWIFT_NAME(ShoulderRight),
	TS_ControllerButtonTriggerLeft NS_SWIFT_NAME(TriggerLeft),
	TS_ControllerButtonTriggerRight NS_SWIFT_NAME(TriggerRight),
	TS_ControllerButtonStickLeft NS_SWIFT_NAME(StickLeft),
	TS_ControllerButtonStickRight NS_SWIFT_NAME(StickRight),
	TS_ControllerButtonA NS_SWIFT_NAME(A),
	TS_ControllerButtonB NS_SWIFT_NAME(B),
	TS_ControllerButtonX NS_SWIFT_NAME(X),
	TS_ControllerButtonY NS_SWIFT_NAME(Y),
	TS_ControllerButtonView NS_SWIFT_NAME(View),
	TS_ControllerButtonMenu NS_SWIFT_NAME(Menu),
	TS_ControllerButtonL1 NS_SWIFT_NAME(L1) = 5,
	TS_ControllerButtonR1 NS_SWIFT_NAME(R1),
	TS_ControllerButtonL2 NS_SWIFT_NAME(L2),
	TS_ControllerButtonR2 NS_SWIFT_NAME(R2),
	TS_ControllerButtonL3 NS_SWIFT_NAME(L3),
	TS_ControllerButtonR3 NS_SWIFT_NAME(R3),
	TS_ControllerButtonCross NS_SWIFT_NAME(Cross),
	TS_ControllerButtonCircle NS_SWIFT_NAME(Circle),
	TS_ControllerButtonSquare NS_SWIFT_NAME(Square),
	TS_ControllerButtonTriangle NS_SWIFT_NAME(Triangle),
	TS_ControllerButtonShare NS_SWIFT_NAME(Share),
	TS_ControllerButtonOptions NS_SWIFT_NAME(Options),
	TS_ControllerButtonNumButtons NS_SWIFT_NAME(NumButtons) = 32,
} NS_SWIFT_NAME(Controller.Button);

/// Tellusim::Controller::Motor
typedef NS_ENUM(NSInteger, TS_ControllerMotor) {
	TS_ControllerMotorLow NS_SWIFT_NAME(Low) = 0,
	TS_ControllerMotorHigh NS_SWIFT_NAME(High),
	TS_ControllerMotorNumMotors NS_SWIFT_NAME(NumMotors),
} NS_SWIFT_NAME(Controller.Motor);

/// Tellusim::Log::Level
typedef NS_ENUM(NSInteger, TS_LogLevel) {
	TS_LogLevelFatal NS_SWIFT_NAME(Fatal) = 0,
	TS_LogLevelError NS_SWIFT_NAME(Error),
	TS_LogLevelWarning NS_SWIFT_NAME(Warning),
	TS_LogLevelMessage NS_SWIFT_NAME(Message),
	TS_LogLevelVerbose NS_SWIFT_NAME(Verbose),
	TS_LogLevelUnknown NS_SWIFT_NAME(Unknown),
	TS_LogLevelNumLevels NS_SWIFT_NAME(NumLevels),
} NS_SWIFT_NAME(Log.Level);

/// Tellusim::Time::
typedef NS_ENUM(NSInteger, TS_Time) {
	TS_TimeSeconds NS_SWIFT_NAME(Seconds) = 1000000u,
	TS_TimeMSeconds NS_SWIFT_NAME(MSeconds) = 1000u,
	TS_TimeUSeconds NS_SWIFT_NAME(USeconds) = 1u,
} NS_SWIFT_NAME(Time.Values);

/// Tellusim::Command
typedef struct TSCommandDrawArraysIndirect {
	uint32_t num_vertices;
	uint32_t num_instances;
	uint32_t base_vertex;
	uint32_t base_instance;
} TSCommandDrawArraysIndirect;

typedef TSCommandDrawArraysIndirect CommandDrawArraysIndirect;

typedef struct TSCommandDrawElementsIndirect {
	uint32_t num_indices;
	uint32_t num_instances;
	uint32_t base_index;
	int32_t base_vertex;
	uint32_t base_instance;
} TSCommandDrawElementsIndirect;

typedef TSCommandDrawElementsIndirect CommandDrawElementsIndirect;

typedef struct TSCommandDrawMeshIndirect {
	uint32_t group_width;
	uint32_t group_height;
	uint32_t group_depth;
	uint32_t padding;
} TSCommandDrawMeshIndirect;

typedef TSCommandDrawMeshIndirect CommandDrawMeshIndirect;

/// Tellusim::Compute
typedef struct TSComputeDispatchIndirect {
	uint32_t group_width;
	uint32_t group_height;
	uint32_t group_depth;
	uint32_t padding;
} TSComputeDispatchIndirect;

typedef TSComputeDispatchIndirect ComputeDispatchIndirect;

/// Tellusim::Query
typedef struct TSQueryStatistics {
	uint64_t num_vertices;
	uint64_t num_primitives;
	uint64_t vertex_invocations;
	uint64_t control_invocations;
	uint64_t evaluate_invocations;
	uint64_t geometry_invocations;
	uint64_t geometry_primitives;
	uint64_t fragment_invocations;
	uint64_t compute_invocations;
	uint64_t clipping_invocations;
	uint64_t clipping_primitives;
} TSQueryStatistics;

typedef TSQueryStatistics QueryStatistics;

/// Tellusim::Tracing
typedef TS_CALIGNAS16(struct) TSTracingInstance {
	float32_t transform[12];
	uint32_t data;
	uint32_t mask;
	uint32_t flags;
	uint32_t offset;
	size_t tracing;
} TSTracingInstance;

typedef TSTracingInstance TracingInstance;

typedef struct TSTracingBuildIndirect {
	uint32_t num_primitives;
	uint32_t base_primitive;
	uint32_t base_vertex;
	uint32_t base_transform;
} TSTracingBuildIndirect;

typedef TSTracingBuildIndirect TracingBuildIndirect;

/// Tellusim::Device
typedef struct TSDeviceFeatures {
	uint8_t threadAccess;
	uint8_t sparseBuffer;
	uint8_t bufferTable;
	uint8_t sparseTexture;
	uint8_t sparseArrayTexture;
	uint8_t cubeArrayTexture;
	uint8_t textureTable;
	uint8_t baseInstanceIndex;
	uint8_t drawIndirectIndex;
	uint8_t drawIndirectCount;
	uint8_t taskIndirectCount;
	uint8_t vertexStorage;
	uint8_t vertexIndexLayer;
	uint8_t geometryPassthrough;
	uint8_t fragmentBarycentric;
	uint8_t fragmentStencilExport;
	uint8_t dualSourceBlending;
	uint8_t depthRangeOneToOne;
	uint8_t conservativeRaster;
	uint8_t conditionalRendering;
	uint8_t rayTracing;
	uint8_t computeTracing;
	uint8_t fragmentTracing;
	uint8_t indirectTracing;
	uint32_t recursionDepth;
	uint8_t subgroupVote;
	uint8_t subgroupMath;
	uint8_t subgroupShuffle;
	uint32_t subgroupSize;
	uint32_t minSubgroupSize;
	uint32_t maxSubgroupSize;
	uint8_t shaderu8;
	uint8_t shaderf16;
	uint8_t shaderu16;
	uint8_t shaderf64;
	uint8_t shaderu64;
	uint8_t atomicGroupf32;
	uint8_t atomicGroupu64;
	uint8_t atomicBufferf32;
	uint8_t atomicBufferu64;
	uint8_t atomicTexturef32;
	uint8_t atomicTextureu32;
	uint8_t atomicTextureu64;
	uint8_t matrix16f16;
	uint8_t matrix16x8x8f16;
	uint8_t matrix16x8x16f16;
	uint8_t matrix16f16f32;
	uint8_t matrix16x8x8f16f32;
	uint8_t matrix16x8x16f16f32;
	uint32_t uniformAlignment;
	uint32_t storageAlignment;
	uint32_t maxTextureSamples;
	uint32_t maxTexture2DSize;
	uint32_t maxTexture3DSize;
	uint32_t maxTextureLayers;
	uint32_t maxGroupSizeX;
	uint32_t maxGroupSizeY;
	uint32_t maxGroupSizeZ;
	uint32_t maxGroupCountX;
	uint32_t maxGroupCountY;
	uint32_t maxGroupCountZ;
	uint32_t maxTaskCount;
	uint32_t maxTaskMemory;
	uint32_t maxTaskMeshes;
	uint32_t maxMeshMemory;
	uint32_t maxMeshVertices;
	uint32_t maxMeshPrimitives;
	uint32_t maxViewportCount;
	uint32_t maxClipCullCount;
	uint64_t maxUniformSize;
	uint64_t maxStorageSize;
	uint32_t groupMemory;
	uint64_t videoMemory;
	uint32_t vendorID;
	uint32_t deviceID;
	uint32_t pciBusID;
	uint32_t pciDomainID;
	uint32_t pciDeviceID;
} TSDeviceFeatures;

typedef TSDeviceFeatures DeviceFeatures;

/// Tellusim::MeshModel
typedef struct TSMeshModelMeshlet {
	uint32_t num_primitives;
	uint32_t num_vertices;
	uint32_t base_index;
	uint32_t base_vertex;
	float32_t bound_sphere[4];
	float32_t normal_angle[4];
} TSMeshModelMeshlet;

typedef TSMeshModelMeshlet MeshModelMeshlet;

/// Tellusim::PrefixScan
typedef struct TSPrefixScanDispatchParameters {
	uint32_t offset;
	uint32_t size;
	uint32_t padding_0;
	uint32_t padding_1;
} TSPrefixScanDispatchParameters;

typedef TSPrefixScanDispatchParameters PrefixScanDispatchParameters;

/// Tellusim::RadixSort
typedef struct TSRadixSortDispatchParameters {
	uint32_t keys_offset;
	uint32_t data_offset;
	uint32_t size;
	uint32_t padding;
} TSRadixSortDispatchParameters;

typedef TSRadixSortDispatchParameters RadixSortDispatchParameters;

/// Tellusim::BitonicSort
typedef struct TSBitonicSortDispatchParameters {
	uint32_t keys_offset;
	uint32_t data_offset;
	uint32_t size;
	uint32_t padding;
} TSBitonicSortDispatchParameters;

typedef TSBitonicSortDispatchParameters BitonicSortDispatchParameters;

/// Tellusim::SpatialGrid
typedef struct TSSpatialGridDispatchParameters {
	uint32_t offset;
	uint32_t size;
	uint32_t padding_0;
	uint32_t padding_1;
} TSSpatialGridDispatchParameters;

typedef TSSpatialGridDispatchParameters SpatialGridDispatchParameters;

/// Tellusim::SpatialTree
typedef struct TSSpatialTreeNode {
	float32_t bound_min[3];
	uint32_t is_enabled;
	float32_t bound_max[3];
	uint32_t data;
	uint32_t left;
	uint32_t right;
	uint32_t parent;
	uint32_t spatial;
} TSSpatialTreeNode;

typedef TSSpatialTreeNode SpatialTreeNode;

typedef struct TSSpatialTreeDispatchParameters {
	uint32_t offset;
	uint32_t size;
	uint32_t padding_0;
	uint32_t padding_1;
} TSSpatialTreeDispatchParameters;

typedef TSSpatialTreeDispatchParameters SpatialTreeDispatchParameters;

/// Tellusim::String
TS_CAPI @interface TSString : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	-(id _Nonnull)init_1: (uint32_t)size NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (uint32_t)size NS_SWIFT_NAME(init(size:));
	-(id _Nonnull)init_2: (uint32_t)size c: (char)c NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (uint32_t)size c: (char)c NS_SWIFT_NAME(init(size:c:));
	-(id _Nonnull)init_3: (const char* _Nonnull)str NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_3_: (const char* _Nonnull)str NS_SWIFT_NAME(init(str:));
	-(id _Nonnull)init_4: (const char* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_4_: (const char* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(init(str:length:));
	-(id _Nonnull)init_5: (const wchar_t* _Nonnull)str NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_5_: (const wchar_t* _Nonnull)str NS_SWIFT_NAME(init(str:));
	-(id _Nonnull)init_6: (const wchar_t* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_6_: (const wchar_t* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(init(str:length:));
	-(id _Nonnull)init_7: (const uint32_t* _Nonnull)str NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_7_: (const uint32_t* _Nonnull)str NS_SWIFT_NAME(init(str:));
	-(id _Nonnull)init_8: (const uint32_t* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_8_: (const uint32_t* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(init(str:length:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::String* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::String&)p;
		-(Tellusim::String* _Nonnull)pointer;
		-(Tellusim::String&)ref;
	#endif
	-(TSString* _Nonnull)reserve: (uint32_t)size NS_SWIFT_NAME(reserve(_:));
	-(TSString* _Nonnull)reserve_: (uint32_t)size NS_SWIFT_NAME(reserve(size:));
	-(TSString* _Nonnull)reserve_1: (uint32_t)size discard: (BOOL)discard NS_SWIFT_NAME(reserve(_:_:));
	-(TSString* _Nonnull)reserve_1_: (uint32_t)size discard: (BOOL)discard NS_SWIFT_NAME(reserve(size:discard:));
	-(TSString* _Nonnull)resize: (uint32_t)size NS_SWIFT_NAME(resize(_:));
	-(TSString* _Nonnull)resize_: (uint32_t)size NS_SWIFT_NAME(resize(size:));
	-(TSString* _Nonnull)resize_1: (uint32_t)size c: (char)c NS_SWIFT_NAME(resize(_:_:));
	-(TSString* _Nonnull)resize_1_: (uint32_t)size c: (char)c NS_SWIFT_NAME(resize(size:c:));
	-(TSString* _Nonnull)resize_2: (uint32_t)size c: (char)c reserve: (BOOL)reserve NS_SWIFT_NAME(resize(_:_:_:));
	-(TSString* _Nonnull)resize_2_: (uint32_t)size c: (char)c reserve: (BOOL)reserve NS_SWIFT_NAME(resize(size:c:reserve:));
	-(void)release_ NS_SWIFT_NAME(release());
	-(void)clear;
	-(void)copy: (const char* _Nonnull)str NS_SWIFT_NAME(copy(_:));
	-(void)copy_: (const char* _Nonnull)str NS_SWIFT_NAME(copy(str:));
	-(void)copy_1: (const char* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(copy(_:_:));
	-(void)copy_1_: (const char* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(copy(str:length:));
	-(void)copy_2: (const wchar_t* _Nonnull)str NS_SWIFT_NAME(copy(_:));
	-(void)copy_2_: (const wchar_t* _Nonnull)str NS_SWIFT_NAME(copy(str:));
	-(void)copy_3: (const wchar_t* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(copy(_:_:));
	-(void)copy_3_: (const wchar_t* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(copy(str:length:));
	-(void)copy_4: (const uint32_t* _Nonnull)str NS_SWIFT_NAME(copy(_:));
	-(void)copy_4_: (const uint32_t* _Nonnull)str NS_SWIFT_NAME(copy(str:));
	-(void)copy_5: (const uint32_t* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(copy(_:_:));
	-(void)copy_5_: (const uint32_t* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(copy(str:length:));
	-(void)copy_6: (const TSString* _Nonnull)string NS_SWIFT_NAME(copy(_:));
	-(void)copy_6_: (const TSString* _Nonnull)string NS_SWIFT_NAME(copy(string:));
	-(void)copy_7: (const TSString* _Nonnull)string length: (uint32_t)length NS_SWIFT_NAME(copy(_:_:));
	-(void)copy_7_: (const TSString* _Nonnull)string length: (uint32_t)length NS_SWIFT_NAME(copy(string:length:));
	-(TSString* _Nonnull)append: (char)c NS_SWIFT_NAME(append(_:));
	-(TSString* _Nonnull)append_: (char)c NS_SWIFT_NAME(append(c:));
	-(TSString* _Nonnull)append_1: (const char* _Nonnull)str NS_SWIFT_NAME(append(_:));
	-(TSString* _Nonnull)append_1_: (const char* _Nonnull)str NS_SWIFT_NAME(append(str:));
	-(TSString* _Nonnull)append_2: (const char* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(append(_:_:));
	-(TSString* _Nonnull)append_2_: (const char* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(append(str:length:));
	-(TSString* _Nonnull)append_3: (const TSString* _Nonnull)string NS_SWIFT_NAME(append(_:));
	-(TSString* _Nonnull)append_3_: (const TSString* _Nonnull)string NS_SWIFT_NAME(append(string:));
	-(TSString* _Nonnull)append_4: (const TSString* _Nonnull)string length: (uint32_t)length NS_SWIFT_NAME(append(_:_:));
	-(TSString* _Nonnull)append_4_: (const TSString* _Nonnull)string length: (uint32_t)length NS_SWIFT_NAME(append(string:length:));
	-(TSString* _Nonnull)insert: (uint32_t)pos str: (const char* _Nonnull)str NS_SWIFT_NAME(insert(_:_:));
	-(TSString* _Nonnull)insert_: (uint32_t)pos str: (const char* _Nonnull)str NS_SWIFT_NAME(insert(pos:str:));
	-(TSString* _Nonnull)insert_1: (uint32_t)pos str: (const char* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(insert(_:_:_:));
	-(TSString* _Nonnull)insert_1_: (uint32_t)pos str: (const char* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(insert(pos:str:length:));
	-(TSString* _Nonnull)insert_2: (uint32_t)pos string: (const TSString* _Nonnull)string NS_SWIFT_NAME(insert(_:_:));
	-(TSString* _Nonnull)insert_2_: (uint32_t)pos string: (const TSString* _Nonnull)string NS_SWIFT_NAME(insert(pos:string:));
	-(TSString* _Nonnull)insert_3: (uint32_t)pos string: (const TSString* _Nonnull)string length: (uint32_t)length NS_SWIFT_NAME(insert(_:_:_:));
	-(TSString* _Nonnull)insert_3_: (uint32_t)pos string: (const TSString* _Nonnull)string length: (uint32_t)length NS_SWIFT_NAME(insert(pos:string:length:));
	-(TSString* _Nonnull)removeBack NS_SWIFT_NAME(removeBack());
	-(TSString* _Nonnull)removeBack_1: (uint32_t)length NS_SWIFT_NAME(removeBack(_:));
	-(TSString* _Nonnull)removeBack_1_: (uint32_t)length NS_SWIFT_NAME(removeBack(length:));
	-(TSString* _Nonnull)remove: (uint32_t)pos NS_SWIFT_NAME(remove(_:));
	-(TSString* _Nonnull)remove_: (uint32_t)pos NS_SWIFT_NAME(remove(pos:));
	-(TSString* _Nonnull)remove_1: (uint32_t)pos length: (uint32_t)length NS_SWIFT_NAME(remove(_:_:));
	-(TSString* _Nonnull)remove_1_: (uint32_t)pos length: (uint32_t)length NS_SWIFT_NAME(remove(pos:length:));
	-(TSString* _Nonnull)reverse NS_SWIFT_NAME(reverse());
	-(TSString* _Nonnull)reverse_1: (uint32_t)pos NS_SWIFT_NAME(reverse(_:));
	-(TSString* _Nonnull)reverse_1_: (uint32_t)pos NS_SWIFT_NAME(reverse(pos:));
	-(TSString* _Nonnull)reverse_2: (uint32_t)pos length: (uint32_t)length NS_SWIFT_NAME(reverse(_:_:));
	-(TSString* _Nonnull)reverse_2_: (uint32_t)pos length: (uint32_t)length NS_SWIFT_NAME(reverse(pos:length:));
	-(uint32_t)size;
	-(BOOL)empty;
	-(char* _Nonnull)get;
	-(NSString* _Nonnull)get_1 NS_SWIFT_NAME(get());
	-(char* _Nonnull)get_2: (uint32_t)index NS_SWIFT_NAME(get(_:));
	-(char* _Nonnull)get_2_: (uint32_t)index NS_SWIFT_NAME(get(index:));
	-(char)get_3: (uint32_t)index NS_SWIFT_NAME(get(_:));
	-(char)get_3_: (uint32_t)index NS_SWIFT_NAME(get(index:));
	-(uint32_t)find: (char)c NS_SWIFT_NAME(find(_:));
	-(uint32_t)find_: (char)c NS_SWIFT_NAME(find(c:));
	-(uint32_t)find_1: (char)c pos: (uint32_t)pos NS_SWIFT_NAME(find(_:_:));
	-(uint32_t)find_1_: (char)c pos: (uint32_t)pos NS_SWIFT_NAME(find(c:pos:));
	-(uint32_t)rfind: (char)c NS_SWIFT_NAME(rfind(_:));
	-(uint32_t)rfind_: (char)c NS_SWIFT_NAME(rfind(c:));
	-(uint32_t)rfind_1: (char)c pos: (uint32_t)pos NS_SWIFT_NAME(rfind(_:_:));
	-(uint32_t)rfind_1_: (char)c pos: (uint32_t)pos NS_SWIFT_NAME(rfind(c:pos:));
	-(uint32_t)count: (char)c NS_SWIFT_NAME(count(_:));
	-(uint32_t)count_: (char)c NS_SWIFT_NAME(count(c:));
	-(uint32_t)count_1: (char)c pos: (uint32_t)pos NS_SWIFT_NAME(count(_:_:));
	-(uint32_t)count_1_: (char)c pos: (uint32_t)pos NS_SWIFT_NAME(count(c:pos:));
	-(uint32_t)find_2: (const char* _Nonnull)str NS_SWIFT_NAME(find(_:));
	-(uint32_t)find_2_: (const char* _Nonnull)str NS_SWIFT_NAME(find(str:));
	-(uint32_t)find_3: (const char* _Nonnull)str pos: (uint32_t)pos NS_SWIFT_NAME(find(_:_:));
	-(uint32_t)find_3_: (const char* _Nonnull)str pos: (uint32_t)pos NS_SWIFT_NAME(find(str:pos:));
	-(uint32_t)rfind_2: (const char* _Nonnull)str NS_SWIFT_NAME(rfind(_:));
	-(uint32_t)rfind_2_: (const char* _Nonnull)str NS_SWIFT_NAME(rfind(str:));
	-(uint32_t)rfind_3: (const char* _Nonnull)str pos: (uint32_t)pos NS_SWIFT_NAME(rfind(_:_:));
	-(uint32_t)rfind_3_: (const char* _Nonnull)str pos: (uint32_t)pos NS_SWIFT_NAME(rfind(str:pos:));
	-(uint32_t)count_2: (const char* _Nonnull)str NS_SWIFT_NAME(count(_:));
	-(uint32_t)count_2_: (const char* _Nonnull)str NS_SWIFT_NAME(count(str:));
	-(uint32_t)count_3: (const char* _Nonnull)str pos: (uint32_t)pos NS_SWIFT_NAME(count(_:_:));
	-(uint32_t)count_3_: (const char* _Nonnull)str pos: (uint32_t)pos NS_SWIFT_NAME(count(str:pos:));
	-(BOOL)begins: (const char* _Nonnull)str NS_SWIFT_NAME(begins(_:));
	-(BOOL)begins_: (const char* _Nonnull)str NS_SWIFT_NAME(begins(str:));
	-(BOOL)begins_1: (const char* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(begins(_:_:));
	-(BOOL)begins_1_: (const char* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(begins(str:length:));
	-(BOOL)begins_2: (const char* _Nonnull)str length: (uint32_t)length pos: (uint32_t)pos NS_SWIFT_NAME(begins(_:_:_:));
	-(BOOL)begins_2_: (const char* _Nonnull)str length: (uint32_t)length pos: (uint32_t)pos NS_SWIFT_NAME(begins(str:length:pos:));
	-(BOOL)contains: (const char* _Nonnull)str NS_SWIFT_NAME(contains(_:));
	-(BOOL)contains_: (const char* _Nonnull)str NS_SWIFT_NAME(contains(str:));
	-(BOOL)contains_1: (const char* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(contains(_:_:));
	-(BOOL)contains_1_: (const char* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(contains(str:length:));
	-(BOOL)contains_2: (const char* _Nonnull)str length: (uint32_t)length pos: (uint32_t)pos NS_SWIFT_NAME(contains(_:_:_:));
	-(BOOL)contains_2_: (const char* _Nonnull)str length: (uint32_t)length pos: (uint32_t)pos NS_SWIFT_NAME(contains(str:length:pos:));
	-(BOOL)match: (const char* _Nonnull)str NS_SWIFT_NAME(match(_:));
	-(BOOL)match_: (const char* _Nonnull)str NS_SWIFT_NAME(match(str:));
	-(BOOL)match_1: (const char* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(match(_:_:));
	-(BOOL)match_1_: (const char* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(match(str:length:));
	-(BOOL)match_2: (const char* _Nonnull)str length: (uint32_t)length pos: (uint32_t)pos NS_SWIFT_NAME(match(_:_:_:));
	-(BOOL)match_2_: (const char* _Nonnull)str length: (uint32_t)length pos: (uint32_t)pos NS_SWIFT_NAME(match(str:length:pos:));
	-(int32_t)compare: (const char* _Nonnull)str NS_SWIFT_NAME(compare(_:));
	-(int32_t)compare_: (const char* _Nonnull)str NS_SWIFT_NAME(compare(str:));
	-(int32_t)compare_1: (const char* _Nonnull)str pos: (uint32_t)pos NS_SWIFT_NAME(compare(_:_:));
	-(int32_t)compare_1_: (const char* _Nonnull)str pos: (uint32_t)pos NS_SWIFT_NAME(compare(str:pos:));
	-(uint32_t)distance: (const char* _Nonnull)str NS_SWIFT_NAME(distance(_:));
	-(uint32_t)distance_: (const char* _Nonnull)str NS_SWIFT_NAME(distance(str:));
	-(uint32_t)distance_1: (const char* _Nonnull)str scan: (BOOL)scan NS_SWIFT_NAME(distance(_:_:));
	-(uint32_t)distance_1_: (const char* _Nonnull)str scan: (BOOL)scan NS_SWIFT_NAME(distance(str:scan:));
	-(uint32_t)distance_2: (const char* _Nonnull)str scan: (BOOL)scan pos: (uint32_t)pos NS_SWIFT_NAME(distance(_:_:_:));
	-(uint32_t)distance_2_: (const char* _Nonnull)str scan: (BOOL)scan pos: (uint32_t)pos NS_SWIFT_NAME(distance(str:scan:pos:));
	-(NSString* _Nonnull)begin;
	-(NSString* _Nonnull)end;
	-(char)front NS_SWIFT_NAME(front());
	-(char)front_1: (uint32_t)index NS_SWIFT_NAME(front(_:));
	-(char)front_1_: (uint32_t)index NS_SWIFT_NAME(front(index:));
	-(char)back NS_SWIFT_NAME(back());
	-(char)back_1: (uint32_t)index NS_SWIFT_NAME(back(_:));
	-(char)back_1_: (uint32_t)index NS_SWIFT_NAME(back(index:));
	-(char* _Nonnull)front_2 NS_SWIFT_NAME(front());
	-(char* _Nonnull)front_3: (uint32_t)index NS_SWIFT_NAME(front(_:));
	-(char* _Nonnull)front_3_: (uint32_t)index NS_SWIFT_NAME(front(index:));
	-(char* _Nonnull)back_2 NS_SWIFT_NAME(back());
	-(char* _Nonnull)back_3: (uint32_t)index NS_SWIFT_NAME(back(_:));
	-(char* _Nonnull)back_3_: (uint32_t)index NS_SWIFT_NAME(back(index:));
	-(NSString* _Nonnull)substring: (uint32_t)pos NS_SWIFT_NAME(substring(_:));
	-(NSString* _Nonnull)substring_: (uint32_t)pos NS_SWIFT_NAME(substring(pos:));
	-(NSString* _Nonnull)substring_1: (uint32_t)pos length: (uint32_t)length NS_SWIFT_NAME(substring(_:_:));
	-(NSString* _Nonnull)substring_1_: (uint32_t)pos length: (uint32_t)length NS_SWIFT_NAME(substring(pos:length:));
	-(NSString* _Nonnull)replace: (char)before after: (char)after NS_SWIFT_NAME(replace(_:_:));
	-(NSString* _Nonnull)replace_: (char)before after: (char)after NS_SWIFT_NAME(replace(before:after:));
	-(NSString* _Nonnull)replace_1: (char)before after: (char)after pos: (uint32_t)pos NS_SWIFT_NAME(replace(_:_:_:));
	-(NSString* _Nonnull)replace_1_: (char)before after: (char)after pos: (uint32_t)pos NS_SWIFT_NAME(replace(before:after:pos:));
	-(NSString* _Nonnull)replace_2: (const char* _Nonnull)before after: (const char* _Nonnull)after NS_SWIFT_NAME(replace(_:_:));
	-(NSString* _Nonnull)replace_2_: (const char* _Nonnull)before after: (const char* _Nonnull)after NS_SWIFT_NAME(replace(before:after:));
	-(NSString* _Nonnull)replace_3: (const char* _Nonnull)before after: (const char* _Nonnull)after pos: (uint32_t)pos NS_SWIFT_NAME(replace(_:_:_:));
	-(NSString* _Nonnull)replace_3_: (const char* _Nonnull)before after: (const char* _Nonnull)after pos: (uint32_t)pos NS_SWIFT_NAME(replace(before:after:pos:));
	-(NSString* _Nonnull)replace_4: (const TSString* _Nonnull)before after: (const TSString* _Nonnull)after NS_SWIFT_NAME(replace(_:_:));
	-(NSString* _Nonnull)replace_4_: (const TSString* _Nonnull)before after: (const TSString* _Nonnull)after NS_SWIFT_NAME(replace(before:after:));
	-(NSString* _Nonnull)replace_5: (const TSString* _Nonnull)before after: (const TSString* _Nonnull)after pos: (uint32_t)pos NS_SWIFT_NAME(replace(_:_:_:));
	-(NSString* _Nonnull)replace_5_: (const TSString* _Nonnull)before after: (const TSString* _Nonnull)after pos: (uint32_t)pos NS_SWIFT_NAME(replace(before:after:pos:));
	-(NSArray<TSString*>* _Nonnull)split: (const char* _Nonnull)delimiters NS_SWIFT_NAME(split(_:));
	-(NSArray<TSString*>* _Nonnull)split_: (const char* _Nonnull)delimiters NS_SWIFT_NAME(split(delimiters:));
	-(NSArray<TSString*>* _Nonnull)split_1: (const char* _Nonnull)delimiters length: (uint32_t)length NS_SWIFT_NAME(split(_:_:));
	-(NSArray<TSString*>* _Nonnull)split_1_: (const char* _Nonnull)delimiters length: (uint32_t)length NS_SWIFT_NAME(split(delimiters:length:));
	-(NSArray<TSString*>* _Nonnull)split_2: (const TSString* _Nonnull)delimiters NS_SWIFT_NAME(split(_:));
	-(NSArray<TSString*>* _Nonnull)split_2_: (const TSString* _Nonnull)delimiters NS_SWIFT_NAME(split(delimiters:));
	-(NSArray<TSString*>* _Nonnull)split_3: (const TSString* _Nonnull)delimiters length: (uint32_t)length NS_SWIFT_NAME(split(_:_:));
	-(NSArray<TSString*>* _Nonnull)split_3_: (const TSString* _Nonnull)delimiters length: (uint32_t)length NS_SWIFT_NAME(split(delimiters:length:));
	-(NSString* _Nonnull)extension: (const char* _Nonnull)extension NS_SWIFT_NAME(extension(_:));
	-(NSString* _Nonnull)extension_: (const char* _Nonnull)extension NS_SWIFT_NAME(extension(extension:));
	-(NSString* _Nonnull)extension_1 NS_SWIFT_NAME(extension());
	-(NSString* _Nonnull)pathname;
	-(NSString* _Nonnull)basename;
	-(NSString* _Nonnull)dirname;
	+(NSString* _Nonnull)relname: (const char* _Nonnull)path str: (const char* _Nonnull)str NS_SWIFT_NAME(relname(_:_:));
	+(NSString* _Nonnull)relname_: (const char* _Nonnull)path str: (const char* _Nonnull)str NS_SWIFT_NAME(relname(path:str:));
	+(NSString* _Nonnull)relname_1: (const TSString* _Nonnull)path str: (const TSString* _Nonnull)str NS_SWIFT_NAME(relname(_:_:));
	+(NSString* _Nonnull)relname_1_: (const TSString* _Nonnull)path str: (const TSString* _Nonnull)str NS_SWIFT_NAME(relname(path:str:));
	-(NSString* _Nonnull)capitalize NS_SWIFT_NAME(capitalize());
	-(NSString* _Nonnull)capitalize_1: (const char* _Nullable)delimiters NS_SWIFT_NAME(capitalize(_:));
	-(NSString* _Nonnull)capitalize_1_: (const char* _Nullable)delimiters NS_SWIFT_NAME(capitalize(delimiters:));
	-(NSString* _Nonnull)capitalize_2: (const char* _Nullable)delimiters spaces: (const char* _Nullable)spaces NS_SWIFT_NAME(capitalize(_:_:));
	-(NSString* _Nonnull)capitalize_2_: (const char* _Nullable)delimiters spaces: (const char* _Nullable)spaces NS_SWIFT_NAME(capitalize(delimiters:spaces:));
	-(NSString* _Nonnull)lower;
	-(NSString* _Nonnull)upper;
	+(uint32_t)toUtf32: (const char* _Nonnull)str code: (uint32_t* _Nonnull)code NS_SWIFT_NAME(toUtf32(_:_:));
	+(uint32_t)toUtf32_: (const char* _Nonnull)str code: (uint32_t* _Nonnull)code NS_SWIFT_NAME(toUtf32(str:code:));
	-(uint32_t)toUtf16: (wchar_t* _Nonnull)d length: (uint32_t)length NS_SWIFT_NAME(toUtf16(_:_:));
	-(uint32_t)toUtf16_: (wchar_t* _Nonnull)d length: (uint32_t)length NS_SWIFT_NAME(toUtf16(d:length:));
	-(uint32_t)toUtf32_1: (uint32_t* _Nonnull)d length: (uint32_t)length NS_SWIFT_NAME(toUtf32(_:_:));
	-(uint32_t)toUtf32_1_: (uint32_t* _Nonnull)d length: (uint32_t)length NS_SWIFT_NAME(toUtf32(d:length:));
	+(uint32_t)fromUtf32: (TSString* _Nonnull)d code: (uint32_t)code NS_SWIFT_NAME(fromUtf32(_:_:));
	+(uint32_t)fromUtf32_: (TSString* _Nonnull)d code: (uint32_t)code NS_SWIFT_NAME(fromUtf32(d:code:));
	+(NSString* _Nonnull)fromUtf16: (const wchar_t* _Nonnull)str NS_SWIFT_NAME(fromUtf16(_:));
	+(NSString* _Nonnull)fromUtf16_: (const wchar_t* _Nonnull)str NS_SWIFT_NAME(fromUtf16(str:));
	+(NSString* _Nonnull)fromUtf16_1: (const wchar_t* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(fromUtf16(_:_:));
	+(NSString* _Nonnull)fromUtf16_1_: (const wchar_t* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(fromUtf16(str:length:));
	+(NSString* _Nonnull)fromUtf32_1: (const uint32_t* _Nonnull)str NS_SWIFT_NAME(fromUtf32(_:));
	+(NSString* _Nonnull)fromUtf32_1_: (const uint32_t* _Nonnull)str NS_SWIFT_NAME(fromUtf32(str:));
	+(NSString* _Nonnull)fromUtf32_2: (const uint32_t* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(fromUtf32(_:_:));
	+(NSString* _Nonnull)fromUtf32_2_: (const uint32_t* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(fromUtf32(str:length:));
	+(NSString* _Nonnull)fromUrl: (const char* _Nonnull)str NS_SWIFT_NAME(fromUrl(_:));
	+(NSString* _Nonnull)fromUrl_: (const char* _Nonnull)str NS_SWIFT_NAME(fromUrl(str:));
	+(NSString* _Nonnull)fromUrl_1: (const char* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(fromUrl(_:_:));
	+(NSString* _Nonnull)fromUrl_1_: (const char* _Nonnull)str length: (uint32_t)length NS_SWIFT_NAME(fromUrl(str:length:));
	+(NSString* _Nonnull)fromUrl_2: (const TSString* _Nonnull)string NS_SWIFT_NAME(fromUrl(_:));
	+(NSString* _Nonnull)fromUrl_2_: (const TSString* _Nonnull)string NS_SWIFT_NAME(fromUrl(string:));
	+(NSString* _Nonnull)fromUrl_3: (const TSString* _Nonnull)string length: (uint32_t)length NS_SWIFT_NAME(fromUrl(_:_:));
	+(NSString* _Nonnull)fromUrl_3_: (const TSString* _Nonnull)string length: (uint32_t)length NS_SWIFT_NAME(fromUrl(string:length:));
	-(uint32_t)vscanf: (const char* _Nonnull)format args: (va_list)args NS_SWIFT_NAME(vscanf(_:_:));
	-(uint32_t)vscanf_: (const char* _Nonnull)format args: (va_list)args NS_SWIFT_NAME(vscanf(format:args:));
	-(TSString* _Nonnull)vprintf: (const char* _Nonnull)format args: (va_list)args NS_SWIFT_NAME(vprintf(_:_:));
	-(TSString* _Nonnull)vprintf_: (const char* _Nonnull)format args: (va_list)args NS_SWIFT_NAME(vprintf(format:args:));
	+(NSString* _Nonnull)vformat: (const char* _Nonnull)format args: (va_list)args NS_SWIFT_NAME(vformat(_:_:));
	+(NSString* _Nonnull)vformat_: (const char* _Nonnull)format args: (va_list)args NS_SWIFT_NAME(vformat(format:args:));
	+(NSString* _Nonnull)format: (const char* _Nonnull)format NS_SWIFT_NAME(format(_:));
	+(NSString* _Nonnull)format_: (const char* _Nonnull)format NS_SWIFT_NAME(format(format:));
	+(TSString* _Nonnull)fromi32: (TSString* _Nonnull)d value: (int32_t)value NS_SWIFT_NAME(fromi32(_:_:));
	+(TSString* _Nonnull)fromi32_: (TSString* _Nonnull)d value: (int32_t)value NS_SWIFT_NAME(fromi32(d:value:));
	+(TSString* _Nonnull)fromi32_1: (TSString* _Nonnull)d value: (int32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(fromi32(_:_:_:));
	+(TSString* _Nonnull)fromi32_1_: (TSString* _Nonnull)d value: (int32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(fromi32(d:value:radix:));
	+(TSString* _Nonnull)fromi64: (TSString* _Nonnull)d value: (int64_t)value NS_SWIFT_NAME(fromi64(_:_:));
	+(TSString* _Nonnull)fromi64_: (TSString* _Nonnull)d value: (int64_t)value NS_SWIFT_NAME(fromi64(d:value:));
	+(TSString* _Nonnull)fromi64_1: (TSString* _Nonnull)d value: (int64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(fromi64(_:_:_:));
	+(TSString* _Nonnull)fromi64_1_: (TSString* _Nonnull)d value: (int64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(fromi64(d:value:radix:));
	+(TSString* _Nonnull)fromu32: (TSString* _Nonnull)d value: (uint32_t)value NS_SWIFT_NAME(fromu32(_:_:));
	+(TSString* _Nonnull)fromu32_: (TSString* _Nonnull)d value: (uint32_t)value NS_SWIFT_NAME(fromu32(d:value:));
	+(TSString* _Nonnull)fromu32_1: (TSString* _Nonnull)d value: (uint32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(fromu32(_:_:_:));
	+(TSString* _Nonnull)fromu32_1_: (TSString* _Nonnull)d value: (uint32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(fromu32(d:value:radix:));
	+(TSString* _Nonnull)fromu64: (TSString* _Nonnull)d value: (uint64_t)value NS_SWIFT_NAME(fromu64(_:_:));
	+(TSString* _Nonnull)fromu64_: (TSString* _Nonnull)d value: (uint64_t)value NS_SWIFT_NAME(fromu64(d:value:));
	+(TSString* _Nonnull)fromu64_1: (TSString* _Nonnull)d value: (uint64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(fromu64(_:_:_:));
	+(TSString* _Nonnull)fromu64_1_: (TSString* _Nonnull)d value: (uint64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(fromu64(d:value:radix:));
	+(TSString* _Nonnull)fromf32: (TSString* _Nonnull)d value: (float32_t)value NS_SWIFT_NAME(fromf32(_:_:));
	+(TSString* _Nonnull)fromf32_: (TSString* _Nonnull)d value: (float32_t)value NS_SWIFT_NAME(fromf32(d:value:));
	+(TSString* _Nonnull)fromf32_1: (TSString* _Nonnull)d value: (float32_t)value digits: (uint32_t)digits NS_SWIFT_NAME(fromf32(_:_:_:));
	+(TSString* _Nonnull)fromf32_1_: (TSString* _Nonnull)d value: (float32_t)value digits: (uint32_t)digits NS_SWIFT_NAME(fromf32(d:value:digits:));
	+(TSString* _Nonnull)fromf32_2: (TSString* _Nonnull)d value: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(fromf32(_:_:_:_:));
	+(TSString* _Nonnull)fromf32_2_: (TSString* _Nonnull)d value: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(fromf32(d:value:digits:compact:));
	+(TSString* _Nonnull)fromf32_3: (TSString* _Nonnull)d value: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(fromf32(_:_:_:_:_:));
	+(TSString* _Nonnull)fromf32_3_: (TSString* _Nonnull)d value: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(fromf32(d:value:digits:compact:exponent:));
	+(TSString* _Nonnull)fromf64: (TSString* _Nonnull)d value: (float64_t)value NS_SWIFT_NAME(fromf64(_:_:));
	+(TSString* _Nonnull)fromf64_: (TSString* _Nonnull)d value: (float64_t)value NS_SWIFT_NAME(fromf64(d:value:));
	+(TSString* _Nonnull)fromf64_1: (TSString* _Nonnull)d value: (float64_t)value digits: (uint32_t)digits NS_SWIFT_NAME(fromf64(_:_:_:));
	+(TSString* _Nonnull)fromf64_1_: (TSString* _Nonnull)d value: (float64_t)value digits: (uint32_t)digits NS_SWIFT_NAME(fromf64(d:value:digits:));
	+(TSString* _Nonnull)fromf64_2: (TSString* _Nonnull)d value: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(fromf64(_:_:_:_:));
	+(TSString* _Nonnull)fromf64_2_: (TSString* _Nonnull)d value: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(fromf64(d:value:digits:compact:));
	+(TSString* _Nonnull)fromf64_3: (TSString* _Nonnull)d value: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(fromf64(_:_:_:_:_:));
	+(TSString* _Nonnull)fromf64_3_: (TSString* _Nonnull)d value: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(fromf64(d:value:digits:compact:exponent:));
	+(NSString* _Nonnull)fromi32_2: (int32_t)value NS_SWIFT_NAME(fromi32(_:));
	+(NSString* _Nonnull)fromi32_2_: (int32_t)value NS_SWIFT_NAME(fromi32(value:));
	+(NSString* _Nonnull)fromi32_3: (int32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(fromi32(_:_:));
	+(NSString* _Nonnull)fromi32_3_: (int32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(fromi32(value:radix:));
	+(NSString* _Nonnull)fromi64_2: (int64_t)value NS_SWIFT_NAME(fromi64(_:));
	+(NSString* _Nonnull)fromi64_2_: (int64_t)value NS_SWIFT_NAME(fromi64(value:));
	+(NSString* _Nonnull)fromi64_3: (int64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(fromi64(_:_:));
	+(NSString* _Nonnull)fromi64_3_: (int64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(fromi64(value:radix:));
	+(NSString* _Nonnull)fromu32_2: (uint32_t)value NS_SWIFT_NAME(fromu32(_:));
	+(NSString* _Nonnull)fromu32_2_: (uint32_t)value NS_SWIFT_NAME(fromu32(value:));
	+(NSString* _Nonnull)fromu32_3: (uint32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(fromu32(_:_:));
	+(NSString* _Nonnull)fromu32_3_: (uint32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(fromu32(value:radix:));
	+(NSString* _Nonnull)fromu64_2: (uint64_t)value NS_SWIFT_NAME(fromu64(_:));
	+(NSString* _Nonnull)fromu64_2_: (uint64_t)value NS_SWIFT_NAME(fromu64(value:));
	+(NSString* _Nonnull)fromu64_3: (uint64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(fromu64(_:_:));
	+(NSString* _Nonnull)fromu64_3_: (uint64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(fromu64(value:radix:));
	+(NSString* _Nonnull)fromf32_4: (float32_t)value NS_SWIFT_NAME(fromf32(_:));
	+(NSString* _Nonnull)fromf32_4_: (float32_t)value NS_SWIFT_NAME(fromf32(value:));
	+(NSString* _Nonnull)fromf32_5: (float32_t)value digits: (uint32_t)digits NS_SWIFT_NAME(fromf32(_:_:));
	+(NSString* _Nonnull)fromf32_5_: (float32_t)value digits: (uint32_t)digits NS_SWIFT_NAME(fromf32(value:digits:));
	+(NSString* _Nonnull)fromf32_6: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(fromf32(_:_:_:));
	+(NSString* _Nonnull)fromf32_6_: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(fromf32(value:digits:compact:));
	+(NSString* _Nonnull)fromf32_7: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(fromf32(_:_:_:_:));
	+(NSString* _Nonnull)fromf32_7_: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(fromf32(value:digits:compact:exponent:));
	+(NSString* _Nonnull)fromf64_4: (float64_t)value NS_SWIFT_NAME(fromf64(_:));
	+(NSString* _Nonnull)fromf64_4_: (float64_t)value NS_SWIFT_NAME(fromf64(value:));
	+(NSString* _Nonnull)fromf64_5: (float64_t)value digits: (uint32_t)digits NS_SWIFT_NAME(fromf64(_:_:));
	+(NSString* _Nonnull)fromf64_5_: (float64_t)value digits: (uint32_t)digits NS_SWIFT_NAME(fromf64(value:digits:));
	+(NSString* _Nonnull)fromf64_6: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(fromf64(_:_:_:));
	+(NSString* _Nonnull)fromf64_6_: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(fromf64(value:digits:compact:));
	+(NSString* _Nonnull)fromf64_7: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(fromf64(_:_:_:_:));
	+(NSString* _Nonnull)fromf64_7_: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(fromf64(value:digits:compact:exponent:));
	+(int32_t)toi32: (const char* _Nonnull)str NS_SWIFT_NAME(toi32(_:));
	+(int32_t)toi32_: (const char* _Nonnull)str NS_SWIFT_NAME(toi32(str:));
	+(int32_t)toi32_1: (const char* _Nonnull)str radix: (uint32_t)radix NS_SWIFT_NAME(toi32(_:_:));
	+(int32_t)toi32_1_: (const char* _Nonnull)str radix: (uint32_t)radix NS_SWIFT_NAME(toi32(str:radix:));
	+(int32_t)toi32_2: (const char* _Nonnull)str radix: (uint32_t)radix size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toi32(_:_:_:));
	+(int32_t)toi32_2_: (const char* _Nonnull)str radix: (uint32_t)radix size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toi32(str:radix:size:));
	+(int64_t)toi64: (const char* _Nonnull)str NS_SWIFT_NAME(toi64(_:));
	+(int64_t)toi64_: (const char* _Nonnull)str NS_SWIFT_NAME(toi64(str:));
	+(int64_t)toi64_1: (const char* _Nonnull)str radix: (uint32_t)radix NS_SWIFT_NAME(toi64(_:_:));
	+(int64_t)toi64_1_: (const char* _Nonnull)str radix: (uint32_t)radix NS_SWIFT_NAME(toi64(str:radix:));
	+(int64_t)toi64_2: (const char* _Nonnull)str radix: (uint32_t)radix size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toi64(_:_:_:));
	+(int64_t)toi64_2_: (const char* _Nonnull)str radix: (uint32_t)radix size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toi64(str:radix:size:));
	+(uint32_t)tou32: (const char* _Nonnull)str NS_SWIFT_NAME(tou32(_:));
	+(uint32_t)tou32_: (const char* _Nonnull)str NS_SWIFT_NAME(tou32(str:));
	+(uint32_t)tou32_1: (const char* _Nonnull)str radix: (uint32_t)radix NS_SWIFT_NAME(tou32(_:_:));
	+(uint32_t)tou32_1_: (const char* _Nonnull)str radix: (uint32_t)radix NS_SWIFT_NAME(tou32(str:radix:));
	+(uint32_t)tou32_2: (const char* _Nonnull)str radix: (uint32_t)radix size: (uint32_t* _Nullable)size NS_SWIFT_NAME(tou32(_:_:_:));
	+(uint32_t)tou32_2_: (const char* _Nonnull)str radix: (uint32_t)radix size: (uint32_t* _Nullable)size NS_SWIFT_NAME(tou32(str:radix:size:));
	+(uint64_t)tou64: (const char* _Nonnull)str NS_SWIFT_NAME(tou64(_:));
	+(uint64_t)tou64_: (const char* _Nonnull)str NS_SWIFT_NAME(tou64(str:));
	+(uint64_t)tou64_1: (const char* _Nonnull)str radix: (uint32_t)radix NS_SWIFT_NAME(tou64(_:_:));
	+(uint64_t)tou64_1_: (const char* _Nonnull)str radix: (uint32_t)radix NS_SWIFT_NAME(tou64(str:radix:));
	+(uint64_t)tou64_2: (const char* _Nonnull)str radix: (uint32_t)radix size: (uint32_t* _Nullable)size NS_SWIFT_NAME(tou64(_:_:_:));
	+(uint64_t)tou64_2_: (const char* _Nonnull)str radix: (uint32_t)radix size: (uint32_t* _Nullable)size NS_SWIFT_NAME(tou64(str:radix:size:));
	+(int32_t)toi32_3: (const char* _Nonnull)str size: (uint32_t* _Nonnull)size NS_SWIFT_NAME(toi32(_:_:));
	+(int32_t)toi32_3_: (const char* _Nonnull)str size: (uint32_t* _Nonnull)size NS_SWIFT_NAME(toi32(str:size:));
	+(int64_t)toi64_3: (const char* _Nonnull)str size: (uint32_t* _Nonnull)size NS_SWIFT_NAME(toi64(_:_:));
	+(int64_t)toi64_3_: (const char* _Nonnull)str size: (uint32_t* _Nonnull)size NS_SWIFT_NAME(toi64(str:size:));
	+(uint32_t)tou32_3: (const char* _Nonnull)str size: (uint32_t* _Nonnull)size NS_SWIFT_NAME(tou32(_:_:));
	+(uint32_t)tou32_3_: (const char* _Nonnull)str size: (uint32_t* _Nonnull)size NS_SWIFT_NAME(tou32(str:size:));
	+(uint64_t)tou64_3: (const char* _Nonnull)str size: (uint32_t* _Nonnull)size NS_SWIFT_NAME(tou64(_:_:));
	+(uint64_t)tou64_3_: (const char* _Nonnull)str size: (uint32_t* _Nonnull)size NS_SWIFT_NAME(tou64(str:size:));
	+(float32_t)tof32: (const char* _Nonnull)str NS_SWIFT_NAME(tof32(_:));
	+(float32_t)tof32_: (const char* _Nonnull)str NS_SWIFT_NAME(tof32(str:));
	+(float32_t)tof32_1: (const char* _Nonnull)str size: (uint32_t* _Nullable)size NS_SWIFT_NAME(tof32(_:_:));
	+(float32_t)tof32_1_: (const char* _Nonnull)str size: (uint32_t* _Nullable)size NS_SWIFT_NAME(tof32(str:size:));
	+(float64_t)tof64: (const char* _Nonnull)str NS_SWIFT_NAME(tof64(_:));
	+(float64_t)tof64_: (const char* _Nonnull)str NS_SWIFT_NAME(tof64(str:));
	+(float64_t)tof64_1: (const char* _Nonnull)str size: (uint32_t* _Nullable)size NS_SWIFT_NAME(tof64(_:_:));
	+(float64_t)tof64_1_: (const char* _Nonnull)str size: (uint32_t* _Nullable)size NS_SWIFT_NAME(tof64(str:size:));
	-(int32_t)toi32_4 NS_SWIFT_NAME(toi32());
	-(int32_t)toi32_5: (uint32_t)radix NS_SWIFT_NAME(toi32(_:));
	-(int32_t)toi32_5_: (uint32_t)radix NS_SWIFT_NAME(toi32(radix:));
	-(int32_t)toi32_6: (uint32_t)radix pos: (uint32_t)pos NS_SWIFT_NAME(toi32(_:_:));
	-(int32_t)toi32_6_: (uint32_t)radix pos: (uint32_t)pos NS_SWIFT_NAME(toi32(radix:pos:));
	-(int64_t)toi64_4 NS_SWIFT_NAME(toi64());
	-(int64_t)toi64_5: (uint32_t)radix NS_SWIFT_NAME(toi64(_:));
	-(int64_t)toi64_5_: (uint32_t)radix NS_SWIFT_NAME(toi64(radix:));
	-(int64_t)toi64_6: (uint32_t)radix pos: (uint32_t)pos NS_SWIFT_NAME(toi64(_:_:));
	-(int64_t)toi64_6_: (uint32_t)radix pos: (uint32_t)pos NS_SWIFT_NAME(toi64(radix:pos:));
	-(uint32_t)tou32_4 NS_SWIFT_NAME(tou32());
	-(uint32_t)tou32_5: (uint32_t)radix NS_SWIFT_NAME(tou32(_:));
	-(uint32_t)tou32_5_: (uint32_t)radix NS_SWIFT_NAME(tou32(radix:));
	-(uint32_t)tou32_6: (uint32_t)radix pos: (uint32_t)pos NS_SWIFT_NAME(tou32(_:_:));
	-(uint32_t)tou32_6_: (uint32_t)radix pos: (uint32_t)pos NS_SWIFT_NAME(tou32(radix:pos:));
	-(uint64_t)tou64_4 NS_SWIFT_NAME(tou64());
	-(uint64_t)tou64_5: (uint32_t)radix NS_SWIFT_NAME(tou64(_:));
	-(uint64_t)tou64_5_: (uint32_t)radix NS_SWIFT_NAME(tou64(radix:));
	-(uint64_t)tou64_6: (uint32_t)radix pos: (uint32_t)pos NS_SWIFT_NAME(tou64(_:_:));
	-(uint64_t)tou64_6_: (uint32_t)radix pos: (uint32_t)pos NS_SWIFT_NAME(tou64(radix:pos:));
	-(float32_t)tof32_2 NS_SWIFT_NAME(tof32());
	-(float32_t)tof32_3: (uint32_t)pos NS_SWIFT_NAME(tof32(_:));
	-(float32_t)tof32_3_: (uint32_t)pos NS_SWIFT_NAME(tof32(pos:));
	-(float64_t)tof64_2 NS_SWIFT_NAME(tof64());
	-(float64_t)tof64_3: (uint32_t)pos NS_SWIFT_NAME(tof64(_:));
	-(float64_t)tof64_3_: (uint32_t)pos NS_SWIFT_NAME(tof64(pos:));
	-(uint32_t)toHashu32 NS_SWIFT_NAME(toHashu32());
	-(uint32_t)toHashu32_1: (uint32_t)pos NS_SWIFT_NAME(toHashu32(_:));
	-(uint32_t)toHashu32_1_: (uint32_t)pos NS_SWIFT_NAME(toHashu32(pos:));
	-(uint64_t)toHashu64 NS_SWIFT_NAME(toHashu64());
	-(uint64_t)toHashu64_1: (uint32_t)pos NS_SWIFT_NAME(toHashu64(_:));
	-(uint64_t)toHashu64_1_: (uint32_t)pos NS_SWIFT_NAME(toHashu64(pos:));
	-(uint32_t)toRGBAu8 NS_SWIFT_NAME(toRGBAu8());
	-(uint32_t)toRGBAu8_1: (uint32_t)pos NS_SWIFT_NAME(toRGBAu8(_:));
	-(uint32_t)toRGBAu8_1_: (uint32_t)pos NS_SWIFT_NAME(toRGBAu8(pos:));
	+(NSString* _Nonnull)fromTime: (uint64_t)usec NS_SWIFT_NAME(fromTime(_:));
	+(NSString* _Nonnull)fromTime_: (uint64_t)usec NS_SWIFT_NAME(fromTime(usec:));
	+(NSString* _Nonnull)fromTime_1: (uint64_t)usec digits: (uint32_t)digits NS_SWIFT_NAME(fromTime(_:_:));
	+(NSString* _Nonnull)fromTime_1_: (uint64_t)usec digits: (uint32_t)digits NS_SWIFT_NAME(fromTime(usec:digits:));
	+(NSString* _Nonnull)fromBytes: (uint64_t)bytes NS_SWIFT_NAME(fromBytes(_:));
	+(NSString* _Nonnull)fromBytes_: (uint64_t)bytes NS_SWIFT_NAME(fromBytes(bytes:));
	+(NSString* _Nonnull)fromBytes_1: (uint64_t)bytes digits: (uint32_t)digits NS_SWIFT_NAME(fromBytes(_:_:));
	+(NSString* _Nonnull)fromBytes_1_: (uint64_t)bytes digits: (uint32_t)digits NS_SWIFT_NAME(fromBytes(bytes:digits:));
	+(NSString* _Nonnull)fromNumber: (uint64_t)value NS_SWIFT_NAME(fromNumber(_:));
	+(NSString* _Nonnull)fromNumber_: (uint64_t)value NS_SWIFT_NAME(fromNumber(value:));
	+(NSString* _Nonnull)fromNumber_1: (uint64_t)value digits: (uint32_t)digits NS_SWIFT_NAME(fromNumber(_:_:));
	+(NSString* _Nonnull)fromNumber_1_: (uint64_t)value digits: (uint32_t)digits NS_SWIFT_NAME(fromNumber(value:digits:));
	+(NSString* _Nonnull)fromFrequency: (uint64_t)hz NS_SWIFT_NAME(fromFrequency(_:));
	+(NSString* _Nonnull)fromFrequency_: (uint64_t)hz NS_SWIFT_NAME(fromFrequency(hz:));
	+(NSString* _Nonnull)fromFrequency_1: (uint64_t)hz digits: (uint32_t)digits NS_SWIFT_NAME(fromFrequency(_:_:));
	+(NSString* _Nonnull)fromFrequency_1_: (uint64_t)hz digits: (uint32_t)digits NS_SWIFT_NAME(fromFrequency(hz:digits:));
	+(NSString* _Nonnull)fromLength: (float64_t)distance NS_SWIFT_NAME(fromLength(_:));
	+(NSString* _Nonnull)fromLength_: (float64_t)distance NS_SWIFT_NAME(fromLength(distance:));
	+(NSString* _Nonnull)fromLength_1: (float64_t)distance digits: (uint32_t)digits NS_SWIFT_NAME(fromLength(_:_:));
	+(NSString* _Nonnull)fromLength_1_: (float64_t)distance digits: (uint32_t)digits NS_SWIFT_NAME(fromLength(distance:digits:));
	+(NSString* _Nonnull)fromAngle: (float64_t)angle NS_SWIFT_NAME(fromAngle(_:));
	+(NSString* _Nonnull)fromAngle_: (float64_t)angle NS_SWIFT_NAME(fromAngle(angle:));
	+(NSString* _Nonnull)fromAngle_1: (float64_t)angle digits: (uint32_t)digits NS_SWIFT_NAME(fromAngle(_:_:));
	+(NSString* _Nonnull)fromAngle_1_: (float64_t)angle digits: (uint32_t)digits NS_SWIFT_NAME(fromAngle(angle:digits:));
	+(uint64_t)toBytes: (const char* _Nonnull)str NS_SWIFT_NAME(toBytes(_:));
	+(uint64_t)toBytes_: (const char* _Nonnull)str NS_SWIFT_NAME(toBytes(str:));
	+(uint64_t)toBytes_1: (const char* _Nonnull)str size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toBytes(_:_:));
	+(uint64_t)toBytes_1_: (const char* _Nonnull)str size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toBytes(str:size:));
	+(uint64_t)toNumber: (const char* _Nonnull)str NS_SWIFT_NAME(toNumber(_:));
	+(uint64_t)toNumber_: (const char* _Nonnull)str NS_SWIFT_NAME(toNumber(str:));
	+(uint64_t)toNumber_1: (const char* _Nonnull)str size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toNumber(_:_:));
	+(uint64_t)toNumber_1_: (const char* _Nonnull)str size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toNumber(str:size:));
	+(uint64_t)toFrequency: (const char* _Nonnull)str NS_SWIFT_NAME(toFrequency(_:));
	+(uint64_t)toFrequency_: (const char* _Nonnull)str NS_SWIFT_NAME(toFrequency(str:));
	+(uint64_t)toFrequency_1: (const char* _Nonnull)str size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toFrequency(_:_:));
	+(uint64_t)toFrequency_1_: (const char* _Nonnull)str size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toFrequency(str:size:));
	+(float64_t)toLength: (const char* _Nonnull)str NS_SWIFT_NAME(toLength(_:));
	+(float64_t)toLength_: (const char* _Nonnull)str NS_SWIFT_NAME(toLength(str:));
	+(float64_t)toLength_1: (const char* _Nonnull)str size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toLength(_:_:));
	+(float64_t)toLength_1_: (const char* _Nonnull)str size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toLength(str:size:));
	-(uint64_t)toBytes_2 NS_SWIFT_NAME(toBytes());
	-(uint64_t)toBytes_3: (uint32_t)pos NS_SWIFT_NAME(toBytes(_:));
	-(uint64_t)toBytes_3_: (uint32_t)pos NS_SWIFT_NAME(toBytes(pos:));
	-(uint64_t)toBytes_4: (uint32_t)pos size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toBytes(_:_:));
	-(uint64_t)toBytes_4_: (uint32_t)pos size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toBytes(pos:size:));
	-(uint64_t)toNumber_2 NS_SWIFT_NAME(toNumber());
	-(uint64_t)toNumber_3: (uint32_t)pos NS_SWIFT_NAME(toNumber(_:));
	-(uint64_t)toNumber_3_: (uint32_t)pos NS_SWIFT_NAME(toNumber(pos:));
	-(uint64_t)toNumber_4: (uint32_t)pos size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toNumber(_:_:));
	-(uint64_t)toNumber_4_: (uint32_t)pos size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toNumber(pos:size:));
	-(uint64_t)toFrequency_2 NS_SWIFT_NAME(toFrequency());
	-(uint64_t)toFrequency_3: (uint32_t)pos NS_SWIFT_NAME(toFrequency(_:));
	-(uint64_t)toFrequency_3_: (uint32_t)pos NS_SWIFT_NAME(toFrequency(pos:));
	-(uint64_t)toFrequency_4: (uint32_t)pos size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toFrequency(_:_:));
	-(uint64_t)toFrequency_4_: (uint32_t)pos size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toFrequency(pos:size:));
	-(float64_t)toLength_2 NS_SWIFT_NAME(toLength());
	-(float64_t)toLength_3: (uint32_t)pos NS_SWIFT_NAME(toLength(_:));
	-(float64_t)toLength_3_: (uint32_t)pos NS_SWIFT_NAME(toLength(pos:));
	-(float64_t)toLength_4: (uint32_t)pos size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toLength(_:_:));
	-(float64_t)toLength_4_: (uint32_t)pos size: (uint32_t* _Nullable)size NS_SWIFT_NAME(toLength(pos:size:));
@end

/// Tellusim::App
NS_SWIFT_NAME(App)
TS_CAPI @interface TSApp : NSObject {
		void *impl;
	}
	-(id _Nonnull)init: (int32_t)argc argv: (char* _Nonnull * _Nullable)argv NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_: (int32_t)argc argv: (char* _Nonnull * _Nullable)argv NS_SWIFT_NAME(init(argc:argv:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::App* _Nullable)p;
		-(Tellusim::App* _Nonnull)pointer;
		-(Tellusim::App&)ref;
	#endif
	-(void)clear;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(uint32_t)getDevice NS_SWIFT_NAME(device());
	-(uint32_t)getWidth NS_SWIFT_NAME(width());
	-(uint32_t)getHeight NS_SWIFT_NAME(height());
	-(uint32_t)getMultisample NS_SWIFT_NAME(multisample());
	-(uint32_t)getNumArguments NS_SWIFT_NAME(numArguments());
	-(const TSString* _Nonnull)getArgument: (uint32_t)num NS_SWIFT_NAME(argument(_:));
	-(const TSString* _Nonnull)getArgument_: (uint32_t)num NS_SWIFT_NAME(argument(num:));
	-(NSArray<TSString*>* _Nonnull)getArguments NS_SWIFT_NAME(arguments());
	-(BOOL)isArgument: (const char* _Nonnull)name NS_SWIFT_NAME(isArgument(_:));
	-(BOOL)isArgument_: (const char* _Nonnull)name NS_SWIFT_NAME(isArgument(name:));
	-(const TSString* _Nonnull)getArgument_1: (const char* _Nonnull)name NS_SWIFT_NAME(argument(_:));
	-(const TSString* _Nonnull)getArgument_1_: (const char* _Nonnull)name NS_SWIFT_NAME(argument(name:));
	-(BOOL)create NS_SWIFT_NAME(create());
	-(BOOL)create_1: (TS_Platform)platform NS_SWIFT_NAME(create(_:));
	-(BOOL)create_1_: (TS_Platform)platform NS_SWIFT_NAME(create(platform:));
	-(BOOL)create_2: (TS_Platform)platform version: (uint32_t)version NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_2_: (TS_Platform)platform version: (uint32_t)version NS_SWIFT_NAME(create(platform:version:));
	+(void)setPlatform: (TS_Platform)platform NS_SWIFT_NAME(setPlatform(_:));
	+(void)setPlatform_: (TS_Platform)platform NS_SWIFT_NAME(setPlatform(platform:));
	+(void)setPlatform_1: (TS_Platform)platform device: (uint32_t)device NS_SWIFT_NAME(setPlatform(_:_:));
	+(void)setPlatform_1_: (TS_Platform)platform device: (uint32_t)device NS_SWIFT_NAME(setPlatform(platform:device:));
	+(void)setSize: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setSize(_:_:));
	+(void)setSize_: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setSize(width:height:));
	+(void)setSize_1: (uint32_t)width height: (uint32_t)height multisample: (uint32_t)multisample NS_SWIFT_NAME(setSize(_:_:_:));
	+(void)setSize_1_: (uint32_t)width height: (uint32_t)height multisample: (uint32_t)multisample NS_SWIFT_NAME(setSize(width:height:multisample:));
	+(BOOL)isBuildCore;
	+(BOOL)isBuildDebug;
	+(BOOL)isBuildFloat64;
	+(NSString* _Nonnull)getBuildDate NS_SWIFT_NAME(buildDate());
	+(NSString* _Nonnull)getBuildInfo NS_SWIFT_NAME(buildInfo());
	+(uint32_t)getVersion NS_SWIFT_NAME(version());
	+(uint64_t)getAPIHash NS_SWIFT_NAME(APIHash());
@end

/// Tellusim::Async
NS_SWIFT_NAME(Async)
TS_CAPI @interface TSAsync : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Async* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Async&)p;
		-(Tellusim::Async* _Nonnull)pointer;
		-(Tellusim::Async&)ref;
	#endif
	-(BOOL)equalPtr: (const TSAsync* _Nonnull)p;
	-(TSAsync* _Nonnull)copyPtr;
	-(TSAsync* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSAsync* _Nonnull)null;
	-(BOOL)initialize NS_SWIFT_NAME(initialize());
	-(BOOL)initialize_1: (uint32_t)num NS_SWIFT_NAME(initialize(_:));
	-(BOOL)initialize_1_: (uint32_t)num NS_SWIFT_NAME(initialize(num:));
	-(BOOL)shutdown;
	-(BOOL)isInitialized;
	+(uint32_t)getNumCores NS_SWIFT_NAME(numCores());
	-(uint32_t)getNumThreads NS_SWIFT_NAME(numThreads());
	-(void)clear;
	-(uint32_t)getNumTasks NS_SWIFT_NAME(numTasks());
	-(uint32_t)getNumTasks_1: (BOOL)check NS_SWIFT_NAME(numTasks(_:));
	-(uint32_t)getNumTasks_1_: (BOOL)check NS_SWIFT_NAME(numTasks(check:));
	-(BOOL)check;
	-(BOOL)wait;
@end

/// Tellusim::Stream
NS_SWIFT_NAME(Stream)
TS_CAPI @interface TSStream : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Stream* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Stream&)p;
		-(Tellusim::Stream* _Nonnull)pointer;
		-(Tellusim::Stream&)ref;
	#endif
	-(BOOL)equalPtr: (const TSStream* _Nonnull)p;
	-(TSStream* _Nonnull)copyPtr;
	-(TSStream* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSStream* _Nonnull)null;
	-(TSStream* _Nonnull)move;
	-(BOOL)isOpened;
	-(BOOL)isMapped;
	-(BOOL)isAvailable;
	-(size_t)getSize NS_SWIFT_NAME(size());
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(size_t)tell;
	-(BOOL)seek: (size_t)offset NS_SWIFT_NAME(seek(_:));
	-(BOOL)seek_: (size_t)offset NS_SWIFT_NAME(seek(offset:));
	-(BOOL)seekBack: (size_t)offset NS_SWIFT_NAME(seekBack(_:));
	-(BOOL)seekBack_: (size_t)offset NS_SWIFT_NAME(seekBack(offset:));
	-(BOOL)seekCur: (int64_t)offset NS_SWIFT_NAME(seekCur(_:));
	-(BOOL)seekCur_: (int64_t)offset NS_SWIFT_NAME(seekCur(offset:));
	-(const uint8_t* _Nonnull)getData NS_SWIFT_NAME(data());
	-(size_t)read: (void* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(read(_:_:));
	-(size_t)read_: (void* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(read(dest:size:));
	-(size_t)write: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(write(_:_:));
	-(size_t)write_: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(write(src:size:));
	-(BOOL)flush;
	-(BOOL)puts: (const char* _Nonnull)str NS_SWIFT_NAME(puts(_:));
	-(BOOL)puts_: (const char* _Nonnull)str NS_SWIFT_NAME(puts(str:));
	-(BOOL)puts_1: (const TSString* _Nonnull)str NS_SWIFT_NAME(puts(_:));
	-(BOOL)puts_1_: (const TSString* _Nonnull)str NS_SWIFT_NAME(puts(str:));
	-(BOOL)vprintf: (const char* _Nonnull)format args: (va_list)args NS_SWIFT_NAME(vprintf(_:_:));
	-(BOOL)vprintf_: (const char* _Nonnull)format args: (va_list)args NS_SWIFT_NAME(vprintf(format:args:));
	-(NSString* _Nonnull)gets NS_SWIFT_NAME(gets());
	-(NSString* _Nonnull)gets_1: (BOOL* _Nullable)status NS_SWIFT_NAME(gets(_:));
	-(NSString* _Nonnull)gets_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(gets(status:));
	-(int8_t)readi8 NS_SWIFT_NAME(readi8());
	-(int8_t)readi8_1: (BOOL* _Nullable)status NS_SWIFT_NAME(readi8(_:));
	-(int8_t)readi8_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(readi8(status:));
	-(BOOL)writei8: (int8_t)value NS_SWIFT_NAME(writei8(_:));
	-(BOOL)writei8_: (int8_t)value NS_SWIFT_NAME(writei8(value:));
	-(uint8_t)readu8 NS_SWIFT_NAME(readu8());
	-(uint8_t)readu8_1: (BOOL* _Nullable)status NS_SWIFT_NAME(readu8(_:));
	-(uint8_t)readu8_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(readu8(status:));
	-(BOOL)writeu8: (uint8_t)value NS_SWIFT_NAME(writeu8(_:));
	-(BOOL)writeu8_: (uint8_t)value NS_SWIFT_NAME(writeu8(value:));
	-(int16_t)readi16 NS_SWIFT_NAME(readi16());
	-(int16_t)readi16_1: (BOOL* _Nullable)status NS_SWIFT_NAME(readi16(_:));
	-(int16_t)readi16_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(readi16(status:));
	-(BOOL)writei16: (int16_t)value NS_SWIFT_NAME(writei16(_:));
	-(BOOL)writei16_: (int16_t)value NS_SWIFT_NAME(writei16(value:));
	-(uint16_t)readu16 NS_SWIFT_NAME(readu16());
	-(uint16_t)readu16_1: (BOOL* _Nullable)status NS_SWIFT_NAME(readu16(_:));
	-(uint16_t)readu16_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(readu16(status:));
	-(BOOL)writeu16: (uint16_t)value NS_SWIFT_NAME(writeu16(_:));
	-(BOOL)writeu16_: (uint16_t)value NS_SWIFT_NAME(writeu16(value:));
	-(int32_t)readi32 NS_SWIFT_NAME(readi32());
	-(int32_t)readi32_1: (BOOL* _Nullable)status NS_SWIFT_NAME(readi32(_:));
	-(int32_t)readi32_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(readi32(status:));
	-(BOOL)writei32: (int32_t)value NS_SWIFT_NAME(writei32(_:));
	-(BOOL)writei32_: (int32_t)value NS_SWIFT_NAME(writei32(value:));
	-(uint32_t)readu32 NS_SWIFT_NAME(readu32());
	-(uint32_t)readu32_1: (BOOL* _Nullable)status NS_SWIFT_NAME(readu32(_:));
	-(uint32_t)readu32_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(readu32(status:));
	-(BOOL)writeu32: (uint32_t)value NS_SWIFT_NAME(writeu32(_:));
	-(BOOL)writeu32_: (uint32_t)value NS_SWIFT_NAME(writeu32(value:));
	-(int64_t)readi64 NS_SWIFT_NAME(readi64());
	-(int64_t)readi64_1: (BOOL* _Nullable)status NS_SWIFT_NAME(readi64(_:));
	-(int64_t)readi64_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(readi64(status:));
	-(BOOL)writei64: (int64_t)value NS_SWIFT_NAME(writei64(_:));
	-(BOOL)writei64_: (int64_t)value NS_SWIFT_NAME(writei64(value:));
	-(uint64_t)readu64 NS_SWIFT_NAME(readu64());
	-(uint64_t)readu64_1: (BOOL* _Nullable)status NS_SWIFT_NAME(readu64(_:));
	-(uint64_t)readu64_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(readu64(status:));
	-(BOOL)writeu64: (uint64_t)value NS_SWIFT_NAME(writeu64(_:));
	-(BOOL)writeu64_: (uint64_t)value NS_SWIFT_NAME(writeu64(value:));
	-(float32_t)readf32 NS_SWIFT_NAME(readf32());
	-(float32_t)readf32_1: (BOOL* _Nullable)status NS_SWIFT_NAME(readf32(_:));
	-(float32_t)readf32_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(readf32(status:));
	-(BOOL)writef32: (float32_t)value NS_SWIFT_NAME(writef32(_:));
	-(BOOL)writef32_: (float32_t)value NS_SWIFT_NAME(writef32(value:));
	-(float64_t)readf64 NS_SWIFT_NAME(readf64());
	-(float64_t)readf64_1: (BOOL* _Nullable)status NS_SWIFT_NAME(readf64(_:));
	-(float64_t)readf64_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(readf64(status:));
	-(BOOL)writef64: (float64_t)value NS_SWIFT_NAME(writef64(_:));
	-(BOOL)writef64_: (float64_t)value NS_SWIFT_NAME(writef64(value:));
	-(int32_t)readi32e NS_SWIFT_NAME(readi32e());
	-(int32_t)readi32e_1: (BOOL* _Nullable)status NS_SWIFT_NAME(readi32e(_:));
	-(int32_t)readi32e_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(readi32e(status:));
	-(BOOL)writei32e: (int32_t)value NS_SWIFT_NAME(writei32e(_:));
	-(BOOL)writei32e_: (int32_t)value NS_SWIFT_NAME(writei32e(value:));
	-(uint32_t)readu32e NS_SWIFT_NAME(readu32e());
	-(uint32_t)readu32e_1: (BOOL* _Nullable)status NS_SWIFT_NAME(readu32e(_:));
	-(uint32_t)readu32e_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(readu32e(status:));
	-(BOOL)writeu32e: (uint32_t)value NS_SWIFT_NAME(writeu32e(_:));
	-(BOOL)writeu32e_: (uint32_t)value NS_SWIFT_NAME(writeu32e(value:));
	-(int64_t)readi64e NS_SWIFT_NAME(readi64e());
	-(int64_t)readi64e_1: (BOOL* _Nullable)status NS_SWIFT_NAME(readi64e(_:));
	-(int64_t)readi64e_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(readi64e(status:));
	-(BOOL)writei64e: (int64_t)value NS_SWIFT_NAME(writei64e(_:));
	-(BOOL)writei64e_: (int64_t)value NS_SWIFT_NAME(writei64e(value:));
	-(uint64_t)readu64e NS_SWIFT_NAME(readu64e());
	-(uint64_t)readu64e_1: (BOOL* _Nullable)status NS_SWIFT_NAME(readu64e(_:));
	-(uint64_t)readu64e_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(readu64e(status:));
	-(BOOL)writeu64e: (uint64_t)value NS_SWIFT_NAME(writeu64e(_:));
	-(BOOL)writeu64e_: (uint64_t)value NS_SWIFT_NAME(writeu64e(value:));
	-(NSString* _Nonnull)readString NS_SWIFT_NAME(readString());
	-(NSString* _Nonnull)readString_1: (BOOL* _Nullable)status NS_SWIFT_NAME(readString(_:));
	-(NSString* _Nonnull)readString_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(readString(status:));
	-(BOOL)writeString: (const TSString* _Nonnull)str NS_SWIFT_NAME(writeString(_:));
	-(BOOL)writeString_: (const TSString* _Nonnull)str NS_SWIFT_NAME(writeString(str:));
	-(BOOL)writeString_1: (const char* _Nonnull)str NS_SWIFT_NAME(writeString(_:));
	-(BOOL)writeString_1_: (const char* _Nonnull)str NS_SWIFT_NAME(writeString(str:));
	-(NSString* _Nonnull)readString_2: (char)term NS_SWIFT_NAME(readString(_:));
	-(NSString* _Nonnull)readString_2_: (char)term NS_SWIFT_NAME(readString(term:));
	-(NSString* _Nonnull)readString_3: (char)term status: (BOOL* _Nullable)status NS_SWIFT_NAME(readString(_:_:));
	-(NSString* _Nonnull)readString_3_: (char)term status: (BOOL* _Nullable)status NS_SWIFT_NAME(readString(term:status:));
	-(NSString* _Nonnull)readString_4: (char)term status: (BOOL* _Nullable)status size: (uint32_t)size NS_SWIFT_NAME(readString(_:_:_:));
	-(NSString* _Nonnull)readString_4_: (char)term status: (BOOL* _Nullable)status size: (uint32_t)size NS_SWIFT_NAME(readString(term:status:size:));
	-(BOOL)writeString_2: (const TSString* _Nonnull)str term: (char)term NS_SWIFT_NAME(writeString(_:_:));
	-(BOOL)writeString_2_: (const TSString* _Nonnull)str term: (char)term NS_SWIFT_NAME(writeString(str:term:));
	-(BOOL)writeString_3: (const char* _Nonnull)str term: (char)term NS_SWIFT_NAME(writeString(_:_:));
	-(BOOL)writeString_3_: (const char* _Nonnull)str term: (char)term NS_SWIFT_NAME(writeString(str:term:));
	-(NSString* _Nonnull)readToken NS_SWIFT_NAME(readToken());
	-(NSString* _Nonnull)readToken_1: (BOOL* _Nullable)status NS_SWIFT_NAME(readToken(_:));
	-(NSString* _Nonnull)readToken_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(readToken(status:));
	-(BOOL)readToken_2: (TSString* _Nonnull)dest NS_SWIFT_NAME(readToken(_:));
	-(BOOL)readToken_2_: (TSString* _Nonnull)dest NS_SWIFT_NAME(readToken(dest:));
	-(BOOL)readToken_3: (TSString* _Nonnull)dest clear: (BOOL)clear NS_SWIFT_NAME(readToken(_:_:));
	-(BOOL)readToken_3_: (TSString* _Nonnull)dest clear: (BOOL)clear NS_SWIFT_NAME(readToken(dest:clear:));
	-(NSString* _Nonnull)readLine NS_SWIFT_NAME(readLine());
	-(NSString* _Nonnull)readLine_1: (BOOL* _Nullable)status NS_SWIFT_NAME(readLine(_:));
	-(NSString* _Nonnull)readLine_1_: (BOOL* _Nullable)status NS_SWIFT_NAME(readLine(status:));
	-(BOOL)readLine_2: (TSString* _Nonnull)dest NS_SWIFT_NAME(readLine(_:));
	-(BOOL)readLine_2_: (TSString* _Nonnull)dest NS_SWIFT_NAME(readLine(dest:));
	-(BOOL)readLine_3: (TSString* _Nonnull)dest empty: (BOOL)empty NS_SWIFT_NAME(readLine(_:_:));
	-(BOOL)readLine_3_: (TSString* _Nonnull)dest empty: (BOOL)empty NS_SWIFT_NAME(readLine(dest:empty:));
	-(BOOL)readLine_4: (TSString* _Nonnull)dest empty: (BOOL)empty clear: (BOOL)clear NS_SWIFT_NAME(readLine(_:_:_:));
	-(BOOL)readLine_4_: (TSString* _Nonnull)dest empty: (BOOL)empty clear: (BOOL)clear NS_SWIFT_NAME(readLine(dest:empty:clear:));
	-(size_t)readStream: (TSStream* _Nonnull)dest NS_SWIFT_NAME(readStream(_:));
	-(size_t)readStream_: (TSStream* _Nonnull)dest NS_SWIFT_NAME(readStream(dest:));
	-(size_t)readStream_1: (TSStream* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(readStream(_:_:));
	-(size_t)readStream_1_: (TSStream* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(readStream(dest:size:));
	-(size_t)readStream_2: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(readStream(_:_:_:));
	-(size_t)readStream_2_: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(readStream(dest:size:status:));
	-(size_t)writeStream: (TSStream* _Nonnull)src NS_SWIFT_NAME(writeStream(_:));
	-(size_t)writeStream_: (TSStream* _Nonnull)src NS_SWIFT_NAME(writeStream(src:));
	-(size_t)writeStream_1: (TSStream* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(writeStream(_:_:));
	-(size_t)writeStream_1_: (TSStream* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(writeStream(src:size:));
	-(size_t)writeStream_2: (TSStream* _Nonnull)src size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(writeStream(_:_:_:));
	-(size_t)writeStream_2_: (TSStream* _Nonnull)src size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(writeStream(src:size:status:));
	-(size_t)readZip: (void* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(readZip(_:_:));
	-(size_t)readZip_: (void* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(readZip(dest:size:));
	-(size_t)writeZip: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(writeZip(_:_:));
	-(size_t)writeZip_: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(writeZip(src:size:));
	-(size_t)writeZip_1: (const void* _Nonnull)src size: (size_t)size level: (int32_t)level NS_SWIFT_NAME(writeZip(_:_:_:));
	-(size_t)writeZip_1_: (const void* _Nonnull)src size: (size_t)size level: (int32_t)level NS_SWIFT_NAME(writeZip(src:size:level:));
	-(size_t)writeZipFast: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(writeZipFast(_:_:));
	-(size_t)writeZipFast_: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(writeZipFast(src:size:));
	-(size_t)writeZipBest: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(writeZipBest(_:_:));
	-(size_t)writeZipBest_: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(writeZipBest(src:size:));
	-(size_t)readLz4: (void* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(readLz4(_:_:));
	-(size_t)readLz4_: (void* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(readLz4(dest:size:));
	-(size_t)writeLz4: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(writeLz4(_:_:));
	-(size_t)writeLz4_: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(writeLz4(src:size:));
	-(size_t)writeLz4_1: (const void* _Nonnull)src size: (size_t)size level: (int32_t)level NS_SWIFT_NAME(writeLz4(_:_:_:));
	-(size_t)writeLz4_1_: (const void* _Nonnull)src size: (size_t)size level: (int32_t)level NS_SWIFT_NAME(writeLz4(src:size:level:));
	-(size_t)writeLz4Fast: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(writeLz4Fast(_:_:));
	-(size_t)writeLz4Fast_: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(writeLz4Fast(src:size:));
	-(size_t)writeLz4Best: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(writeLz4Best(_:_:));
	-(size_t)writeLz4Best_: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(writeLz4Best(src:size:));
	-(size_t)decodeZip: (TSStream* _Nonnull)src NS_SWIFT_NAME(decodeZip(_:));
	-(size_t)decodeZip_: (TSStream* _Nonnull)src NS_SWIFT_NAME(decodeZip(src:));
	-(size_t)decodeZip_1: (TSStream* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(decodeZip(_:_:));
	-(size_t)decodeZip_1_: (TSStream* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(decodeZip(src:size:));
	-(size_t)decodeZip_2: (TSStream* _Nonnull)src size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(decodeZip(_:_:_:));
	-(size_t)decodeZip_2_: (TSStream* _Nonnull)src size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(decodeZip(src:size:status:));
	-(size_t)decodeZip_3: (TSStream* _Nonnull)src size: (size_t)size status: (BOOL* _Nullable)status window: (int32_t)window NS_SWIFT_NAME(decodeZip(_:_:_:_:));
	-(size_t)decodeZip_3_: (TSStream* _Nonnull)src size: (size_t)size status: (BOOL* _Nullable)status window: (int32_t)window NS_SWIFT_NAME(decodeZip(src:size:status:window:));
	-(size_t)encodeZip: (TSStream* _Nonnull)dest NS_SWIFT_NAME(encodeZip(_:));
	-(size_t)encodeZip_: (TSStream* _Nonnull)dest NS_SWIFT_NAME(encodeZip(dest:));
	-(size_t)encodeZip_1: (TSStream* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(encodeZip(_:_:));
	-(size_t)encodeZip_1_: (TSStream* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(encodeZip(dest:size:));
	-(size_t)encodeZip_2: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(encodeZip(_:_:_:));
	-(size_t)encodeZip_2_: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(encodeZip(dest:size:status:));
	-(size_t)encodeZip_3: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status level: (int32_t)level NS_SWIFT_NAME(encodeZip(_:_:_:_:));
	-(size_t)encodeZip_3_: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status level: (int32_t)level NS_SWIFT_NAME(encodeZip(dest:size:status:level:));
	-(size_t)encodeZipFast: (TSStream* _Nonnull)dest NS_SWIFT_NAME(encodeZipFast(_:));
	-(size_t)encodeZipFast_: (TSStream* _Nonnull)dest NS_SWIFT_NAME(encodeZipFast(dest:));
	-(size_t)encodeZipFast_1: (TSStream* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(encodeZipFast(_:_:));
	-(size_t)encodeZipFast_1_: (TSStream* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(encodeZipFast(dest:size:));
	-(size_t)encodeZipFast_2: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(encodeZipFast(_:_:_:));
	-(size_t)encodeZipFast_2_: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(encodeZipFast(dest:size:status:));
	-(size_t)encodeZipBest: (TSStream* _Nonnull)dest NS_SWIFT_NAME(encodeZipBest(_:));
	-(size_t)encodeZipBest_: (TSStream* _Nonnull)dest NS_SWIFT_NAME(encodeZipBest(dest:));
	-(size_t)encodeZipBest_1: (TSStream* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(encodeZipBest(_:_:));
	-(size_t)encodeZipBest_1_: (TSStream* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(encodeZipBest(dest:size:));
	-(size_t)encodeZipBest_2: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(encodeZipBest(_:_:_:));
	-(size_t)encodeZipBest_2_: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(encodeZipBest(dest:size:status:));
	-(size_t)decodeLz4: (TSStream* _Nonnull)src NS_SWIFT_NAME(decodeLz4(_:));
	-(size_t)decodeLz4_: (TSStream* _Nonnull)src NS_SWIFT_NAME(decodeLz4(src:));
	-(size_t)decodeLz4_1: (TSStream* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(decodeLz4(_:_:));
	-(size_t)decodeLz4_1_: (TSStream* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(decodeLz4(src:size:));
	-(size_t)decodeLz4_2: (TSStream* _Nonnull)src size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(decodeLz4(_:_:_:));
	-(size_t)decodeLz4_2_: (TSStream* _Nonnull)src size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(decodeLz4(src:size:status:));
	-(size_t)encodeLz4: (TSStream* _Nonnull)dest NS_SWIFT_NAME(encodeLz4(_:));
	-(size_t)encodeLz4_: (TSStream* _Nonnull)dest NS_SWIFT_NAME(encodeLz4(dest:));
	-(size_t)encodeLz4_1: (TSStream* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(encodeLz4(_:_:));
	-(size_t)encodeLz4_1_: (TSStream* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(encodeLz4(dest:size:));
	-(size_t)encodeLz4_2: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(encodeLz4(_:_:_:));
	-(size_t)encodeLz4_2_: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(encodeLz4(dest:size:status:));
	-(size_t)encodeLz4_3: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status level: (int32_t)level NS_SWIFT_NAME(encodeLz4(_:_:_:_:));
	-(size_t)encodeLz4_3_: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status level: (int32_t)level NS_SWIFT_NAME(encodeLz4(dest:size:status:level:));
	-(size_t)encodeLz4Fast: (TSStream* _Nonnull)dest NS_SWIFT_NAME(encodeLz4Fast(_:));
	-(size_t)encodeLz4Fast_: (TSStream* _Nonnull)dest NS_SWIFT_NAME(encodeLz4Fast(dest:));
	-(size_t)encodeLz4Fast_1: (TSStream* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(encodeLz4Fast(_:_:));
	-(size_t)encodeLz4Fast_1_: (TSStream* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(encodeLz4Fast(dest:size:));
	-(size_t)encodeLz4Fast_2: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(encodeLz4Fast(_:_:_:));
	-(size_t)encodeLz4Fast_2_: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(encodeLz4Fast(dest:size:status:));
	-(size_t)encodeLz4Best: (TSStream* _Nonnull)dest NS_SWIFT_NAME(encodeLz4Best(_:));
	-(size_t)encodeLz4Best_: (TSStream* _Nonnull)dest NS_SWIFT_NAME(encodeLz4Best(dest:));
	-(size_t)encodeLz4Best_1: (TSStream* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(encodeLz4Best(_:_:));
	-(size_t)encodeLz4Best_1_: (TSStream* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(encodeLz4Best(dest:size:));
	-(size_t)encodeLz4Best_2: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(encodeLz4Best(_:_:_:));
	-(size_t)encodeLz4Best_2_: (TSStream* _Nonnull)dest size: (size_t)size status: (BOOL* _Nullable)status NS_SWIFT_NAME(encodeLz4Best(dest:size:status:));
@end

/// Tellusim::Blob
NS_SWIFT_NAME(Blob)
TS_CAPI @interface TSBlob : TSStream
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (const char* _Nullable)name NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (const char* _Nullable)name NS_SWIFT_NAME(init(name:));
	-(id _Nonnull)init_3: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_3_: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(name:));
	-(id _Nonnull)init_4: (size_t)size NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_4_: (size_t)size NS_SWIFT_NAME(init(size:));
	-(id _Nonnull)init_5: (size_t)size name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_5_: (size_t)size name: (const char* _Nullable)name NS_SWIFT_NAME(init(size:name:));
	-(id _Nonnull)init_6: (const uint8_t* _Nonnull)data size: (size_t)size NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_6_: (const uint8_t* _Nonnull)data size: (size_t)size NS_SWIFT_NAME(init(data:size:));
	-(id _Nonnull)init_7: (const uint8_t* _Nonnull)data size: (size_t)size name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_7_: (const uint8_t* _Nonnull)data size: (size_t)size name: (const char* _Nullable)name NS_SWIFT_NAME(init(data:size:name:));
	-(id _Nonnull)init_8: (const uint8_t(* _Nonnull)[256])blob NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_8_: (const uint8_t(* _Nonnull)[256])blob NS_SWIFT_NAME(init(blob:));
	-(id _Nonnull)init_9: (const uint8_t(* _Nonnull)[256])blob name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_9_: (const uint8_t(* _Nonnull)[256])blob name: (const char* _Nullable)name NS_SWIFT_NAME(init(blob:name:));
	-(id _Nonnull)init_10: (const TSBlob* _Nonnull)blob move: (BOOL)move NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_10_: (const TSBlob* _Nonnull)blob move: (BOOL)move NS_SWIFT_NAME(init(blob:move:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Blob* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Blob&)p;
		-(Tellusim::Blob* _Nonnull)pointer;
		-(Tellusim::Blob&)ref;
	#endif
	-(BOOL)equalPtr: (const TSBlob* _Nonnull)p;
	-(TSBlob* _Nonnull)copyPtr;
	-(TSBlob* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSBlob* _Nonnull)null;
	-(void)release_ NS_SWIFT_NAME(release());
	-(void)clear;
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(void)setName_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(void)setSize: (size_t)size NS_SWIFT_NAME(setSize(_:));
	-(void)setSize_: (size_t)size NS_SWIFT_NAME(setSize(size:));
	-(void)setCapacity: (size_t)size NS_SWIFT_NAME(setCapacity(_:));
	-(void)setCapacity_: (size_t)size NS_SWIFT_NAME(setCapacity(size:));
	-(size_t)getCapacity NS_SWIFT_NAME(capacity());
	-(BOOL)setData: (const uint8_t* _Nonnull)data size: (size_t)size NS_SWIFT_NAME(setData(_:_:));
	-(BOOL)setData_: (const uint8_t* _Nonnull)data size: (size_t)size NS_SWIFT_NAME(setData(data:size:));
	-(BOOL)setData_1: (const uint8_t(* _Nonnull)[256])blob NS_SWIFT_NAME(setData(_:));
	-(BOOL)setData_1_: (const uint8_t(* _Nonnull)[256])blob NS_SWIFT_NAME(setData(blob:));
	-(BOOL)setData_2: (const TSBlob* _Nonnull)blob NS_SWIFT_NAME(setData(_:));
	-(BOOL)setData_2_: (const TSBlob* _Nonnull)blob NS_SWIFT_NAME(setData(blob:));
	-(const uint8_t* _Nonnull)getData_1 NS_SWIFT_NAME(data());
	-(uint8_t* _Nonnull)getData_2 NS_SWIFT_NAME(data());
	-(NSString* _Nonnull)encodeBase64 NS_SWIFT_NAME(encodeBase64());
	-(NSString* _Nonnull)encodeBase64_1: (size_t)size NS_SWIFT_NAME(encodeBase64(_:));
	-(NSString* _Nonnull)encodeBase64_1_: (size_t)size NS_SWIFT_NAME(encodeBase64(size:));
	-(BOOL)decodeBase64: (const char* _Nonnull)src NS_SWIFT_NAME(decodeBase64(_:));
	-(BOOL)decodeBase64_: (const char* _Nonnull)src NS_SWIFT_NAME(decodeBase64(src:));
	-(void)getMD5: (uint32_t[ _Nonnull 4])hash NS_SWIFT_NAME(MD5(_:));
	-(void)getMD5_: (uint32_t[ _Nonnull 4])hash NS_SWIFT_NAME(MD5(hash:));
	-(void)getMD5_1: (uint32_t[ _Nonnull 4])hash size: (size_t)size NS_SWIFT_NAME(MD5(_:_:));
	-(void)getMD5_1_: (uint32_t[ _Nonnull 4])hash size: (size_t)size NS_SWIFT_NAME(MD5(hash:size:));
	-(NSString* _Nonnull)getMD5_2 NS_SWIFT_NAME(MD5());
	-(NSString* _Nonnull)getMD5_3: (size_t)size NS_SWIFT_NAME(MD5(_:));
	-(NSString* _Nonnull)getMD5_3_: (size_t)size NS_SWIFT_NAME(MD5(size:));
	+(NSString* _Nonnull)getMD5_4: (const TSString* _Nonnull)str NS_SWIFT_NAME(MD5(_:));
	+(NSString* _Nonnull)getMD5_4_: (const TSString* _Nonnull)str NS_SWIFT_NAME(MD5(str:));
	+(NSString* _Nonnull)getMD5_5: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(MD5(_:_:));
	+(NSString* _Nonnull)getMD5_5_: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(MD5(src:size:));
	+(NSString* _Nonnull)getMD5_6: (TSStream* _Nonnull)src NS_SWIFT_NAME(MD5(_:));
	+(NSString* _Nonnull)getMD5_6_: (TSStream* _Nonnull)src NS_SWIFT_NAME(MD5(src:));
	+(NSString* _Nonnull)getMD5_7: (TSStream* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(MD5(_:_:));
	+(NSString* _Nonnull)getMD5_7_: (TSStream* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(MD5(src:size:));
	-(void)getSHA1: (uint32_t[ _Nonnull 5])hash NS_SWIFT_NAME(SHA1(_:));
	-(void)getSHA1_: (uint32_t[ _Nonnull 5])hash NS_SWIFT_NAME(SHA1(hash:));
	-(void)getSHA1_1: (uint32_t[ _Nonnull 5])hash size: (size_t)size NS_SWIFT_NAME(SHA1(_:_:));
	-(void)getSHA1_1_: (uint32_t[ _Nonnull 5])hash size: (size_t)size NS_SWIFT_NAME(SHA1(hash:size:));
	-(NSString* _Nonnull)getSHA1_2 NS_SWIFT_NAME(SHA1());
	-(NSString* _Nonnull)getSHA1_3: (size_t)size NS_SWIFT_NAME(SHA1(_:));
	-(NSString* _Nonnull)getSHA1_3_: (size_t)size NS_SWIFT_NAME(SHA1(size:));
	+(NSString* _Nonnull)getSHA1_4: (const TSString* _Nonnull)str NS_SWIFT_NAME(SHA1(_:));
	+(NSString* _Nonnull)getSHA1_4_: (const TSString* _Nonnull)str NS_SWIFT_NAME(SHA1(str:));
	+(NSString* _Nonnull)getSHA1_5: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(SHA1(_:_:));
	+(NSString* _Nonnull)getSHA1_5_: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(SHA1(src:size:));
	+(NSString* _Nonnull)getSHA1_6: (TSStream* _Nonnull)src NS_SWIFT_NAME(SHA1(_:));
	+(NSString* _Nonnull)getSHA1_6_: (TSStream* _Nonnull)src NS_SWIFT_NAME(SHA1(src:));
	+(NSString* _Nonnull)getSHA1_7: (TSStream* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(SHA1(_:_:));
	+(NSString* _Nonnull)getSHA1_7_: (TSStream* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(SHA1(src:size:));
@end

/// Tellusim::File
NS_SWIFT_NAME(File)
TS_CAPI @interface TSFile : TSStream
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::File* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::File&)p;
		-(Tellusim::File* _Nonnull)pointer;
		-(Tellusim::File&)ref;
	#endif
	-(BOOL)equalPtr: (const TSFile* _Nonnull)p;
	-(TSFile* _Nonnull)copyPtr;
	-(TSFile* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFile* _Nonnull)null;
	-(BOOL)open: (const char* _Nonnull)name mode: (const char* _Nonnull)mode NS_SWIFT_NAME(open(_:_:));
	-(BOOL)open_: (const char* _Nonnull)name mode: (const char* _Nonnull)mode NS_SWIFT_NAME(open(name:mode:));
	-(BOOL)open_1: (const TSString* _Nonnull)name mode: (const char* _Nonnull)mode NS_SWIFT_NAME(open(_:_:));
	-(BOOL)open_1_: (const TSString* _Nonnull)name mode: (const char* _Nonnull)mode NS_SWIFT_NAME(open(name:mode:));
	-(BOOL)open_2: (int32_t)fd name: (const char* _Nonnull)name mode: (const char* _Nonnull)mode NS_SWIFT_NAME(open(_:_:_:));
	-(BOOL)open_2_: (int32_t)fd name: (const char* _Nonnull)name mode: (const char* _Nonnull)mode NS_SWIFT_NAME(open(fd:name:mode:));
	-(BOOL)popen: (const char* _Nonnull)command mode: (const char* _Nonnull)mode NS_SWIFT_NAME(popen(_:_:));
	-(BOOL)popen_: (const char* _Nonnull)command mode: (const char* _Nonnull)mode NS_SWIFT_NAME(popen(command:mode:));
	-(BOOL)popen_1: (const TSString* _Nonnull)command mode: (const char* _Nonnull)mode NS_SWIFT_NAME(popen(_:_:));
	-(BOOL)popen_1_: (const TSString* _Nonnull)command mode: (const char* _Nonnull)mode NS_SWIFT_NAME(popen(command:mode:));
	-(void)close;
	+(BOOL)isFile: (const char* _Nonnull)name NS_SWIFT_NAME(isFile(_:));
	+(BOOL)isFile_: (const char* _Nonnull)name NS_SWIFT_NAME(isFile(name:));
	+(BOOL)isFile_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(isFile(_:));
	+(BOOL)isFile_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(isFile(name:));
	+(uint64_t)getMTime: (const char* _Nonnull)name NS_SWIFT_NAME(MTime(_:));
	+(uint64_t)getMTime_: (const char* _Nonnull)name NS_SWIFT_NAME(MTime(name:));
	+(size_t)getSize_1: (const char* _Nonnull)name NS_SWIFT_NAME(size(_:));
	+(size_t)getSize_1_: (const char* _Nonnull)name NS_SWIFT_NAME(size(name:));
	+(BOOL)remove: (const char* _Nonnull)name NS_SWIFT_NAME(remove(_:));
	+(BOOL)remove_: (const char* _Nonnull)name NS_SWIFT_NAME(remove(name:));
@end

/// Tellusim::Socket
NS_SWIFT_NAME(Socket)
TS_CAPI @interface TSSocket : TSStream
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TS_SocketType)type NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (TS_SocketType)type NS_SWIFT_NAME(init(type:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Socket* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Socket&)p;
		-(Tellusim::Socket* _Nonnull)pointer;
		-(Tellusim::Socket&)ref;
	#endif
	-(BOOL)equalPtr: (const TSSocket* _Nonnull)p;
	-(TSSocket* _Nonnull)copyPtr;
	-(TSSocket* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSSocket* _Nonnull)null;
	-(BOOL)open: (uint16_t)port NS_SWIFT_NAME(open(_:));
	-(BOOL)open_: (uint16_t)port NS_SWIFT_NAME(open(port:));
	-(BOOL)open_1: (uint16_t)port num: (uint16_t)num NS_SWIFT_NAME(open(_:_:));
	-(BOOL)open_1_: (uint16_t)port num: (uint16_t)num NS_SWIFT_NAME(open(port:num:));
	-(BOOL)open_2: (const char* _Nonnull)name port: (uint16_t)port NS_SWIFT_NAME(open(_:_:));
	-(BOOL)open_2_: (const char* _Nonnull)name port: (uint16_t)port NS_SWIFT_NAME(open(name:port:));
	-(BOOL)open_3: (const TSString* _Nonnull)name port: (uint16_t)port NS_SWIFT_NAME(open(_:_:));
	-(BOOL)open_3_: (const TSString* _Nonnull)name port: (uint16_t)port NS_SWIFT_NAME(open(name:port:));
	-(void)close;
	-(BOOL)connect: (uint32_t)sec NS_SWIFT_NAME(connect(_:));
	-(BOOL)connect_: (uint32_t)sec NS_SWIFT_NAME(connect(sec:));
	-(BOOL)connect_1: (uint32_t)sec usec: (uint32_t)usec NS_SWIFT_NAME(connect(_:_:));
	-(BOOL)connect_1_: (uint32_t)sec usec: (uint32_t)usec NS_SWIFT_NAME(connect(sec:usec:));
	-(BOOL)accept: (TSSocket* _Nonnull)socket NS_SWIFT_NAME(accept(_:));
	-(BOOL)accept_: (TSSocket* _Nonnull)socket NS_SWIFT_NAME(accept(socket:));
	-(BOOL)select: (uint32_t)sec NS_SWIFT_NAME(select(_:));
	-(BOOL)select_: (uint32_t)sec NS_SWIFT_NAME(select(sec:));
	-(BOOL)select_1: (uint32_t)sec usec: (uint32_t)usec NS_SWIFT_NAME(select(_:_:));
	-(BOOL)select_1_: (uint32_t)sec usec: (uint32_t)usec NS_SWIFT_NAME(select(sec:usec:));
	-(BOOL)setTimeout: (uint32_t)sec NS_SWIFT_NAME(setTimeout(_:));
	-(BOOL)setTimeout_: (uint32_t)sec NS_SWIFT_NAME(setTimeout(sec:));
	-(uint32_t)getTimeout NS_SWIFT_NAME(timeout());
	-(BOOL)setBlock: (BOOL)block NS_SWIFT_NAME(setBlock(_:));
	-(BOOL)setBlock_: (BOOL)block NS_SWIFT_NAME(setBlock(block:));
	-(BOOL)getBlock NS_SWIFT_NAME(block());
	-(BOOL)setDelay: (BOOL)delay NS_SWIFT_NAME(setDelay(_:));
	-(BOOL)setDelay_: (BOOL)delay NS_SWIFT_NAME(setDelay(delay:));
	-(BOOL)getDelay NS_SWIFT_NAME(delay());
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(void)setName_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(uint16_t)getPort NS_SWIFT_NAME(port());
	-(int32_t)getFD NS_SWIFT_NAME(FD());
	-(TS_SocketType)getType NS_SWIFT_NAME(type());
	+(NSString* _Nonnull)getAddress NS_SWIFT_NAME(address());
	+(NSString* _Nonnull)getAddress_1: (const char* _Nullable)delimiter NS_SWIFT_NAME(address(_:));
	+(NSString* _Nonnull)getAddress_1_: (const char* _Nullable)delimiter NS_SWIFT_NAME(address(delimiter:));
@end

/// Tellusim::SocketSSL
NS_SWIFT_NAME(SocketSSL)
TS_CAPI @interface TSSocketSSL : TSSocket
	-(id _Nonnull)init_3 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::SocketSSL* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::SocketSSL&)p;
		-(Tellusim::SocketSSL* _Nonnull)pointer;
		-(Tellusim::SocketSSL&)ref;
	#endif
	-(id _Nonnull)initSocket: (TSSocket* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSSocket* _Nonnull)getSocket;
	-(BOOL)equalPtr: (const TSSocketSSL* _Nonnull)p;
	-(TSSocketSSL* _Nonnull)copyPtr;
	-(TSSocketSSL* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSSocketSSL* _Nonnull)null;
	-(BOOL)handshake NS_SWIFT_NAME(handshake());
	-(BOOL)handshake_1: (const char* _Nullable)name NS_SWIFT_NAME(handshake(_:));
	-(BOOL)handshake_1_: (const char* _Nullable)name NS_SWIFT_NAME(handshake(name:));
	-(BOOL)accept_1: (TSSocketSSL* _Nonnull)socket NS_SWIFT_NAME(accept(_:));
	-(BOOL)accept_1_: (TSSocketSSL* _Nonnull)socket NS_SWIFT_NAME(accept(socket:));
	-(BOOL)accept_2: (TSSocket* _Nonnull)socket NS_SWIFT_NAME(accept(_:));
	-(BOOL)accept_2_: (TSSocket* _Nonnull)socket NS_SWIFT_NAME(accept(socket:));
	-(BOOL)load: (TSStream* _Nonnull)stream NS_SWIFT_NAME(load(_:));
	-(BOOL)load_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(load(stream:));
	-(BOOL)load_1: (const char* _Nonnull)name NS_SWIFT_NAME(load(_:));
	-(BOOL)load_1_: (const char* _Nonnull)name NS_SWIFT_NAME(load(name:));
	-(BOOL)load_2: (const TSString* _Nonnull)name NS_SWIFT_NAME(load(_:));
	-(BOOL)load_2_: (const TSString* _Nonnull)name NS_SWIFT_NAME(load(name:));
	-(BOOL)isConnected;
@end

/// Tellusim::Source
NS_SWIFT_NAME(Source)
TS_CAPI @interface TSSource : TSStream
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (const uint8_t* _Nonnull)data size: (size_t)size NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (const uint8_t* _Nonnull)data size: (size_t)size NS_SWIFT_NAME(init(data:size:));
	-(id _Nonnull)init_3: (const uint8_t* _Nonnull)data size: (size_t)size name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_3_: (const uint8_t* _Nonnull)data size: (size_t)size name: (const char* _Nullable)name NS_SWIFT_NAME(init(data:size:name:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Source* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Source&)p;
		-(Tellusim::Source* _Nonnull)pointer;
		-(Tellusim::Source&)ref;
	#endif
	-(BOOL)equalPtr: (const TSSource* _Nonnull)p;
	-(TSSource* _Nonnull)copyPtr;
	-(TSSource* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSSource* _Nonnull)null;
	-(BOOL)open: (const char* _Nonnull)name NS_SWIFT_NAME(open(_:));
	-(BOOL)open_: (const char* _Nonnull)name NS_SWIFT_NAME(open(name:));
	-(BOOL)open_1: (const char* _Nonnull)name callback: (BOOL)callback NS_SWIFT_NAME(open(_:_:));
	-(BOOL)open_1_: (const char* _Nonnull)name callback: (BOOL)callback NS_SWIFT_NAME(open(name:callback:));
	-(BOOL)open_2: (const char* _Nonnull)name callback: (BOOL)callback write: (BOOL)write NS_SWIFT_NAME(open(_:_:_:));
	-(BOOL)open_2_: (const char* _Nonnull)name callback: (BOOL)callback write: (BOOL)write NS_SWIFT_NAME(open(name:callback:write:));
	-(BOOL)open_3: (const TSString* _Nonnull)name NS_SWIFT_NAME(open(_:));
	-(BOOL)open_3_: (const TSString* _Nonnull)name NS_SWIFT_NAME(open(name:));
	-(BOOL)open_4: (const TSString* _Nonnull)name callback: (BOOL)callback NS_SWIFT_NAME(open(_:_:));
	-(BOOL)open_4_: (const TSString* _Nonnull)name callback: (BOOL)callback NS_SWIFT_NAME(open(name:callback:));
	-(BOOL)open_5: (const TSString* _Nonnull)name callback: (BOOL)callback write: (BOOL)write NS_SWIFT_NAME(open(_:_:_:));
	-(BOOL)open_5_: (const TSString* _Nonnull)name callback: (BOOL)callback write: (BOOL)write NS_SWIFT_NAME(open(name:callback:write:));
	-(void)close;
	-(void)setName: (const char* _Nonnull)name offset: (size_t)offset size: (size_t)size NS_SWIFT_NAME(setName(_:_:_:));
	-(void)setName_: (const char* _Nonnull)name offset: (size_t)offset size: (size_t)size NS_SWIFT_NAME(setName(name:offset:size:));
	-(void)setName_1: (const TSString* _Nonnull)name offset: (size_t)offset size: (size_t)size NS_SWIFT_NAME(setName(_:_:_:));
	-(void)setName_1_: (const TSString* _Nonnull)name offset: (size_t)offset size: (size_t)size NS_SWIFT_NAME(setName(name:offset:size:));
	-(void)setData: (const uint8_t* _Nonnull)data size: (size_t)size NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_: (const uint8_t* _Nonnull)data size: (size_t)size NS_SWIFT_NAME(setData(data:size:));
	-(void)setData_1: (const uint8_t* _Nonnull)data size: (size_t)size name: (const char* _Nullable)name NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_1_: (const uint8_t* _Nonnull)data size: (size_t)size name: (const char* _Nullable)name NS_SWIFT_NAME(setData(data:size:name:));
	+(BOOL)isSource: (const char* _Nonnull)name NS_SWIFT_NAME(isSource(_:));
	+(BOOL)isSource_: (const char* _Nonnull)name NS_SWIFT_NAME(isSource(name:));
	+(BOOL)isSource_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(isSource(_:));
	+(BOOL)isSource_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(isSource(name:));
	+(uint64_t)getMTime: (const char* _Nonnull)name NS_SWIFT_NAME(MTime(_:));
	+(uint64_t)getMTime_: (const char* _Nonnull)name NS_SWIFT_NAME(MTime(name:));
	+(size_t)getSize_1: (const char* _Nonnull)name NS_SWIFT_NAME(size(_:));
	+(size_t)getSize_1_: (const char* _Nonnull)name NS_SWIFT_NAME(size(name:));
@end

/// Tellusim::Date
NS_SWIFT_NAME(Date)
TS_CAPI @interface TSDate : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	-(id _Nonnull)init_1: (int64_t)time NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (int64_t)time NS_SWIFT_NAME(init(time:));
	-(id _Nonnull)init_2: (int64_t)time local: (BOOL)local NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (int64_t)time local: (BOOL)local NS_SWIFT_NAME(init(time:local:));
	-(id _Nonnull)init_3: (const char* _Nonnull)str NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_3_: (const char* _Nonnull)str NS_SWIFT_NAME(init(str:));
	-(id _Nonnull)init_4: (const char* _Nonnull)str format: (const char* _Nullable)format NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_4_: (const char* _Nonnull)str format: (const char* _Nullable)format NS_SWIFT_NAME(init(str:format:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Date* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Date&)p;
		-(Tellusim::Date* _Nonnull)pointer;
		-(Tellusim::Date&)ref;
	#endif
	-(BOOL)equalPtr: (const TSDate* _Nonnull)p;
	-(TSDate* _Nonnull)copyPtr;
	-(TSDate* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSDate* _Nonnull)null;
	-(void)clear;
	-(void)setTime: (int64_t)time NS_SWIFT_NAME(setTime(_:));
	-(void)setTime_: (int64_t)time NS_SWIFT_NAME(setTime(time:));
	-(void)setTime_1: (int64_t)time local: (BOOL)local NS_SWIFT_NAME(setTime(_:_:));
	-(void)setTime_1_: (int64_t)time local: (BOOL)local NS_SWIFT_NAME(setTime(time:local:));
	-(int64_t)getTime NS_SWIFT_NAME(time());
	-(int64_t)getTime_1: (BOOL)local NS_SWIFT_NAME(time(_:));
	-(int64_t)getTime_1_: (BOOL)local NS_SWIFT_NAME(time(local:));
	-(BOOL)setString: (const char* _Nonnull)str NS_SWIFT_NAME(setString(_:));
	-(BOOL)setString_: (const char* _Nonnull)str NS_SWIFT_NAME(setString(str:));
	-(BOOL)setString_1: (const char* _Nonnull)str format: (const char* _Nullable)format NS_SWIFT_NAME(setString(_:_:));
	-(BOOL)setString_1_: (const char* _Nonnull)str format: (const char* _Nullable)format NS_SWIFT_NAME(setString(str:format:));
	-(NSString* _Nonnull)getString NS_SWIFT_NAME(string());
	-(NSString* _Nonnull)getString_1: (const char* _Nullable)format NS_SWIFT_NAME(string(_:));
	-(NSString* _Nonnull)getString_1_: (const char* _Nullable)format NS_SWIFT_NAME(string(format:));
	-(void)setYear: (uint32_t)year NS_SWIFT_NAME(setYear(_:));
	-(void)setYear_: (uint32_t)year NS_SWIFT_NAME(setYear(year:));
	-(void)setMonth: (uint32_t)month NS_SWIFT_NAME(setMonth(_:));
	-(void)setMonth_: (uint32_t)month NS_SWIFT_NAME(setMonth(month:));
	-(void)setDate: (uint32_t)date NS_SWIFT_NAME(setDate(_:));
	-(void)setDate_: (uint32_t)date NS_SWIFT_NAME(setDate(date:));
	-(void)setDay: (uint32_t)day NS_SWIFT_NAME(setDay(_:));
	-(void)setDay_: (uint32_t)day NS_SWIFT_NAME(setDay(day:));
	-(void)setHours: (uint32_t)hours NS_SWIFT_NAME(setHours(_:));
	-(void)setHours_: (uint32_t)hours NS_SWIFT_NAME(setHours(hours:));
	-(void)setMinutes: (uint32_t)minutes NS_SWIFT_NAME(setMinutes(_:));
	-(void)setMinutes_: (uint32_t)minutes NS_SWIFT_NAME(setMinutes(minutes:));
	-(void)setSeconds: (uint32_t)seconds NS_SWIFT_NAME(setSeconds(_:));
	-(void)setSeconds_: (uint32_t)seconds NS_SWIFT_NAME(setSeconds(seconds:));
	-(uint32_t)getYear NS_SWIFT_NAME(year());
	-(uint32_t)getMonth NS_SWIFT_NAME(month());
	-(uint32_t)getDate NS_SWIFT_NAME(date());
	-(uint32_t)getDay NS_SWIFT_NAME(day());
	-(uint32_t)getHours NS_SWIFT_NAME(hours());
	-(uint32_t)getMinutes NS_SWIFT_NAME(minutes());
	-(uint32_t)getSeconds NS_SWIFT_NAME(seconds());
	+(int32_t)getTimeZone NS_SWIFT_NAME(timeZone());
@end

/// Tellusim::Info
NS_SWIFT_NAME(Info)
TS_CAPI @interface TSInfo : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Info* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Info&)p;
		-(Tellusim::Info* _Nonnull)pointer;
		-(Tellusim::Info&)ref;
	#endif
	-(BOOL)equalPtr: (const TSInfo* _Nonnull)p;
	-(TSInfo* _Nonnull)copyPtr;
	-(TSInfo* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSInfo* _Nonnull)null;
	-(size_t)getSystemMemory NS_SWIFT_NAME(systemMemory());
	-(uint64_t)getSystemUptime NS_SWIFT_NAME(systemUptime());
	-(NSString* _Nonnull)getSystemName NS_SWIFT_NAME(systemName());
	-(NSString* _Nonnull)getSystemVersion NS_SWIFT_NAME(systemVersion());
	-(NSString* _Nonnull)getKernelVersion NS_SWIFT_NAME(kernelVersion());
	-(uint32_t)getCPUCount NS_SWIFT_NAME(CPUCount());
	-(NSString* _Nonnull)getCPUName: (uint32_t)index NS_SWIFT_NAME(CPUName(_:));
	-(NSString* _Nonnull)getCPUName_: (uint32_t)index NS_SWIFT_NAME(CPUName(index:));
	-(NSString* _Nonnull)getCPUVendor: (uint32_t)index NS_SWIFT_NAME(CPUVendor(_:));
	-(NSString* _Nonnull)getCPUVendor_: (uint32_t)index NS_SWIFT_NAME(CPUVendor(index:));
	-(uint32_t)getCPUCores: (uint32_t)index NS_SWIFT_NAME(CPUCores(_:));
	-(uint32_t)getCPUCores_: (uint32_t)index NS_SWIFT_NAME(CPUCores(index:));
	-(uint32_t)getCPUThreads: (uint32_t)index NS_SWIFT_NAME(CPUThreads(_:));
	-(uint32_t)getCPUThreads_: (uint32_t)index NS_SWIFT_NAME(CPUThreads(index:));
	-(uint64_t)getCPUFrequency: (uint32_t)index NS_SWIFT_NAME(CPUFrequency(_:));
	-(uint64_t)getCPUFrequency_: (uint32_t)index NS_SWIFT_NAME(CPUFrequency(index:));
	-(uint32_t)getCPUTemperature: (uint32_t)index NS_SWIFT_NAME(CPUTemperature(_:));
	-(uint32_t)getCPUTemperature_: (uint32_t)index NS_SWIFT_NAME(CPUTemperature(index:));
	-(uint32_t)getCPUUtilization: (uint32_t)index NS_SWIFT_NAME(CPUUtilization(_:));
	-(uint32_t)getCPUUtilization_: (uint32_t)index NS_SWIFT_NAME(CPUUtilization(index:));
	-(uint32_t)getCPUFanSpeed: (uint32_t)index NS_SWIFT_NAME(CPUFanSpeed(_:));
	-(uint32_t)getCPUFanSpeed_: (uint32_t)index NS_SWIFT_NAME(CPUFanSpeed(index:));
	-(uint32_t)getCPUPower: (uint32_t)index NS_SWIFT_NAME(CPUPower(_:));
	-(uint32_t)getCPUPower_: (uint32_t)index NS_SWIFT_NAME(CPUPower(index:));
	-(uint32_t)getGPUCount NS_SWIFT_NAME(GPUCount());
	-(NSString* _Nonnull)getGPUName: (uint32_t)index NS_SWIFT_NAME(GPUName(_:));
	-(NSString* _Nonnull)getGPUName_: (uint32_t)index NS_SWIFT_NAME(GPUName(index:));
	-(NSString* _Nonnull)getGPUVendor: (uint32_t)index NS_SWIFT_NAME(GPUVendor(_:));
	-(NSString* _Nonnull)getGPUVendor_: (uint32_t)index NS_SWIFT_NAME(GPUVendor(index:));
	-(NSString* _Nonnull)getGPUSerial: (uint32_t)index NS_SWIFT_NAME(GPUSerial(_:));
	-(NSString* _Nonnull)getGPUSerial_: (uint32_t)index NS_SWIFT_NAME(GPUSerial(index:));
	-(NSString* _Nonnull)getGPUDevice: (uint32_t)index NS_SWIFT_NAME(GPUDevice(_:));
	-(NSString* _Nonnull)getGPUDevice_: (uint32_t)index NS_SWIFT_NAME(GPUDevice(index:));
	-(NSString* _Nonnull)getGPUVersion: (uint32_t)index NS_SWIFT_NAME(GPUVersion(_:));
	-(NSString* _Nonnull)getGPUVersion_: (uint32_t)index NS_SWIFT_NAME(GPUVersion(index:));
	-(size_t)getGPUMemory: (uint32_t)index NS_SWIFT_NAME(GPUMemory(_:));
	-(size_t)getGPUMemory_: (uint32_t)index NS_SWIFT_NAME(GPUMemory(index:));
	-(uint32_t)getGPUScreens: (uint32_t)index NS_SWIFT_NAME(GPUScreens(_:));
	-(uint32_t)getGPUScreens_: (uint32_t)index NS_SWIFT_NAME(GPUScreens(index:));
	-(uint64_t)getGPUFrequency: (uint32_t)index NS_SWIFT_NAME(GPUFrequency(_:));
	-(uint64_t)getGPUFrequency_: (uint32_t)index NS_SWIFT_NAME(GPUFrequency(index:));
	-(uint32_t)getGPUTemperature: (uint32_t)index NS_SWIFT_NAME(GPUTemperature(_:));
	-(uint32_t)getGPUTemperature_: (uint32_t)index NS_SWIFT_NAME(GPUTemperature(index:));
	-(uint32_t)getGPUUtilization: (uint32_t)index NS_SWIFT_NAME(GPUUtilization(_:));
	-(uint32_t)getGPUUtilization_: (uint32_t)index NS_SWIFT_NAME(GPUUtilization(index:));
	-(uint32_t)getGPUFanSpeed: (uint32_t)index NS_SWIFT_NAME(GPUFanSpeed(_:));
	-(uint32_t)getGPUFanSpeed_: (uint32_t)index NS_SWIFT_NAME(GPUFanSpeed(index:));
	-(uint32_t)getGPUPower: (uint32_t)index NS_SWIFT_NAME(GPUPower(_:));
	-(uint32_t)getGPUPower_: (uint32_t)index NS_SWIFT_NAME(GPUPower(index:));
	-(BOOL)isGPUThrottling: (uint32_t)index NS_SWIFT_NAME(isGPUThrottling(_:));
	-(BOOL)isGPUThrottling_: (uint32_t)index NS_SWIFT_NAME(isGPUThrottling(index:));
@end

/// Tellusim::Directory
NS_SWIFT_NAME(Directory)
TS_CAPI @interface TSDirectory : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Directory* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Directory&)p;
		-(Tellusim::Directory* _Nonnull)pointer;
		-(Tellusim::Directory&)ref;
	#endif
	-(BOOL)equalPtr: (const TSDirectory* _Nonnull)p;
	-(TSDirectory* _Nonnull)copyPtr;
	-(TSDirectory* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSDirectory* _Nonnull)null;
	-(BOOL)open: (const char* _Nonnull)name NS_SWIFT_NAME(open(_:));
	-(BOOL)open_: (const char* _Nonnull)name NS_SWIFT_NAME(open(name:));
	-(BOOL)open_1: (const char* _Nonnull)name children: (BOOL)children NS_SWIFT_NAME(open(_:_:));
	-(BOOL)open_1_: (const char* _Nonnull)name children: (BOOL)children NS_SWIFT_NAME(open(name:children:));
	-(BOOL)open_2: (const TSString* _Nonnull)name NS_SWIFT_NAME(open(_:));
	-(BOOL)open_2_: (const TSString* _Nonnull)name NS_SWIFT_NAME(open(name:));
	-(BOOL)open_3: (const TSString* _Nonnull)name children: (BOOL)children NS_SWIFT_NAME(open(_:_:));
	-(BOOL)open_3_: (const TSString* _Nonnull)name children: (BOOL)children NS_SWIFT_NAME(open(name:children:));
	-(void)close;
	-(BOOL)isOpened;
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(uint32_t)getNumFiles NS_SWIFT_NAME(numFiles());
	-(NSString* _Nonnull)getFileName: (uint32_t)index NS_SWIFT_NAME(fileName(_:));
	-(NSString* _Nonnull)getFileName_: (uint32_t)index NS_SWIFT_NAME(fileName(index:));
	-(TS_DirectoryAttributes)getFileAttributes: (uint32_t)index NS_SWIFT_NAME(fileAttributes(_:));
	-(TS_DirectoryAttributes)getFileAttributes_: (uint32_t)index NS_SWIFT_NAME(fileAttributes(index:));
	-(uint64_t)getFileMTime: (uint32_t)index NS_SWIFT_NAME(fileMTime(_:));
	-(uint64_t)getFileMTime_: (uint32_t)index NS_SWIFT_NAME(fileMTime(index:));
	-(uint64_t)getFileATime: (uint32_t)index NS_SWIFT_NAME(fileATime(_:));
	-(uint64_t)getFileATime_: (uint32_t)index NS_SWIFT_NAME(fileATime(index:));
	-(uint64_t)getFileCTime: (uint32_t)index NS_SWIFT_NAME(fileCTime(_:));
	-(uint64_t)getFileCTime_: (uint32_t)index NS_SWIFT_NAME(fileCTime(index:));
	-(size_t)getFileSize: (uint32_t)index NS_SWIFT_NAME(fileSize(_:));
	-(size_t)getFileSize_: (uint32_t)index NS_SWIFT_NAME(fileSize(index:));
	-(NSArray<TSString*>* _Nonnull)getFiles NS_SWIFT_NAME(files());
	-(uint32_t)getNumDirectories NS_SWIFT_NAME(numDirectories());
	-(NSString* _Nonnull)getDirectoryName: (uint32_t)index NS_SWIFT_NAME(directoryName(_:));
	-(NSString* _Nonnull)getDirectoryName_: (uint32_t)index NS_SWIFT_NAME(directoryName(index:));
	-(TS_DirectoryAttributes)getDirectoryAttributes: (uint32_t)index NS_SWIFT_NAME(directoryAttributes(_:));
	-(TS_DirectoryAttributes)getDirectoryAttributes_: (uint32_t)index NS_SWIFT_NAME(directoryAttributes(index:));
	-(uint64_t)getDirectoryCTime: (uint32_t)index NS_SWIFT_NAME(directoryCTime(_:));
	-(uint64_t)getDirectoryCTime_: (uint32_t)index NS_SWIFT_NAME(directoryCTime(index:));
	-(uint32_t)getDirectorySize: (uint32_t)index NS_SWIFT_NAME(directorySize(_:));
	-(uint32_t)getDirectorySize_: (uint32_t)index NS_SWIFT_NAME(directorySize(index:));
	-(NSArray<TSString*>* _Nonnull)getDirectories NS_SWIFT_NAME(directories());
	+(BOOL)isFile: (const char* _Nonnull)name NS_SWIFT_NAME(isFile(_:));
	+(BOOL)isFile_: (const char* _Nonnull)name NS_SWIFT_NAME(isFile(name:));
	+(BOOL)isFile_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(isFile(_:));
	+(BOOL)isFile_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(isFile(name:));
	+(BOOL)setFileAttributes: (const char* _Nonnull)name attributes: (TS_DirectoryAttributes)attributes NS_SWIFT_NAME(setFileAttributes(_:_:));
	+(BOOL)setFileAttributes_: (const char* _Nonnull)name attributes: (TS_DirectoryAttributes)attributes NS_SWIFT_NAME(setFileAttributes(name:attributes:));
	+(TS_DirectoryAttributes)getFileAttributes_1: (const char* _Nonnull)name NS_SWIFT_NAME(fileAttributes(_:));
	+(TS_DirectoryAttributes)getFileAttributes_1_: (const char* _Nonnull)name NS_SWIFT_NAME(fileAttributes(name:));
	+(BOOL)setFileMTime: (const char* _Nonnull)name time: (uint64_t)time NS_SWIFT_NAME(setFileMTime(_:_:));
	+(BOOL)setFileMTime_: (const char* _Nonnull)name time: (uint64_t)time NS_SWIFT_NAME(setFileMTime(name:time:));
	+(uint64_t)getFileMTime_1: (const char* _Nonnull)name NS_SWIFT_NAME(fileMTime(_:));
	+(uint64_t)getFileMTime_1_: (const char* _Nonnull)name NS_SWIFT_NAME(fileMTime(name:));
	+(uint64_t)getFileATime_1: (const char* _Nonnull)name NS_SWIFT_NAME(fileATime(_:));
	+(uint64_t)getFileATime_1_: (const char* _Nonnull)name NS_SWIFT_NAME(fileATime(name:));
	+(uint64_t)getFileCTime_1: (const char* _Nonnull)name NS_SWIFT_NAME(fileCTime(_:));
	+(uint64_t)getFileCTime_1_: (const char* _Nonnull)name NS_SWIFT_NAME(fileCTime(name:));
	+(size_t)getFileSize_1: (const char* _Nonnull)name NS_SWIFT_NAME(fileSize(_:));
	+(size_t)getFileSize_1_: (const char* _Nonnull)name NS_SWIFT_NAME(fileSize(name:));
	+(size_t)getFileSize_2: (const TSString* _Nonnull)name NS_SWIFT_NAME(fileSize(_:));
	+(size_t)getFileSize_2_: (const TSString* _Nonnull)name NS_SWIFT_NAME(fileSize(name:));
	+(BOOL)removeFile: (const char* _Nonnull)name NS_SWIFT_NAME(removeFile(_:));
	+(BOOL)removeFile_: (const char* _Nonnull)name NS_SWIFT_NAME(removeFile(name:));
	+(BOOL)removeFile_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(removeFile(_:));
	+(BOOL)removeFile_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(removeFile(name:));
	+(BOOL)copyFile: (const char* _Nonnull)name new_name: (const char* _Nonnull)new_name NS_SWIFT_NAME(copyFile(_:_:));
	+(BOOL)copyFile_: (const char* _Nonnull)name new_name: (const char* _Nonnull)new_name NS_SWIFT_NAME(copyFile(name:new_name:));
	+(BOOL)copyFile_1: (const char* _Nonnull)name new_name: (const char* _Nonnull)new_name attributes: (BOOL)attributes NS_SWIFT_NAME(copyFile(_:_:_:));
	+(BOOL)copyFile_1_: (const char* _Nonnull)name new_name: (const char* _Nonnull)new_name attributes: (BOOL)attributes NS_SWIFT_NAME(copyFile(name:new_name:attributes:));
	+(BOOL)copyFile_2: (const TSString* _Nonnull)name new_name: (const TSString* _Nonnull)new_name NS_SWIFT_NAME(copyFile(_:_:));
	+(BOOL)copyFile_2_: (const TSString* _Nonnull)name new_name: (const TSString* _Nonnull)new_name NS_SWIFT_NAME(copyFile(name:new_name:));
	+(BOOL)copyFile_3: (const TSString* _Nonnull)name new_name: (const TSString* _Nonnull)new_name attributes: (BOOL)attributes NS_SWIFT_NAME(copyFile(_:_:_:));
	+(BOOL)copyFile_3_: (const TSString* _Nonnull)name new_name: (const TSString* _Nonnull)new_name attributes: (BOOL)attributes NS_SWIFT_NAME(copyFile(name:new_name:attributes:));
	+(BOOL)isDirectory: (const char* _Nonnull)name NS_SWIFT_NAME(isDirectory(_:));
	+(BOOL)isDirectory_: (const char* _Nonnull)name NS_SWIFT_NAME(isDirectory(name:));
	+(BOOL)isDirectory_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(isDirectory(_:));
	+(BOOL)isDirectory_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(isDirectory(name:));
	+(BOOL)changeDirectory: (const char* _Nonnull)name NS_SWIFT_NAME(changeDirectory(_:));
	+(BOOL)changeDirectory_: (const char* _Nonnull)name NS_SWIFT_NAME(changeDirectory(name:));
	+(BOOL)changeDirectory_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(changeDirectory(_:));
	+(BOOL)changeDirectory_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(changeDirectory(name:));
	+(BOOL)createDirectory: (const char* _Nonnull)name NS_SWIFT_NAME(createDirectory(_:));
	+(BOOL)createDirectory_: (const char* _Nonnull)name NS_SWIFT_NAME(createDirectory(name:));
	+(BOOL)createDirectory_1: (const char* _Nonnull)name children: (BOOL)children NS_SWIFT_NAME(createDirectory(_:_:));
	+(BOOL)createDirectory_1_: (const char* _Nonnull)name children: (BOOL)children NS_SWIFT_NAME(createDirectory(name:children:));
	+(BOOL)createDirectory_2: (const TSString* _Nonnull)name NS_SWIFT_NAME(createDirectory(_:));
	+(BOOL)createDirectory_2_: (const TSString* _Nonnull)name NS_SWIFT_NAME(createDirectory(name:));
	+(BOOL)createDirectory_3: (const TSString* _Nonnull)name children: (BOOL)children NS_SWIFT_NAME(createDirectory(_:_:));
	+(BOOL)createDirectory_3_: (const TSString* _Nonnull)name children: (BOOL)children NS_SWIFT_NAME(createDirectory(name:children:));
	+(BOOL)removeDirectory: (const char* _Nonnull)name NS_SWIFT_NAME(removeDirectory(_:));
	+(BOOL)removeDirectory_: (const char* _Nonnull)name NS_SWIFT_NAME(removeDirectory(name:));
	+(BOOL)removeDirectory_1: (const char* _Nonnull)name children: (BOOL)children NS_SWIFT_NAME(removeDirectory(_:_:));
	+(BOOL)removeDirectory_1_: (const char* _Nonnull)name children: (BOOL)children NS_SWIFT_NAME(removeDirectory(name:children:));
	+(BOOL)removeDirectory_2: (const TSString* _Nonnull)name NS_SWIFT_NAME(removeDirectory(_:));
	+(BOOL)removeDirectory_2_: (const TSString* _Nonnull)name NS_SWIFT_NAME(removeDirectory(name:));
	+(BOOL)removeDirectory_3: (const TSString* _Nonnull)name children: (BOOL)children NS_SWIFT_NAME(removeDirectory(_:_:));
	+(BOOL)removeDirectory_3_: (const TSString* _Nonnull)name children: (BOOL)children NS_SWIFT_NAME(removeDirectory(name:children:));
	+(BOOL)copyDirectory: (const char* _Nonnull)name new_name: (const char* _Nonnull)new_name NS_SWIFT_NAME(copyDirectory(_:_:));
	+(BOOL)copyDirectory_: (const char* _Nonnull)name new_name: (const char* _Nonnull)new_name NS_SWIFT_NAME(copyDirectory(name:new_name:));
	+(BOOL)copyDirectory_1: (const char* _Nonnull)name new_name: (const char* _Nonnull)new_name attributes: (BOOL)attributes NS_SWIFT_NAME(copyDirectory(_:_:_:));
	+(BOOL)copyDirectory_1_: (const char* _Nonnull)name new_name: (const char* _Nonnull)new_name attributes: (BOOL)attributes NS_SWIFT_NAME(copyDirectory(name:new_name:attributes:));
	+(BOOL)copyDirectory_2: (const TSString* _Nonnull)name new_name: (const TSString* _Nonnull)new_name NS_SWIFT_NAME(copyDirectory(_:_:));
	+(BOOL)copyDirectory_2_: (const TSString* _Nonnull)name new_name: (const TSString* _Nonnull)new_name NS_SWIFT_NAME(copyDirectory(name:new_name:));
	+(BOOL)copyDirectory_3: (const TSString* _Nonnull)name new_name: (const TSString* _Nonnull)new_name attributes: (BOOL)attributes NS_SWIFT_NAME(copyDirectory(_:_:_:));
	+(BOOL)copyDirectory_3_: (const TSString* _Nonnull)name new_name: (const TSString* _Nonnull)new_name attributes: (BOOL)attributes NS_SWIFT_NAME(copyDirectory(name:new_name:attributes:));
	+(BOOL)rename: (const char* _Nonnull)name new_name: (const char* _Nonnull)new_name NS_SWIFT_NAME(rename(_:_:));
	+(BOOL)rename_: (const char* _Nonnull)name new_name: (const char* _Nonnull)new_name NS_SWIFT_NAME(rename(name:new_name:));
	+(BOOL)rename_1: (const TSString* _Nonnull)name new_name: (const TSString* _Nonnull)new_name NS_SWIFT_NAME(rename(_:_:));
	+(BOOL)rename_1_: (const TSString* _Nonnull)name new_name: (const TSString* _Nonnull)new_name NS_SWIFT_NAME(rename(name:new_name:));
	+(NSString* _Nonnull)getCurrentDirectory NS_SWIFT_NAME(currentDirectory());
	+(NSString* _Nonnull)getBinaryDirectory NS_SWIFT_NAME(binaryDirectory());
	+(NSString* _Nonnull)getHomeDirectory NS_SWIFT_NAME(homeDirectory());
	+(NSString* _Nonnull)getTempDirectory NS_SWIFT_NAME(tempDirectory());
	+(NSString* _Nonnull)getConfigDirectory NS_SWIFT_NAME(configDirectory());
	+(NSString* _Nonnull)getDocumentsDirectory NS_SWIFT_NAME(documentsDirectory());
	+(NSArray<TSString*>* _Nonnull)getDriveNames NS_SWIFT_NAME(driveNames());
@end

/// Tellusim::Archive
NS_SWIFT_NAME(Archive)
TS_CAPI @interface TSArchive : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Archive* _Nullable)p;
		-(Tellusim::Archive* _Nonnull)pointer;
		-(Tellusim::Archive&)ref;
	#endif
	-(BOOL)open: (const char* _Nonnull)name NS_SWIFT_NAME(open(_:));
	-(BOOL)open_: (const char* _Nonnull)name NS_SWIFT_NAME(open(name:));
	-(BOOL)open_1: (const char* _Nonnull)name type: (const char* _Nullable)type NS_SWIFT_NAME(open(_:_:));
	-(BOOL)open_1_: (const char* _Nonnull)name type: (const char* _Nullable)type NS_SWIFT_NAME(open(name:type:));
	-(BOOL)open_2: (const TSString* _Nonnull)name NS_SWIFT_NAME(open(_:));
	-(BOOL)open_2_: (const TSString* _Nonnull)name NS_SWIFT_NAME(open(name:));
	-(BOOL)open_3: (const TSString* _Nonnull)name type: (const char* _Nullable)type NS_SWIFT_NAME(open(_:_:));
	-(BOOL)open_3_: (const TSString* _Nonnull)name type: (const char* _Nullable)type NS_SWIFT_NAME(open(name:type:));
	-(BOOL)open_4: (TSStream* _Nonnull)stream NS_SWIFT_NAME(open(_:));
	-(BOOL)open_4_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(open(stream:));
	-(BOOL)open_5: (TSStream* _Nonnull)stream type: (const char* _Nullable)type NS_SWIFT_NAME(open(_:_:));
	-(BOOL)open_5_: (TSStream* _Nonnull)stream type: (const char* _Nullable)type NS_SWIFT_NAME(open(stream:type:));
	-(void)close;
	-(BOOL)isOpened;
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(uint32_t)getNumFiles NS_SWIFT_NAME(numFiles());
	-(NSString* _Nonnull)getFileName: (uint32_t)index NS_SWIFT_NAME(fileName(_:));
	-(NSString* _Nonnull)getFileName_: (uint32_t)index NS_SWIFT_NAME(fileName(index:));
	-(uint64_t)getFileMTime: (uint32_t)index NS_SWIFT_NAME(fileMTime(_:));
	-(uint64_t)getFileMTime_: (uint32_t)index NS_SWIFT_NAME(fileMTime(index:));
	-(size_t)getFileSize: (uint32_t)index NS_SWIFT_NAME(fileSize(_:));
	-(size_t)getFileSize_: (uint32_t)index NS_SWIFT_NAME(fileSize(index:));
	-(uint32_t)findFile: (const char* _Nonnull)name NS_SWIFT_NAME(findFile(_:));
	-(uint32_t)findFile_: (const char* _Nonnull)name NS_SWIFT_NAME(findFile(name:));
	-(uint32_t)findFile_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(findFile(_:));
	-(uint32_t)findFile_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(findFile(name:));
	-(BOOL)isFile: (const char* _Nonnull)name NS_SWIFT_NAME(isFile(_:));
	-(BOOL)isFile_: (const char* _Nonnull)name NS_SWIFT_NAME(isFile(name:));
	-(BOOL)isFile_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(isFile(_:));
	-(BOOL)isFile_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(isFile(name:));
	-(TSStream* _Nonnull)openFile: (const char* _Nonnull)name NS_SWIFT_NAME(openFile(_:));
	-(TSStream* _Nonnull)openFile_: (const char* _Nonnull)name NS_SWIFT_NAME(openFile(name:));
	-(TSStream* _Nonnull)openFile_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(openFile(_:));
	-(TSStream* _Nonnull)openFile_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(openFile(name:));
	-(TSStream* _Nonnull)openFile_2: (uint32_t)index NS_SWIFT_NAME(openFile(_:));
	-(TSStream* _Nonnull)openFile_2_: (uint32_t)index NS_SWIFT_NAME(openFile(index:));
@end

/// Tellusim::Image
NS_SWIFT_NAME(Image)
TS_CAPI @interface TSImage : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	-(id _Nonnull)init_1: (const char* _Nonnull)name NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (const char* _Nonnull)name NS_SWIFT_NAME(init(name:));
	-(id _Nonnull)init_2: (const char* _Nonnull)name flags: (TS_ImageFlags)flags NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (const char* _Nonnull)name flags: (TS_ImageFlags)flags NS_SWIFT_NAME(init(name:flags:));
	-(id _Nonnull)init_3: (const char* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_3_: (const char* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset NS_SWIFT_NAME(init(name:flags:offset:));
	-(id _Nonnull)init_4: (TSStream* _Nonnull)stream NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_4_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(init(stream:));
	-(id _Nonnull)init_5: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_5_: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags NS_SWIFT_NAME(init(stream:flags:));
	-(id _Nonnull)init_6: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags offset: (uint32_t)offset NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_6_: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags offset: (uint32_t)offset NS_SWIFT_NAME(init(stream:flags:offset:));
	-(id _Nonnull)init_7: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_7_: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size NS_SWIFT_NAME(init(type:format:size:));
	-(id _Nonnull)init_8: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size flags: (TS_ImageFlags)flags NS_SWIFT_NAME(init(_:_:_:_:));
	-(id _Nonnull)init_8_: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size flags: (TS_ImageFlags)flags NS_SWIFT_NAME(init(type:format:size:flags:));
	-(id _Nonnull)init_9: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size layers: (uint32_t)layers NS_SWIFT_NAME(init(_:_:_:_:));
	-(id _Nonnull)init_9_: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size layers: (uint32_t)layers NS_SWIFT_NAME(init(type:format:size:layers:));
	-(id _Nonnull)init_10: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size layers: (uint32_t)layers flags: (TS_ImageFlags)flags NS_SWIFT_NAME(init(_:_:_:_:_:));
	-(id _Nonnull)init_10_: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size layers: (uint32_t)layers flags: (TS_ImageFlags)flags NS_SWIFT_NAME(init(type:format:size:layers:flags:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Image* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Image&)p;
		-(Tellusim::Image* _Nonnull)pointer;
		-(Tellusim::Image&)ref;
	#endif
	-(BOOL)equalPtr: (const TSImage* _Nonnull)p;
	-(TSImage* _Nonnull)copyPtr;
	-(TSImage* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSImage* _Nonnull)null;
	-(void)clear;
	-(BOOL)isLoaded;
	-(BOOL)isAllocated;
	-(TS_ImageType)getType NS_SWIFT_NAME(type());
	+(NSString* _Nonnull)getTypeName: (TS_ImageType)type NS_SWIFT_NAME(typeName(_:));
	+(NSString* _Nonnull)getTypeName_: (TS_ImageType)type NS_SWIFT_NAME(typeName(type:));
	-(NSString* _Nonnull)getTypeName_1 NS_SWIFT_NAME(typeName());
	-(BOOL)is2DType;
	-(BOOL)is3DType;
	-(BOOL)isCubeType;
	-(TS_Format)getFormat NS_SWIFT_NAME(format());
	-(NSString* _Nonnull)getFormatName NS_SWIFT_NAME(formatName());
	-(BOOL)isColorFormat;
	-(BOOL)isDepthFormat;
	-(BOOL)isPixelFormat;
	-(BOOL)isPlainFormat;
	-(BOOL)isMixedFormat;
	-(BOOL)isBlockFormat;
	-(BOOL)isStencilFormat;
	-(BOOL)isNormFormat;
	-(BOOL)isSRGBFormat;
	-(BOOL)isFloatFormat;
	-(BOOL)isSignedFormat;
	-(BOOL)isUnsignedFormat;
	-(BOOL)isIntegerFormat;
	-(BOOL)isi8Format;
	-(BOOL)isu8Format;
	-(BOOL)is8BitFormat;
	-(BOOL)isi16Format;
	-(BOOL)isu16Format;
	-(BOOL)isf16Format;
	-(BOOL)is16BitFormat;
	-(BOOL)isi32Format;
	-(BOOL)isu32Format;
	-(BOOL)isf32Format;
	-(BOOL)is32BitFormat;
	-(BOOL)isi64Format;
	-(BOOL)isu64Format;
	-(BOOL)isf64Format;
	-(BOOL)is64BitFormat;
	-(BOOL)isBC15Format;
	-(BOOL)isBC67Format;
	-(BOOL)isETC2Format;
	-(BOOL)isASTCFormat;
	-(uint32_t)getComponents NS_SWIFT_NAME(components());
	-(uint32_t)getPixelSize NS_SWIFT_NAME(pixelSize());
	-(uint32_t)getBlockSize NS_SWIFT_NAME(blockSize());
	-(uint32_t)getBlockWidth NS_SWIFT_NAME(blockWidth());
	-(uint32_t)getBlockHeight NS_SWIFT_NAME(blockHeight());
	-(uint32_t)getWidth NS_SWIFT_NAME(width());
	-(uint32_t)getHeight NS_SWIFT_NAME(height());
	-(uint32_t)getDepth NS_SWIFT_NAME(depth());
	-(uint32_t)getFaces NS_SWIFT_NAME(faces());
	-(uint32_t)getLayers NS_SWIFT_NAME(layers());
	-(uint32_t)getMipmaps NS_SWIFT_NAME(mipmaps());
	-(uint32_t)findMipmap: (TSSize)size NS_SWIFT_NAME(findMipmap(_:));
	-(uint32_t)findMipmap_: (TSSize)size NS_SWIFT_NAME(findMipmap(size:));
	-(uint32_t)getWidth_1: (uint32_t)mipmap NS_SWIFT_NAME(width(_:));
	-(uint32_t)getWidth_1_: (uint32_t)mipmap NS_SWIFT_NAME(width(mipmap:));
	-(uint32_t)getHeight_1: (uint32_t)mipmap NS_SWIFT_NAME(height(_:));
	-(uint32_t)getHeight_1_: (uint32_t)mipmap NS_SWIFT_NAME(height(mipmap:));
	-(uint32_t)getDepth_1: (uint32_t)mipmap NS_SWIFT_NAME(depth(_:));
	-(uint32_t)getDepth_1_: (uint32_t)mipmap NS_SWIFT_NAME(depth(mipmap:));
	-(BOOL)hasLayers;
	-(BOOL)hasMipmaps;
	-(TSSize)getSize NS_SWIFT_NAME(size());
	-(TSRegion)getRegion NS_SWIFT_NAME(region());
	-(TSSlice)getSlice NS_SWIFT_NAME(slice());
	-(TSSize)getSize_1: (uint32_t)mipmap NS_SWIFT_NAME(size(_:));
	-(TSSize)getSize_1_: (uint32_t)mipmap NS_SWIFT_NAME(size(mipmap:));
	-(TSRegion)getRegion_1: (uint32_t)mipmap NS_SWIFT_NAME(region(_:));
	-(TSRegion)getRegion_1_: (uint32_t)mipmap NS_SWIFT_NAME(region(mipmap:));
	-(TSSlice)getSlice_1: (uint32_t)mipmap NS_SWIFT_NAME(slice(_:));
	-(TSSlice)getSlice_1_: (uint32_t)mipmap NS_SWIFT_NAME(slice(mipmap:));
	-(void)setMetaInfo: (const TSString* _Nonnull)str NS_SWIFT_NAME(setMetaInfo(_:));
	-(void)setMetaInfo_: (const TSString* _Nonnull)str NS_SWIFT_NAME(setMetaInfo(str:));
	-(NSString* _Nonnull)getMetaInfo NS_SWIFT_NAME(metaInfo());
	-(NSString* _Nonnull)getDescription NS_SWIFT_NAME(description());
	-(size_t)getOffset: (TSSlice)slice NS_SWIFT_NAME(offset(_:));
	-(size_t)getOffset_: (TSSlice)slice NS_SWIFT_NAME(offset(slice:));
	-(size_t)getOffset_1: (TSSlice)slice alignment: (uint32_t)alignment NS_SWIFT_NAME(offset(_:_:));
	-(size_t)getOffset_1_: (TSSlice)slice alignment: (uint32_t)alignment NS_SWIFT_NAME(offset(slice:alignment:));
	-(size_t)getStride NS_SWIFT_NAME(stride());
	-(size_t)getStride_1: (uint32_t)mipmap NS_SWIFT_NAME(stride(_:));
	-(size_t)getStride_1_: (uint32_t)mipmap NS_SWIFT_NAME(stride(mipmap:));
	-(size_t)getStride_2: (uint32_t)mipmap alignment: (uint32_t)alignment NS_SWIFT_NAME(stride(_:_:));
	-(size_t)getStride_2_: (uint32_t)mipmap alignment: (uint32_t)alignment NS_SWIFT_NAME(stride(mipmap:alignment:));
	-(size_t)getMipmapSize: (uint32_t)mipmap NS_SWIFT_NAME(mipmapSize(_:));
	-(size_t)getMipmapSize_: (uint32_t)mipmap NS_SWIFT_NAME(mipmapSize(mipmap:));
	-(size_t)getMipmapSize_1: (uint32_t)mipmap alignment: (uint32_t)alignment NS_SWIFT_NAME(mipmapSize(_:_:));
	-(size_t)getMipmapSize_1_: (uint32_t)mipmap alignment: (uint32_t)alignment NS_SWIFT_NAME(mipmapSize(mipmap:alignment:));
	-(size_t)getLayerSize NS_SWIFT_NAME(layerSize());
	-(size_t)getLayerSize_1: (uint32_t)alignment NS_SWIFT_NAME(layerSize(_:));
	-(size_t)getLayerSize_1_: (uint32_t)alignment NS_SWIFT_NAME(layerSize(alignment:));
	-(size_t)getDataSize NS_SWIFT_NAME(dataSize());
	-(size_t)getDataSize_1: (uint32_t)alignment NS_SWIFT_NAME(dataSize(_:));
	-(size_t)getDataSize_1_: (uint32_t)alignment NS_SWIFT_NAME(dataSize(alignment:));
	-(BOOL)create: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size NS_SWIFT_NAME(create(type:format:size:));
	-(BOOL)create_1: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size flags: (TS_ImageFlags)flags NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_1_: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size flags: (TS_ImageFlags)flags NS_SWIFT_NAME(create(type:format:size:flags:));
	-(BOOL)create_2: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size layers: (uint32_t)layers NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_2_: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size layers: (uint32_t)layers NS_SWIFT_NAME(create(type:format:size:layers:));
	-(BOOL)create_3: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size layers: (uint32_t)layers flags: (TS_ImageFlags)flags NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_3_: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size layers: (uint32_t)layers flags: (TS_ImageFlags)flags NS_SWIFT_NAME(create(type:format:size:layers:flags:));
	-(BOOL)create2D: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(create2D(_:_:));
	-(BOOL)create2D_: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(create2D(format:size:));
	-(BOOL)create2D_1: (TS_Format)format size: (uint32_t)size flags: (TS_ImageFlags)flags NS_SWIFT_NAME(create2D(_:_:_:));
	-(BOOL)create2D_1_: (TS_Format)format size: (uint32_t)size flags: (TS_ImageFlags)flags NS_SWIFT_NAME(create2D(format:size:flags:));
	-(BOOL)create3D: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(create3D(_:_:));
	-(BOOL)create3D_: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(create3D(format:size:));
	-(BOOL)create3D_1: (TS_Format)format size: (uint32_t)size flags: (TS_ImageFlags)flags NS_SWIFT_NAME(create3D(_:_:_:));
	-(BOOL)create3D_1_: (TS_Format)format size: (uint32_t)size flags: (TS_ImageFlags)flags NS_SWIFT_NAME(create3D(format:size:flags:));
	-(BOOL)createCube: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(createCube(_:_:));
	-(BOOL)createCube_: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(createCube(format:size:));
	-(BOOL)createCube_1: (TS_Format)format size: (uint32_t)size flags: (TS_ImageFlags)flags NS_SWIFT_NAME(createCube(_:_:_:));
	-(BOOL)createCube_1_: (TS_Format)format size: (uint32_t)size flags: (TS_ImageFlags)flags NS_SWIFT_NAME(createCube(format:size:flags:));
	-(BOOL)create2D_2: (TS_Format)format width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(create2D(_:_:_:));
	-(BOOL)create2D_2_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(create2D(format:width:height:));
	-(BOOL)create2D_3: (TS_Format)format width: (uint32_t)width height: (uint32_t)height flags: (TS_ImageFlags)flags NS_SWIFT_NAME(create2D(_:_:_:_:));
	-(BOOL)create2D_3_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height flags: (TS_ImageFlags)flags NS_SWIFT_NAME(create2D(format:width:height:flags:));
	-(BOOL)create3D_2: (TS_Format)format width: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth NS_SWIFT_NAME(create3D(_:_:_:_:));
	-(BOOL)create3D_2_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth NS_SWIFT_NAME(create3D(format:width:height:depth:));
	-(BOOL)create3D_3: (TS_Format)format width: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth flags: (TS_ImageFlags)flags NS_SWIFT_NAME(create3D(_:_:_:_:_:));
	-(BOOL)create3D_3_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth flags: (TS_ImageFlags)flags NS_SWIFT_NAME(create3D(format:width:height:depth:flags:));
	-(BOOL)create2D_4: (TS_Format)format width: (uint32_t)width height: (uint32_t)height layers: (uint32_t)layers NS_SWIFT_NAME(create2D(_:_:_:_:));
	-(BOOL)create2D_4_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height layers: (uint32_t)layers NS_SWIFT_NAME(create2D(format:width:height:layers:));
	-(BOOL)create2D_5: (TS_Format)format width: (uint32_t)width height: (uint32_t)height layers: (uint32_t)layers flags: (TS_ImageFlags)flags NS_SWIFT_NAME(create2D(_:_:_:_:_:));
	-(BOOL)create2D_5_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height layers: (uint32_t)layers flags: (TS_ImageFlags)flags NS_SWIFT_NAME(create2D(format:width:height:layers:flags:));
	-(BOOL)createCube_2: (TS_Format)format size: (uint32_t)size layers: (uint32_t)layers NS_SWIFT_NAME(createCube(_:_:_:));
	-(BOOL)createCube_2_: (TS_Format)format size: (uint32_t)size layers: (uint32_t)layers NS_SWIFT_NAME(createCube(format:size:layers:));
	-(BOOL)createCube_3: (TS_Format)format size: (uint32_t)size layers: (uint32_t)layers flags: (TS_ImageFlags)flags NS_SWIFT_NAME(createCube(_:_:_:_:));
	-(BOOL)createCube_3_: (TS_Format)format size: (uint32_t)size layers: (uint32_t)layers flags: (TS_ImageFlags)flags NS_SWIFT_NAME(createCube(format:size:layers:flags:));
	-(BOOL)info: (const char* _Nonnull)name NS_SWIFT_NAME(info(_:));
	-(BOOL)info_: (const char* _Nonnull)name NS_SWIFT_NAME(info(name:));
	-(BOOL)info_1: (const char* _Nonnull)name flags: (TS_ImageFlags)flags NS_SWIFT_NAME(info(_:_:));
	-(BOOL)info_1_: (const char* _Nonnull)name flags: (TS_ImageFlags)flags NS_SWIFT_NAME(info(name:flags:));
	-(BOOL)info_2: (const char* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset NS_SWIFT_NAME(info(_:_:_:));
	-(BOOL)info_2_: (const char* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset NS_SWIFT_NAME(info(name:flags:offset:));
	-(BOOL)info_3: (const char* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(_:_:_:_:));
	-(BOOL)info_3_: (const char* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(name:flags:offset:async:));
	-(BOOL)info_4: (const TSString* _Nonnull)name NS_SWIFT_NAME(info(_:));
	-(BOOL)info_4_: (const TSString* _Nonnull)name NS_SWIFT_NAME(info(name:));
	-(BOOL)info_5: (const TSString* _Nonnull)name flags: (TS_ImageFlags)flags NS_SWIFT_NAME(info(_:_:));
	-(BOOL)info_5_: (const TSString* _Nonnull)name flags: (TS_ImageFlags)flags NS_SWIFT_NAME(info(name:flags:));
	-(BOOL)info_6: (const TSString* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset NS_SWIFT_NAME(info(_:_:_:));
	-(BOOL)info_6_: (const TSString* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset NS_SWIFT_NAME(info(name:flags:offset:));
	-(BOOL)info_7: (const TSString* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(_:_:_:_:));
	-(BOOL)info_7_: (const TSString* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(name:flags:offset:async:));
	-(BOOL)info_8: (TSStream* _Nonnull)stream NS_SWIFT_NAME(info(_:));
	-(BOOL)info_8_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(info(stream:));
	-(BOOL)info_9: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags NS_SWIFT_NAME(info(_:_:));
	-(BOOL)info_9_: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags NS_SWIFT_NAME(info(stream:flags:));
	-(BOOL)info_10: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags offset: (uint32_t)offset NS_SWIFT_NAME(info(_:_:_:));
	-(BOOL)info_10_: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags offset: (uint32_t)offset NS_SWIFT_NAME(info(stream:flags:offset:));
	-(BOOL)info_11: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(_:_:_:_:));
	-(BOOL)info_11_: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(stream:flags:offset:async:));
	-(BOOL)info_12: (const char* _Nonnull)name async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(_:_:));
	-(BOOL)info_12_: (const char* _Nonnull)name async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(name:async:));
	-(BOOL)info_13: (const TSString* _Nonnull)name async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(_:_:));
	-(BOOL)info_13_: (const TSString* _Nonnull)name async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(name:async:));
	-(BOOL)info_14: (TSStream* _Nonnull)stream async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(_:_:));
	-(BOOL)info_14_: (TSStream* _Nonnull)stream async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(stream:async:));
	-(BOOL)load: (const char* _Nonnull)name NS_SWIFT_NAME(load(_:));
	-(BOOL)load_: (const char* _Nonnull)name NS_SWIFT_NAME(load(name:));
	-(BOOL)load_1: (const char* _Nonnull)name flags: (TS_ImageFlags)flags NS_SWIFT_NAME(load(_:_:));
	-(BOOL)load_1_: (const char* _Nonnull)name flags: (TS_ImageFlags)flags NS_SWIFT_NAME(load(name:flags:));
	-(BOOL)load_2: (const char* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset NS_SWIFT_NAME(load(_:_:_:));
	-(BOOL)load_2_: (const char* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset NS_SWIFT_NAME(load(name:flags:offset:));
	-(BOOL)load_3: (const char* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(_:_:_:_:));
	-(BOOL)load_3_: (const char* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(name:flags:offset:async:));
	-(BOOL)load_4: (const TSString* _Nonnull)name NS_SWIFT_NAME(load(_:));
	-(BOOL)load_4_: (const TSString* _Nonnull)name NS_SWIFT_NAME(load(name:));
	-(BOOL)load_5: (const TSString* _Nonnull)name flags: (TS_ImageFlags)flags NS_SWIFT_NAME(load(_:_:));
	-(BOOL)load_5_: (const TSString* _Nonnull)name flags: (TS_ImageFlags)flags NS_SWIFT_NAME(load(name:flags:));
	-(BOOL)load_6: (const TSString* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset NS_SWIFT_NAME(load(_:_:_:));
	-(BOOL)load_6_: (const TSString* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset NS_SWIFT_NAME(load(name:flags:offset:));
	-(BOOL)load_7: (const TSString* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(_:_:_:_:));
	-(BOOL)load_7_: (const TSString* _Nonnull)name flags: (TS_ImageFlags)flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(name:flags:offset:async:));
	-(BOOL)load_8: (TSStream* _Nonnull)stream NS_SWIFT_NAME(load(_:));
	-(BOOL)load_8_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(load(stream:));
	-(BOOL)load_9: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags NS_SWIFT_NAME(load(_:_:));
	-(BOOL)load_9_: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags NS_SWIFT_NAME(load(stream:flags:));
	-(BOOL)load_10: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags offset: (uint32_t)offset NS_SWIFT_NAME(load(_:_:_:));
	-(BOOL)load_10_: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags offset: (uint32_t)offset NS_SWIFT_NAME(load(stream:flags:offset:));
	-(BOOL)load_11: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(_:_:_:_:));
	-(BOOL)load_11_: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(stream:flags:offset:async:));
	-(BOOL)load_12: (const char* _Nonnull)name async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(_:_:));
	-(BOOL)load_12_: (const char* _Nonnull)name async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(name:async:));
	-(BOOL)load_13: (const TSString* _Nonnull)name async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(_:_:));
	-(BOOL)load_13_: (const TSString* _Nonnull)name async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(name:async:));
	-(BOOL)load_14: (TSStream* _Nonnull)stream async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(_:_:));
	-(BOOL)load_14_: (TSStream* _Nonnull)stream async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(stream:async:));
	-(BOOL)save: (const char* _Nonnull)name NS_SWIFT_NAME(save(_:));
	-(BOOL)save_: (const char* _Nonnull)name NS_SWIFT_NAME(save(name:));
	-(BOOL)save_1: (const char* _Nonnull)name flags: (TS_ImageFlags)flags NS_SWIFT_NAME(save(_:_:));
	-(BOOL)save_1_: (const char* _Nonnull)name flags: (TS_ImageFlags)flags NS_SWIFT_NAME(save(name:flags:));
	-(BOOL)save_2: (const char* _Nonnull)name flags: (TS_ImageFlags)flags quality: (uint32_t)quality NS_SWIFT_NAME(save(_:_:_:));
	-(BOOL)save_2_: (const char* _Nonnull)name flags: (TS_ImageFlags)flags quality: (uint32_t)quality NS_SWIFT_NAME(save(name:flags:quality:));
	-(BOOL)save_3: (const TSString* _Nonnull)name NS_SWIFT_NAME(save(_:));
	-(BOOL)save_3_: (const TSString* _Nonnull)name NS_SWIFT_NAME(save(name:));
	-(BOOL)save_4: (const TSString* _Nonnull)name flags: (TS_ImageFlags)flags NS_SWIFT_NAME(save(_:_:));
	-(BOOL)save_4_: (const TSString* _Nonnull)name flags: (TS_ImageFlags)flags NS_SWIFT_NAME(save(name:flags:));
	-(BOOL)save_5: (const TSString* _Nonnull)name flags: (TS_ImageFlags)flags quality: (uint32_t)quality NS_SWIFT_NAME(save(_:_:_:));
	-(BOOL)save_5_: (const TSString* _Nonnull)name flags: (TS_ImageFlags)flags quality: (uint32_t)quality NS_SWIFT_NAME(save(name:flags:quality:));
	-(BOOL)save_6: (TSStream* _Nonnull)stream NS_SWIFT_NAME(save(_:));
	-(BOOL)save_6_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(save(stream:));
	-(BOOL)save_7: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags NS_SWIFT_NAME(save(_:_:));
	-(BOOL)save_7_: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags NS_SWIFT_NAME(save(stream:flags:));
	-(BOOL)save_8: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags quality: (uint32_t)quality NS_SWIFT_NAME(save(_:_:_:));
	-(BOOL)save_8_: (TSStream* _Nonnull)stream flags: (TS_ImageFlags)flags quality: (uint32_t)quality NS_SWIFT_NAME(save(stream:flags:quality:));
	-(BOOL)swap: (uint32_t)component_0 component_1: (uint32_t)component_1 NS_SWIFT_NAME(swap(_:_:));
	-(BOOL)swap_: (uint32_t)component_0 component_1: (uint32_t)component_1 NS_SWIFT_NAME(swap(component_0:component_1:));
	-(BOOL)copy: (const TSImage* _Nonnull)src dest_component: (uint32_t)dest_component src_component: (uint32_t)src_component NS_SWIFT_NAME(copy(_:_:_:));
	-(BOOL)copy_: (const TSImage* _Nonnull)src dest_component: (uint32_t)dest_component src_component: (uint32_t)src_component NS_SWIFT_NAME(copy(src:dest_component:src_component:));
	-(BOOL)flipX: (TSRegion)region slice: (TSSlice)slice NS_SWIFT_NAME(flipX(_:_:));
	-(BOOL)flipX_: (TSRegion)region slice: (TSSlice)slice NS_SWIFT_NAME(flipX(region:slice:));
	-(BOOL)flipX_1: (TSRegion)region NS_SWIFT_NAME(flipX(_:));
	-(BOOL)flipX_1_: (TSRegion)region NS_SWIFT_NAME(flipX(region:));
	-(BOOL)flipX_2 NS_SWIFT_NAME(flipX());
	-(BOOL)flipY: (TSRegion)region slice: (TSSlice)slice NS_SWIFT_NAME(flipY(_:_:));
	-(BOOL)flipY_: (TSRegion)region slice: (TSSlice)slice NS_SWIFT_NAME(flipY(region:slice:));
	-(BOOL)flipY_1: (TSRegion)region NS_SWIFT_NAME(flipY(_:));
	-(BOOL)flipY_1_: (TSRegion)region NS_SWIFT_NAME(flipY(region:));
	-(BOOL)flipY_2 NS_SWIFT_NAME(flipY());
	-(BOOL)copy_1: (const TSImage* _Nonnull)src dest_origin: (TSOrigin)dest_origin src_region: (TSRegion)src_region dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(copy(_:_:_:_:_:));
	-(BOOL)copy_1_: (const TSImage* _Nonnull)src dest_origin: (TSOrigin)dest_origin src_region: (TSRegion)src_region dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(copy(src:dest_origin:src_region:dest_slice:src_slice:));
	-(BOOL)copy_2: (const TSImage* _Nonnull)src dest_origin: (TSOrigin)dest_origin src_region: (TSRegion)src_region NS_SWIFT_NAME(copy(_:_:_:));
	-(BOOL)copy_2_: (const TSImage* _Nonnull)src dest_origin: (TSOrigin)dest_origin src_region: (TSRegion)src_region NS_SWIFT_NAME(copy(src:dest_origin:src_region:));
	-(BOOL)copy_3: (const TSImage* _Nonnull)src dest_origin: (TSOrigin)dest_origin dest_slice: (TSSlice)dest_slice NS_SWIFT_NAME(copy(_:_:_:));
	-(BOOL)copy_3_: (const TSImage* _Nonnull)src dest_origin: (TSOrigin)dest_origin dest_slice: (TSSlice)dest_slice NS_SWIFT_NAME(copy(src:dest_origin:dest_slice:));
	-(BOOL)copy_4: (const TSImage* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(copy(_:_:_:));
	-(BOOL)copy_4_: (const TSImage* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(copy(src:dest_slice:src_slice:));
	-(BOOL)copy_5: (const TSImage* _Nonnull)src dest_origin: (TSOrigin)dest_origin NS_SWIFT_NAME(copy(_:_:));
	-(BOOL)copy_5_: (const TSImage* _Nonnull)src dest_origin: (TSOrigin)dest_origin NS_SWIFT_NAME(copy(src:dest_origin:));
	-(BOOL)copy_6: (const TSImage* _Nonnull)src dest_slice: (TSSlice)dest_slice NS_SWIFT_NAME(copy(_:_:));
	-(BOOL)copy_6_: (const TSImage* _Nonnull)src dest_slice: (TSSlice)dest_slice NS_SWIFT_NAME(copy(src:dest_slice:));
	-(TSImage* _Nonnull)toType: (TS_ImageType)type flags: (TS_ImageFlags)flags NS_SWIFT_NAME(toType(_:_:));
	-(TSImage* _Nonnull)toType_: (TS_ImageType)type flags: (TS_ImageFlags)flags NS_SWIFT_NAME(toType(type:flags:));
	-(TSImage* _Nonnull)toType_1: (TS_ImageType)type flags: (TS_ImageFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(toType(_:_:_:));
	-(TSImage* _Nonnull)toType_1_: (TS_ImageType)type flags: (TS_ImageFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(toType(type:flags:async:));
	-(TSImage* _Nonnull)toType_2: (TS_ImageType)type NS_SWIFT_NAME(toType(_:));
	-(TSImage* _Nonnull)toType_2_: (TS_ImageType)type NS_SWIFT_NAME(toType(type:));
	-(TSImage* _Nonnull)toType_3: (TS_ImageType)type async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(toType(_:_:));
	-(TSImage* _Nonnull)toType_3_: (TS_ImageType)type async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(toType(type:async:));
	-(TSImage* _Nonnull)toFormat: (TS_Format)format flags: (TS_ImageFlags)flags NS_SWIFT_NAME(toFormat(_:_:));
	-(TSImage* _Nonnull)toFormat_: (TS_Format)format flags: (TS_ImageFlags)flags NS_SWIFT_NAME(toFormat(format:flags:));
	-(TSImage* _Nonnull)toFormat_1: (TS_Format)format flags: (TS_ImageFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(toFormat(_:_:_:));
	-(TSImage* _Nonnull)toFormat_1_: (TS_Format)format flags: (TS_ImageFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(toFormat(format:flags:async:));
	-(TSImage* _Nonnull)toFormat_2: (TS_Format)format NS_SWIFT_NAME(toFormat(_:));
	-(TSImage* _Nonnull)toFormat_2_: (TS_Format)format NS_SWIFT_NAME(toFormat(format:));
	-(TSImage* _Nonnull)toFormat_3: (TS_Format)format async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(toFormat(_:_:));
	-(TSImage* _Nonnull)toFormat_3_: (TS_Format)format async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(toFormat(format:async:));
	-(TSImage* _Nonnull)getSlice_2: (TSSlice)slice NS_SWIFT_NAME(slice(_:));
	-(TSImage* _Nonnull)getSlice_2_: (TSSlice)slice NS_SWIFT_NAME(slice(slice:));
	-(TSImage* _Nonnull)getComponent: (uint32_t)component NS_SWIFT_NAME(component(_:));
	-(TSImage* _Nonnull)getComponent_: (uint32_t)component NS_SWIFT_NAME(component(component:));
	-(TSImage* _Nonnull)getRegion_2: (TSRegion)region slice: (TSSlice)slice NS_SWIFT_NAME(region(_:_:));
	-(TSImage* _Nonnull)getRegion_2_: (TSRegion)region slice: (TSSlice)slice NS_SWIFT_NAME(region(region:slice:));
	-(TSImage* _Nonnull)getRegion_3: (TSRegion)region NS_SWIFT_NAME(region(_:));
	-(TSImage* _Nonnull)getRegion_3_: (TSRegion)region NS_SWIFT_NAME(region(region:));
	-(TSImage* _Nonnull)getRotated: (int32_t)angle slice: (TSSlice)slice NS_SWIFT_NAME(rotated(_:_:));
	-(TSImage* _Nonnull)getRotated_: (int32_t)angle slice: (TSSlice)slice NS_SWIFT_NAME(rotated(angle:slice:));
	-(TSImage* _Nonnull)getRotated_1: (int32_t)angle NS_SWIFT_NAME(rotated(_:));
	-(TSImage* _Nonnull)getRotated_1_: (int32_t)angle NS_SWIFT_NAME(rotated(angle:));
	-(TSImage* _Nonnull)getResized: (TSSize)size min: (TS_ImageFilter)min mag: (TS_ImageFilter)mag flags: (TS_ImageFlags)flags NS_SWIFT_NAME(resized(_:_:_:_:));
	-(TSImage* _Nonnull)getResized_: (TSSize)size min: (TS_ImageFilter)min mag: (TS_ImageFilter)mag flags: (TS_ImageFlags)flags NS_SWIFT_NAME(resized(size:min:mag:flags:));
	-(TSImage* _Nonnull)getResized_1: (TSSize)size min: (TS_ImageFilter)min mag: (TS_ImageFilter)mag flags: (TS_ImageFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(resized(_:_:_:_:_:));
	-(TSImage* _Nonnull)getResized_1_: (TSSize)size min: (TS_ImageFilter)min mag: (TS_ImageFilter)mag flags: (TS_ImageFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(resized(size:min:mag:flags:async:));
	-(TSImage* _Nonnull)getResized_2: (TSSize)size min: (TS_ImageFilter)min NS_SWIFT_NAME(resized(_:_:));
	-(TSImage* _Nonnull)getResized_2_: (TSSize)size min: (TS_ImageFilter)min NS_SWIFT_NAME(resized(size:min:));
	-(TSImage* _Nonnull)getResized_3: (TSSize)size min: (TS_ImageFilter)min mag: (TS_ImageFilter)mag NS_SWIFT_NAME(resized(_:_:_:));
	-(TSImage* _Nonnull)getResized_3_: (TSSize)size min: (TS_ImageFilter)min mag: (TS_ImageFilter)mag NS_SWIFT_NAME(resized(size:min:mag:));
	-(TSImage* _Nonnull)getResized_4: (TSSize)size min: (TS_ImageFilter)min mag: (TS_ImageFilter)mag async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(resized(_:_:_:_:));
	-(TSImage* _Nonnull)getResized_4_: (TSSize)size min: (TS_ImageFilter)min mag: (TS_ImageFilter)mag async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(resized(size:min:mag:async:));
	-(TSImage* _Nonnull)getResized_5: (TSSize)size NS_SWIFT_NAME(resized(_:));
	-(TSImage* _Nonnull)getResized_5_: (TSSize)size NS_SWIFT_NAME(resized(size:));
	-(TSImage* _Nonnull)getResized_6: (TSSize)size async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(resized(_:_:));
	-(TSImage* _Nonnull)getResized_6_: (TSSize)size async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(resized(size:async:));
	-(TSImage* _Nonnull)getMipmapped: (TS_ImageFilter)filter flags: (TS_ImageFlags)flags NS_SWIFT_NAME(mipmapped(_:_:));
	-(TSImage* _Nonnull)getMipmapped_: (TS_ImageFilter)filter flags: (TS_ImageFlags)flags NS_SWIFT_NAME(mipmapped(filter:flags:));
	-(TSImage* _Nonnull)getMipmapped_1: (TS_ImageFilter)filter flags: (TS_ImageFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(mipmapped(_:_:_:));
	-(TSImage* _Nonnull)getMipmapped_1_: (TS_ImageFilter)filter flags: (TS_ImageFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(mipmapped(filter:flags:async:));
	-(TSImage* _Nonnull)getMipmapped_2: (TS_ImageFilter)filter NS_SWIFT_NAME(mipmapped(_:));
	-(TSImage* _Nonnull)getMipmapped_2_: (TS_ImageFilter)filter NS_SWIFT_NAME(mipmapped(filter:));
	-(TSImage* _Nonnull)getMipmapped_3: (TS_ImageFilter)filter async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(mipmapped(_:_:));
	-(TSImage* _Nonnull)getMipmapped_3_: (TS_ImageFilter)filter async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(mipmapped(filter:async:));
	-(TSImage* _Nonnull)getMipmapped_4 NS_SWIFT_NAME(mipmapped());
	-(TSImage* _Nonnull)getMipmapped_5: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(mipmapped(_:));
	-(TSImage* _Nonnull)getMipmapped_5_: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(mipmapped(async:));
	-(int32_t)compare: (const TSImage* _Nonnull)image NS_SWIFT_NAME(compare(_:));
	-(int32_t)compare_: (const TSImage* _Nonnull)image NS_SWIFT_NAME(compare(image:));
	-(const uint8_t* _Nonnull)getData NS_SWIFT_NAME(data());
	-(const uint8_t* _Nonnull)getData_1: (TSSlice)slice NS_SWIFT_NAME(data(_:));
	-(const uint8_t* _Nonnull)getData_1_: (TSSlice)slice NS_SWIFT_NAME(data(slice:));
	-(uint8_t* _Nonnull)getData_2 NS_SWIFT_NAME(data());
	-(uint8_t* _Nonnull)getData_3: (TSSlice)slice NS_SWIFT_NAME(data(_:));
	-(uint8_t* _Nonnull)getData_3_: (TSSlice)slice NS_SWIFT_NAME(data(slice:));
	-(const uint8_t* _Nonnull)getData_4: (TSOrigin)origin NS_SWIFT_NAME(data(_:));
	-(const uint8_t* _Nonnull)getData_4_: (TSOrigin)origin NS_SWIFT_NAME(data(origin:));
	-(const uint8_t* _Nonnull)getData_5: (TSOrigin)origin slice: (TSSlice)slice NS_SWIFT_NAME(data(_:_:));
	-(const uint8_t* _Nonnull)getData_5_: (TSOrigin)origin slice: (TSSlice)slice NS_SWIFT_NAME(data(origin:slice:));
	-(uint8_t* _Nonnull)getData_6: (TSOrigin)origin NS_SWIFT_NAME(data(_:));
	-(uint8_t* _Nonnull)getData_6_: (TSOrigin)origin NS_SWIFT_NAME(data(origin:));
	-(uint8_t* _Nonnull)getData_7: (TSOrigin)origin slice: (TSSlice)slice NS_SWIFT_NAME(data(_:_:));
	-(uint8_t* _Nonnull)getData_7_: (TSOrigin)origin slice: (TSSlice)slice NS_SWIFT_NAME(data(origin:slice:));
	-(BOOL)setData: (const void* _Nonnull)src NS_SWIFT_NAME(setData(_:));
	-(BOOL)setData_: (const void* _Nonnull)src NS_SWIFT_NAME(setData(src:));
	-(BOOL)setData_1: (const void* _Nonnull)src slice: (TSSlice)slice NS_SWIFT_NAME(setData(_:_:));
	-(BOOL)setData_1_: (const void* _Nonnull)src slice: (TSSlice)slice NS_SWIFT_NAME(setData(src:slice:));
	-(BOOL)setData_2: (const void* _Nonnull)src slice: (TSSlice)slice alignment: (uint32_t)alignment NS_SWIFT_NAME(setData(_:_:_:));
	-(BOOL)setData_2_: (const void* _Nonnull)src slice: (TSSlice)slice alignment: (uint32_t)alignment NS_SWIFT_NAME(setData(src:slice:alignment:));
	-(BOOL)setData_3: (const void* _Nonnull)src slice: (TSSlice)slice alignment: (uint32_t)alignment stride: (size_t)stride NS_SWIFT_NAME(setData(_:_:_:_:));
	-(BOOL)setData_3_: (const void* _Nonnull)src slice: (TSSlice)slice alignment: (uint32_t)alignment stride: (size_t)stride NS_SWIFT_NAME(setData(src:slice:alignment:stride:));
	-(BOOL)getData_8: (void* _Nonnull)dest NS_SWIFT_NAME(data(_:));
	-(BOOL)getData_8_: (void* _Nonnull)dest NS_SWIFT_NAME(data(dest:));
	-(BOOL)getData_9: (void* _Nonnull)dest slice: (TSSlice)slice NS_SWIFT_NAME(data(_:_:));
	-(BOOL)getData_9_: (void* _Nonnull)dest slice: (TSSlice)slice NS_SWIFT_NAME(data(dest:slice:));
	-(BOOL)getData_10: (void* _Nonnull)dest slice: (TSSlice)slice alignment: (uint32_t)alignment NS_SWIFT_NAME(data(_:_:_:));
	-(BOOL)getData_10_: (void* _Nonnull)dest slice: (TSSlice)slice alignment: (uint32_t)alignment NS_SWIFT_NAME(data(dest:slice:alignment:));
	-(BOOL)getData_11: (void* _Nonnull)dest slice: (TSSlice)slice alignment: (uint32_t)alignment stride: (size_t)stride NS_SWIFT_NAME(data(_:_:_:_:));
	-(BOOL)getData_11_: (void* _Nonnull)dest slice: (TSSlice)slice alignment: (uint32_t)alignment stride: (size_t)stride NS_SWIFT_NAME(data(dest:slice:alignment:stride:));
	-(size_t)getMemory NS_SWIFT_NAME(memory());
@end

/// Tellusim::ImageSampler
NS_SWIFT_NAME(ImageSampler)
TS_CAPI @interface TSImageSampler : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	-(id _Nonnull)init_1: (TSImage* _Nonnull)image NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (TSImage* _Nonnull)image NS_SWIFT_NAME(init(image:));
	-(id _Nonnull)init_2: (TSImage* _Nonnull)image slice: (TSSlice)slice NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TSImage* _Nonnull)image slice: (TSSlice)slice NS_SWIFT_NAME(init(image:slice:));
	-(id _Nonnull)init_3: (const TSImage* _Nonnull)image NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_3_: (const TSImage* _Nonnull)image NS_SWIFT_NAME(init(image:));
	-(id _Nonnull)init_4: (const TSImage* _Nonnull)image slice: (TSSlice)slice NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_4_: (const TSImage* _Nonnull)image slice: (TSSlice)slice NS_SWIFT_NAME(init(image:slice:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ImageSampler* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ImageSampler&)p;
		-(Tellusim::ImageSampler* _Nonnull)pointer;
		-(Tellusim::ImageSampler&)ref;
	#endif
	-(void)clear;
	-(BOOL)isCreated;
	-(TS_ImageType)getType NS_SWIFT_NAME(type());
	-(BOOL)is2DType;
	-(BOOL)is3DType;
	-(BOOL)isCubeType;
	-(TS_Format)getFormat NS_SWIFT_NAME(format());
	-(NSString* _Nonnull)getFormatName NS_SWIFT_NAME(formatName());
	-(uint32_t)getWidth NS_SWIFT_NAME(width());
	-(uint32_t)getHeight NS_SWIFT_NAME(height());
	-(uint32_t)getDepth NS_SWIFT_NAME(depth());
	-(uint32_t)getFaces NS_SWIFT_NAME(faces());
	-(size_t)getTexels NS_SWIFT_NAME(texels());
	-(TSSize)getSize NS_SWIFT_NAME(size());
	-(TSRegion)getRegion NS_SWIFT_NAME(region());
	-(size_t)getStride NS_SWIFT_NAME(stride());
	-(size_t)getLayerSize NS_SWIFT_NAME(layerSize());
	-(uint32_t)getPixelSize NS_SWIFT_NAME(pixelSize());
	-(uint32_t)getComponents NS_SWIFT_NAME(components());
	-(const uint8_t* _Nonnull)getData NS_SWIFT_NAME(data());
	-(uint8_t* _Nonnull)getData_1 NS_SWIFT_NAME(data());
	-(BOOL)create: (TSImage* _Nonnull)image NS_SWIFT_NAME(create(_:));
	-(BOOL)create_: (TSImage* _Nonnull)image NS_SWIFT_NAME(create(image:));
	-(BOOL)create_1: (TSImage* _Nonnull)image slice: (TSSlice)slice NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_1_: (TSImage* _Nonnull)image slice: (TSSlice)slice NS_SWIFT_NAME(create(image:slice:));
	-(BOOL)create_2: (const TSImage* _Nonnull)image NS_SWIFT_NAME(create(_:));
	-(BOOL)create_2_: (const TSImage* _Nonnull)image NS_SWIFT_NAME(create(image:));
	-(BOOL)create_3: (const TSImage* _Nonnull)image slice: (TSSlice)slice NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_3_: (const TSImage* _Nonnull)image slice: (TSSlice)slice NS_SWIFT_NAME(create(image:slice:));
	-(BOOL)create_4: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size stride: (size_t)stride data: (void* _Nonnull)data NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_4_: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size stride: (size_t)stride data: (void* _Nonnull)data NS_SWIFT_NAME(create(type:format:size:stride:data:));
	-(BOOL)create_5: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size stride: (size_t)stride data: (const void* _Nonnull)data NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_5_: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size stride: (size_t)stride data: (const void* _Nonnull)data NS_SWIFT_NAME(create(type:format:size:stride:data:));
	-(BOOL)create_6: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size stride: (size_t)stride layer_size: (size_t)layer_size data: (void* _Nonnull)data NS_SWIFT_NAME(create(_:_:_:_:_:_:));
	-(BOOL)create_6_: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size stride: (size_t)stride layer_size: (size_t)layer_size data: (void* _Nonnull)data NS_SWIFT_NAME(create(type:format:size:stride:layer_size:data:));
	-(BOOL)create_7: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size stride: (size_t)stride layer_size: (size_t)layer_size data: (const void* _Nonnull)data NS_SWIFT_NAME(create(_:_:_:_:_:_:));
	-(BOOL)create_7_: (TS_ImageType)type format: (TS_Format)format size: (TSSize)size stride: (size_t)stride layer_size: (size_t)layer_size data: (const void* _Nonnull)data NS_SWIFT_NAME(create(type:format:size:stride:layer_size:data:));
	-(BOOL)clear_1: (TSColor)color NS_SWIFT_NAME(clear(_:));
	-(BOOL)clear_1_: (TSColor)color NS_SWIFT_NAME(clear(color:));
	-(BOOL)clear_2: (TSImageColor)color NS_SWIFT_NAME(clear(_:));
	-(BOOL)clear_2_: (TSImageColor)color NS_SWIFT_NAME(clear(color:));
	-(BOOL)mad: (TSColor)m a: (TSColor)a NS_SWIFT_NAME(mad(_:_:));
	-(BOOL)mad_: (TSColor)m a: (TSColor)a NS_SWIFT_NAME(mad(m:a:));
	-(void)set2D: (uint32_t)x y: (uint32_t)y color: (TSImageColor)color NS_SWIFT_NAME(set2D(_:_:_:));
	-(void)set2D_: (uint32_t)x y: (uint32_t)y color: (TSImageColor)color NS_SWIFT_NAME(set2D(x:y:color:));
	-(TSImageColor)get2D: (uint32_t)x y: (uint32_t)y NS_SWIFT_NAME(get2D(_:_:));
	-(TSImageColor)get2D_: (uint32_t)x y: (uint32_t)y NS_SWIFT_NAME(get2D(x:y:));
	-(TSImageColor)get2D_1: (uint32_t)x y: (uint32_t)y repeat: (BOOL)repeat NS_SWIFT_NAME(get2D(_:_:_:));
	-(TSImageColor)get2D_1_: (uint32_t)x y: (uint32_t)y repeat: (BOOL)repeat NS_SWIFT_NAME(get2D(x:y:repeat:));
	-(TSImageColor)get2D_2: (float64_t)x y: (float64_t)y NS_SWIFT_NAME(get2D(_:_:));
	-(TSImageColor)get2D_2_: (float64_t)x y: (float64_t)y NS_SWIFT_NAME(get2D(x:y:));
	-(TSImageColor)get2D_3: (float64_t)x y: (float64_t)y repeat: (BOOL)repeat NS_SWIFT_NAME(get2D(_:_:_:));
	-(TSImageColor)get2D_3_: (float64_t)x y: (float64_t)y repeat: (BOOL)repeat NS_SWIFT_NAME(get2D(x:y:repeat:));
	-(TSImageColor)get2D_4: (float64_t)x y: (float64_t)y repeat: (BOOL)repeat filter: (TS_ImageFilter)filter NS_SWIFT_NAME(get2D(_:_:_:_:));
	-(TSImageColor)get2D_4_: (float64_t)x y: (float64_t)y repeat: (BOOL)repeat filter: (TS_ImageFilter)filter NS_SWIFT_NAME(get2D(x:y:repeat:filter:));
	-(void)set3D: (uint32_t)x y: (uint32_t)y z: (uint32_t)z color: (TSImageColor)color NS_SWIFT_NAME(set3D(_:_:_:_:));
	-(void)set3D_: (uint32_t)x y: (uint32_t)y z: (uint32_t)z color: (TSImageColor)color NS_SWIFT_NAME(set3D(x:y:z:color:));
	-(TSImageColor)get3D: (uint32_t)x y: (uint32_t)y z: (uint32_t)z NS_SWIFT_NAME(get3D(_:_:_:));
	-(TSImageColor)get3D_: (uint32_t)x y: (uint32_t)y z: (uint32_t)z NS_SWIFT_NAME(get3D(x:y:z:));
	-(TSImageColor)get3D_1: (uint32_t)x y: (uint32_t)y z: (uint32_t)z repeat: (BOOL)repeat NS_SWIFT_NAME(get3D(_:_:_:_:));
	-(TSImageColor)get3D_1_: (uint32_t)x y: (uint32_t)y z: (uint32_t)z repeat: (BOOL)repeat NS_SWIFT_NAME(get3D(x:y:z:repeat:));
	-(TSImageColor)get3D_2: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(get3D(_:_:_:));
	-(TSImageColor)get3D_2_: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(get3D(x:y:z:));
	-(TSImageColor)get3D_3: (float32_t)x y: (float32_t)y z: (float32_t)z repeat: (BOOL)repeat NS_SWIFT_NAME(get3D(_:_:_:_:));
	-(TSImageColor)get3D_3_: (float32_t)x y: (float32_t)y z: (float32_t)z repeat: (BOOL)repeat NS_SWIFT_NAME(get3D(x:y:z:repeat:));
	-(TSImageColor)get3D_4: (float32_t)x y: (float32_t)y z: (float32_t)z repeat: (BOOL)repeat filter: (TS_ImageFilter)filter NS_SWIFT_NAME(get3D(_:_:_:_:_:));
	-(TSImageColor)get3D_4_: (float32_t)x y: (float32_t)y z: (float32_t)z repeat: (BOOL)repeat filter: (TS_ImageFilter)filter NS_SWIFT_NAME(get3D(x:y:z:repeat:filter:));
	-(void)setCube: (float32_t)x y: (float32_t)y z: (float32_t)z color: (TSImageColor)color NS_SWIFT_NAME(setCube(_:_:_:_:));
	-(void)setCube_: (float32_t)x y: (float32_t)y z: (float32_t)z color: (TSImageColor)color NS_SWIFT_NAME(setCube(x:y:z:color:));
	-(TSImageColor)getCube: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(cube(_:_:_:));
	-(TSImageColor)getCube_: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(cube(x:y:z:));
	-(TSImageColor)getCube_1: (float32_t)x y: (float32_t)y z: (float32_t)z filter: (TS_ImageFilter)filter NS_SWIFT_NAME(cube(_:_:_:_:));
	-(TSImageColor)getCube_1_: (float32_t)x y: (float32_t)y z: (float32_t)z filter: (TS_ImageFilter)filter NS_SWIFT_NAME(cube(x:y:z:filter:));
	-(uint32_t)getCubeFace: (float32_t)x y: (float32_t)y z: (float32_t)z tx: (float32_t* _Nonnull)tx ty: (float32_t* _Nonnull)ty NS_SWIFT_NAME(cubeFace(_:_:_:_:_:));
	-(uint32_t)getCubeFace_: (float32_t)x y: (float32_t)y z: (float32_t)z tx: (float32_t* _Nonnull)tx ty: (float32_t* _Nonnull)ty NS_SWIFT_NAME(cubeFace(x:y:z:tx:ty:));
	-(void)setTexel: (size_t)t color: (TSImageColor)color NS_SWIFT_NAME(setTexel(_:_:));
	-(void)setTexel_: (size_t)t color: (TSImageColor)color NS_SWIFT_NAME(setTexel(t:color:));
	-(TSImageColor)getTexel: (size_t)t NS_SWIFT_NAME(texel(_:));
	-(TSImageColor)getTexel_: (size_t)t NS_SWIFT_NAME(texel(t:));
@end

/// Tellusim::MeshNode
NS_SWIFT_NAME(MeshNode)
TS_CAPI @interface TSMeshNode : NSObject {
		void *impl;
	}
	-(id _Nonnull)init NS_SWIFT_NAME(init());
	-(id _Nonnull)init_1: (const char* _Nullable)name NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (const char* _Nullable)name NS_SWIFT_NAME(init(name:));
	-(id _Nonnull)init_2: (TSMesh* _Nonnull)mesh NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (TSMesh* _Nonnull)mesh NS_SWIFT_NAME(init(mesh:));
	-(id _Nonnull)init_3: (TSMesh* _Nonnull)mesh name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_3_: (TSMesh* _Nonnull)mesh name: (const char* _Nullable)name NS_SWIFT_NAME(init(mesh:name:));
	-(id _Nonnull)init_4: (TSMeshNode* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_4_: (TSMeshNode* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	-(id _Nonnull)init_5: (TSMeshNode* _Nonnull)parent name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_5_: (TSMeshNode* _Nonnull)parent name: (const char* _Nullable)name NS_SWIFT_NAME(init(parent:name:));
	-(id _Nonnull)init_6: (TSMesh* _Nonnull)mesh parent: (TSMeshNode* _Nonnull)parent NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_6_: (TSMesh* _Nonnull)mesh parent: (TSMeshNode* _Nonnull)parent NS_SWIFT_NAME(init(mesh:parent:));
	-(id _Nonnull)init_7: (TSMesh* _Nonnull)mesh parent: (TSMeshNode* _Nonnull)parent name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_7_: (TSMesh* _Nonnull)mesh parent: (TSMeshNode* _Nonnull)parent name: (const char* _Nullable)name NS_SWIFT_NAME(init(mesh:parent:name:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MeshNode* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MeshNode&)p;
		-(Tellusim::MeshNode* _Nonnull)pointer;
		-(Tellusim::MeshNode&)ref;
	#endif
	-(BOOL)equalPtr: (const TSMeshNode* _Nonnull)p;
	-(TSMeshNode* _Nonnull)copyPtr;
	-(TSMeshNode* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMeshNode* _Nonnull)null;
	-(void)clear;
	-(TSMeshNode* _Nonnull)clone: (TSMesh* _Nonnull)mesh NS_SWIFT_NAME(clone(_:));
	-(TSMeshNode* _Nonnull)clone_: (TSMesh* _Nonnull)mesh NS_SWIFT_NAME(clone(mesh:));
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)setMesh: (TSMesh* _Nonnull)mesh NS_SWIFT_NAME(setMesh(_:));
	-(void)setMesh_: (TSMesh* _Nonnull)mesh NS_SWIFT_NAME(setMesh(mesh:));
	-(void)setMesh_1: (TSMesh* _Nonnull)mesh check: (BOOL)check NS_SWIFT_NAME(setMesh(_:_:));
	-(void)setMesh_1_: (TSMesh* _Nonnull)mesh check: (BOOL)check NS_SWIFT_NAME(setMesh(mesh:check:));
	-(const TSMesh* _Nonnull)getMesh NS_SWIFT_NAME(mesh());
	-(uint32_t)setParent: (TSMeshNode* _Nonnull)parent NS_SWIFT_NAME(setParent(_:));
	-(uint32_t)setParent_: (TSMeshNode* _Nonnull)parent NS_SWIFT_NAME(setParent(parent:));
	-(uint32_t)setParent_1: (TSMeshNode* _Nonnull)parent check: (BOOL)check NS_SWIFT_NAME(setParent(_:_:));
	-(uint32_t)setParent_1_: (TSMeshNode* _Nonnull)parent check: (BOOL)check NS_SWIFT_NAME(setParent(parent:check:));
	-(const TSMeshNode* _Nonnull)getParent NS_SWIFT_NAME(parent());
	-(BOOL)isRoot;
	-(void)reserveChildren: (uint32_t)num_children NS_SWIFT_NAME(reserveChildren(_:));
	-(void)reserveChildren_: (uint32_t)num_children NS_SWIFT_NAME(reserveChildren(num_children:));
	-(uint32_t)addChild: (TSMeshNode* _Nonnull)child NS_SWIFT_NAME(addChild(_:));
	-(uint32_t)addChild_: (TSMeshNode* _Nonnull)child NS_SWIFT_NAME(addChild(child:));
	-(uint32_t)addChild_1: (TSMeshNode* _Nonnull)child check: (BOOL)check NS_SWIFT_NAME(addChild(_:_:));
	-(uint32_t)addChild_1_: (TSMeshNode* _Nonnull)child check: (BOOL)check NS_SWIFT_NAME(addChild(child:check:));
	-(BOOL)removeChild: (TSMeshNode* _Nonnull)child NS_SWIFT_NAME(removeChild(_:));
	-(BOOL)removeChild_: (TSMeshNode* _Nonnull)child NS_SWIFT_NAME(removeChild(child:));
	-(void)releaseChildren;
	-(uint32_t)findChild: (const TSMeshNode* _Nonnull)child NS_SWIFT_NAME(findChild(_:));
	-(uint32_t)findChild_: (const TSMeshNode* _Nonnull)child NS_SWIFT_NAME(findChild(child:));
	-(uint32_t)findChild_1: (const char* _Nonnull)name NS_SWIFT_NAME(findChild(_:));
	-(uint32_t)findChild_1_: (const char* _Nonnull)name NS_SWIFT_NAME(findChild(name:));
	-(uint32_t)getNumChildren NS_SWIFT_NAME(numChildren());
	-(NSArray<TSMeshNode*>* _Nonnull)getChildren NS_SWIFT_NAME(children());
	-(const TSMeshNode* _Nonnull)getChild: (uint32_t)index NS_SWIFT_NAME(child(_:));
	-(const TSMeshNode* _Nonnull)getChild_: (uint32_t)index NS_SWIFT_NAME(child(index:));
	-(const TSMeshNode* _Nonnull)getChild_1: (const char* _Nonnull)name NS_SWIFT_NAME(child(_:));
	-(const TSMeshNode* _Nonnull)getChild_1_: (const char* _Nonnull)name NS_SWIFT_NAME(child(name:));
	-(void)clearGeometries;
	-(void)reserveGeometries: (uint32_t)num_geometries NS_SWIFT_NAME(reserveGeometries(_:));
	-(void)reserveGeometries_: (uint32_t)num_geometries NS_SWIFT_NAME(reserveGeometries(num_geometries:));
	-(uint32_t)addGeometry: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(addGeometry(_:));
	-(uint32_t)addGeometry_: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(addGeometry(geometry:));
	-(uint32_t)addGeometry_1: (TSMeshGeometry* _Nonnull)geometry check: (BOOL)check NS_SWIFT_NAME(addGeometry(_:_:));
	-(uint32_t)addGeometry_1_: (TSMeshGeometry* _Nonnull)geometry check: (BOOL)check NS_SWIFT_NAME(addGeometry(geometry:check:));
	-(BOOL)removeGeometry: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(removeGeometry(_:));
	-(BOOL)removeGeometry_: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(removeGeometry(geometry:));
	-(BOOL)replaceGeometry: (TSMeshGeometry* _Nonnull)old_geometry geometry: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(replaceGeometry(_:_:));
	-(BOOL)replaceGeometry_: (TSMeshGeometry* _Nonnull)old_geometry geometry: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(replaceGeometry(old_geometry:geometry:));
	-(uint32_t)findGeometry: (const TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(findGeometry(_:));
	-(uint32_t)findGeometry_: (const TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(findGeometry(geometry:));
	-(uint32_t)getNumGeometries NS_SWIFT_NAME(numGeometries());
	-(NSArray<TSMeshGeometry*>* _Nonnull)getGeometries NS_SWIFT_NAME(geometries());
	-(const TSMeshGeometry* _Nonnull)getGeometry: (uint32_t)index NS_SWIFT_NAME(geometry(_:));
	-(const TSMeshGeometry* _Nonnull)getGeometry_: (uint32_t)index NS_SWIFT_NAME(geometry(index:));
	-(void)clearAttachments;
	-(void)reserveAttachments: (uint32_t)num_attachments NS_SWIFT_NAME(reserveAttachments(_:));
	-(void)reserveAttachments_: (uint32_t)num_attachments NS_SWIFT_NAME(reserveAttachments(num_attachments:));
	-(uint32_t)addAttachment: (TSMeshAttachment* _Nonnull)attachment NS_SWIFT_NAME(addAttachment(_:));
	-(uint32_t)addAttachment_: (TSMeshAttachment* _Nonnull)attachment NS_SWIFT_NAME(addAttachment(attachment:));
	-(uint32_t)addAttachment_1: (TSMeshAttachment* _Nonnull)attachment check: (BOOL)check NS_SWIFT_NAME(addAttachment(_:_:));
	-(uint32_t)addAttachment_1_: (TSMeshAttachment* _Nonnull)attachment check: (BOOL)check NS_SWIFT_NAME(addAttachment(attachment:check:));
	-(BOOL)removeAttachment: (TSMeshAttachment* _Nonnull)attachment NS_SWIFT_NAME(removeAttachment(_:));
	-(BOOL)removeAttachment_: (TSMeshAttachment* _Nonnull)attachment NS_SWIFT_NAME(removeAttachment(attachment:));
	-(BOOL)replaceAttachment: (TSMeshAttachment* _Nonnull)old_attachment attachment: (TSMeshAttachment* _Nonnull)attachment NS_SWIFT_NAME(replaceAttachment(_:_:));
	-(BOOL)replaceAttachment_: (TSMeshAttachment* _Nonnull)old_attachment attachment: (TSMeshAttachment* _Nonnull)attachment NS_SWIFT_NAME(replaceAttachment(old_attachment:attachment:));
	-(uint32_t)findAttachment: (const TSMeshAttachment* _Nonnull)attachment NS_SWIFT_NAME(findAttachment(_:));
	-(uint32_t)findAttachment_: (const TSMeshAttachment* _Nonnull)attachment NS_SWIFT_NAME(findAttachment(attachment:));
	-(uint32_t)findAttachment_1: (const char* _Nonnull)name NS_SWIFT_NAME(findAttachment(_:));
	-(uint32_t)findAttachment_1_: (const char* _Nonnull)name NS_SWIFT_NAME(findAttachment(name:));
	-(uint32_t)getNumAttachments NS_SWIFT_NAME(numAttachments());
	-(NSArray<TSMeshAttachment*>* _Nonnull)getAttachments NS_SWIFT_NAME(attachments());
	-(const TSMeshAttachment* _Nonnull)getAttachment: (uint32_t)index NS_SWIFT_NAME(attachment(_:));
	-(const TSMeshAttachment* _Nonnull)getAttachment_: (uint32_t)index NS_SWIFT_NAME(attachment(index:));
	-(void)setLocalTransform: (TSMatrix4x3d)transform NS_SWIFT_NAME(setLocalTransform(_:));
	-(void)setLocalTransform_: (TSMatrix4x3d)transform NS_SWIFT_NAME(setLocalTransform(transform:));
	-(TSMatrix4x3d)getLocalTransform NS_SWIFT_NAME(localTransform());
	-(void)setGlobalTransform: (TSMatrix4x3d)transform NS_SWIFT_NAME(setGlobalTransform(_:));
	-(void)setGlobalTransform_: (TSMatrix4x3d)transform NS_SWIFT_NAME(setGlobalTransform(transform:));
	-(TSMatrix4x3d)getGlobalTransform NS_SWIFT_NAME(globalTransform());
	-(void)setPivotTransform: (TSMatrix4x3d)transform NS_SWIFT_NAME(setPivotTransform(_:));
	-(void)setPivotTransform_: (TSMatrix4x3d)transform NS_SWIFT_NAME(setPivotTransform(transform:));
	-(TSMatrix4x3d)getPivotTransform NS_SWIFT_NAME(pivotTransform());
	-(void)setMorphTransform: (TSVector4f)transform NS_SWIFT_NAME(setMorphTransform(_:));
	-(void)setMorphTransform_: (TSVector4f)transform NS_SWIFT_NAME(setMorphTransform(transform:));
	-(TSVector4f)getMorphTransform NS_SWIFT_NAME(morphTransform());
	-(void)createLocalTransforms NS_SWIFT_NAME(createLocalTransforms());
	-(void)createLocalTransforms_1: (TSMatrix4x3d)itransform NS_SWIFT_NAME(createLocalTransforms(_:));
	-(void)createLocalTransforms_1_: (TSMatrix4x3d)itransform NS_SWIFT_NAME(createLocalTransforms(itransform:));
	-(void)createGlobalTransforms NS_SWIFT_NAME(createGlobalTransforms());
	-(void)createGlobalTransforms_1: (TSMatrix4x3d)transform NS_SWIFT_NAME(createGlobalTransforms(_:));
	-(void)createGlobalTransforms_1_: (TSMatrix4x3d)transform NS_SWIFT_NAME(createGlobalTransforms(transform:));
	-(void)setTransform: (TSVector3d)scale NS_SWIFT_NAME(setTransform(_:));
	-(void)setTransform_: (TSVector3d)scale NS_SWIFT_NAME(setTransform(scale:));
	-(size_t)getMemory NS_SWIFT_NAME(memory());
@end

/// Tellusim::MeshIndices
NS_SWIFT_NAME(MeshIndices)
TS_CAPI @interface TSMeshIndices : NSObject {
		void *impl;
	}
	-(id _Nonnull)init NS_SWIFT_NAME(init());
	-(id _Nonnull)init_1: (const char* _Nullable)name NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (const char* _Nullable)name NS_SWIFT_NAME(init(name:));
	-(id _Nonnull)init_2: (TS_MeshIndicesType)type format: (TS_Format)format NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TS_MeshIndicesType)type format: (TS_Format)format NS_SWIFT_NAME(init(type:format:));
	-(id _Nonnull)init_3: (TS_MeshIndicesType)type format: (TS_Format)format name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_3_: (TS_MeshIndicesType)type format: (TS_Format)format name: (const char* _Nullable)name NS_SWIFT_NAME(init(type:format:name:));
	-(id _Nonnull)init_4: (TS_MeshIndicesType)type format: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_4_: (TS_MeshIndicesType)type format: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(init(type:format:size:));
	-(id _Nonnull)init_5: (TS_MeshIndicesType)type format: (TS_Format)format size: (uint32_t)size name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:_:_:));
	-(id _Nonnull)init_5_: (TS_MeshIndicesType)type format: (TS_Format)format size: (uint32_t)size name: (const char* _Nullable)name NS_SWIFT_NAME(init(type:format:size:name:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MeshIndices* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MeshIndices&)p;
		-(Tellusim::MeshIndices* _Nonnull)pointer;
		-(Tellusim::MeshIndices&)ref;
	#endif
	-(BOOL)equalPtr: (const TSMeshIndices* _Nonnull)p;
	-(TSMeshIndices* _Nonnull)copyPtr;
	-(TSMeshIndices* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMeshIndices* _Nonnull)null;
	-(void)clear;
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(void)create: (TS_MeshIndicesType)type format: (TS_Format)format NS_SWIFT_NAME(create(_:_:));
	-(void)create_: (TS_MeshIndicesType)type format: (TS_Format)format NS_SWIFT_NAME(create(type:format:));
	-(void)create_1: (TS_MeshIndicesType)type format: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(create(_:_:_:));
	-(void)create_1_: (TS_MeshIndicesType)type format: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(create(type:format:size:));
	-(TS_MeshIndicesType)getType NS_SWIFT_NAME(type());
	+(NSString* _Nonnull)getTypeName: (TS_MeshIndicesType)type NS_SWIFT_NAME(typeName(_:));
	+(NSString* _Nonnull)getTypeName_: (TS_MeshIndicesType)type NS_SWIFT_NAME(typeName(type:));
	-(NSString* _Nonnull)getTypeName_1 NS_SWIFT_NAME(typeName());
	-(BOOL)isUnknown;
	-(BOOL)isPoint;
	-(BOOL)isLine;
	-(BOOL)isTriangle;
	-(BOOL)isQuadrilateral;
	-(BOOL)isTetrahedron;
	-(BOOL)isPrimitive;
	-(BOOL)isSolid;
	-(BOOL)isVolume;
	-(BOOL)isMaterial;
	-(BOOL)isGroup;
	-(BOOL)isJoint;
	-(BOOL)isEdge;
	-(uint32_t)getPrimitiveSize NS_SWIFT_NAME(primitiveSize());
	-(TS_Format)getFormat NS_SWIFT_NAME(format());
	-(NSString* _Nonnull)getFormatName NS_SWIFT_NAME(formatName());
	-(void)setGeometry: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(setGeometry(_:));
	-(void)setGeometry_: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(setGeometry(geometry:));
	-(void)setGeometry_1: (TSMeshGeometry* _Nonnull)geometry check: (BOOL)check NS_SWIFT_NAME(setGeometry(_:_:));
	-(void)setGeometry_1_: (TSMeshGeometry* _Nonnull)geometry check: (BOOL)check NS_SWIFT_NAME(setGeometry(geometry:check:));
	-(const TSMeshGeometry* _Nonnull)getGeometry NS_SWIFT_NAME(geometry());
	-(void)setSize: (uint32_t)size NS_SWIFT_NAME(setSize(_:));
	-(void)setSize_: (uint32_t)size NS_SWIFT_NAME(setSize(size:));
	-(void)setSize_1: (uint32_t)size discard: (BOOL)discard NS_SWIFT_NAME(setSize(_:_:));
	-(void)setSize_1_: (uint32_t)size discard: (BOOL)discard NS_SWIFT_NAME(setSize(size:discard:));
	-(void)setSize_2: (uint32_t)size discard: (BOOL)discard clear: (BOOL)clear NS_SWIFT_NAME(setSize(_:_:_:));
	-(void)setSize_2_: (uint32_t)size discard: (BOOL)discard clear: (BOOL)clear NS_SWIFT_NAME(setSize(size:discard:clear:));
	-(uint32_t)getSize NS_SWIFT_NAME(size());
	-(uint32_t)getStride NS_SWIFT_NAME(stride());
	-(size_t)getBytes NS_SWIFT_NAME(bytes());
	-(void)setData: (uint32_t)value NS_SWIFT_NAME(setData(_:));
	-(void)setData_: (uint32_t)value NS_SWIFT_NAME(setData(value:));
	-(void)setData_1: (uint32_t)value size: (uint32_t)size NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_1_: (uint32_t)value size: (uint32_t)size NS_SWIFT_NAME(setData(value:size:));
	-(void)setData_2: (uint32_t)value size: (uint32_t)size offset: (uint32_t)offset NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_2_: (uint32_t)value size: (uint32_t)size offset: (uint32_t)offset NS_SWIFT_NAME(setData(value:size:offset:));
	-(void)setData_3: (const void* _Nonnull)src NS_SWIFT_NAME(setData(_:));
	-(void)setData_3_: (const void* _Nonnull)src NS_SWIFT_NAME(setData(src:));
	-(void)setData_4: (const void* _Nonnull)src format: (TS_Format)format NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_4_: (const void* _Nonnull)src format: (TS_Format)format NS_SWIFT_NAME(setData(src:format:));
	-(void)setData_5: (const void* _Nonnull)src format: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_5_: (const void* _Nonnull)src format: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(setData(src:format:size:));
	-(void)setData_6: (const void* _Nonnull)src format: (TS_Format)format size: (uint32_t)size repeat: (uint32_t)repeat NS_SWIFT_NAME(setData(_:_:_:_:));
	-(void)setData_6_: (const void* _Nonnull)src format: (TS_Format)format size: (uint32_t)size repeat: (uint32_t)repeat NS_SWIFT_NAME(setData(src:format:size:repeat:));
	-(void)getData: (void* _Nonnull)dest NS_SWIFT_NAME(data(_:));
	-(void)getData_: (void* _Nonnull)dest NS_SWIFT_NAME(data(dest:));
	-(void)getData_1: (void* _Nonnull)dest format: (TS_Format)format NS_SWIFT_NAME(data(_:_:));
	-(void)getData_1_: (void* _Nonnull)dest format: (TS_Format)format NS_SWIFT_NAME(data(dest:format:));
	-(void)getData_2: (void* _Nonnull)dest format: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(data(_:_:_:));
	-(void)getData_2_: (void* _Nonnull)dest format: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(data(dest:format:size:));
	-(void)getData_3: (void* _Nonnull)dest format: (TS_Format)format size: (uint32_t)size repeat: (uint32_t)repeat NS_SWIFT_NAME(data(_:_:_:_:));
	-(void)getData_3_: (void* _Nonnull)dest format: (TS_Format)format size: (uint32_t)size repeat: (uint32_t)repeat NS_SWIFT_NAME(data(dest:format:size:repeat:));
	-(const void* _Nonnull)getData_4 NS_SWIFT_NAME(data());
	-(void* _Nonnull)getData_5 NS_SWIFT_NAME(data());
	-(void)set: (uint32_t)index value: (uint32_t)value NS_SWIFT_NAME(set(_:_:));
	-(void)set_: (uint32_t)index value: (uint32_t)value NS_SWIFT_NAME(set(index:value:));
	-(void)set_1: (uint32_t)index value_0: (uint32_t)value_0 value_1: (uint32_t)value_1 NS_SWIFT_NAME(set(_:_:_:));
	-(void)set_1_: (uint32_t)index value_0: (uint32_t)value_0 value_1: (uint32_t)value_1 NS_SWIFT_NAME(set(index:value_0:value_1:));
	-(void)set_2: (uint32_t)index value_0: (uint32_t)value_0 value_1: (uint32_t)value_1 value_2: (uint32_t)value_2 NS_SWIFT_NAME(set(_:_:_:_:));
	-(void)set_2_: (uint32_t)index value_0: (uint32_t)value_0 value_1: (uint32_t)value_1 value_2: (uint32_t)value_2 NS_SWIFT_NAME(set(index:value_0:value_1:value_2:));
	-(void)set_3: (uint32_t)index value_0: (uint32_t)value_0 value_1: (uint32_t)value_1 value_2: (uint32_t)value_2 value_3: (uint32_t)value_3 NS_SWIFT_NAME(set(_:_:_:_:_:));
	-(void)set_3_: (uint32_t)index value_0: (uint32_t)value_0 value_1: (uint32_t)value_1 value_2: (uint32_t)value_2 value_3: (uint32_t)value_3 NS_SWIFT_NAME(set(index:value_0:value_1:value_2:value_3:));
	-(uint32_t)get: (uint32_t)index NS_SWIFT_NAME(get(_:));
	-(uint32_t)get_: (uint32_t)index NS_SWIFT_NAME(get(index:));
	-(void)get_1: (uint32_t)index value_0: (uint32_t* _Nonnull)value_0 value_1: (uint32_t* _Nonnull)value_1 NS_SWIFT_NAME(get(_:_:_:));
	-(void)get_1_: (uint32_t)index value_0: (uint32_t* _Nonnull)value_0 value_1: (uint32_t* _Nonnull)value_1 NS_SWIFT_NAME(get(index:value_0:value_1:));
	-(void)get_2: (uint32_t)index value_0: (uint32_t* _Nonnull)value_0 value_1: (uint32_t* _Nonnull)value_1 value_2: (uint32_t* _Nonnull)value_2 NS_SWIFT_NAME(get(_:_:_:_:));
	-(void)get_2_: (uint32_t)index value_0: (uint32_t* _Nonnull)value_0 value_1: (uint32_t* _Nonnull)value_1 value_2: (uint32_t* _Nonnull)value_2 NS_SWIFT_NAME(get(index:value_0:value_1:value_2:));
	-(void)get_3: (uint32_t)index value_0: (uint32_t* _Nonnull)value_0 value_1: (uint32_t* _Nonnull)value_1 value_2: (uint32_t* _Nonnull)value_2 value_3: (uint32_t* _Nonnull)value_3 NS_SWIFT_NAME(get(_:_:_:_:_:));
	-(void)get_3_: (uint32_t)index value_0: (uint32_t* _Nonnull)value_0 value_1: (uint32_t* _Nonnull)value_1 value_2: (uint32_t* _Nonnull)value_2 value_3: (uint32_t* _Nonnull)value_3 NS_SWIFT_NAME(get(index:value_0:value_1:value_2:value_3:));
	-(const void* _Nonnull)getPtr: (uint32_t)index NS_SWIFT_NAME(ptr(_:));
	-(const void* _Nonnull)getPtr_: (uint32_t)index NS_SWIFT_NAME(ptr(index:));
	-(void* _Nonnull)getPtr_1: (uint32_t)index NS_SWIFT_NAME(ptr(_:));
	-(void* _Nonnull)getPtr_1_: (uint32_t)index NS_SWIFT_NAME(ptr(index:));
	-(BOOL)isDirect;
	-(BOOL)isUniform;
	-(uint32_t)getMinIndex NS_SWIFT_NAME(minIndex());
	-(uint32_t)getMaxIndex NS_SWIFT_NAME(maxIndex());
	-(int32_t)compare: (const TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(compare(_:));
	-(int32_t)compare_: (const TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(compare(indices:));
	-(void)addIndices: (const TSMeshIndices* _Nonnull)indices offset: (uint32_t)offset NS_SWIFT_NAME(addIndices(_:_:));
	-(void)addIndices_: (const TSMeshIndices* _Nonnull)indices offset: (uint32_t)offset NS_SWIFT_NAME(addIndices(indices:offset:));
	-(void)addIndices_1: (const TSMeshIndices* _Nonnull)indices offset: (uint32_t)offset expand: (BOOL)expand NS_SWIFT_NAME(addIndices(_:_:_:));
	-(void)addIndices_1_: (const TSMeshIndices* _Nonnull)indices offset: (uint32_t)offset expand: (BOOL)expand NS_SWIFT_NAME(addIndices(indices:offset:expand:));
	-(TSMeshIndices* _Nonnull)toFormat: (TS_Format)format NS_SWIFT_NAME(toFormat(_:));
	-(TSMeshIndices* _Nonnull)toFormat_: (TS_Format)format NS_SWIFT_NAME(toFormat(format:));
	-(TSMeshIndices* _Nonnull)toType: (TS_MeshIndicesType)type NS_SWIFT_NAME(toType(_:));
	-(TSMeshIndices* _Nonnull)toType_: (TS_MeshIndicesType)type NS_SWIFT_NAME(toType(type:));
	-(TSMeshIndices* _Nonnull)toType_1: (TS_MeshIndicesType)type position_attribute: (const TSMeshAttribute* _Nonnull)position_attribute NS_SWIFT_NAME(toType(_:_:));
	-(TSMeshIndices* _Nonnull)toType_1_: (TS_MeshIndicesType)type position_attribute: (const TSMeshAttribute* _Nonnull)position_attribute NS_SWIFT_NAME(toType(type:position_attribute:));
	-(size_t)getMemory NS_SWIFT_NAME(memory());
@end

/// Tellusim::MeshAttribute
NS_SWIFT_NAME(MeshAttribute)
TS_CAPI @interface TSMeshAttribute : NSObject {
		void *impl;
	}
	-(id _Nonnull)init NS_SWIFT_NAME(init());
	-(id _Nonnull)init_1: (const char* _Nullable)name NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (const char* _Nullable)name NS_SWIFT_NAME(init(name:));
	-(id _Nonnull)init_2: (const char* _Nullable)name index: (uint32_t)index NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (const char* _Nullable)name index: (uint32_t)index NS_SWIFT_NAME(init(name:index:));
	-(id _Nonnull)init_3: (TS_MeshAttributeType)type format: (TS_Format)format NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_3_: (TS_MeshAttributeType)type format: (TS_Format)format NS_SWIFT_NAME(init(type:format:));
	-(id _Nonnull)init_4: (TS_MeshAttributeType)type format: (TS_Format)format name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_4_: (TS_MeshAttributeType)type format: (TS_Format)format name: (const char* _Nullable)name NS_SWIFT_NAME(init(type:format:name:));
	-(id _Nonnull)init_5: (TS_MeshAttributeType)type format: (TS_Format)format name: (const char* _Nullable)name index: (uint32_t)index NS_SWIFT_NAME(init(_:_:_:_:));
	-(id _Nonnull)init_5_: (TS_MeshAttributeType)type format: (TS_Format)format name: (const char* _Nullable)name index: (uint32_t)index NS_SWIFT_NAME(init(type:format:name:index:));
	-(id _Nonnull)init_6: (TS_MeshAttributeType)type format: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_6_: (TS_MeshAttributeType)type format: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(init(type:format:size:));
	-(id _Nonnull)init_7: (TS_MeshAttributeType)type format: (TS_Format)format size: (uint32_t)size name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:_:_:));
	-(id _Nonnull)init_7_: (TS_MeshAttributeType)type format: (TS_Format)format size: (uint32_t)size name: (const char* _Nullable)name NS_SWIFT_NAME(init(type:format:size:name:));
	-(id _Nonnull)init_8: (TS_MeshAttributeType)type format: (TS_Format)format size: (uint32_t)size name: (const char* _Nullable)name index: (uint32_t)index NS_SWIFT_NAME(init(_:_:_:_:_:));
	-(id _Nonnull)init_8_: (TS_MeshAttributeType)type format: (TS_Format)format size: (uint32_t)size name: (const char* _Nullable)name index: (uint32_t)index NS_SWIFT_NAME(init(type:format:size:name:index:));
	-(id _Nonnull)init_9: (TS_MeshAttributeType)type format: (TS_Format)format size: (uint32_t)size index: (uint32_t)index NS_SWIFT_NAME(init(_:_:_:_:));
	-(id _Nonnull)init_9_: (TS_MeshAttributeType)type format: (TS_Format)format size: (uint32_t)size index: (uint32_t)index NS_SWIFT_NAME(init(type:format:size:index:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MeshAttribute* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MeshAttribute&)p;
		-(Tellusim::MeshAttribute* _Nonnull)pointer;
		-(Tellusim::MeshAttribute&)ref;
	#endif
	-(BOOL)equalPtr: (const TSMeshAttribute* _Nonnull)p;
	-(TSMeshAttribute* _Nonnull)copyPtr;
	-(TSMeshAttribute* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMeshAttribute* _Nonnull)null;
	-(void)clear;
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(void)create: (TS_MeshAttributeType)type format: (TS_Format)format NS_SWIFT_NAME(create(_:_:));
	-(void)create_: (TS_MeshAttributeType)type format: (TS_Format)format NS_SWIFT_NAME(create(type:format:));
	-(void)create_1: (TS_MeshAttributeType)type format: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(create(_:_:_:));
	-(void)create_1_: (TS_MeshAttributeType)type format: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(create(type:format:size:));
	-(TS_MeshAttributeType)getType NS_SWIFT_NAME(type());
	+(NSString* _Nonnull)getTypeName: (TS_MeshAttributeType)type NS_SWIFT_NAME(typeName(_:));
	+(NSString* _Nonnull)getTypeName_: (TS_MeshAttributeType)type NS_SWIFT_NAME(typeName(type:));
	-(NSString* _Nonnull)getTypeName_1 NS_SWIFT_NAME(typeName());
	-(BOOL)isUnknown;
	-(BOOL)isPosition;
	-(BOOL)isBasis;
	-(BOOL)isNormal;
	-(BOOL)isTangent;
	-(BOOL)isBinormal;
	-(BOOL)isSpatial;
	-(BOOL)isNormalized;
	-(BOOL)isTexCoord;
	-(BOOL)isWeights;
	-(BOOL)isJoints;
	-(BOOL)isColor;
	-(BOOL)isVertex;
	-(BOOL)isCrease;
	-(TS_Format)getFormat NS_SWIFT_NAME(format());
	-(NSString* _Nonnull)getFormatName NS_SWIFT_NAME(formatName());
	-(uint32_t)getComponents NS_SWIFT_NAME(components());
	-(BOOL)isPacked;
	-(void)setIndex: (uint32_t)index NS_SWIFT_NAME(setIndex(_:));
	-(void)setIndex_: (uint32_t)index NS_SWIFT_NAME(setIndex(index:));
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)setIndices: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(setIndices(_:));
	-(void)setIndices_: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(setIndices(indices:));
	-(const TSMeshIndices* _Nonnull)getIndices NS_SWIFT_NAME(indices());
	-(void)setGeometry: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(setGeometry(_:));
	-(void)setGeometry_: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(setGeometry(geometry:));
	-(void)setGeometry_1: (TSMeshGeometry* _Nonnull)geometry check: (BOOL)check NS_SWIFT_NAME(setGeometry(_:_:));
	-(void)setGeometry_1_: (TSMeshGeometry* _Nonnull)geometry check: (BOOL)check NS_SWIFT_NAME(setGeometry(geometry:check:));
	-(const TSMeshGeometry* _Nonnull)getGeometry NS_SWIFT_NAME(geometry());
	-(void)setSize: (uint32_t)size NS_SWIFT_NAME(setSize(_:));
	-(void)setSize_: (uint32_t)size NS_SWIFT_NAME(setSize(size:));
	-(void)setSize_1: (uint32_t)size discard: (BOOL)discard NS_SWIFT_NAME(setSize(_:_:));
	-(void)setSize_1_: (uint32_t)size discard: (BOOL)discard NS_SWIFT_NAME(setSize(size:discard:));
	-(void)setSize_2: (uint32_t)size discard: (BOOL)discard clear: (BOOL)clear NS_SWIFT_NAME(setSize(_:_:_:));
	-(void)setSize_2_: (uint32_t)size discard: (BOOL)discard clear: (BOOL)clear NS_SWIFT_NAME(setSize(size:discard:clear:));
	-(uint32_t)getSize NS_SWIFT_NAME(size());
	-(uint32_t)getStride NS_SWIFT_NAME(stride());
	-(size_t)getBytes NS_SWIFT_NAME(bytes());
	-(void)setData: (const void* _Nonnull)src NS_SWIFT_NAME(setData(_:));
	-(void)setData_: (const void* _Nonnull)src NS_SWIFT_NAME(setData(src:));
	-(void)setData_1: (const void* _Nonnull)src size: (uint32_t)size NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_1_: (const void* _Nonnull)src size: (uint32_t)size NS_SWIFT_NAME(setData(src:size:));
	-(void)setData_2: (const void* _Nonnull)src size: (uint32_t)size stride: (uint32_t)stride NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_2_: (const void* _Nonnull)src size: (uint32_t)size stride: (uint32_t)stride NS_SWIFT_NAME(setData(src:size:stride:));
	-(void)setData_3: (const void* _Nonnull)src indices: (uint32_t* _Nonnull)indices indices_size: (uint32_t)indices_size NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_3_: (const void* _Nonnull)src indices: (uint32_t* _Nonnull)indices indices_size: (uint32_t)indices_size NS_SWIFT_NAME(setData(src:indices:indices_size:));
	-(void)setData_4: (const void* _Nonnull)src indices: (uint32_t* _Nonnull)indices indices_size: (uint32_t)indices_size stride: (uint32_t)stride NS_SWIFT_NAME(setData(_:_:_:_:));
	-(void)setData_4_: (const void* _Nonnull)src indices: (uint32_t* _Nonnull)indices indices_size: (uint32_t)indices_size stride: (uint32_t)stride NS_SWIFT_NAME(setData(src:indices:indices_size:stride:));
	-(void)getData: (void* _Nonnull)dest NS_SWIFT_NAME(data(_:));
	-(void)getData_: (void* _Nonnull)dest NS_SWIFT_NAME(data(dest:));
	-(void)getData_1: (void* _Nonnull)dest size: (uint32_t)size NS_SWIFT_NAME(data(_:_:));
	-(void)getData_1_: (void* _Nonnull)dest size: (uint32_t)size NS_SWIFT_NAME(data(dest:size:));
	-(void)getData_2: (void* _Nonnull)dest size: (uint32_t)size stride: (uint32_t)stride NS_SWIFT_NAME(data(_:_:_:));
	-(void)getData_2_: (void* _Nonnull)dest size: (uint32_t)size stride: (uint32_t)stride NS_SWIFT_NAME(data(dest:size:stride:));
	-(void)getData_3: (void* _Nonnull)dest indices: (const TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(data(_:_:));
	-(void)getData_3_: (void* _Nonnull)dest indices: (const TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(data(dest:indices:));
	-(void)getData_4: (void* _Nonnull)dest indices: (const TSMeshIndices* _Nonnull)indices stride: (uint32_t)stride NS_SWIFT_NAME(data(_:_:_:));
	-(void)getData_4_: (void* _Nonnull)dest indices: (const TSMeshIndices* _Nonnull)indices stride: (uint32_t)stride NS_SWIFT_NAME(data(dest:indices:stride:));
	-(void)getData_5: (void* _Nonnull)dest indices: (uint32_t* _Nonnull)indices indices_size: (uint32_t)indices_size NS_SWIFT_NAME(data(_:_:_:));
	-(void)getData_5_: (void* _Nonnull)dest indices: (uint32_t* _Nonnull)indices indices_size: (uint32_t)indices_size NS_SWIFT_NAME(data(dest:indices:indices_size:));
	-(void)getData_6: (void* _Nonnull)dest indices: (uint32_t* _Nonnull)indices indices_size: (uint32_t)indices_size stride: (uint32_t)stride NS_SWIFT_NAME(data(_:_:_:_:));
	-(void)getData_6_: (void* _Nonnull)dest indices: (uint32_t* _Nonnull)indices indices_size: (uint32_t)indices_size stride: (uint32_t)stride NS_SWIFT_NAME(data(dest:indices:indices_size:stride:));
	-(const void* _Nonnull)getData_7 NS_SWIFT_NAME(data());
	-(void* _Nonnull)getData_8 NS_SWIFT_NAME(data());
	-(void)setValue: (uint32_t)index src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setValue(_:_:_:));
	-(void)setValue_: (uint32_t)index src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setValue(index:src:size:));
	-(void)getValue: (uint32_t)index dest: (void* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(value(_:_:_:));
	-(void)getValue_: (uint32_t)index dest: (void* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(value(index:dest:size:));
	-(const void* _Nonnull)getPtr: (uint32_t)index NS_SWIFT_NAME(ptr(_:));
	-(const void* _Nonnull)getPtr_: (uint32_t)index NS_SWIFT_NAME(ptr(index:));
	-(void* _Nonnull)getPtr_1: (uint32_t)index NS_SWIFT_NAME(ptr(_:));
	-(void* _Nonnull)getPtr_1_: (uint32_t)index NS_SWIFT_NAME(ptr(index:));
	-(int32_t)compare: (const TSMeshAttribute* _Nonnull)attribute NS_SWIFT_NAME(compare(_:));
	-(int32_t)compare_: (const TSMeshAttribute* _Nonnull)attribute NS_SWIFT_NAME(compare(attribute:));
	-(int32_t)compare_1: (const TSMeshAttribute* _Nonnull)attribute transform: (TSMatrix4x3f)transform NS_SWIFT_NAME(compare(_:_:));
	-(int32_t)compare_1_: (const TSMeshAttribute* _Nonnull)attribute transform: (TSMatrix4x3f)transform NS_SWIFT_NAME(compare(attribute:transform:));
	-(int32_t)compare_2: (const TSMeshAttribute* _Nonnull)attribute transform: (TSMatrix4x3f)transform threshold: (float32_t)threshold NS_SWIFT_NAME(compare(_:_:_:));
	-(int32_t)compare_2_: (const TSMeshAttribute* _Nonnull)attribute transform: (TSMatrix4x3f)transform threshold: (float32_t)threshold NS_SWIFT_NAME(compare(attribute:transform:threshold:));
	-(int32_t)compare_3: (const TSMeshAttribute* _Nonnull)attribute transform: (TSMatrix4x3f)transform threshold: (float32_t)threshold spatial: (BOOL)spatial NS_SWIFT_NAME(compare(_:_:_:_:));
	-(int32_t)compare_3_: (const TSMeshAttribute* _Nonnull)attribute transform: (TSMatrix4x3f)transform threshold: (float32_t)threshold spatial: (BOOL)spatial NS_SWIFT_NAME(compare(attribute:transform:threshold:spatial:));
	-(void)addAttribute: (const TSMeshAttribute* _Nonnull)attribute NS_SWIFT_NAME(addAttribute(_:));
	-(void)addAttribute_: (const TSMeshAttribute* _Nonnull)attribute NS_SWIFT_NAME(addAttribute(attribute:));
	-(BOOL)setTransform: (TSMatrix4x3f)transform NS_SWIFT_NAME(setTransform(_:));
	-(BOOL)setTransform_: (TSMatrix4x3f)transform NS_SWIFT_NAME(setTransform(transform:));
	-(BOOL)morphAttribute: (const TSMeshAttribute* _Nonnull)attribute k: (float32_t)k NS_SWIFT_NAME(morphAttribute(_:_:));
	-(BOOL)morphAttribute_: (const TSMeshAttribute* _Nonnull)attribute k: (float32_t)k NS_SWIFT_NAME(morphAttribute(attribute:k:));
	-(BOOL)packAttributes: (const TSMeshAttribute* _Nonnull)attribute_0 attribute_1: (const TSMeshAttribute* _Nonnull)attribute_1 format: (TS_Format)format NS_SWIFT_NAME(packAttributes(_:_:_:));
	-(BOOL)packAttributes_: (const TSMeshAttribute* _Nonnull)attribute_0 attribute_1: (const TSMeshAttribute* _Nonnull)attribute_1 format: (TS_Format)format NS_SWIFT_NAME(packAttributes(attribute_0:attribute_1:format:));
	-(BOOL)unpackAttributes: (TSMeshAttribute* _Nonnull)attribute_0 attribute_1: (TSMeshAttribute* _Nonnull)attribute_1 NS_SWIFT_NAME(unpackAttributes(_:_:));
	-(BOOL)unpackAttributes_: (TSMeshAttribute* _Nonnull)attribute_0 attribute_1: (TSMeshAttribute* _Nonnull)attribute_1 NS_SWIFT_NAME(unpackAttributes(attribute_0:attribute_1:));
	-(TSMeshAttribute* _Nonnull)optimizeAttribute: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(optimizeAttribute(_:));
	-(TSMeshAttribute* _Nonnull)optimizeAttribute_: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(optimizeAttribute(indices:));
	-(TSMeshAttribute* _Nonnull)toDirect: (const TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(toDirect(_:));
	-(TSMeshAttribute* _Nonnull)toDirect_: (const TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(toDirect(indices:));
	-(TSMeshAttribute* _Nonnull)toFormat: (TS_Format)format NS_SWIFT_NAME(toFormat(_:));
	-(TSMeshAttribute* _Nonnull)toFormat_: (TS_Format)format NS_SWIFT_NAME(toFormat(format:));
	-(TSMeshAttribute* _Nonnull)toType: (TS_MeshAttributeType)type NS_SWIFT_NAME(toType(_:));
	-(TSMeshAttribute* _Nonnull)toType_: (TS_MeshAttributeType)type NS_SWIFT_NAME(toType(type:));
	-(TSMatrix4x3f)getCovarianceMatrix NS_SWIFT_NAME(covarianceMatrix());
	-(TSMatrix4x3f)getMinTransform NS_SWIFT_NAME(minTransform());
	-(TSBoundBoxf)getBoundBox NS_SWIFT_NAME(boundBox());
	-(TSBoundSpheref)getBoundSphere NS_SWIFT_NAME(boundSphere());
	-(size_t)getMemory NS_SWIFT_NAME(memory());
@end

/// Tellusim::MeshJoint
NS_SWIFT_NAME(MeshJoint)
TS_CAPI @interface TSMeshJoint : NSObject {
		void *impl;
	}
	-(id _Nonnull)init NS_SWIFT_NAME(init());
	-(id _Nonnull)init_1: (const char* _Nullable)name NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (const char* _Nullable)name NS_SWIFT_NAME(init(name:));
	-(id _Nonnull)init_2: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(init(geometry:));
	-(id _Nonnull)init_3: (TSMeshGeometry* _Nonnull)geometry name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_3_: (TSMeshGeometry* _Nonnull)geometry name: (const char* _Nullable)name NS_SWIFT_NAME(init(geometry:name:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MeshJoint* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MeshJoint&)p;
		-(Tellusim::MeshJoint* _Nonnull)pointer;
		-(Tellusim::MeshJoint&)ref;
	#endif
	-(BOOL)equalPtr: (const TSMeshJoint* _Nonnull)p;
	-(TSMeshJoint* _Nonnull)copyPtr;
	-(TSMeshJoint* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMeshJoint* _Nonnull)null;
	-(void)clear;
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(void)setNode: (TSMeshNode* _Nonnull)node NS_SWIFT_NAME(setNode(_:));
	-(void)setNode_: (TSMeshNode* _Nonnull)node NS_SWIFT_NAME(setNode(node:));
	-(const TSMeshNode* _Nonnull)getNode NS_SWIFT_NAME(node());
	-(uint32_t)getNodeIndex NS_SWIFT_NAME(nodeIndex());
	-(TSMatrix4x3d)getLocalTransform NS_SWIFT_NAME(localTransform());
	-(TSMatrix4x3d)getGlobalTransform NS_SWIFT_NAME(globalTransform());
	-(void)setIndices: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(setIndices(_:));
	-(void)setIndices_: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(setIndices(indices:));
	-(const TSMeshIndices* _Nonnull)getIndices NS_SWIFT_NAME(indices());
	-(void)setGeometry: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(setGeometry(_:));
	-(void)setGeometry_: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(setGeometry(geometry:));
	-(void)setGeometry_1: (TSMeshGeometry* _Nonnull)geometry check: (BOOL)check NS_SWIFT_NAME(setGeometry(_:_:));
	-(void)setGeometry_1_: (TSMeshGeometry* _Nonnull)geometry check: (BOOL)check NS_SWIFT_NAME(setGeometry(geometry:check:));
	-(const TSMeshGeometry* _Nonnull)getGeometry NS_SWIFT_NAME(geometry());
	-(void)setBoundBox: (TSBoundBoxf)box NS_SWIFT_NAME(setBoundBox(_:));
	-(void)setBoundBox_: (TSBoundBoxf)box NS_SWIFT_NAME(setBoundBox(box:));
	-(TSBoundBoxf)getBoundBox NS_SWIFT_NAME(boundBox());
	-(void)setBoundSphere: (TSBoundSpheref)sphere NS_SWIFT_NAME(setBoundSphere(_:));
	-(void)setBoundSphere_: (TSBoundSpheref)sphere NS_SWIFT_NAME(setBoundSphere(sphere:));
	-(TSBoundSpheref)getBoundSphere NS_SWIFT_NAME(boundSphere());
	-(void)setITransform: (TSMatrix4x3f)itransform NS_SWIFT_NAME(setITransform(_:));
	-(void)setITransform_: (TSMatrix4x3f)itransform NS_SWIFT_NAME(setITransform(itransform:));
	-(TSMatrix4x3f)getITransform NS_SWIFT_NAME(itransform());
	-(int32_t)compare: (const TSMeshJoint* _Nonnull)joint NS_SWIFT_NAME(compare(_:));
	-(int32_t)compare_: (const TSMeshJoint* _Nonnull)joint NS_SWIFT_NAME(compare(joint:));
	-(size_t)getMemory NS_SWIFT_NAME(memory());
@end

/// Tellusim::MeshMaterial
NS_SWIFT_NAME(MeshMaterial)
TS_CAPI @interface TSMeshMaterial : NSObject {
		void *impl;
	}
	-(id _Nonnull)init NS_SWIFT_NAME(init());
	-(id _Nonnull)init_1: (const char* _Nullable)name NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (const char* _Nullable)name NS_SWIFT_NAME(init(name:));
	-(id _Nonnull)init_2: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(init(geometry:));
	-(id _Nonnull)init_3: (TSMeshGeometry* _Nonnull)geometry name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_3_: (TSMeshGeometry* _Nonnull)geometry name: (const char* _Nullable)name NS_SWIFT_NAME(init(geometry:name:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MeshMaterial* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MeshMaterial&)p;
		-(Tellusim::MeshMaterial* _Nonnull)pointer;
		-(Tellusim::MeshMaterial&)ref;
	#endif
	-(BOOL)equalPtr: (const TSMeshMaterial* _Nonnull)p;
	-(TSMeshMaterial* _Nonnull)copyPtr;
	-(TSMeshMaterial* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMeshMaterial* _Nonnull)null;
	-(void)clear;
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)setIndices: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(setIndices(_:));
	-(void)setIndices_: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(setIndices(indices:));
	-(const TSMeshIndices* _Nonnull)getIndices NS_SWIFT_NAME(indices());
	-(void)setGeometry: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(setGeometry(_:));
	-(void)setGeometry_: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(setGeometry(geometry:));
	-(void)setGeometry_1: (TSMeshGeometry* _Nonnull)geometry check: (BOOL)check NS_SWIFT_NAME(setGeometry(_:_:));
	-(void)setGeometry_1_: (TSMeshGeometry* _Nonnull)geometry check: (BOOL)check NS_SWIFT_NAME(setGeometry(geometry:check:));
	-(const TSMeshGeometry* _Nonnull)getGeometry NS_SWIFT_NAME(geometry());
	-(void)setData: (const char* _Nonnull)data NS_SWIFT_NAME(setData(_:));
	-(void)setData_: (const char* _Nonnull)data NS_SWIFT_NAME(setData(data:));
	-(void)setData_1: (const TSString* _Nonnull)data NS_SWIFT_NAME(setData(_:));
	-(void)setData_1_: (const TSString* _Nonnull)data NS_SWIFT_NAME(setData(data:));
	-(NSString* _Nonnull)getData NS_SWIFT_NAME(data());
	-(void)clearParameters;
	-(BOOL)removeParameter: (const char* _Nonnull)type NS_SWIFT_NAME(removeParameter(_:));
	-(BOOL)removeParameter_: (const char* _Nonnull)type NS_SWIFT_NAME(removeParameter(type:));
	-(void)copyParameters: (const TSMeshMaterial* _Nonnull)material NS_SWIFT_NAME(copyParameters(_:));
	-(void)copyParameters_: (const TSMeshMaterial* _Nonnull)material NS_SWIFT_NAME(copyParameters(material:));
	-(uint32_t)findParameter: (const char* _Nonnull)type NS_SWIFT_NAME(findParameter(_:));
	-(uint32_t)findParameter_: (const char* _Nonnull)type NS_SWIFT_NAME(findParameter(type:));
	-(BOOL)hasParameter: (const char* _Nonnull)type NS_SWIFT_NAME(hasParameter(_:));
	-(BOOL)hasParameter_: (const char* _Nonnull)type NS_SWIFT_NAME(hasParameter(type:));
	-(uint32_t)getNumParameters NS_SWIFT_NAME(numParameters());
	-(NSString* _Nonnull)getParameterType: (uint32_t)index NS_SWIFT_NAME(parameterType(_:));
	-(NSString* _Nonnull)getParameterType_: (uint32_t)index NS_SWIFT_NAME(parameterType(index:));
	-(void)addParameter: (const char* _Nonnull)type value: (BOOL)value NS_SWIFT_NAME(addParameter(_:_:));
	-(void)addParameter_: (const char* _Nonnull)type value: (BOOL)value NS_SWIFT_NAME(addParameter(type:value:));
	-(void)addParameter_1: (const char* _Nonnull)type value: (float32_t)value NS_SWIFT_NAME(addParameter(_:_:));
	-(void)addParameter_1_: (const char* _Nonnull)type value: (float32_t)value NS_SWIFT_NAME(addParameter(type:value:));
	-(void)addParameter_2: (const char* _Nonnull)type value: (TSVector4f)value NS_SWIFT_NAME(addParameter(_:_:));
	-(void)addParameter_2_: (const char* _Nonnull)type value: (TSVector4f)value NS_SWIFT_NAME(addParameter(type:value:));
	-(void)addParameter_3: (const char* _Nonnull)type value: (TSMatrix3x2f)value NS_SWIFT_NAME(addParameter(_:_:));
	-(void)addParameter_3_: (const char* _Nonnull)type value: (TSMatrix3x2f)value NS_SWIFT_NAME(addParameter(type:value:));
	-(void)addParameter_4: (const char* _Nonnull)type color: (TSColor)color NS_SWIFT_NAME(addParameter(_:_:));
	-(void)addParameter_4_: (const char* _Nonnull)type color: (TSColor)color NS_SWIFT_NAME(addParameter(type:color:));
	-(void)addParameter_5: (const char* _Nonnull)type name: (const char* _Nonnull)name NS_SWIFT_NAME(addParameter(_:_:));
	-(void)addParameter_5_: (const char* _Nonnull)type name: (const char* _Nonnull)name NS_SWIFT_NAME(addParameter(type:name:));
	-(void)addParameter_6: (const char* _Nonnull)type name: (const char* _Nonnull)name layout: (const char* _Nullable)layout NS_SWIFT_NAME(addParameter(_:_:_:));
	-(void)addParameter_6_: (const char* _Nonnull)type name: (const char* _Nonnull)name layout: (const char* _Nullable)layout NS_SWIFT_NAME(addParameter(type:name:layout:));
	-(void)addParameter_7: (const char* _Nonnull)type name: (const TSString* _Nonnull)name NS_SWIFT_NAME(addParameter(_:_:));
	-(void)addParameter_7_: (const char* _Nonnull)type name: (const TSString* _Nonnull)name NS_SWIFT_NAME(addParameter(type:name:));
	-(void)addParameter_8: (const char* _Nonnull)type name: (const TSString* _Nonnull)name layout: (const char* _Nullable)layout NS_SWIFT_NAME(addParameter(_:_:_:));
	-(void)addParameter_8_: (const char* _Nonnull)type name: (const TSString* _Nonnull)name layout: (const char* _Nullable)layout NS_SWIFT_NAME(addParameter(type:name:layout:));
	-(void)addParameter_9: (const char* _Nonnull)type image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(addParameter(_:_:));
	-(void)addParameter_9_: (const char* _Nonnull)type image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(addParameter(type:image:));
	-(void)addParameter_10: (const char* _Nonnull)type image: (const TSImage* _Nonnull)image layout: (const char* _Nullable)layout NS_SWIFT_NAME(addParameter(_:_:_:));
	-(void)addParameter_10_: (const char* _Nonnull)type image: (const TSImage* _Nonnull)image layout: (const char* _Nullable)layout NS_SWIFT_NAME(addParameter(type:image:layout:));
	-(void)addParameter_11: (const char* _Nonnull)type blob: (TSBlob* _Nonnull)blob NS_SWIFT_NAME(addParameter(_:_:));
	-(void)addParameter_11_: (const char* _Nonnull)type blob: (TSBlob* _Nonnull)blob NS_SWIFT_NAME(addParameter(type:blob:));
	-(void)addParameter_12: (const char* _Nonnull)type blob: (TSBlob* _Nonnull)blob layout: (const char* _Nullable)layout NS_SWIFT_NAME(addParameter(_:_:_:));
	-(void)addParameter_12_: (const char* _Nonnull)type blob: (TSBlob* _Nonnull)blob layout: (const char* _Nullable)layout NS_SWIFT_NAME(addParameter(type:blob:layout:));
	-(TS_MeshMaterialFlags)getParameterFlags: (uint32_t)index NS_SWIFT_NAME(parameterFlags(_:));
	-(TS_MeshMaterialFlags)getParameterFlags_: (uint32_t)index NS_SWIFT_NAME(parameterFlags(index:));
	-(BOOL)hasParameterFlag: (uint32_t)index flags: (TS_MeshMaterialFlags)flags NS_SWIFT_NAME(hasParameterFlag(_:_:));
	-(BOOL)hasParameterFlag_: (uint32_t)index flags: (TS_MeshMaterialFlags)flags NS_SWIFT_NAME(hasParameterFlag(index:flags:));
	-(BOOL)hasParameterFlags: (uint32_t)index flags: (TS_MeshMaterialFlags)flags NS_SWIFT_NAME(hasParameterFlags(_:_:));
	-(BOOL)hasParameterFlags_: (uint32_t)index flags: (TS_MeshMaterialFlags)flags NS_SWIFT_NAME(hasParameterFlags(index:flags:));
	-(BOOL)getParameterBool: (uint32_t)index NS_SWIFT_NAME(parameterBool(_:));
	-(BOOL)getParameterBool_: (uint32_t)index NS_SWIFT_NAME(parameterBool(index:));
	-(BOOL)getParameterBool_1: (uint32_t)index value: (BOOL)value NS_SWIFT_NAME(parameterBool(_:_:));
	-(BOOL)getParameterBool_1_: (uint32_t)index value: (BOOL)value NS_SWIFT_NAME(parameterBool(index:value:));
	-(float32_t)getParameterScalarf32: (uint32_t)index NS_SWIFT_NAME(parameterScalarf32(_:));
	-(float32_t)getParameterScalarf32_: (uint32_t)index NS_SWIFT_NAME(parameterScalarf32(index:));
	-(float32_t)getParameterScalarf32_1: (uint32_t)index value: (float32_t)value NS_SWIFT_NAME(parameterScalarf32(_:_:));
	-(float32_t)getParameterScalarf32_1_: (uint32_t)index value: (float32_t)value NS_SWIFT_NAME(parameterScalarf32(index:value:));
	-(TSVector4f)getParameterVector4f: (uint32_t)index NS_SWIFT_NAME(parameterVector4f(_:));
	-(TSVector4f)getParameterVector4f_: (uint32_t)index NS_SWIFT_NAME(parameterVector4f(index:));
	-(TSVector4f)getParameterVector4f_1: (uint32_t)index vector: (TSVector4f)vector NS_SWIFT_NAME(parameterVector4f(_:_:));
	-(TSVector4f)getParameterVector4f_1_: (uint32_t)index vector: (TSVector4f)vector NS_SWIFT_NAME(parameterVector4f(index:vector:));
	-(TSMatrix3x2f)getParameterMatrix3x2f: (uint32_t)index NS_SWIFT_NAME(parameterMatrix3x2f(_:));
	-(TSMatrix3x2f)getParameterMatrix3x2f_: (uint32_t)index NS_SWIFT_NAME(parameterMatrix3x2f(index:));
	-(TSMatrix3x2f)getParameterMatrix3x2f_1: (uint32_t)index matrix: (TSMatrix3x2f)matrix NS_SWIFT_NAME(parameterMatrix3x2f(_:_:));
	-(TSMatrix3x2f)getParameterMatrix3x2f_1_: (uint32_t)index matrix: (TSMatrix3x2f)matrix NS_SWIFT_NAME(parameterMatrix3x2f(index:matrix:));
	-(TSColor)getParameterColor: (uint32_t)index NS_SWIFT_NAME(parameterColor(_:));
	-(TSColor)getParameterColor_: (uint32_t)index NS_SWIFT_NAME(parameterColor(index:));
	-(TSColor)getParameterColor_1: (uint32_t)index color: (TSColor)color NS_SWIFT_NAME(parameterColor(_:_:));
	-(TSColor)getParameterColor_1_: (uint32_t)index color: (TSColor)color NS_SWIFT_NAME(parameterColor(index:color:));
	-(NSString* _Nonnull)getParameterName: (uint32_t)index NS_SWIFT_NAME(parameterName(_:));
	-(NSString* _Nonnull)getParameterName_: (uint32_t)index NS_SWIFT_NAME(parameterName(index:));
	-(NSString* _Nonnull)getParameterName_1: (uint32_t)index name: (const TSString* _Nonnull)name NS_SWIFT_NAME(parameterName(_:_:));
	-(NSString* _Nonnull)getParameterName_1_: (uint32_t)index name: (const TSString* _Nonnull)name NS_SWIFT_NAME(parameterName(index:name:));
	-(NSString* _Nonnull)getParameterLayout: (uint32_t)index NS_SWIFT_NAME(parameterLayout(_:));
	-(NSString* _Nonnull)getParameterLayout_: (uint32_t)index NS_SWIFT_NAME(parameterLayout(index:));
	-(NSString* _Nonnull)getParameterLayout_1: (uint32_t)index layout: (const TSString* _Nonnull)layout NS_SWIFT_NAME(parameterLayout(_:_:));
	-(NSString* _Nonnull)getParameterLayout_1_: (uint32_t)index layout: (const TSString* _Nonnull)layout NS_SWIFT_NAME(parameterLayout(index:layout:));
	-(const TSImage* _Nonnull)getParameterImage: (uint32_t)index NS_SWIFT_NAME(parameterImage(_:));
	-(const TSImage* _Nonnull)getParameterImage_: (uint32_t)index NS_SWIFT_NAME(parameterImage(index:));
	-(TSBlob* _Nonnull)getParameterBlob: (uint32_t)index NS_SWIFT_NAME(parameterBlob(_:));
	-(TSBlob* _Nonnull)getParameterBlob_: (uint32_t)index NS_SWIFT_NAME(parameterBlob(index:));
	-(TS_MeshMaterialFlags)getParameterFlags_1: (const char* _Nonnull)type NS_SWIFT_NAME(parameterFlags(_:));
	-(TS_MeshMaterialFlags)getParameterFlags_1_: (const char* _Nonnull)type NS_SWIFT_NAME(parameterFlags(type:));
	-(BOOL)hasParameterFlag_1: (const char* _Nonnull)type flags: (TS_MeshMaterialFlags)flags NS_SWIFT_NAME(hasParameterFlag(_:_:));
	-(BOOL)hasParameterFlag_1_: (const char* _Nonnull)type flags: (TS_MeshMaterialFlags)flags NS_SWIFT_NAME(hasParameterFlag(type:flags:));
	-(BOOL)hasParameterFlags_1: (const char* _Nonnull)type flags: (TS_MeshMaterialFlags)flags NS_SWIFT_NAME(hasParameterFlags(_:_:));
	-(BOOL)hasParameterFlags_1_: (const char* _Nonnull)type flags: (TS_MeshMaterialFlags)flags NS_SWIFT_NAME(hasParameterFlags(type:flags:));
	-(BOOL)getParameterBool_2: (const char* _Nonnull)type NS_SWIFT_NAME(parameterBool(_:));
	-(BOOL)getParameterBool_2_: (const char* _Nonnull)type NS_SWIFT_NAME(parameterBool(type:));
	-(BOOL)getParameterBool_3: (const char* _Nonnull)type value: (BOOL)value NS_SWIFT_NAME(parameterBool(_:_:));
	-(BOOL)getParameterBool_3_: (const char* _Nonnull)type value: (BOOL)value NS_SWIFT_NAME(parameterBool(type:value:));
	-(float32_t)getParameterScalarf32_2: (const char* _Nonnull)type NS_SWIFT_NAME(parameterScalarf32(_:));
	-(float32_t)getParameterScalarf32_2_: (const char* _Nonnull)type NS_SWIFT_NAME(parameterScalarf32(type:));
	-(float32_t)getParameterScalarf32_3: (const char* _Nonnull)type value: (float32_t)value NS_SWIFT_NAME(parameterScalarf32(_:_:));
	-(float32_t)getParameterScalarf32_3_: (const char* _Nonnull)type value: (float32_t)value NS_SWIFT_NAME(parameterScalarf32(type:value:));
	-(TSVector4f)getParameterVector4f_2: (const char* _Nonnull)type NS_SWIFT_NAME(parameterVector4f(_:));
	-(TSVector4f)getParameterVector4f_2_: (const char* _Nonnull)type NS_SWIFT_NAME(parameterVector4f(type:));
	-(TSVector4f)getParameterVector4f_3: (const char* _Nonnull)type vector: (TSVector4f)vector NS_SWIFT_NAME(parameterVector4f(_:_:));
	-(TSVector4f)getParameterVector4f_3_: (const char* _Nonnull)type vector: (TSVector4f)vector NS_SWIFT_NAME(parameterVector4f(type:vector:));
	-(TSMatrix3x2f)getParameterMatrix3x2f_2: (const char* _Nonnull)type NS_SWIFT_NAME(parameterMatrix3x2f(_:));
	-(TSMatrix3x2f)getParameterMatrix3x2f_2_: (const char* _Nonnull)type NS_SWIFT_NAME(parameterMatrix3x2f(type:));
	-(TSMatrix3x2f)getParameterMatrix3x2f_3: (const char* _Nonnull)type matrix: (TSMatrix3x2f)matrix NS_SWIFT_NAME(parameterMatrix3x2f(_:_:));
	-(TSMatrix3x2f)getParameterMatrix3x2f_3_: (const char* _Nonnull)type matrix: (TSMatrix3x2f)matrix NS_SWIFT_NAME(parameterMatrix3x2f(type:matrix:));
	-(TSColor)getParameterColor_2: (const char* _Nonnull)type NS_SWIFT_NAME(parameterColor(_:));
	-(TSColor)getParameterColor_2_: (const char* _Nonnull)type NS_SWIFT_NAME(parameterColor(type:));
	-(TSColor)getParameterColor_3: (const char* _Nonnull)type color: (TSColor)color NS_SWIFT_NAME(parameterColor(_:_:));
	-(TSColor)getParameterColor_3_: (const char* _Nonnull)type color: (TSColor)color NS_SWIFT_NAME(parameterColor(type:color:));
	-(NSString* _Nonnull)getParameterName_2: (const char* _Nonnull)type NS_SWIFT_NAME(parameterName(_:));
	-(NSString* _Nonnull)getParameterName_2_: (const char* _Nonnull)type NS_SWIFT_NAME(parameterName(type:));
	-(NSString* _Nonnull)getParameterName_3: (const char* _Nonnull)type name: (const TSString* _Nonnull)name NS_SWIFT_NAME(parameterName(_:_:));
	-(NSString* _Nonnull)getParameterName_3_: (const char* _Nonnull)type name: (const TSString* _Nonnull)name NS_SWIFT_NAME(parameterName(type:name:));
	-(NSString* _Nonnull)getParameterLayout_2: (const char* _Nonnull)type NS_SWIFT_NAME(parameterLayout(_:));
	-(NSString* _Nonnull)getParameterLayout_2_: (const char* _Nonnull)type NS_SWIFT_NAME(parameterLayout(type:));
	-(NSString* _Nonnull)getParameterLayout_3: (const char* _Nonnull)type layout: (const TSString* _Nonnull)layout NS_SWIFT_NAME(parameterLayout(_:_:));
	-(NSString* _Nonnull)getParameterLayout_3_: (const char* _Nonnull)type layout: (const TSString* _Nonnull)layout NS_SWIFT_NAME(parameterLayout(type:layout:));
	-(int32_t)compare: (const TSMeshMaterial* _Nonnull)material NS_SWIFT_NAME(compare(_:));
	-(int32_t)compare_: (const TSMeshMaterial* _Nonnull)material NS_SWIFT_NAME(compare(material:));
	-(size_t)getMemory NS_SWIFT_NAME(memory());
@end

NS_SWIFT_NAME(MeshMaterial.TypeBump)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeBump;

NS_SWIFT_NAME(MeshMaterial.TypeHeight)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeHeight;

NS_SWIFT_NAME(MeshMaterial.TypeNormal)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeNormal;

NS_SWIFT_NAME(MeshMaterial.TypeEmission)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeEmission;

NS_SWIFT_NAME(MeshMaterial.TypeOcclusion)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeOcclusion;

NS_SWIFT_NAME(MeshMaterial.TypeOpacity)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeOpacity;

NS_SWIFT_NAME(MeshMaterial.TypeAmbient)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeAmbient;

NS_SWIFT_NAME(MeshMaterial.TypeDiffuse)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeDiffuse;

NS_SWIFT_NAME(MeshMaterial.TypeSpecular)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeSpecular;

NS_SWIFT_NAME(MeshMaterial.TypeMetallic)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeMetallic;

NS_SWIFT_NAME(MeshMaterial.TypeRoughness)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeRoughness;

NS_SWIFT_NAME(MeshMaterial.TypeShininess)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeShininess;

NS_SWIFT_NAME(MeshMaterial.TypeGlossiness)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeGlossiness;

NS_SWIFT_NAME(MeshMaterial.TypeTransparent)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeTransparent;

NS_SWIFT_NAME(MeshMaterial.TypeTransparency)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeTransparency;

NS_SWIFT_NAME(MeshMaterial.TypeTransmission)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeTransmission;

NS_SWIFT_NAME(MeshMaterial.TypeReflective)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeReflective;

NS_SWIFT_NAME(MeshMaterial.TypeReflectivity)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeReflectivity;

NS_SWIFT_NAME(MeshMaterial.TypeRefractiveIndex)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeRefractiveIndex;

NS_SWIFT_NAME(MeshMaterial.TypeClearcoat)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeClearcoat;

NS_SWIFT_NAME(MeshMaterial.TypeClearcoatNormal)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeClearcoatNormal;

NS_SWIFT_NAME(MeshMaterial.TypeClearcoatRoughness)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeClearcoatRoughness;

NS_SWIFT_NAME(MeshMaterial.TypeClearcoatGlossiness)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeClearcoatGlossiness;

NS_SWIFT_NAME(MeshMaterial.TypeIridescence)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeIridescence;

NS_SWIFT_NAME(MeshMaterial.TypeIridescenceThickness)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeIridescenceThickness;

NS_SWIFT_NAME(MeshMaterial.TypeIridescenceRefractiveIndex)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeIridescenceRefractiveIndex;

NS_SWIFT_NAME(MeshMaterial.TypeSheen)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeSheen;

NS_SWIFT_NAME(MeshMaterial.TypeSheenRoughness)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeSheenRoughness;

NS_SWIFT_NAME(MeshMaterial.TypeVolume)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeVolume;

NS_SWIFT_NAME(MeshMaterial.TypeVolumeThickness)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeVolumeThickness;

NS_SWIFT_NAME(MeshMaterial.TypeAnisotropy)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeAnisotropy;

NS_SWIFT_NAME(MeshMaterial.TypeAnisotropyAngle)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeAnisotropyAngle;

NS_SWIFT_NAME(MeshMaterial.TypeDoubleSided)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeDoubleSided;

NS_SWIFT_NAME(MeshMaterial.TypeAlphaBlend)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeAlphaBlend;

NS_SWIFT_NAME(MeshMaterial.TypeAlphaMask)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeAlphaMask;

NS_SWIFT_NAME(MeshMaterial.TypeTechnique)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeTechnique;

NS_SWIFT_NAME(MeshMaterial.TypeTexCoord)
TS_CAPI extern NSString* _Nonnull tsMeshMaterialTypeTexCoord;

/// Tellusim::MeshGeometry
NS_SWIFT_NAME(MeshGeometry)
TS_CAPI @interface TSMeshGeometry : NSObject {
		void *impl;
	}
	-(id _Nonnull)init NS_SWIFT_NAME(init());
	-(id _Nonnull)init_1: (const char* _Nullable)name NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (const char* _Nullable)name NS_SWIFT_NAME(init(name:));
	-(id _Nonnull)init_2: (TSMesh* _Nonnull)mesh NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (TSMesh* _Nonnull)mesh NS_SWIFT_NAME(init(mesh:));
	-(id _Nonnull)init_3: (TSMesh* _Nonnull)mesh name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_3_: (TSMesh* _Nonnull)mesh name: (const char* _Nullable)name NS_SWIFT_NAME(init(mesh:name:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MeshGeometry* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MeshGeometry&)p;
		-(Tellusim::MeshGeometry* _Nonnull)pointer;
		-(Tellusim::MeshGeometry&)ref;
	#endif
	-(BOOL)equalPtr: (const TSMeshGeometry* _Nonnull)p;
	-(TSMeshGeometry* _Nonnull)copyPtr;
	-(TSMeshGeometry* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMeshGeometry* _Nonnull)null;
	-(void)clear;
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)setMesh: (TSMesh* _Nonnull)mesh NS_SWIFT_NAME(setMesh(_:));
	-(void)setMesh_: (TSMesh* _Nonnull)mesh NS_SWIFT_NAME(setMesh(mesh:));
	-(void)setMesh_1: (TSMesh* _Nonnull)mesh check: (BOOL)check NS_SWIFT_NAME(setMesh(_:_:));
	-(void)setMesh_1_: (TSMesh* _Nonnull)mesh check: (BOOL)check NS_SWIFT_NAME(setMesh(mesh:check:));
	-(const TSMesh* _Nonnull)getMesh NS_SWIFT_NAME(mesh());
	-(uint32_t)setParent0: (TSMeshGeometry* _Nonnull)parent NS_SWIFT_NAME(setParent0(_:));
	-(uint32_t)setParent0_: (TSMeshGeometry* _Nonnull)parent NS_SWIFT_NAME(setParent0(parent:));
	-(uint32_t)setParent0_1: (TSMeshGeometry* _Nonnull)parent check: (BOOL)check NS_SWIFT_NAME(setParent0(_:_:));
	-(uint32_t)setParent0_1_: (TSMeshGeometry* _Nonnull)parent check: (BOOL)check NS_SWIFT_NAME(setParent0(parent:check:));
	-(uint32_t)setParent1: (TSMeshGeometry* _Nonnull)parent NS_SWIFT_NAME(setParent1(_:));
	-(uint32_t)setParent1_: (TSMeshGeometry* _Nonnull)parent NS_SWIFT_NAME(setParent1(parent:));
	-(uint32_t)setParent1_1: (TSMeshGeometry* _Nonnull)parent check: (BOOL)check NS_SWIFT_NAME(setParent1(_:_:));
	-(uint32_t)setParent1_1_: (TSMeshGeometry* _Nonnull)parent check: (BOOL)check NS_SWIFT_NAME(setParent1(parent:check:));
	-(const TSMeshGeometry* _Nonnull)getParent0 NS_SWIFT_NAME(parent0());
	-(const TSMeshGeometry* _Nonnull)getParent1 NS_SWIFT_NAME(parent1());
	-(BOOL)isRoot;
	-(void)reserveChildren: (uint32_t)num_children NS_SWIFT_NAME(reserveChildren(_:));
	-(void)reserveChildren_: (uint32_t)num_children NS_SWIFT_NAME(reserveChildren(num_children:));
	-(uint32_t)addChild0: (TSMeshGeometry* _Nonnull)child NS_SWIFT_NAME(addChild0(_:));
	-(uint32_t)addChild0_: (TSMeshGeometry* _Nonnull)child NS_SWIFT_NAME(addChild0(child:));
	-(uint32_t)addChild0_1: (TSMeshGeometry* _Nonnull)child check: (BOOL)check NS_SWIFT_NAME(addChild0(_:_:));
	-(uint32_t)addChild0_1_: (TSMeshGeometry* _Nonnull)child check: (BOOL)check NS_SWIFT_NAME(addChild0(child:check:));
	-(uint32_t)addChild1: (TSMeshGeometry* _Nonnull)child NS_SWIFT_NAME(addChild1(_:));
	-(uint32_t)addChild1_: (TSMeshGeometry* _Nonnull)child NS_SWIFT_NAME(addChild1(child:));
	-(uint32_t)addChild1_1: (TSMeshGeometry* _Nonnull)child check: (BOOL)check NS_SWIFT_NAME(addChild1(_:_:));
	-(uint32_t)addChild1_1_: (TSMeshGeometry* _Nonnull)child check: (BOOL)check NS_SWIFT_NAME(addChild1(child:check:));
	-(BOOL)removeChild: (TSMeshGeometry* _Nonnull)child NS_SWIFT_NAME(removeChild(_:));
	-(BOOL)removeChild_: (TSMeshGeometry* _Nonnull)child NS_SWIFT_NAME(removeChild(child:));
	-(void)releaseChildren;
	-(uint32_t)findChild: (const TSMeshGeometry* _Nonnull)child NS_SWIFT_NAME(findChild(_:));
	-(uint32_t)findChild_: (const TSMeshGeometry* _Nonnull)child NS_SWIFT_NAME(findChild(child:));
	-(uint32_t)getNumChildren NS_SWIFT_NAME(numChildren());
	-(NSArray<TSMeshGeometry*>* _Nonnull)getChildren NS_SWIFT_NAME(children());
	-(const TSMeshGeometry* _Nonnull)getChild: (uint32_t)index NS_SWIFT_NAME(child(_:));
	-(const TSMeshGeometry* _Nonnull)getChild_: (uint32_t)index NS_SWIFT_NAME(child(index:));
	-(void)clearIndices;
	-(void)reserveIndices: (uint32_t)num_indices NS_SWIFT_NAME(reserveIndices(_:));
	-(void)reserveIndices_: (uint32_t)num_indices NS_SWIFT_NAME(reserveIndices(num_indices:));
	-(uint32_t)addIndices: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(addIndices(_:));
	-(uint32_t)addIndices_: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(addIndices(indices:));
	-(uint32_t)addIndices_1: (TSMeshIndices* _Nonnull)indices check: (BOOL)check NS_SWIFT_NAME(addIndices(_:_:));
	-(uint32_t)addIndices_1_: (TSMeshIndices* _Nonnull)indices check: (BOOL)check NS_SWIFT_NAME(addIndices(indices:check:));
	-(BOOL)removeIndices: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(removeIndices(_:));
	-(BOOL)removeIndices_: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(removeIndices(indices:));
	-(BOOL)replaceIndices: (TSMeshIndices* _Nonnull)old_indices indices: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(replaceIndices(_:_:));
	-(BOOL)replaceIndices_: (TSMeshIndices* _Nonnull)old_indices indices: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(replaceIndices(old_indices:indices:));
	-(uint32_t)findIndices: (const TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(findIndices(_:));
	-(uint32_t)findIndices_: (const TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(findIndices(indices:));
	-(uint32_t)findIndices_1: (TS_MeshIndicesType)type NS_SWIFT_NAME(findIndices(_:));
	-(uint32_t)findIndices_1_: (TS_MeshIndicesType)type NS_SWIFT_NAME(findIndices(type:));
	-(BOOL)hasIndices: (TS_MeshIndicesType)type NS_SWIFT_NAME(hasIndices(_:));
	-(BOOL)hasIndices_: (TS_MeshIndicesType)type NS_SWIFT_NAME(hasIndices(type:));
	-(BOOL)hasSolidIndices;
	-(uint32_t)getNumIndices: (TS_MeshIndicesType)type NS_SWIFT_NAME(numIndices(_:));
	-(uint32_t)getNumIndices_: (TS_MeshIndicesType)type NS_SWIFT_NAME(numIndices(type:));
	-(const TSMeshIndices* _Nonnull)getIndices: (TS_MeshIndicesType)type NS_SWIFT_NAME(indices(_:));
	-(const TSMeshIndices* _Nonnull)getIndices_: (TS_MeshIndicesType)type NS_SWIFT_NAME(indices(type:));
	-(uint32_t)getNumIndices_1 NS_SWIFT_NAME(numIndices());
	-(NSArray<TSMeshIndices*>* _Nonnull)getIndices_1 NS_SWIFT_NAME(indices());
	-(const TSMeshIndices* _Nonnull)getIndices_2: (uint32_t)index NS_SWIFT_NAME(indices(_:));
	-(const TSMeshIndices* _Nonnull)getIndices_2_: (uint32_t)index NS_SWIFT_NAME(indices(index:));
	-(void)clearAttributes;
	-(void)reserveAttributes: (uint32_t)num_attributes NS_SWIFT_NAME(reserveAttributes(_:));
	-(void)reserveAttributes_: (uint32_t)num_attributes NS_SWIFT_NAME(reserveAttributes(num_attributes:));
	-(uint32_t)addAttribute: (TSMeshAttribute* _Nonnull)attribute NS_SWIFT_NAME(addAttribute(_:));
	-(uint32_t)addAttribute_: (TSMeshAttribute* _Nonnull)attribute NS_SWIFT_NAME(addAttribute(attribute:));
	-(uint32_t)addAttribute_1: (TSMeshAttribute* _Nonnull)attribute check: (BOOL)check NS_SWIFT_NAME(addAttribute(_:_:));
	-(uint32_t)addAttribute_1_: (TSMeshAttribute* _Nonnull)attribute check: (BOOL)check NS_SWIFT_NAME(addAttribute(attribute:check:));
	-(uint32_t)addAttribute_2: (TSMeshAttribute* _Nonnull)attribute indices: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(addAttribute(_:_:));
	-(uint32_t)addAttribute_2_: (TSMeshAttribute* _Nonnull)attribute indices: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(addAttribute(attribute:indices:));
	-(uint32_t)addAttribute_3: (TSMeshAttribute* _Nonnull)attribute indices: (TSMeshIndices* _Nonnull)indices check: (BOOL)check NS_SWIFT_NAME(addAttribute(_:_:_:));
	-(uint32_t)addAttribute_3_: (TSMeshAttribute* _Nonnull)attribute indices: (TSMeshIndices* _Nonnull)indices check: (BOOL)check NS_SWIFT_NAME(addAttribute(attribute:indices:check:));
	-(BOOL)removeAttribute: (TSMeshAttribute* _Nonnull)attribute NS_SWIFT_NAME(removeAttribute(_:));
	-(BOOL)removeAttribute_: (TSMeshAttribute* _Nonnull)attribute NS_SWIFT_NAME(removeAttribute(attribute:));
	-(BOOL)replaceAttribute: (TSMeshAttribute* _Nonnull)old_attribute attribute: (TSMeshAttribute* _Nonnull)attribute NS_SWIFT_NAME(replaceAttribute(_:_:));
	-(BOOL)replaceAttribute_: (TSMeshAttribute* _Nonnull)old_attribute attribute: (TSMeshAttribute* _Nonnull)attribute NS_SWIFT_NAME(replaceAttribute(old_attribute:attribute:));
	-(BOOL)replaceAttributeIndices: (const TSMeshIndices* _Nonnull)old_indices indices: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(replaceAttributeIndices(_:_:));
	-(BOOL)replaceAttributeIndices_: (const TSMeshIndices* _Nonnull)old_indices indices: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(replaceAttributeIndices(old_indices:indices:));
	-(uint32_t)findAttribute: (TS_MeshAttributeType)type format: (TS_Format)format NS_SWIFT_NAME(findAttribute(_:_:));
	-(uint32_t)findAttribute_: (TS_MeshAttributeType)type format: (TS_Format)format NS_SWIFT_NAME(findAttribute(type:format:));
	-(uint32_t)findAttribute_1: (TS_MeshAttributeType)type format: (TS_Format)format index: (uint32_t)index NS_SWIFT_NAME(findAttribute(_:_:_:));
	-(uint32_t)findAttribute_1_: (TS_MeshAttributeType)type format: (TS_Format)format index: (uint32_t)index NS_SWIFT_NAME(findAttribute(type:format:index:));
	-(uint32_t)findAttribute_2: (TS_MeshAttributeType)type NS_SWIFT_NAME(findAttribute(_:));
	-(uint32_t)findAttribute_2_: (TS_MeshAttributeType)type NS_SWIFT_NAME(findAttribute(type:));
	-(uint32_t)findAttribute_3: (TS_MeshAttributeType)type index: (uint32_t)index NS_SWIFT_NAME(findAttribute(_:_:));
	-(uint32_t)findAttribute_3_: (TS_MeshAttributeType)type index: (uint32_t)index NS_SWIFT_NAME(findAttribute(type:index:));
	-(uint32_t)findAttribute_4: (const char* _Nonnull)name NS_SWIFT_NAME(findAttribute(_:));
	-(uint32_t)findAttribute_4_: (const char* _Nonnull)name NS_SWIFT_NAME(findAttribute(name:));
	-(uint32_t)findAttribute_5: (const char* _Nonnull)name index: (uint32_t)index NS_SWIFT_NAME(findAttribute(_:_:));
	-(uint32_t)findAttribute_5_: (const char* _Nonnull)name index: (uint32_t)index NS_SWIFT_NAME(findAttribute(name:index:));
	-(uint32_t)findAttribute_6: (const TSMeshAttribute* _Nonnull)attribute NS_SWIFT_NAME(findAttribute(_:));
	-(uint32_t)findAttribute_6_: (const TSMeshAttribute* _Nonnull)attribute NS_SWIFT_NAME(findAttribute(attribute:));
	-(BOOL)hasAttribute: (TS_MeshAttributeType)type format: (TS_Format)format NS_SWIFT_NAME(hasAttribute(_:_:));
	-(BOOL)hasAttribute_: (TS_MeshAttributeType)type format: (TS_Format)format NS_SWIFT_NAME(hasAttribute(type:format:));
	-(BOOL)hasAttribute_1: (TS_MeshAttributeType)type format: (TS_Format)format index: (uint32_t)index NS_SWIFT_NAME(hasAttribute(_:_:_:));
	-(BOOL)hasAttribute_1_: (TS_MeshAttributeType)type format: (TS_Format)format index: (uint32_t)index NS_SWIFT_NAME(hasAttribute(type:format:index:));
	-(BOOL)hasAttribute_2: (TS_MeshAttributeType)type NS_SWIFT_NAME(hasAttribute(_:));
	-(BOOL)hasAttribute_2_: (TS_MeshAttributeType)type NS_SWIFT_NAME(hasAttribute(type:));
	-(BOOL)hasAttribute_3: (TS_MeshAttributeType)type index: (uint32_t)index NS_SWIFT_NAME(hasAttribute(_:_:));
	-(BOOL)hasAttribute_3_: (TS_MeshAttributeType)type index: (uint32_t)index NS_SWIFT_NAME(hasAttribute(type:index:));
	-(BOOL)hasAttribute_4: (const char* _Nonnull)name NS_SWIFT_NAME(hasAttribute(_:));
	-(BOOL)hasAttribute_4_: (const char* _Nonnull)name NS_SWIFT_NAME(hasAttribute(name:));
	-(BOOL)hasAttribute_5: (const char* _Nonnull)name index: (uint32_t)index NS_SWIFT_NAME(hasAttribute(_:_:));
	-(BOOL)hasAttribute_5_: (const char* _Nonnull)name index: (uint32_t)index NS_SWIFT_NAME(hasAttribute(name:index:));
	-(BOOL)hasAttribute_6: (const TSMeshAttribute* _Nonnull)attribute NS_SWIFT_NAME(hasAttribute(_:));
	-(BOOL)hasAttribute_6_: (const TSMeshAttribute* _Nonnull)attribute NS_SWIFT_NAME(hasAttribute(attribute:));
	-(uint32_t)getNumAttributes: (TS_MeshAttributeType)type NS_SWIFT_NAME(numAttributes(_:));
	-(uint32_t)getNumAttributes_: (TS_MeshAttributeType)type NS_SWIFT_NAME(numAttributes(type:));
	-(uint32_t)getNumAttributes_1: (const TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(numAttributes(_:));
	-(uint32_t)getNumAttributes_1_: (const TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(numAttributes(indices:));
	-(const TSMeshAttribute* _Nonnull)getAttribute: (TS_MeshAttributeType)type NS_SWIFT_NAME(attribute(_:));
	-(const TSMeshAttribute* _Nonnull)getAttribute_: (TS_MeshAttributeType)type NS_SWIFT_NAME(attribute(type:));
	-(const TSMeshAttribute* _Nonnull)getAttribute_1: (TS_MeshAttributeType)type index: (uint32_t)index NS_SWIFT_NAME(attribute(_:_:));
	-(const TSMeshAttribute* _Nonnull)getAttribute_1_: (TS_MeshAttributeType)type index: (uint32_t)index NS_SWIFT_NAME(attribute(type:index:));
	-(uint32_t)getNumAttributes_2 NS_SWIFT_NAME(numAttributes());
	-(NSArray<TSMeshAttribute*>* _Nonnull)getAttributes NS_SWIFT_NAME(attributes());
	-(const TSMeshAttribute* _Nonnull)getAttribute_2: (uint32_t)index NS_SWIFT_NAME(attribute(_:));
	-(const TSMeshAttribute* _Nonnull)getAttribute_2_: (uint32_t)index NS_SWIFT_NAME(attribute(index:));
	-(void)clearJoints;
	-(void)reserveJoints: (uint32_t)num_joints NS_SWIFT_NAME(reserveJoints(_:));
	-(void)reserveJoints_: (uint32_t)num_joints NS_SWIFT_NAME(reserveJoints(num_joints:));
	-(uint32_t)addJoint: (TSMeshJoint* _Nonnull)joint NS_SWIFT_NAME(addJoint(_:));
	-(uint32_t)addJoint_: (TSMeshJoint* _Nonnull)joint NS_SWIFT_NAME(addJoint(joint:));
	-(uint32_t)addJoint_1: (TSMeshJoint* _Nonnull)joint check: (BOOL)check NS_SWIFT_NAME(addJoint(_:_:));
	-(uint32_t)addJoint_1_: (TSMeshJoint* _Nonnull)joint check: (BOOL)check NS_SWIFT_NAME(addJoint(joint:check:));
	-(uint32_t)addJoint_2: (TSMeshJoint* _Nonnull)joint node: (TSMeshNode* _Nonnull)node NS_SWIFT_NAME(addJoint(_:_:));
	-(uint32_t)addJoint_2_: (TSMeshJoint* _Nonnull)joint node: (TSMeshNode* _Nonnull)node NS_SWIFT_NAME(addJoint(joint:node:));
	-(uint32_t)addJoint_3: (TSMeshJoint* _Nonnull)joint node: (TSMeshNode* _Nonnull)node check: (BOOL)check NS_SWIFT_NAME(addJoint(_:_:_:));
	-(uint32_t)addJoint_3_: (TSMeshJoint* _Nonnull)joint node: (TSMeshNode* _Nonnull)node check: (BOOL)check NS_SWIFT_NAME(addJoint(joint:node:check:));
	-(BOOL)removeJoint: (TSMeshJoint* _Nonnull)joint NS_SWIFT_NAME(removeJoint(_:));
	-(BOOL)removeJoint_: (TSMeshJoint* _Nonnull)joint NS_SWIFT_NAME(removeJoint(joint:));
	-(BOOL)replaceJoint: (TSMeshJoint* _Nonnull)old_joint joint: (TSMeshJoint* _Nonnull)joint NS_SWIFT_NAME(replaceJoint(_:_:));
	-(BOOL)replaceJoint_: (TSMeshJoint* _Nonnull)old_joint joint: (TSMeshJoint* _Nonnull)joint NS_SWIFT_NAME(replaceJoint(old_joint:joint:));
	-(uint32_t)findJoint: (const TSMeshJoint* _Nonnull)joint NS_SWIFT_NAME(findJoint(_:));
	-(uint32_t)findJoint_: (const TSMeshJoint* _Nonnull)joint NS_SWIFT_NAME(findJoint(joint:));
	-(uint32_t)findJoint_1: (const TSMeshNode* _Nonnull)node NS_SWIFT_NAME(findJoint(_:));
	-(uint32_t)findJoint_1_: (const TSMeshNode* _Nonnull)node NS_SWIFT_NAME(findJoint(node:));
	-(uint32_t)findJoint_2: (const char* _Nonnull)name NS_SWIFT_NAME(findJoint(_:));
	-(uint32_t)findJoint_2_: (const char* _Nonnull)name NS_SWIFT_NAME(findJoint(name:));
	-(uint32_t)getNumJoints NS_SWIFT_NAME(numJoints());
	-(NSArray<TSMeshJoint*>* _Nonnull)getJoints NS_SWIFT_NAME(joints());
	-(const TSMeshJoint* _Nonnull)getJoint: (uint32_t)index NS_SWIFT_NAME(joint(_:));
	-(const TSMeshJoint* _Nonnull)getJoint_: (uint32_t)index NS_SWIFT_NAME(joint(index:));
	-(void)clearMaterials;
	-(void)reserveMaterials: (uint32_t)num_materials NS_SWIFT_NAME(reserveMaterials(_:));
	-(void)reserveMaterials_: (uint32_t)num_materials NS_SWIFT_NAME(reserveMaterials(num_materials:));
	-(uint32_t)addMaterial: (TSMeshMaterial* _Nonnull)material NS_SWIFT_NAME(addMaterial(_:));
	-(uint32_t)addMaterial_: (TSMeshMaterial* _Nonnull)material NS_SWIFT_NAME(addMaterial(material:));
	-(uint32_t)addMaterial_1: (TSMeshMaterial* _Nonnull)material check: (BOOL)check NS_SWIFT_NAME(addMaterial(_:_:));
	-(uint32_t)addMaterial_1_: (TSMeshMaterial* _Nonnull)material check: (BOOL)check NS_SWIFT_NAME(addMaterial(material:check:));
	-(uint32_t)addMaterial_2: (TSMeshMaterial* _Nonnull)material indices: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(addMaterial(_:_:));
	-(uint32_t)addMaterial_2_: (TSMeshMaterial* _Nonnull)material indices: (TSMeshIndices* _Nonnull)indices NS_SWIFT_NAME(addMaterial(material:indices:));
	-(uint32_t)addMaterial_3: (TSMeshMaterial* _Nonnull)material indices: (TSMeshIndices* _Nonnull)indices check: (BOOL)check NS_SWIFT_NAME(addMaterial(_:_:_:));
	-(uint32_t)addMaterial_3_: (TSMeshMaterial* _Nonnull)material indices: (TSMeshIndices* _Nonnull)indices check: (BOOL)check NS_SWIFT_NAME(addMaterial(material:indices:check:));
	-(BOOL)removeMaterial: (TSMeshMaterial* _Nonnull)material NS_SWIFT_NAME(removeMaterial(_:));
	-(BOOL)removeMaterial_: (TSMeshMaterial* _Nonnull)material NS_SWIFT_NAME(removeMaterial(material:));
	-(BOOL)replaceMaterial: (TSMeshMaterial* _Nonnull)old_material material: (TSMeshMaterial* _Nonnull)material NS_SWIFT_NAME(replaceMaterial(_:_:));
	-(BOOL)replaceMaterial_: (TSMeshMaterial* _Nonnull)old_material material: (TSMeshMaterial* _Nonnull)material NS_SWIFT_NAME(replaceMaterial(old_material:material:));
	-(uint32_t)findMaterial: (const TSMeshMaterial* _Nonnull)material NS_SWIFT_NAME(findMaterial(_:));
	-(uint32_t)findMaterial_: (const TSMeshMaterial* _Nonnull)material NS_SWIFT_NAME(findMaterial(material:));
	-(uint32_t)findMaterial_1: (const char* _Nonnull)name NS_SWIFT_NAME(findMaterial(_:));
	-(uint32_t)findMaterial_1_: (const char* _Nonnull)name NS_SWIFT_NAME(findMaterial(name:));
	-(uint32_t)getNumMaterials NS_SWIFT_NAME(numMaterials());
	-(NSArray<TSMeshMaterial*>* _Nonnull)getMaterials NS_SWIFT_NAME(materials());
	-(const TSMeshMaterial* _Nonnull)getMaterial: (uint32_t)index NS_SWIFT_NAME(material(_:));
	-(const TSMeshMaterial* _Nonnull)getMaterial_: (uint32_t)index NS_SWIFT_NAME(material(index:));
	-(void)setBoundBox: (TSBoundBoxf)box NS_SWIFT_NAME(setBoundBox(_:));
	-(void)setBoundBox_: (TSBoundBoxf)box NS_SWIFT_NAME(setBoundBox(box:));
	-(TSBoundBoxf)getBoundBox NS_SWIFT_NAME(boundBox());
	-(void)setBoundSphere: (TSBoundSpheref)sphere NS_SWIFT_NAME(setBoundSphere(_:));
	-(void)setBoundSphere_: (TSBoundSpheref)sphere NS_SWIFT_NAME(setBoundSphere(sphere:));
	-(TSBoundSpheref)getBoundSphere NS_SWIFT_NAME(boundSphere());
	-(BOOL)setTransform: (TSVector3f)scale NS_SWIFT_NAME(setTransform(_:));
	-(BOOL)setTransform_: (TSVector3f)scale NS_SWIFT_NAME(setTransform(scale:));
	-(BOOL)setTransform_1: (TSMatrix4x3f)transform NS_SWIFT_NAME(setTransform(_:));
	-(BOOL)setTransform_1_: (TSMatrix4x3f)transform NS_SWIFT_NAME(setTransform(transform:));
	-(BOOL)setTransform_2: (TSMatrix4x3f)transform apply: (BOOL)apply NS_SWIFT_NAME(setTransform(_:_:));
	-(BOOL)setTransform_2_: (TSMatrix4x3f)transform apply: (BOOL)apply NS_SWIFT_NAME(setTransform(transform:apply:));
	-(TSMatrix4x3f)getTransform NS_SWIFT_NAME(transform());
	-(void)setJointITransform: (TSMatrix4x3f)itransform NS_SWIFT_NAME(setJointITransform(_:));
	-(void)setJointITransform_: (TSMatrix4x3f)itransform NS_SWIFT_NAME(setJointITransform(itransform:));
	-(TSMatrix4x3f)getJointITransform NS_SWIFT_NAME(jointITransform());
	-(void)setMinVisibility: (float32_t)distance NS_SWIFT_NAME(setMinVisibility(_:));
	-(void)setMinVisibility_: (float32_t)distance NS_SWIFT_NAME(setMinVisibility(distance:));
	-(void)setMaxVisibility: (float32_t)distance NS_SWIFT_NAME(setMaxVisibility(_:));
	-(void)setMaxVisibility_: (float32_t)distance NS_SWIFT_NAME(setMaxVisibility(distance:));
	-(void)setVisibilityRange: (float32_t)min max: (float32_t)max NS_SWIFT_NAME(setVisibilityRange(_:_:));
	-(void)setVisibilityRange_: (float32_t)min max: (float32_t)max NS_SWIFT_NAME(setVisibilityRange(min:max:));
	-(float32_t)getMinVisibility NS_SWIFT_NAME(minVisibility());
	-(float32_t)getMaxVisibility NS_SWIFT_NAME(maxVisibility());
	-(BOOL)hasVisibilityRange;
	-(void)setVisibilityError: (float32_t)error NS_SWIFT_NAME(setVisibilityError(_:));
	-(void)setVisibilityError_: (float32_t)error NS_SWIFT_NAME(setVisibilityError(error:));
	-(float32_t)getVisibilityError NS_SWIFT_NAME(visibilityError());
	-(BOOL)createBounds NS_SWIFT_NAME(createBounds());
	-(BOOL)createBounds_1: (BOOL)force NS_SWIFT_NAME(createBounds(_:));
	-(BOOL)createBounds_1_: (BOOL)force NS_SWIFT_NAME(createBounds(force:));
	-(BOOL)createBounds_2: (BOOL)force position: (uint32_t)position NS_SWIFT_NAME(createBounds(_:_:));
	-(BOOL)createBounds_2_: (BOOL)force position: (uint32_t)position NS_SWIFT_NAME(createBounds(force:position:));
	-(uint32_t)createBasis NS_SWIFT_NAME(createBasis());
	-(uint32_t)createBasis_1: (BOOL)force NS_SWIFT_NAME(createBasis(_:));
	-(uint32_t)createBasis_1_: (BOOL)force NS_SWIFT_NAME(createBasis(force:));
	-(uint32_t)createBasis_2: (BOOL)force position: (uint32_t)position NS_SWIFT_NAME(createBasis(_:_:));
	-(uint32_t)createBasis_2_: (BOOL)force position: (uint32_t)position NS_SWIFT_NAME(createBasis(force:position:));
	-(uint32_t)createBasis_3: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal NS_SWIFT_NAME(createBasis(_:_:_:));
	-(uint32_t)createBasis_3_: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal NS_SWIFT_NAME(createBasis(force:position:normal:));
	-(uint32_t)createBasis_4: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal tangent: (uint32_t)tangent NS_SWIFT_NAME(createBasis(_:_:_:_:));
	-(uint32_t)createBasis_4_: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal tangent: (uint32_t)tangent NS_SWIFT_NAME(createBasis(force:position:normal:tangent:));
	-(uint32_t)createBasis_5: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal tangent: (uint32_t)tangent append: (BOOL)append NS_SWIFT_NAME(createBasis(_:_:_:_:_:));
	-(uint32_t)createBasis_5_: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal tangent: (uint32_t)tangent append: (BOOL)append NS_SWIFT_NAME(createBasis(force:position:normal:tangent:append:));
	-(uint32_t)createBasis_6: (float32_t)angle NS_SWIFT_NAME(createBasis(_:));
	-(uint32_t)createBasis_6_: (float32_t)angle NS_SWIFT_NAME(createBasis(angle:));
	-(uint32_t)createBasis_7: (float32_t)angle force: (BOOL)force NS_SWIFT_NAME(createBasis(_:_:));
	-(uint32_t)createBasis_7_: (float32_t)angle force: (BOOL)force NS_SWIFT_NAME(createBasis(angle:force:));
	-(uint32_t)createBasis_8: (float32_t)angle force: (BOOL)force position: (uint32_t)position NS_SWIFT_NAME(createBasis(_:_:_:));
	-(uint32_t)createBasis_8_: (float32_t)angle force: (BOOL)force position: (uint32_t)position NS_SWIFT_NAME(createBasis(angle:force:position:));
	-(uint32_t)createBasis_9: (float32_t)angle force: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal NS_SWIFT_NAME(createBasis(_:_:_:_:));
	-(uint32_t)createBasis_9_: (float32_t)angle force: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal NS_SWIFT_NAME(createBasis(angle:force:position:normal:));
	-(uint32_t)createBasis_10: (float32_t)angle force: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal tangent: (uint32_t)tangent NS_SWIFT_NAME(createBasis(_:_:_:_:_:));
	-(uint32_t)createBasis_10_: (float32_t)angle force: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal tangent: (uint32_t)tangent NS_SWIFT_NAME(createBasis(angle:force:position:normal:tangent:));
	-(uint32_t)createBasis_11: (float32_t)angle force: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal tangent: (uint32_t)tangent append: (BOOL)append NS_SWIFT_NAME(createBasis(_:_:_:_:_:_:));
	-(uint32_t)createBasis_11_: (float32_t)angle force: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal tangent: (uint32_t)tangent append: (BOOL)append NS_SWIFT_NAME(createBasis(angle:force:position:normal:tangent:append:));
	-(uint32_t)createNormals NS_SWIFT_NAME(createNormals());
	-(uint32_t)createNormals_1: (BOOL)force NS_SWIFT_NAME(createNormals(_:));
	-(uint32_t)createNormals_1_: (BOOL)force NS_SWIFT_NAME(createNormals(force:));
	-(uint32_t)createNormals_2: (BOOL)force position: (uint32_t)position NS_SWIFT_NAME(createNormals(_:_:));
	-(uint32_t)createNormals_2_: (BOOL)force position: (uint32_t)position NS_SWIFT_NAME(createNormals(force:position:));
	-(uint32_t)createNormals_3: (BOOL)force position: (uint32_t)position append: (BOOL)append NS_SWIFT_NAME(createNormals(_:_:_:));
	-(uint32_t)createNormals_3_: (BOOL)force position: (uint32_t)position append: (BOOL)append NS_SWIFT_NAME(createNormals(force:position:append:));
	-(uint32_t)createNormals_4: (float32_t)angle NS_SWIFT_NAME(createNormals(_:));
	-(uint32_t)createNormals_4_: (float32_t)angle NS_SWIFT_NAME(createNormals(angle:));
	-(uint32_t)createNormals_5: (float32_t)angle force: (BOOL)force NS_SWIFT_NAME(createNormals(_:_:));
	-(uint32_t)createNormals_5_: (float32_t)angle force: (BOOL)force NS_SWIFT_NAME(createNormals(angle:force:));
	-(uint32_t)createNormals_6: (float32_t)angle force: (BOOL)force position: (uint32_t)position NS_SWIFT_NAME(createNormals(_:_:_:));
	-(uint32_t)createNormals_6_: (float32_t)angle force: (BOOL)force position: (uint32_t)position NS_SWIFT_NAME(createNormals(angle:force:position:));
	-(uint32_t)createNormals_7: (float32_t)angle force: (BOOL)force position: (uint32_t)position append: (BOOL)append NS_SWIFT_NAME(createNormals(_:_:_:_:));
	-(uint32_t)createNormals_7_: (float32_t)angle force: (BOOL)force position: (uint32_t)position append: (BOOL)append NS_SWIFT_NAME(createNormals(angle:force:position:append:));
	-(uint32_t)createTangents NS_SWIFT_NAME(createTangents());
	-(uint32_t)createTangents_1: (BOOL)force NS_SWIFT_NAME(createTangents(_:));
	-(uint32_t)createTangents_1_: (BOOL)force NS_SWIFT_NAME(createTangents(force:));
	-(uint32_t)createTangents_2: (BOOL)force position: (uint32_t)position NS_SWIFT_NAME(createTangents(_:_:));
	-(uint32_t)createTangents_2_: (BOOL)force position: (uint32_t)position NS_SWIFT_NAME(createTangents(force:position:));
	-(uint32_t)createTangents_3: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal NS_SWIFT_NAME(createTangents(_:_:_:));
	-(uint32_t)createTangents_3_: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal NS_SWIFT_NAME(createTangents(force:position:normal:));
	-(uint32_t)createTangents_4: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal texcoord: (uint32_t)texcoord NS_SWIFT_NAME(createTangents(_:_:_:_:));
	-(uint32_t)createTangents_4_: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal texcoord: (uint32_t)texcoord NS_SWIFT_NAME(createTangents(force:position:normal:texcoord:));
	-(uint32_t)createTangents_5: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal texcoord: (uint32_t)texcoord append: (BOOL)append NS_SWIFT_NAME(createTangents(_:_:_:_:_:));
	-(uint32_t)createTangents_5_: (BOOL)force position: (uint32_t)position normal: (uint32_t)normal texcoord: (uint32_t)texcoord append: (BOOL)append NS_SWIFT_NAME(createTangents(force:position:normal:texcoord:append:));
	-(uint32_t)createIslands: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives NS_SWIFT_NAME(createIslands(_:_:));
	-(uint32_t)createIslands_: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives NS_SWIFT_NAME(createIslands(max_attributes:max_primitives:));
	-(uint32_t)createIslands_1: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives force: (BOOL)force NS_SWIFT_NAME(createIslands(_:_:_:));
	-(uint32_t)createIslands_1_: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives force: (BOOL)force NS_SWIFT_NAME(createIslands(max_attributes:max_primitives:force:));
	-(uint32_t)createIslands_2: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives force: (BOOL)force index: (uint32_t)index NS_SWIFT_NAME(createIslands(_:_:_:_:));
	-(uint32_t)createIslands_2_: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives force: (BOOL)force index: (uint32_t)index NS_SWIFT_NAME(createIslands(max_attributes:max_primitives:force:index:));
	-(uint32_t)createIslands_3: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives force: (BOOL)force index: (uint32_t)index position: (uint32_t)position NS_SWIFT_NAME(createIslands(_:_:_:_:_:));
	-(uint32_t)createIslands_3_: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives force: (BOOL)force index: (uint32_t)index position: (uint32_t)position NS_SWIFT_NAME(createIslands(max_attributes:max_primitives:force:index:position:));
	-(uint32_t)createIslands_4: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives force: (BOOL)force index: (uint32_t)index position: (uint32_t)position append: (BOOL)append NS_SWIFT_NAME(createIslands(_:_:_:_:_:_:));
	-(uint32_t)createIslands_4_: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives force: (BOOL)force index: (uint32_t)index position: (uint32_t)position append: (BOOL)append NS_SWIFT_NAME(createIslands(max_attributes:max_primitives:force:index:position:append:));
	-(BOOL)optimizeIndices NS_SWIFT_NAME(optimizeIndices());
	-(BOOL)optimizeIndices_1: (uint32_t)cache NS_SWIFT_NAME(optimizeIndices(_:));
	-(BOOL)optimizeIndices_1_: (uint32_t)cache NS_SWIFT_NAME(optimizeIndices(cache:));
	-(BOOL)optimizeIndices_2: (uint32_t)cache transparent: (BOOL)transparent NS_SWIFT_NAME(optimizeIndices(_:_:));
	-(BOOL)optimizeIndices_2_: (uint32_t)cache transparent: (BOOL)transparent NS_SWIFT_NAME(optimizeIndices(cache:transparent:));
	-(BOOL)optimizeIndices_3: (uint32_t)cache transparent: (BOOL)transparent index: (uint32_t)index NS_SWIFT_NAME(optimizeIndices(_:_:_:));
	-(BOOL)optimizeIndices_3_: (uint32_t)cache transparent: (BOOL)transparent index: (uint32_t)index NS_SWIFT_NAME(optimizeIndices(cache:transparent:index:));
	-(BOOL)optimizeIndices_4: (uint32_t)cache transparent: (BOOL)transparent index: (uint32_t)index position: (uint32_t)position NS_SWIFT_NAME(optimizeIndices(_:_:_:_:));
	-(BOOL)optimizeIndices_4_: (uint32_t)cache transparent: (BOOL)transparent index: (uint32_t)index position: (uint32_t)position NS_SWIFT_NAME(optimizeIndices(cache:transparent:index:position:));
	-(BOOL)optimizeAttributes NS_SWIFT_NAME(optimizeAttributes());
	-(BOOL)optimizeAttributes_1: (uint32_t)material NS_SWIFT_NAME(optimizeAttributes(_:));
	-(BOOL)optimizeAttributes_1_: (uint32_t)material NS_SWIFT_NAME(optimizeAttributes(material:));
	-(void)optimizeMaterials;
	-(BOOL)packAttributes NS_SWIFT_NAME(packAttributes());
	-(BOOL)packAttributes_1: (BOOL)remove NS_SWIFT_NAME(packAttributes(_:));
	-(BOOL)packAttributes_1_: (BOOL)remove NS_SWIFT_NAME(packAttributes(remove:));
	-(BOOL)unpackAttributes NS_SWIFT_NAME(unpackAttributes());
	-(BOOL)unpackAttributes_1: (BOOL)remove NS_SWIFT_NAME(unpackAttributes(_:));
	-(BOOL)unpackAttributes_1_: (BOOL)remove NS_SWIFT_NAME(unpackAttributes(remove:));
	-(int32_t)compare: (const TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(compare(_:));
	-(int32_t)compare_: (const TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(compare(geometry:));
	-(int32_t)compare_1: (const TSMeshGeometry* _Nonnull)geometry transform: (TSMatrix4x3f)transform NS_SWIFT_NAME(compare(_:_:));
	-(int32_t)compare_1_: (const TSMeshGeometry* _Nonnull)geometry transform: (TSMatrix4x3f)transform NS_SWIFT_NAME(compare(geometry:transform:));
	-(int32_t)compare_2: (const TSMeshGeometry* _Nonnull)geometry transform: (TSMatrix4x3f)transform threshold: (float32_t)threshold NS_SWIFT_NAME(compare(_:_:_:));
	-(int32_t)compare_2_: (const TSMeshGeometry* _Nonnull)geometry transform: (TSMatrix4x3f)transform threshold: (float32_t)threshold NS_SWIFT_NAME(compare(geometry:transform:threshold:));
	-(int32_t)compare_3: (const TSMeshGeometry* _Nonnull)geometry transform: (TSMatrix4x3f)transform threshold: (float32_t)threshold spatial: (BOOL)spatial NS_SWIFT_NAME(compare(_:_:_:_:));
	-(int32_t)compare_3_: (const TSMeshGeometry* _Nonnull)geometry transform: (TSMatrix4x3f)transform threshold: (float32_t)threshold spatial: (BOOL)spatial NS_SWIFT_NAME(compare(geometry:transform:threshold:spatial:));
	-(BOOL)isOptimized;
	-(BOOL)validate;
	-(size_t)getMemory NS_SWIFT_NAME(memory());
@end

/// Tellusim::MeshTransform
NS_SWIFT_NAME(MeshTransform)
TS_CAPI @interface TSMeshTransform : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MeshTransform* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MeshTransform&)p;
		-(Tellusim::MeshTransform* _Nonnull)pointer;
		-(Tellusim::MeshTransform&)ref;
	#endif
	-(BOOL)equalPtr: (const TSMeshTransform* _Nonnull)p;
	-(TSMeshTransform* _Nonnull)copyPtr;
	-(TSMeshTransform* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMeshTransform* _Nonnull)null;
	-(void)clear;
	-(float64_t)getMinTime NS_SWIFT_NAME(minTime());
	-(float64_t)getMaxTime NS_SWIFT_NAME(maxTime());
	-(void)setTransform: (float64_t)time transform: (TSMatrix4x3d)transform NS_SWIFT_NAME(setTransform(_:_:));
	-(void)setTransform_: (float64_t)time transform: (TSMatrix4x3d)transform NS_SWIFT_NAME(setTransform(time:transform:));
	-(void)setTransform_1: (float64_t)time transform: (TSMatrix4x3d)transform threshold: (float32_t)threshold NS_SWIFT_NAME(setTransform(_:_:_:));
	-(void)setTransform_1_: (float64_t)time transform: (TSMatrix4x3d)transform threshold: (float32_t)threshold NS_SWIFT_NAME(setTransform(time:transform:threshold:));
	-(void)setTranslate: (float64_t)time translate: (TSVector3d)translate NS_SWIFT_NAME(setTranslate(_:_:));
	-(void)setTranslate_: (float64_t)time translate: (TSVector3d)translate NS_SWIFT_NAME(setTranslate(time:translate:));
	-(void)setTranslate_1: (float64_t)time translate: (TSVector3d)translate threshold: (float32_t)threshold NS_SWIFT_NAME(setTranslate(_:_:_:));
	-(void)setTranslate_1_: (float64_t)time translate: (TSVector3d)translate threshold: (float32_t)threshold NS_SWIFT_NAME(setTranslate(time:translate:threshold:));
	-(void)setRotate: (float64_t)time rotate: (TSQuaternionf)rotate NS_SWIFT_NAME(setRotate(_:_:));
	-(void)setRotate_: (float64_t)time rotate: (TSQuaternionf)rotate NS_SWIFT_NAME(setRotate(time:rotate:));
	-(void)setRotate_1: (float64_t)time rotate: (TSQuaternionf)rotate threshold: (float32_t)threshold NS_SWIFT_NAME(setRotate(_:_:_:));
	-(void)setRotate_1_: (float64_t)time rotate: (TSQuaternionf)rotate threshold: (float32_t)threshold NS_SWIFT_NAME(setRotate(time:rotate:threshold:));
	-(void)setScale: (float64_t)time scale: (TSVector3f)scale NS_SWIFT_NAME(setScale(_:_:));
	-(void)setScale_: (float64_t)time scale: (TSVector3f)scale NS_SWIFT_NAME(setScale(time:scale:));
	-(void)setScale_1: (float64_t)time scale: (TSVector3f)scale threshold: (float32_t)threshold NS_SWIFT_NAME(setScale(_:_:_:));
	-(void)setScale_1_: (float64_t)time scale: (TSVector3f)scale threshold: (float32_t)threshold NS_SWIFT_NAME(setScale(time:scale:threshold:));
	-(void)setMorph: (float64_t)time morph: (TSVector4f)morph NS_SWIFT_NAME(setMorph(_:_:));
	-(void)setMorph_: (float64_t)time morph: (TSVector4f)morph NS_SWIFT_NAME(setMorph(time:morph:));
	-(void)setMorph_1: (float64_t)time morph: (TSVector4f)morph threshold: (float32_t)threshold NS_SWIFT_NAME(setMorph(_:_:_:));
	-(void)setMorph_1_: (float64_t)time morph: (TSVector4f)morph threshold: (float32_t)threshold NS_SWIFT_NAME(setMorph(time:morph:threshold:));
	-(TSMatrix4x3d)getTransform: (float64_t)time NS_SWIFT_NAME(transform(_:));
	-(TSMatrix4x3d)getTransform_: (float64_t)time NS_SWIFT_NAME(transform(time:));
	-(TSVector3d)getTranslate: (float64_t)time NS_SWIFT_NAME(translate(_:));
	-(TSVector3d)getTranslate_: (float64_t)time NS_SWIFT_NAME(translate(time:));
	-(TSQuaternionf)getRotate: (float64_t)time NS_SWIFT_NAME(rotate(_:));
	-(TSQuaternionf)getRotate_: (float64_t)time NS_SWIFT_NAME(rotate(time:));
	-(TSVector3f)getScale: (float64_t)time NS_SWIFT_NAME(scale(_:));
	-(TSVector3f)getScale_: (float64_t)time NS_SWIFT_NAME(scale(time:));
	-(TSVector4f)getMorph: (float64_t)time NS_SWIFT_NAME(morph(_:));
	-(TSVector4f)getMorph_: (float64_t)time NS_SWIFT_NAME(morph(time:));
	-(BOOL)hasTransformKeys;
	-(BOOL)hasTranslateKeys;
	-(BOOL)hasRotateKeys;
	-(BOOL)hasScaleKeys;
	-(BOOL)hasMorphKeys;
	-(void)setTransform_2: (TSVector3d)scale NS_SWIFT_NAME(setTransform(_:));
	-(void)setTransform_2_: (TSVector3d)scale NS_SWIFT_NAME(setTransform(scale:));
	-(void)setTransform_3: (TSMatrix4x3d)transform NS_SWIFT_NAME(setTransform(_:));
	-(void)setTransform_3_: (TSMatrix4x3d)transform NS_SWIFT_NAME(setTransform(transform:));
	-(size_t)getMemory NS_SWIFT_NAME(memory());
@end

/// Tellusim::MeshAnimation
NS_SWIFT_NAME(MeshAnimation)
TS_CAPI @interface TSMeshAnimation : NSObject {
		void *impl;
	}
	-(id _Nonnull)init NS_SWIFT_NAME(init());
	-(id _Nonnull)init_1: (const char* _Nullable)name NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (const char* _Nullable)name NS_SWIFT_NAME(init(name:));
	-(id _Nonnull)init_2: (TSMesh* _Nonnull)mesh NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (TSMesh* _Nonnull)mesh NS_SWIFT_NAME(init(mesh:));
	-(id _Nonnull)init_3: (TSMesh* _Nonnull)mesh name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_3_: (TSMesh* _Nonnull)mesh name: (const char* _Nullable)name NS_SWIFT_NAME(init(mesh:name:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MeshAnimation* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MeshAnimation&)p;
		-(Tellusim::MeshAnimation* _Nonnull)pointer;
		-(Tellusim::MeshAnimation&)ref;
	#endif
	-(BOOL)equalPtr: (const TSMeshAnimation* _Nonnull)p;
	-(TSMeshAnimation* _Nonnull)copyPtr;
	-(TSMeshAnimation* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMeshAnimation* _Nonnull)null;
	-(void)clear;
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(void)setMesh: (TSMesh* _Nonnull)mesh NS_SWIFT_NAME(setMesh(_:));
	-(void)setMesh_: (TSMesh* _Nonnull)mesh NS_SWIFT_NAME(setMesh(mesh:));
	-(void)setMesh_1: (TSMesh* _Nonnull)mesh check: (BOOL)check NS_SWIFT_NAME(setMesh(_:_:));
	-(void)setMesh_1_: (TSMesh* _Nonnull)mesh check: (BOOL)check NS_SWIFT_NAME(setMesh(mesh:check:));
	-(const TSMesh* _Nonnull)getMesh NS_SWIFT_NAME(mesh());
	-(float64_t)getMinTime NS_SWIFT_NAME(minTime());
	-(float64_t)getMaxTime NS_SWIFT_NAME(maxTime());
	-(void)setNumTransforms: (uint32_t)num_transforms NS_SWIFT_NAME(setNumTransforms(_:));
	-(void)setNumTransforms_: (uint32_t)num_transforms NS_SWIFT_NAME(setNumTransforms(num_transforms:));
	-(uint32_t)getNumTransforms NS_SWIFT_NAME(numTransforms());
	-(NSArray<TSMeshTransform*>* _Nonnull)getTransforms NS_SWIFT_NAME(transforms());
	-(const TSMeshTransform* _Nonnull)getTransform: (uint32_t)node NS_SWIFT_NAME(transform(_:));
	-(const TSMeshTransform* _Nonnull)getTransform_: (uint32_t)node NS_SWIFT_NAME(transform(node:));
	-(void)setTransform: (float64_t)time node: (uint32_t)node transform: (TSMatrix4x3d)transform NS_SWIFT_NAME(setTransform(_:_:_:));
	-(void)setTransform_: (float64_t)time node: (uint32_t)node transform: (TSMatrix4x3d)transform NS_SWIFT_NAME(setTransform(time:node:transform:));
	-(void)setTransform_1: (float64_t)time node: (uint32_t)node transform: (TSMatrix4x3d)transform threshold: (float32_t)threshold NS_SWIFT_NAME(setTransform(_:_:_:_:));
	-(void)setTransform_1_: (float64_t)time node: (uint32_t)node transform: (TSMatrix4x3d)transform threshold: (float32_t)threshold NS_SWIFT_NAME(setTransform(time:node:transform:threshold:));
	-(void)setTranslate: (float64_t)time node: (uint32_t)node translate: (TSVector3d)translate NS_SWIFT_NAME(setTranslate(_:_:_:));
	-(void)setTranslate_: (float64_t)time node: (uint32_t)node translate: (TSVector3d)translate NS_SWIFT_NAME(setTranslate(time:node:translate:));
	-(void)setTranslate_1: (float64_t)time node: (uint32_t)node translate: (TSVector3d)translate threshold: (float32_t)threshold NS_SWIFT_NAME(setTranslate(_:_:_:_:));
	-(void)setTranslate_1_: (float64_t)time node: (uint32_t)node translate: (TSVector3d)translate threshold: (float32_t)threshold NS_SWIFT_NAME(setTranslate(time:node:translate:threshold:));
	-(void)setRotate: (float64_t)time node: (uint32_t)node rotate: (TSQuaternionf)rotate NS_SWIFT_NAME(setRotate(_:_:_:));
	-(void)setRotate_: (float64_t)time node: (uint32_t)node rotate: (TSQuaternionf)rotate NS_SWIFT_NAME(setRotate(time:node:rotate:));
	-(void)setRotate_1: (float64_t)time node: (uint32_t)node rotate: (TSQuaternionf)rotate threshold: (float32_t)threshold NS_SWIFT_NAME(setRotate(_:_:_:_:));
	-(void)setRotate_1_: (float64_t)time node: (uint32_t)node rotate: (TSQuaternionf)rotate threshold: (float32_t)threshold NS_SWIFT_NAME(setRotate(time:node:rotate:threshold:));
	-(void)setScale: (float64_t)time node: (uint32_t)node scale: (TSVector3f)scale NS_SWIFT_NAME(setScale(_:_:_:));
	-(void)setScale_: (float64_t)time node: (uint32_t)node scale: (TSVector3f)scale NS_SWIFT_NAME(setScale(time:node:scale:));
	-(void)setScale_1: (float64_t)time node: (uint32_t)node scale: (TSVector3f)scale threshold: (float32_t)threshold NS_SWIFT_NAME(setScale(_:_:_:_:));
	-(void)setScale_1_: (float64_t)time node: (uint32_t)node scale: (TSVector3f)scale threshold: (float32_t)threshold NS_SWIFT_NAME(setScale(time:node:scale:threshold:));
	-(void)setMorph: (float64_t)time node: (uint32_t)node morph: (TSVector4f)morph NS_SWIFT_NAME(setMorph(_:_:_:));
	-(void)setMorph_: (float64_t)time node: (uint32_t)node morph: (TSVector4f)morph NS_SWIFT_NAME(setMorph(time:node:morph:));
	-(void)setMorph_1: (float64_t)time node: (uint32_t)node morph: (TSVector4f)morph threshold: (float32_t)threshold NS_SWIFT_NAME(setMorph(_:_:_:_:));
	-(void)setMorph_1_: (float64_t)time node: (uint32_t)node morph: (TSVector4f)morph threshold: (float32_t)threshold NS_SWIFT_NAME(setMorph(time:node:morph:threshold:));
	-(void)setTime: (float64_t)time NS_SWIFT_NAME(setTime(_:));
	-(void)setTime_: (float64_t)time NS_SWIFT_NAME(setTime(time:));
	-(void)setTime_1: (float64_t)time transform: (TSMatrix4x3d)transform NS_SWIFT_NAME(setTime(_:_:));
	-(void)setTime_1_: (float64_t)time transform: (TSMatrix4x3d)transform NS_SWIFT_NAME(setTime(time:transform:));
	-(void)setTime_2: (float64_t)time transform: (TSMatrix4x3d)transform loop: (BOOL)loop NS_SWIFT_NAME(setTime(_:_:_:));
	-(void)setTime_2_: (float64_t)time transform: (TSMatrix4x3d)transform loop: (BOOL)loop NS_SWIFT_NAME(setTime(time:transform:loop:));
	-(void)setTime_3: (float64_t)time transform: (TSMatrix4x3d)transform loop: (BOOL)loop from: (float64_t)from NS_SWIFT_NAME(setTime(_:_:_:_:));
	-(void)setTime_3_: (float64_t)time transform: (TSMatrix4x3d)transform loop: (BOOL)loop from: (float64_t)from NS_SWIFT_NAME(setTime(time:transform:loop:from:));
	-(void)setTime_4: (float64_t)time transform: (TSMatrix4x3d)transform loop: (BOOL)loop from: (float64_t)from to: (float64_t)to NS_SWIFT_NAME(setTime(_:_:_:_:_:));
	-(void)setTime_4_: (float64_t)time transform: (TSMatrix4x3d)transform loop: (BOOL)loop from: (float64_t)from to: (float64_t)to NS_SWIFT_NAME(setTime(time:transform:loop:from:to:));
	-(void)setTime_5: (float64_t)time loop: (BOOL)loop NS_SWIFT_NAME(setTime(_:_:));
	-(void)setTime_5_: (float64_t)time loop: (BOOL)loop NS_SWIFT_NAME(setTime(time:loop:));
	-(void)setTime_6: (float64_t)time loop: (BOOL)loop from: (float64_t)from NS_SWIFT_NAME(setTime(_:_:_:));
	-(void)setTime_6_: (float64_t)time loop: (BOOL)loop from: (float64_t)from NS_SWIFT_NAME(setTime(time:loop:from:));
	-(void)setTime_7: (float64_t)time loop: (BOOL)loop from: (float64_t)from to: (float64_t)to NS_SWIFT_NAME(setTime(_:_:_:_:));
	-(void)setTime_7_: (float64_t)time loop: (BOOL)loop from: (float64_t)from to: (float64_t)to NS_SWIFT_NAME(setTime(time:loop:from:to:));
	-(TSMatrix4x3d)getLocalTransform: (uint32_t)node NS_SWIFT_NAME(localTransform(_:));
	-(TSMatrix4x3d)getLocalTransform_: (uint32_t)node NS_SWIFT_NAME(localTransform(node:));
	-(TSMatrix4x3d)getLocalTransform_1: (const TSMeshNode* _Nonnull)node NS_SWIFT_NAME(localTransform(_:));
	-(TSMatrix4x3d)getLocalTransform_1_: (const TSMeshNode* _Nonnull)node NS_SWIFT_NAME(localTransform(node:));
	-(TSMatrix4x3d)getLocalTransform_2: (const TSMeshJoint* _Nonnull)joint NS_SWIFT_NAME(localTransform(_:));
	-(TSMatrix4x3d)getLocalTransform_2_: (const TSMeshJoint* _Nonnull)joint NS_SWIFT_NAME(localTransform(joint:));
	-(TSMatrix4x3d)getGlobalTransform: (uint32_t)node NS_SWIFT_NAME(globalTransform(_:));
	-(TSMatrix4x3d)getGlobalTransform_: (uint32_t)node NS_SWIFT_NAME(globalTransform(node:));
	-(TSMatrix4x3d)getGlobalTransform_1: (const TSMeshNode* _Nonnull)node NS_SWIFT_NAME(globalTransform(_:));
	-(TSMatrix4x3d)getGlobalTransform_1_: (const TSMeshNode* _Nonnull)node NS_SWIFT_NAME(globalTransform(node:));
	-(TSMatrix4x3d)getGlobalTransform_2: (const TSMeshJoint* _Nonnull)joint NS_SWIFT_NAME(globalTransform(_:));
	-(TSMatrix4x3d)getGlobalTransform_2_: (const TSMeshJoint* _Nonnull)joint NS_SWIFT_NAME(globalTransform(joint:));
	-(TSVector4f)getMorphTransform: (uint32_t)node NS_SWIFT_NAME(morphTransform(_:));
	-(TSVector4f)getMorphTransform_: (uint32_t)node NS_SWIFT_NAME(morphTransform(node:));
	-(TSVector4f)getMorphTransform_1: (const TSMeshNode* _Nonnull)node NS_SWIFT_NAME(morphTransform(_:));
	-(TSVector4f)getMorphTransform_1_: (const TSMeshNode* _Nonnull)node NS_SWIFT_NAME(morphTransform(node:));
	-(TSBoundBoxd)getBoundBox NS_SWIFT_NAME(boundBox());
	-(TSBoundBoxd)getBoundBox_1: (const TSMeshNode* _Nonnull)node NS_SWIFT_NAME(boundBox(_:));
	-(TSBoundBoxd)getBoundBox_1_: (const TSMeshNode* _Nonnull)node NS_SWIFT_NAME(boundBox(node:));
	-(TSBoundBoxd)getBoundBox_2: (const TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(boundBox(_:));
	-(TSBoundBoxd)getBoundBox_2_: (const TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(boundBox(geometry:));
	-(TSBoundBoxd)getBoundBox_3: (const TSMeshGeometry* _Nonnull)geometry morph: (TSVector4f)morph NS_SWIFT_NAME(boundBox(_:_:));
	-(TSBoundBoxd)getBoundBox_3_: (const TSMeshGeometry* _Nonnull)geometry morph: (TSVector4f)morph NS_SWIFT_NAME(boundBox(geometry:morph:));
	-(void)setTransform_2: (TSVector3d)scale NS_SWIFT_NAME(setTransform(_:));
	-(void)setTransform_2_: (TSVector3d)scale NS_SWIFT_NAME(setTransform(scale:));
	-(void)setTransform_3: (TSMatrix4x3d)transform NS_SWIFT_NAME(setTransform(_:));
	-(void)setTransform_3_: (TSMatrix4x3d)transform NS_SWIFT_NAME(setTransform(transform:));
	-(void)optimizeTransforms NS_SWIFT_NAME(optimizeTransforms());
	-(void)optimizeTransforms_1: (float32_t)threshold NS_SWIFT_NAME(optimizeTransforms(_:));
	-(void)optimizeTransforms_1_: (float32_t)threshold NS_SWIFT_NAME(optimizeTransforms(threshold:));
	-(size_t)getMemory NS_SWIFT_NAME(memory());
@end

/// Tellusim::MeshAttachment
NS_SWIFT_NAME(MeshAttachment)
TS_CAPI @interface TSMeshAttachment : NSObject {
		void *impl;
	}
	-(id _Nonnull)init NS_SWIFT_NAME(init());
	-(id _Nonnull)init_1: (const char* _Nullable)name NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (const char* _Nullable)name NS_SWIFT_NAME(init(name:));
	-(id _Nonnull)init_2: (TS_MeshAttachmentType)type NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (TS_MeshAttachmentType)type NS_SWIFT_NAME(init(type:));
	-(id _Nonnull)init_3: (TS_MeshAttachmentType)type name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_3_: (TS_MeshAttachmentType)type name: (const char* _Nullable)name NS_SWIFT_NAME(init(type:name:));
	-(id _Nonnull)init_4: (TSMeshNode* _Nonnull)node NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_4_: (TSMeshNode* _Nonnull)node NS_SWIFT_NAME(init(node:));
	-(id _Nonnull)init_5: (TSMeshNode* _Nonnull)node name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_5_: (TSMeshNode* _Nonnull)node name: (const char* _Nullable)name NS_SWIFT_NAME(init(node:name:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MeshAttachment* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MeshAttachment&)p;
		-(Tellusim::MeshAttachment* _Nonnull)pointer;
		-(Tellusim::MeshAttachment&)ref;
	#endif
	-(BOOL)equalPtr: (const TSMeshAttachment* _Nonnull)p;
	-(TSMeshAttachment* _Nonnull)copyPtr;
	-(TSMeshAttachment* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMeshAttachment* _Nonnull)null;
	-(void)clear;
	-(void)setType: (TS_MeshAttachmentType)type NS_SWIFT_NAME(setType(_:));
	-(void)setType_: (TS_MeshAttachmentType)type NS_SWIFT_NAME(setType(type:));
	-(TS_MeshAttachmentType)getType NS_SWIFT_NAME(type());
	+(NSString* _Nonnull)getTypeName: (TS_MeshAttachmentType)type NS_SWIFT_NAME(typeName(_:));
	+(NSString* _Nonnull)getTypeName_: (TS_MeshAttachmentType)type NS_SWIFT_NAME(typeName(type:));
	-(NSString* _Nonnull)getTypeName_1 NS_SWIFT_NAME(typeName());
	-(BOOL)isUnknown;
	-(BOOL)isLight;
	-(BOOL)isCamera;
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(void)setNode: (TSMeshNode* _Nonnull)node NS_SWIFT_NAME(setNode(_:));
	-(void)setNode_: (TSMeshNode* _Nonnull)node NS_SWIFT_NAME(setNode(node:));
	-(void)setNode_1: (TSMeshNode* _Nonnull)node check: (BOOL)check NS_SWIFT_NAME(setNode(_:_:));
	-(void)setNode_1_: (TSMeshNode* _Nonnull)node check: (BOOL)check NS_SWIFT_NAME(setNode(node:check:));
	-(const TSMeshNode* _Nonnull)getNode NS_SWIFT_NAME(node());
	-(void)setData: (const char* _Nonnull)data NS_SWIFT_NAME(setData(_:));
	-(void)setData_: (const char* _Nonnull)data NS_SWIFT_NAME(setData(data:));
	-(void)setData_1: (const TSString* _Nonnull)data NS_SWIFT_NAME(setData(_:));
	-(void)setData_1_: (const TSString* _Nonnull)data NS_SWIFT_NAME(setData(data:));
	-(NSString* _Nonnull)getData NS_SWIFT_NAME(data());
	-(void)clearParameters;
	-(BOOL)removeParameter: (const char* _Nonnull)type NS_SWIFT_NAME(removeParameter(_:));
	-(BOOL)removeParameter_: (const char* _Nonnull)type NS_SWIFT_NAME(removeParameter(type:));
	-(void)copyParameters: (const TSMeshAttachment* _Nonnull)attachment NS_SWIFT_NAME(copyParameters(_:));
	-(void)copyParameters_: (const TSMeshAttachment* _Nonnull)attachment NS_SWIFT_NAME(copyParameters(attachment:));
	-(uint32_t)findParameter: (const char* _Nonnull)type NS_SWIFT_NAME(findParameter(_:));
	-(uint32_t)findParameter_: (const char* _Nonnull)type NS_SWIFT_NAME(findParameter(type:));
	-(BOOL)hasParameter: (const char* _Nonnull)type NS_SWIFT_NAME(hasParameter(_:));
	-(BOOL)hasParameter_: (const char* _Nonnull)type NS_SWIFT_NAME(hasParameter(type:));
	-(uint32_t)getNumParameters NS_SWIFT_NAME(numParameters());
	-(NSString* _Nonnull)getParameterType: (uint32_t)index NS_SWIFT_NAME(parameterType(_:));
	-(NSString* _Nonnull)getParameterType_: (uint32_t)index NS_SWIFT_NAME(parameterType(index:));
	-(void)addParameter: (const char* _Nonnull)type value: (BOOL)value NS_SWIFT_NAME(addParameter(_:_:));
	-(void)addParameter_: (const char* _Nonnull)type value: (BOOL)value NS_SWIFT_NAME(addParameter(type:value:));
	-(void)addParameter_1: (const char* _Nonnull)type value: (float32_t)value NS_SWIFT_NAME(addParameter(_:_:));
	-(void)addParameter_1_: (const char* _Nonnull)type value: (float32_t)value NS_SWIFT_NAME(addParameter(type:value:));
	-(void)addParameter_2: (const char* _Nonnull)type vector: (TSVector4f)vector NS_SWIFT_NAME(addParameter(_:_:));
	-(void)addParameter_2_: (const char* _Nonnull)type vector: (TSVector4f)vector NS_SWIFT_NAME(addParameter(type:vector:));
	-(void)addParameter_3: (const char* _Nonnull)type color: (TSColor)color NS_SWIFT_NAME(addParameter(_:_:));
	-(void)addParameter_3_: (const char* _Nonnull)type color: (TSColor)color NS_SWIFT_NAME(addParameter(type:color:));
	-(void)addParameter_4: (const char* _Nonnull)type name: (const char* _Nonnull)name NS_SWIFT_NAME(addParameter(_:_:));
	-(void)addParameter_4_: (const char* _Nonnull)type name: (const char* _Nonnull)name NS_SWIFT_NAME(addParameter(type:name:));
	-(void)addParameter_5: (const char* _Nonnull)type name: (const TSString* _Nonnull)name NS_SWIFT_NAME(addParameter(_:_:));
	-(void)addParameter_5_: (const char* _Nonnull)type name: (const TSString* _Nonnull)name NS_SWIFT_NAME(addParameter(type:name:));
	-(TS_MeshAttachmentFlags)getParameterFlags: (uint32_t)index NS_SWIFT_NAME(parameterFlags(_:));
	-(TS_MeshAttachmentFlags)getParameterFlags_: (uint32_t)index NS_SWIFT_NAME(parameterFlags(index:));
	-(BOOL)hasParameterFlag: (uint32_t)index flags: (TS_MeshAttachmentFlags)flags NS_SWIFT_NAME(hasParameterFlag(_:_:));
	-(BOOL)hasParameterFlag_: (uint32_t)index flags: (TS_MeshAttachmentFlags)flags NS_SWIFT_NAME(hasParameterFlag(index:flags:));
	-(BOOL)hasParameterFlags: (uint32_t)index flags: (TS_MeshAttachmentFlags)flags NS_SWIFT_NAME(hasParameterFlags(_:_:));
	-(BOOL)hasParameterFlags_: (uint32_t)index flags: (TS_MeshAttachmentFlags)flags NS_SWIFT_NAME(hasParameterFlags(index:flags:));
	-(BOOL)getParameterBool: (uint32_t)index NS_SWIFT_NAME(parameterBool(_:));
	-(BOOL)getParameterBool_: (uint32_t)index NS_SWIFT_NAME(parameterBool(index:));
	-(BOOL)getParameterBool_1: (uint32_t)index value: (BOOL)value NS_SWIFT_NAME(parameterBool(_:_:));
	-(BOOL)getParameterBool_1_: (uint32_t)index value: (BOOL)value NS_SWIFT_NAME(parameterBool(index:value:));
	-(float32_t)getParameterScalarf32: (uint32_t)index NS_SWIFT_NAME(parameterScalarf32(_:));
	-(float32_t)getParameterScalarf32_: (uint32_t)index NS_SWIFT_NAME(parameterScalarf32(index:));
	-(float32_t)getParameterScalarf32_1: (uint32_t)index value: (float32_t)value NS_SWIFT_NAME(parameterScalarf32(_:_:));
	-(float32_t)getParameterScalarf32_1_: (uint32_t)index value: (float32_t)value NS_SWIFT_NAME(parameterScalarf32(index:value:));
	-(TSVector4f)getParameterVector4f: (uint32_t)index NS_SWIFT_NAME(parameterVector4f(_:));
	-(TSVector4f)getParameterVector4f_: (uint32_t)index NS_SWIFT_NAME(parameterVector4f(index:));
	-(TSVector4f)getParameterVector4f_1: (uint32_t)index vector: (TSVector4f)vector NS_SWIFT_NAME(parameterVector4f(_:_:));
	-(TSVector4f)getParameterVector4f_1_: (uint32_t)index vector: (TSVector4f)vector NS_SWIFT_NAME(parameterVector4f(index:vector:));
	-(TSColor)getParameterColor: (uint32_t)index NS_SWIFT_NAME(parameterColor(_:));
	-(TSColor)getParameterColor_: (uint32_t)index NS_SWIFT_NAME(parameterColor(index:));
	-(TSColor)getParameterColor_1: (uint32_t)index color: (TSColor)color NS_SWIFT_NAME(parameterColor(_:_:));
	-(TSColor)getParameterColor_1_: (uint32_t)index color: (TSColor)color NS_SWIFT_NAME(parameterColor(index:color:));
	-(NSString* _Nonnull)getParameterName: (uint32_t)index NS_SWIFT_NAME(parameterName(_:));
	-(NSString* _Nonnull)getParameterName_: (uint32_t)index NS_SWIFT_NAME(parameterName(index:));
	-(NSString* _Nonnull)getParameterName_1: (uint32_t)index name: (const TSString* _Nonnull)name NS_SWIFT_NAME(parameterName(_:_:));
	-(NSString* _Nonnull)getParameterName_1_: (uint32_t)index name: (const TSString* _Nonnull)name NS_SWIFT_NAME(parameterName(index:name:));
	-(TS_MeshAttachmentFlags)getParameterFlags_1: (const char* _Nonnull)type NS_SWIFT_NAME(parameterFlags(_:));
	-(TS_MeshAttachmentFlags)getParameterFlags_1_: (const char* _Nonnull)type NS_SWIFT_NAME(parameterFlags(type:));
	-(BOOL)hasParameterFlag_1: (const char* _Nonnull)type flags: (TS_MeshAttachmentFlags)flags NS_SWIFT_NAME(hasParameterFlag(_:_:));
	-(BOOL)hasParameterFlag_1_: (const char* _Nonnull)type flags: (TS_MeshAttachmentFlags)flags NS_SWIFT_NAME(hasParameterFlag(type:flags:));
	-(BOOL)hasParameterFlags_1: (const char* _Nonnull)type flags: (TS_MeshAttachmentFlags)flags NS_SWIFT_NAME(hasParameterFlags(_:_:));
	-(BOOL)hasParameterFlags_1_: (const char* _Nonnull)type flags: (TS_MeshAttachmentFlags)flags NS_SWIFT_NAME(hasParameterFlags(type:flags:));
	-(BOOL)getParameterBool_2: (const char* _Nonnull)type NS_SWIFT_NAME(parameterBool(_:));
	-(BOOL)getParameterBool_2_: (const char* _Nonnull)type NS_SWIFT_NAME(parameterBool(type:));
	-(BOOL)getParameterBool_3: (const char* _Nonnull)type value: (BOOL)value NS_SWIFT_NAME(parameterBool(_:_:));
	-(BOOL)getParameterBool_3_: (const char* _Nonnull)type value: (BOOL)value NS_SWIFT_NAME(parameterBool(type:value:));
	-(float32_t)getParameterScalarf32_2: (const char* _Nonnull)type NS_SWIFT_NAME(parameterScalarf32(_:));
	-(float32_t)getParameterScalarf32_2_: (const char* _Nonnull)type NS_SWIFT_NAME(parameterScalarf32(type:));
	-(float32_t)getParameterScalarf32_3: (const char* _Nonnull)type value: (float32_t)value NS_SWIFT_NAME(parameterScalarf32(_:_:));
	-(float32_t)getParameterScalarf32_3_: (const char* _Nonnull)type value: (float32_t)value NS_SWIFT_NAME(parameterScalarf32(type:value:));
	-(TSVector4f)getParameterVector4f_2: (const char* _Nonnull)type NS_SWIFT_NAME(parameterVector4f(_:));
	-(TSVector4f)getParameterVector4f_2_: (const char* _Nonnull)type NS_SWIFT_NAME(parameterVector4f(type:));
	-(TSVector4f)getParameterVector4f_3: (const char* _Nonnull)type vector: (TSVector4f)vector NS_SWIFT_NAME(parameterVector4f(_:_:));
	-(TSVector4f)getParameterVector4f_3_: (const char* _Nonnull)type vector: (TSVector4f)vector NS_SWIFT_NAME(parameterVector4f(type:vector:));
	-(TSColor)getParameterColor_2: (const char* _Nonnull)type NS_SWIFT_NAME(parameterColor(_:));
	-(TSColor)getParameterColor_2_: (const char* _Nonnull)type NS_SWIFT_NAME(parameterColor(type:));
	-(TSColor)getParameterColor_3: (const char* _Nonnull)type color: (TSColor)color NS_SWIFT_NAME(parameterColor(_:_:));
	-(TSColor)getParameterColor_3_: (const char* _Nonnull)type color: (TSColor)color NS_SWIFT_NAME(parameterColor(type:color:));
	-(NSString* _Nonnull)getParameterName_2: (const char* _Nonnull)type NS_SWIFT_NAME(parameterName(_:));
	-(NSString* _Nonnull)getParameterName_2_: (const char* _Nonnull)type NS_SWIFT_NAME(parameterName(type:));
	-(NSString* _Nonnull)getParameterName_3: (const char* _Nonnull)type name: (const TSString* _Nonnull)name NS_SWIFT_NAME(parameterName(_:_:));
	-(NSString* _Nonnull)getParameterName_3_: (const char* _Nonnull)type name: (const TSString* _Nonnull)name NS_SWIFT_NAME(parameterName(type:name:));
	-(void)setTransform: (TSVector3f)scale NS_SWIFT_NAME(setTransform(_:));
	-(void)setTransform_: (TSVector3f)scale NS_SWIFT_NAME(setTransform(scale:));
	-(void)setTransform_1: (TSMatrix4x3f)transform NS_SWIFT_NAME(setTransform(_:));
	-(void)setTransform_1_: (TSMatrix4x3f)transform NS_SWIFT_NAME(setTransform(transform:));
	-(TSMatrix4x3f)getTransform NS_SWIFT_NAME(transform());
	-(int32_t)compare: (const TSMeshAttachment* _Nonnull)attachment NS_SWIFT_NAME(compare(_:));
	-(int32_t)compare_: (const TSMeshAttachment* _Nonnull)attachment NS_SWIFT_NAME(compare(attachment:));
	-(size_t)getMemory NS_SWIFT_NAME(memory());
@end

NS_SWIFT_NAME(MeshAttachment.TypeColor)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeColor;

NS_SWIFT_NAME(MeshAttachment.TypeIntensity)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeIntensity;

NS_SWIFT_NAME(MeshAttachment.TypeTemperature)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeTemperature;

NS_SWIFT_NAME(MeshAttachment.TypeInnerAngle)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeInnerAngle;

NS_SWIFT_NAME(MeshAttachment.TypeOuterAngle)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeOuterAngle;

NS_SWIFT_NAME(MeshAttachment.TypeAttenuation)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeAttenuation;

NS_SWIFT_NAME(MeshAttachment.TypeDiffuse)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeDiffuse;

NS_SWIFT_NAME(MeshAttachment.TypeSpecular)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeSpecular;

NS_SWIFT_NAME(MeshAttachment.TypeWidth)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeWidth;

NS_SWIFT_NAME(MeshAttachment.TypeHeight)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeHeight;

NS_SWIFT_NAME(MeshAttachment.TypeRadius)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeRadius;

NS_SWIFT_NAME(MeshAttachment.TypeLength)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeLength;

NS_SWIFT_NAME(MeshAttachment.TypeShadow)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeShadow;

NS_SWIFT_NAME(MeshAttachment.TypeAspect)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeAspect;

NS_SWIFT_NAME(MeshAttachment.TypeFovX)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeFovX;

NS_SWIFT_NAME(MeshAttachment.TypeFovY)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeFovY;

NS_SWIFT_NAME(MeshAttachment.TypeSizeX)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeSizeX;

NS_SWIFT_NAME(MeshAttachment.TypeSizeY)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeSizeY;

NS_SWIFT_NAME(MeshAttachment.TypeZNear)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeZNear;

NS_SWIFT_NAME(MeshAttachment.TypeZFar)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeZFar;

NS_SWIFT_NAME(MeshAttachment.TypeFStop)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeFStop;

NS_SWIFT_NAME(MeshAttachment.TypeExposure)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeExposure;

NS_SWIFT_NAME(MeshAttachment.TypeApertureX)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeApertureX;

NS_SWIFT_NAME(MeshAttachment.TypeApertureY)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeApertureY;

NS_SWIFT_NAME(MeshAttachment.TypeFocalLength)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeFocalLength;

NS_SWIFT_NAME(MeshAttachment.TypeFocusDistance)
TS_CAPI extern NSString* _Nonnull tsMeshAttachmentTypeFocusDistance;

/// Tellusim::Mesh
NS_SWIFT_NAME(Mesh)
TS_CAPI @interface TSMesh : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Mesh* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Mesh&)p;
		-(Tellusim::Mesh* _Nonnull)pointer;
		-(Tellusim::Mesh&)ref;
	#endif
	-(BOOL)equalPtr: (const TSMesh* _Nonnull)p;
	-(TSMesh* _Nonnull)copyPtr;
	-(TSMesh* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMesh* _Nonnull)null;
	-(void)clear;
	-(BOOL)isLoaded;
	-(BOOL)info: (const char* _Nonnull)name NS_SWIFT_NAME(info(_:));
	-(BOOL)info_: (const char* _Nonnull)name NS_SWIFT_NAME(info(name:));
	-(BOOL)info_1: (const char* _Nonnull)name flags: (TS_MeshFlags)flags NS_SWIFT_NAME(info(_:_:));
	-(BOOL)info_1_: (const char* _Nonnull)name flags: (TS_MeshFlags)flags NS_SWIFT_NAME(info(name:flags:));
	-(BOOL)info_2: (const char* _Nonnull)name flags: (TS_MeshFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(_:_:_:));
	-(BOOL)info_2_: (const char* _Nonnull)name flags: (TS_MeshFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(name:flags:async:));
	-(BOOL)info_3: (const TSString* _Nonnull)name NS_SWIFT_NAME(info(_:));
	-(BOOL)info_3_: (const TSString* _Nonnull)name NS_SWIFT_NAME(info(name:));
	-(BOOL)info_4: (const TSString* _Nonnull)name flags: (TS_MeshFlags)flags NS_SWIFT_NAME(info(_:_:));
	-(BOOL)info_4_: (const TSString* _Nonnull)name flags: (TS_MeshFlags)flags NS_SWIFT_NAME(info(name:flags:));
	-(BOOL)info_5: (const TSString* _Nonnull)name flags: (TS_MeshFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(_:_:_:));
	-(BOOL)info_5_: (const TSString* _Nonnull)name flags: (TS_MeshFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(name:flags:async:));
	-(BOOL)info_6: (TSStream* _Nonnull)stream NS_SWIFT_NAME(info(_:));
	-(BOOL)info_6_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(info(stream:));
	-(BOOL)info_7: (TSStream* _Nonnull)stream flags: (TS_MeshFlags)flags NS_SWIFT_NAME(info(_:_:));
	-(BOOL)info_7_: (TSStream* _Nonnull)stream flags: (TS_MeshFlags)flags NS_SWIFT_NAME(info(stream:flags:));
	-(BOOL)info_8: (TSStream* _Nonnull)stream flags: (TS_MeshFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(_:_:_:));
	-(BOOL)info_8_: (TSStream* _Nonnull)stream flags: (TS_MeshFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(stream:flags:async:));
	-(BOOL)info_9: (const char* _Nonnull)name async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(_:_:));
	-(BOOL)info_9_: (const char* _Nonnull)name async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(name:async:));
	-(BOOL)info_10: (const TSString* _Nonnull)name async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(_:_:));
	-(BOOL)info_10_: (const TSString* _Nonnull)name async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(name:async:));
	-(BOOL)info_11: (TSStream* _Nonnull)stream async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(_:_:));
	-(BOOL)info_11_: (TSStream* _Nonnull)stream async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(info(stream:async:));
	-(BOOL)load: (const char* _Nonnull)name NS_SWIFT_NAME(load(_:));
	-(BOOL)load_: (const char* _Nonnull)name NS_SWIFT_NAME(load(name:));
	-(BOOL)load_1: (const char* _Nonnull)name flags: (TS_MeshFlags)flags NS_SWIFT_NAME(load(_:_:));
	-(BOOL)load_1_: (const char* _Nonnull)name flags: (TS_MeshFlags)flags NS_SWIFT_NAME(load(name:flags:));
	-(BOOL)load_2: (const char* _Nonnull)name flags: (TS_MeshFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(_:_:_:));
	-(BOOL)load_2_: (const char* _Nonnull)name flags: (TS_MeshFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(name:flags:async:));
	-(BOOL)load_3: (const TSString* _Nonnull)name NS_SWIFT_NAME(load(_:));
	-(BOOL)load_3_: (const TSString* _Nonnull)name NS_SWIFT_NAME(load(name:));
	-(BOOL)load_4: (const TSString* _Nonnull)name flags: (TS_MeshFlags)flags NS_SWIFT_NAME(load(_:_:));
	-(BOOL)load_4_: (const TSString* _Nonnull)name flags: (TS_MeshFlags)flags NS_SWIFT_NAME(load(name:flags:));
	-(BOOL)load_5: (const TSString* _Nonnull)name flags: (TS_MeshFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(_:_:_:));
	-(BOOL)load_5_: (const TSString* _Nonnull)name flags: (TS_MeshFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(name:flags:async:));
	-(BOOL)load_6: (TSStream* _Nonnull)stream NS_SWIFT_NAME(load(_:));
	-(BOOL)load_6_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(load(stream:));
	-(BOOL)load_7: (TSStream* _Nonnull)stream flags: (TS_MeshFlags)flags NS_SWIFT_NAME(load(_:_:));
	-(BOOL)load_7_: (TSStream* _Nonnull)stream flags: (TS_MeshFlags)flags NS_SWIFT_NAME(load(stream:flags:));
	-(BOOL)load_8: (TSStream* _Nonnull)stream flags: (TS_MeshFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(_:_:_:));
	-(BOOL)load_8_: (TSStream* _Nonnull)stream flags: (TS_MeshFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(stream:flags:async:));
	-(BOOL)load_9: (const char* _Nonnull)name async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(_:_:));
	-(BOOL)load_9_: (const char* _Nonnull)name async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(name:async:));
	-(BOOL)load_10: (const TSString* _Nonnull)name async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(_:_:));
	-(BOOL)load_10_: (const TSString* _Nonnull)name async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(name:async:));
	-(BOOL)load_11: (TSStream* _Nonnull)stream async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(_:_:));
	-(BOOL)load_11_: (TSStream* _Nonnull)stream async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(stream:async:));
	-(BOOL)save: (const char* _Nonnull)name NS_SWIFT_NAME(save(_:));
	-(BOOL)save_: (const char* _Nonnull)name NS_SWIFT_NAME(save(name:));
	-(BOOL)save_1: (const char* _Nonnull)name flags: (TS_MeshFlags)flags NS_SWIFT_NAME(save(_:_:));
	-(BOOL)save_1_: (const char* _Nonnull)name flags: (TS_MeshFlags)flags NS_SWIFT_NAME(save(name:flags:));
	-(BOOL)save_2: (const TSString* _Nonnull)name NS_SWIFT_NAME(save(_:));
	-(BOOL)save_2_: (const TSString* _Nonnull)name NS_SWIFT_NAME(save(name:));
	-(BOOL)save_3: (const TSString* _Nonnull)name flags: (TS_MeshFlags)flags NS_SWIFT_NAME(save(_:_:));
	-(BOOL)save_3_: (const TSString* _Nonnull)name flags: (TS_MeshFlags)flags NS_SWIFT_NAME(save(name:flags:));
	-(BOOL)save_4: (TSStream* _Nonnull)stream NS_SWIFT_NAME(save(_:));
	-(BOOL)save_4_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(save(stream:));
	-(BOOL)save_5: (TSStream* _Nonnull)stream flags: (TS_MeshFlags)flags NS_SWIFT_NAME(save(_:_:));
	-(BOOL)save_5_: (TSStream* _Nonnull)stream flags: (TS_MeshFlags)flags NS_SWIFT_NAME(save(stream:flags:));
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(BOOL)setBasis: (TS_MeshAxis)front right: (TS_MeshAxis)right up: (TS_MeshAxis)up NS_SWIFT_NAME(setBasis(_:_:_:));
	-(BOOL)setBasis_: (TS_MeshAxis)front right: (TS_MeshAxis)right up: (TS_MeshAxis)up NS_SWIFT_NAME(setBasis(front:right:up:));
	-(BOOL)setBasis_1: (TS_MeshBasis)basis NS_SWIFT_NAME(setBasis(_:));
	-(BOOL)setBasis_1_: (TS_MeshBasis)basis NS_SWIFT_NAME(setBasis(basis:));
	-(TS_MeshAxis)getFrontAxis NS_SWIFT_NAME(frontAxis());
	-(TS_MeshAxis)getRightAxis NS_SWIFT_NAME(rightAxis());
	-(TS_MeshAxis)getUpAxis NS_SWIFT_NAME(upAxis());
	-(TS_MeshBasis)getBasis NS_SWIFT_NAME(basis());
	-(NSString* _Nonnull)getFrontAxisName NS_SWIFT_NAME(frontAxisName());
	-(NSString* _Nonnull)getRightAxisName NS_SWIFT_NAME(rightAxisName());
	-(NSString* _Nonnull)getUpAxisName NS_SWIFT_NAME(upAxisName());
	-(NSString* _Nonnull)getBasisName NS_SWIFT_NAME(basisName());
	-(void)clearNodes;
	-(void)reserveNodes: (uint32_t)num_nodes NS_SWIFT_NAME(reserveNodes(_:));
	-(void)reserveNodes_: (uint32_t)num_nodes NS_SWIFT_NAME(reserveNodes(num_nodes:));
	-(uint32_t)addNode: (TSMeshNode* _Nonnull)node NS_SWIFT_NAME(addNode(_:));
	-(uint32_t)addNode_: (TSMeshNode* _Nonnull)node NS_SWIFT_NAME(addNode(node:));
	-(uint32_t)addNode_1: (TSMeshNode* _Nonnull)node check: (BOOL)check NS_SWIFT_NAME(addNode(_:_:));
	-(uint32_t)addNode_1_: (TSMeshNode* _Nonnull)node check: (BOOL)check NS_SWIFT_NAME(addNode(node:check:));
	-(BOOL)removeNode: (TSMeshNode* _Nonnull)node NS_SWIFT_NAME(removeNode(_:));
	-(BOOL)removeNode_: (TSMeshNode* _Nonnull)node NS_SWIFT_NAME(removeNode(node:));
	-(uint32_t)findNode: (const TSMeshNode* _Nonnull)node NS_SWIFT_NAME(findNode(_:));
	-(uint32_t)findNode_: (const TSMeshNode* _Nonnull)node NS_SWIFT_NAME(findNode(node:));
	-(uint32_t)findNode_1: (const char* _Nonnull)name NS_SWIFT_NAME(findNode(_:));
	-(uint32_t)findNode_1_: (const char* _Nonnull)name NS_SWIFT_NAME(findNode(name:));
	-(uint32_t)getNumNodes NS_SWIFT_NAME(numNodes());
	-(NSArray<TSMeshNode*>* _Nonnull)getNodes NS_SWIFT_NAME(nodes());
	-(const TSMeshNode* _Nonnull)getNode: (uint32_t)index NS_SWIFT_NAME(node(_:));
	-(const TSMeshNode* _Nonnull)getNode_: (uint32_t)index NS_SWIFT_NAME(node(index:));
	-(void)createLocalTransforms NS_SWIFT_NAME(createLocalTransforms());
	-(void)createLocalTransforms_1: (TSMatrix4x3d)itransform NS_SWIFT_NAME(createLocalTransforms(_:));
	-(void)createLocalTransforms_1_: (TSMatrix4x3d)itransform NS_SWIFT_NAME(createLocalTransforms(itransform:));
	-(void)createGlobalTransforms NS_SWIFT_NAME(createGlobalTransforms());
	-(void)createGlobalTransforms_1: (TSMatrix4x3d)transform NS_SWIFT_NAME(createGlobalTransforms(_:));
	-(void)createGlobalTransforms_1_: (TSMatrix4x3d)transform NS_SWIFT_NAME(createGlobalTransforms(transform:));
	-(void)clearGeometries;
	-(void)reserveGeometries: (uint32_t)num_geometries NS_SWIFT_NAME(reserveGeometries(_:));
	-(void)reserveGeometries_: (uint32_t)num_geometries NS_SWIFT_NAME(reserveGeometries(num_geometries:));
	-(uint32_t)addGeometry: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(addGeometry(_:));
	-(uint32_t)addGeometry_: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(addGeometry(geometry:));
	-(uint32_t)addGeometry_1: (TSMeshGeometry* _Nonnull)geometry check: (BOOL)check NS_SWIFT_NAME(addGeometry(_:_:));
	-(uint32_t)addGeometry_1_: (TSMeshGeometry* _Nonnull)geometry check: (BOOL)check NS_SWIFT_NAME(addGeometry(geometry:check:));
	-(uint32_t)addGeometry_2: (TSMeshGeometry* _Nonnull)geometry node: (TSMeshNode* _Nonnull)node NS_SWIFT_NAME(addGeometry(_:_:));
	-(uint32_t)addGeometry_2_: (TSMeshGeometry* _Nonnull)geometry node: (TSMeshNode* _Nonnull)node NS_SWIFT_NAME(addGeometry(geometry:node:));
	-(uint32_t)addGeometry_3: (TSMeshGeometry* _Nonnull)geometry node: (TSMeshNode* _Nonnull)node check: (BOOL)check NS_SWIFT_NAME(addGeometry(_:_:_:));
	-(uint32_t)addGeometry_3_: (TSMeshGeometry* _Nonnull)geometry node: (TSMeshNode* _Nonnull)node check: (BOOL)check NS_SWIFT_NAME(addGeometry(geometry:node:check:));
	-(BOOL)removeGeometry: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(removeGeometry(_:));
	-(BOOL)removeGeometry_: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(removeGeometry(geometry:));
	-(BOOL)replaceGeometry: (TSMeshGeometry* _Nonnull)old_geometry geometry: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(replaceGeometry(_:_:));
	-(BOOL)replaceGeometry_: (TSMeshGeometry* _Nonnull)old_geometry geometry: (TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(replaceGeometry(old_geometry:geometry:));
	-(uint32_t)findGeometry: (const TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(findGeometry(_:));
	-(uint32_t)findGeometry_: (const TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(findGeometry(geometry:));
	-(uint32_t)findGeometry_1: (const char* _Nonnull)name NS_SWIFT_NAME(findGeometry(_:));
	-(uint32_t)findGeometry_1_: (const char* _Nonnull)name NS_SWIFT_NAME(findGeometry(name:));
	-(uint32_t)getNumGeometries NS_SWIFT_NAME(numGeometries());
	-(NSArray<TSMeshGeometry*>* _Nonnull)getGeometries NS_SWIFT_NAME(geometries());
	-(const TSMeshGeometry* _Nonnull)getGeometry: (uint32_t)index NS_SWIFT_NAME(geometry(_:));
	-(const TSMeshGeometry* _Nonnull)getGeometry_: (uint32_t)index NS_SWIFT_NAME(geometry(index:));
	-(BOOL)hasGeometryIndices: (TS_MeshIndicesType)type NS_SWIFT_NAME(hasGeometryIndices(_:));
	-(BOOL)hasGeometryIndices_: (TS_MeshIndicesType)type NS_SWIFT_NAME(hasGeometryIndices(type:));
	-(BOOL)hasGeometryAttribute: (TS_MeshAttributeType)type NS_SWIFT_NAME(hasGeometryAttribute(_:));
	-(BOOL)hasGeometryAttribute_: (TS_MeshAttributeType)type NS_SWIFT_NAME(hasGeometryAttribute(type:));
	-(size_t)getNumGeometryPositions NS_SWIFT_NAME(numGeometryPositions());
	-(size_t)getNumGeometryPrimitives NS_SWIFT_NAME(numGeometryPrimitives());
	-(void)clearAnimations;
	-(void)reserveAnimations: (uint32_t)num_animations NS_SWIFT_NAME(reserveAnimations(_:));
	-(void)reserveAnimations_: (uint32_t)num_animations NS_SWIFT_NAME(reserveAnimations(num_animations:));
	-(uint32_t)addAnimation: (TSMeshAnimation* _Nonnull)animation NS_SWIFT_NAME(addAnimation(_:));
	-(uint32_t)addAnimation_: (TSMeshAnimation* _Nonnull)animation NS_SWIFT_NAME(addAnimation(animation:));
	-(uint32_t)addAnimation_1: (TSMeshAnimation* _Nonnull)animation check: (BOOL)check NS_SWIFT_NAME(addAnimation(_:_:));
	-(uint32_t)addAnimation_1_: (TSMeshAnimation* _Nonnull)animation check: (BOOL)check NS_SWIFT_NAME(addAnimation(animation:check:));
	-(BOOL)removeAnimation: (TSMeshAnimation* _Nonnull)animation NS_SWIFT_NAME(removeAnimation(_:));
	-(BOOL)removeAnimation_: (TSMeshAnimation* _Nonnull)animation NS_SWIFT_NAME(removeAnimation(animation:));
	-(BOOL)replaceAnimation: (TSMeshAnimation* _Nonnull)old_animation animation: (TSMeshAnimation* _Nonnull)animation NS_SWIFT_NAME(replaceAnimation(_:_:));
	-(BOOL)replaceAnimation_: (TSMeshAnimation* _Nonnull)old_animation animation: (TSMeshAnimation* _Nonnull)animation NS_SWIFT_NAME(replaceAnimation(old_animation:animation:));
	-(uint32_t)findAnimation: (const TSMeshAnimation* _Nonnull)animation NS_SWIFT_NAME(findAnimation(_:));
	-(uint32_t)findAnimation_: (const TSMeshAnimation* _Nonnull)animation NS_SWIFT_NAME(findAnimation(animation:));
	-(uint32_t)findAnimation_1: (const char* _Nonnull)name NS_SWIFT_NAME(findAnimation(_:));
	-(uint32_t)findAnimation_1_: (const char* _Nonnull)name NS_SWIFT_NAME(findAnimation(name:));
	-(uint32_t)getNumAnimations NS_SWIFT_NAME(numAnimations());
	-(NSArray<TSMeshAnimation*>* _Nonnull)getAnimations NS_SWIFT_NAME(animations());
	-(const TSMeshAnimation* _Nonnull)getAnimation: (uint32_t)index NS_SWIFT_NAME(animation(_:));
	-(const TSMeshAnimation* _Nonnull)getAnimation_: (uint32_t)index NS_SWIFT_NAME(animation(index:));
	-(TSBoundBoxd)getBoundBox NS_SWIFT_NAME(boundBox());
	-(TSBoundBoxd)getBoundBox_1: (const TSMeshNode* _Nonnull)node NS_SWIFT_NAME(boundBox(_:));
	-(TSBoundBoxd)getBoundBox_1_: (const TSMeshNode* _Nonnull)node NS_SWIFT_NAME(boundBox(node:));
	-(TSBoundBoxd)getBoundBox_2: (const TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(boundBox(_:));
	-(TSBoundBoxd)getBoundBox_2_: (const TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(boundBox(geometry:));
	-(BOOL)createBounds: (BOOL)force NS_SWIFT_NAME(createBounds(_:));
	-(BOOL)createBounds_: (BOOL)force NS_SWIFT_NAME(createBounds(force:));
	-(BOOL)createBounds_1: (BOOL)force async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createBounds(_:_:));
	-(BOOL)createBounds_1_: (BOOL)force async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createBounds(force:async:));
	-(BOOL)createBounds_2 NS_SWIFT_NAME(createBounds());
	-(BOOL)createBounds_3: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createBounds(_:));
	-(BOOL)createBounds_3_: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createBounds(async:));
	-(BOOL)createBasis: (BOOL)force NS_SWIFT_NAME(createBasis(_:));
	-(BOOL)createBasis_: (BOOL)force NS_SWIFT_NAME(createBasis(force:));
	-(BOOL)createBasis_1: (BOOL)force async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createBasis(_:_:));
	-(BOOL)createBasis_1_: (BOOL)force async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createBasis(force:async:));
	-(BOOL)createBasis_2: (float32_t)angle force: (BOOL)force NS_SWIFT_NAME(createBasis(_:_:));
	-(BOOL)createBasis_2_: (float32_t)angle force: (BOOL)force NS_SWIFT_NAME(createBasis(angle:force:));
	-(BOOL)createBasis_3: (float32_t)angle force: (BOOL)force async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createBasis(_:_:_:));
	-(BOOL)createBasis_3_: (float32_t)angle force: (BOOL)force async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createBasis(angle:force:async:));
	-(BOOL)createBasis_4 NS_SWIFT_NAME(createBasis());
	-(BOOL)createBasis_5: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createBasis(_:));
	-(BOOL)createBasis_5_: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createBasis(async:));
	-(BOOL)createBasis_6: (float32_t)angle NS_SWIFT_NAME(createBasis(_:));
	-(BOOL)createBasis_6_: (float32_t)angle NS_SWIFT_NAME(createBasis(angle:));
	-(BOOL)createBasis_7: (float32_t)angle async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createBasis(_:_:));
	-(BOOL)createBasis_7_: (float32_t)angle async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createBasis(angle:async:));
	-(BOOL)createNormals: (BOOL)force NS_SWIFT_NAME(createNormals(_:));
	-(BOOL)createNormals_: (BOOL)force NS_SWIFT_NAME(createNormals(force:));
	-(BOOL)createNormals_1: (BOOL)force async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createNormals(_:_:));
	-(BOOL)createNormals_1_: (BOOL)force async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createNormals(force:async:));
	-(BOOL)createNormals_2: (float32_t)angle force: (BOOL)force NS_SWIFT_NAME(createNormals(_:_:));
	-(BOOL)createNormals_2_: (float32_t)angle force: (BOOL)force NS_SWIFT_NAME(createNormals(angle:force:));
	-(BOOL)createNormals_3: (float32_t)angle force: (BOOL)force async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createNormals(_:_:_:));
	-(BOOL)createNormals_3_: (float32_t)angle force: (BOOL)force async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createNormals(angle:force:async:));
	-(BOOL)createNormals_4 NS_SWIFT_NAME(createNormals());
	-(BOOL)createNormals_5: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createNormals(_:));
	-(BOOL)createNormals_5_: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createNormals(async:));
	-(BOOL)createNormals_6: (float32_t)angle NS_SWIFT_NAME(createNormals(_:));
	-(BOOL)createNormals_6_: (float32_t)angle NS_SWIFT_NAME(createNormals(angle:));
	-(BOOL)createNormals_7: (float32_t)angle async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createNormals(_:_:));
	-(BOOL)createNormals_7_: (float32_t)angle async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createNormals(angle:async:));
	-(BOOL)createTangents: (BOOL)force NS_SWIFT_NAME(createTangents(_:));
	-(BOOL)createTangents_: (BOOL)force NS_SWIFT_NAME(createTangents(force:));
	-(BOOL)createTangents_1: (BOOL)force async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createTangents(_:_:));
	-(BOOL)createTangents_1_: (BOOL)force async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createTangents(force:async:));
	-(BOOL)createTangents_2 NS_SWIFT_NAME(createTangents());
	-(BOOL)createTangents_3: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createTangents(_:));
	-(BOOL)createTangents_3_: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createTangents(async:));
	-(BOOL)createIslands: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives force: (BOOL)force NS_SWIFT_NAME(createIslands(_:_:_:));
	-(BOOL)createIslands_: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives force: (BOOL)force NS_SWIFT_NAME(createIslands(max_attributes:max_primitives:force:));
	-(BOOL)createIslands_1: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives force: (BOOL)force async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createIslands(_:_:_:_:));
	-(BOOL)createIslands_1_: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives force: (BOOL)force async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createIslands(max_attributes:max_primitives:force:async:));
	-(BOOL)createIslands_2: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives NS_SWIFT_NAME(createIslands(_:_:));
	-(BOOL)createIslands_2_: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives NS_SWIFT_NAME(createIslands(max_attributes:max_primitives:));
	-(BOOL)createIslands_3: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createIslands(_:_:_:));
	-(BOOL)createIslands_3_: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createIslands(max_attributes:max_primitives:async:));
	-(BOOL)optimizeIndices: (uint32_t)cache transparent: (BOOL)transparent NS_SWIFT_NAME(optimizeIndices(_:_:));
	-(BOOL)optimizeIndices_: (uint32_t)cache transparent: (BOOL)transparent NS_SWIFT_NAME(optimizeIndices(cache:transparent:));
	-(BOOL)optimizeIndices_1: (uint32_t)cache transparent: (BOOL)transparent async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(optimizeIndices(_:_:_:));
	-(BOOL)optimizeIndices_1_: (uint32_t)cache transparent: (BOOL)transparent async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(optimizeIndices(cache:transparent:async:));
	-(BOOL)optimizeIndices_2 NS_SWIFT_NAME(optimizeIndices());
	-(BOOL)optimizeIndices_3: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(optimizeIndices(_:));
	-(BOOL)optimizeIndices_3_: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(optimizeIndices(async:));
	-(BOOL)optimizeIndices_4: (uint32_t)cache NS_SWIFT_NAME(optimizeIndices(_:));
	-(BOOL)optimizeIndices_4_: (uint32_t)cache NS_SWIFT_NAME(optimizeIndices(cache:));
	-(BOOL)optimizeIndices_5: (uint32_t)cache async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(optimizeIndices(_:_:));
	-(BOOL)optimizeIndices_5_: (uint32_t)cache async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(optimizeIndices(cache:async:));
	-(BOOL)optimizeAttributes NS_SWIFT_NAME(optimizeAttributes());
	-(BOOL)optimizeAttributes_1: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(optimizeAttributes(_:));
	-(BOOL)optimizeAttributes_1_: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(optimizeAttributes(async:));
	-(void)optimizeMaterials;
	-(BOOL)optimizeWinding NS_SWIFT_NAME(optimizeWinding());
	-(BOOL)optimizeWinding_1: (BOOL)clockwise NS_SWIFT_NAME(optimizeWinding(_:));
	-(BOOL)optimizeWinding_1_: (BOOL)clockwise NS_SWIFT_NAME(optimizeWinding(clockwise:));
	-(void)optimizeGeometries NS_SWIFT_NAME(optimizeGeometries());
	-(void)optimizeGeometries_1: (float32_t)threshold NS_SWIFT_NAME(optimizeGeometries(_:));
	-(void)optimizeGeometries_1_: (float32_t)threshold NS_SWIFT_NAME(optimizeGeometries(threshold:));
	-(void)optimizeGeometries_2: (float32_t)threshold depth: (uint32_t)depth NS_SWIFT_NAME(optimizeGeometries(_:_:));
	-(void)optimizeGeometries_2_: (float32_t)threshold depth: (uint32_t)depth NS_SWIFT_NAME(optimizeGeometries(threshold:depth:));
	-(void)optimizeAnimations NS_SWIFT_NAME(optimizeAnimations());
	-(void)optimizeAnimations_1: (float32_t)threshold NS_SWIFT_NAME(optimizeAnimations(_:));
	-(void)optimizeAnimations_1_: (float32_t)threshold NS_SWIFT_NAME(optimizeAnimations(threshold:));
	-(BOOL)optimizeOrder;
	-(void)mergeGeometries;
	-(BOOL)packAttributes NS_SWIFT_NAME(packAttributes());
	-(BOOL)packAttributes_1: (BOOL)remove NS_SWIFT_NAME(packAttributes(_:));
	-(BOOL)packAttributes_1_: (BOOL)remove NS_SWIFT_NAME(packAttributes(remove:));
	-(BOOL)unpackAttributes NS_SWIFT_NAME(unpackAttributes());
	-(BOOL)unpackAttributes_1: (BOOL)remove NS_SWIFT_NAME(unpackAttributes(_:));
	-(BOOL)unpackAttributes_1_: (BOOL)remove NS_SWIFT_NAME(unpackAttributes(remove:));
	-(BOOL)setTransform: (TSVector3d)scale NS_SWIFT_NAME(setTransform(_:));
	-(BOOL)setTransform_: (TSVector3d)scale NS_SWIFT_NAME(setTransform(scale:));
	-(size_t)getMemory NS_SWIFT_NAME(memory());
@end

/// Tellusim::Json
NS_SWIFT_NAME(Json)
TS_CAPI @interface TSJson : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	-(id _Nonnull)init_1: (TS_JsonType)type NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (TS_JsonType)type NS_SWIFT_NAME(init(type:));
	-(id _Nonnull)init_2: (const char* _Nonnull)name NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (const char* _Nonnull)name NS_SWIFT_NAME(init(name:));
	-(id _Nonnull)init_3: (const char* _Nonnull)name type: (TS_JsonType)type NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_3_: (const char* _Nonnull)name type: (TS_JsonType)type NS_SWIFT_NAME(init(name:type:));
	-(id _Nonnull)init_4: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_4_: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(name:));
	-(id _Nonnull)init_5: (const TSString* _Nonnull)name type: (TS_JsonType)type NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_5_: (const TSString* _Nonnull)name type: (TS_JsonType)type NS_SWIFT_NAME(init(name:type:));
	-(id _Nonnull)init_6: (TSJson* _Nonnull)parent name: (const char* _Nonnull)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_6_: (TSJson* _Nonnull)parent name: (const char* _Nonnull)name NS_SWIFT_NAME(init(parent:name:));
	-(id _Nonnull)init_7: (TSJson* _Nonnull)parent name: (const char* _Nonnull)name type: (TS_JsonType)type NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_7_: (TSJson* _Nonnull)parent name: (const char* _Nonnull)name type: (TS_JsonType)type NS_SWIFT_NAME(init(parent:name:type:));
	-(id _Nonnull)init_8: (TSJson* _Nonnull)parent name: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_8_: (TSJson* _Nonnull)parent name: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(parent:name:));
	-(id _Nonnull)init_9: (TSJson* _Nonnull)parent name: (const TSString* _Nonnull)name type: (TS_JsonType)type NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_9_: (TSJson* _Nonnull)parent name: (const TSString* _Nonnull)name type: (TS_JsonType)type NS_SWIFT_NAME(init(parent:name:type:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Json* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Json&)p;
		-(Tellusim::Json* _Nonnull)pointer;
		-(Tellusim::Json&)ref;
	#endif
	-(BOOL)equalPtr: (const TSJson* _Nonnull)p;
	-(TSJson* _Nonnull)copyPtr;
	-(TSJson* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSJson* _Nonnull)null;
	-(void)clear;
	-(BOOL)create: (const char* _Nonnull)str NS_SWIFT_NAME(create(_:));
	-(BOOL)create_: (const char* _Nonnull)str NS_SWIFT_NAME(create(str:));
	-(BOOL)create_1: (const char* _Nonnull)str size: (size_t)size NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_1_: (const char* _Nonnull)str size: (size_t)size NS_SWIFT_NAME(create(str:size:));
	-(BOOL)create_2: (const char* _Nonnull)str size: (size_t)size owner: (BOOL)owner NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_2_: (const char* _Nonnull)str size: (size_t)size owner: (BOOL)owner NS_SWIFT_NAME(create(str:size:owner:));
	-(BOOL)create_3: (const TSString* _Nonnull)str NS_SWIFT_NAME(create(_:));
	-(BOOL)create_3_: (const TSString* _Nonnull)str NS_SWIFT_NAME(create(str:));
	-(BOOL)create_4: (const TSString* _Nonnull)str size: (size_t)size NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_4_: (const TSString* _Nonnull)str size: (size_t)size NS_SWIFT_NAME(create(str:size:));
	-(BOOL)create_5: (const TSString* _Nonnull)str size: (size_t)size owner: (BOOL)owner NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_5_: (const TSString* _Nonnull)str size: (size_t)size owner: (BOOL)owner NS_SWIFT_NAME(create(str:size:owner:));
	-(BOOL)load: (const char* _Nonnull)name NS_SWIFT_NAME(load(_:));
	-(BOOL)load_: (const char* _Nonnull)name NS_SWIFT_NAME(load(name:));
	-(BOOL)load_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(load(_:));
	-(BOOL)load_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(load(name:));
	-(BOOL)load_2: (TSStream* _Nonnull)stream NS_SWIFT_NAME(load(_:));
	-(BOOL)load_2_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(load(stream:));
	-(BOOL)save: (const char* _Nonnull)name NS_SWIFT_NAME(save(_:));
	-(BOOL)save_: (const char* _Nonnull)name NS_SWIFT_NAME(save(name:));
	-(BOOL)save_1: (const char* _Nonnull)name compact: (BOOL)compact NS_SWIFT_NAME(save(_:_:));
	-(BOOL)save_1_: (const char* _Nonnull)name compact: (BOOL)compact NS_SWIFT_NAME(save(name:compact:));
	-(BOOL)save_2: (const TSString* _Nonnull)name NS_SWIFT_NAME(save(_:));
	-(BOOL)save_2_: (const TSString* _Nonnull)name NS_SWIFT_NAME(save(name:));
	-(BOOL)save_3: (const TSString* _Nonnull)name compact: (BOOL)compact NS_SWIFT_NAME(save(_:_:));
	-(BOOL)save_3_: (const TSString* _Nonnull)name compact: (BOOL)compact NS_SWIFT_NAME(save(name:compact:));
	-(BOOL)save_4: (TSStream* _Nonnull)stream NS_SWIFT_NAME(save(_:));
	-(BOOL)save_4_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(save(stream:));
	-(BOOL)save_5: (TSStream* _Nonnull)stream compact: (BOOL)compact NS_SWIFT_NAME(save(_:_:));
	-(BOOL)save_5_: (TSStream* _Nonnull)stream compact: (BOOL)compact NS_SWIFT_NAME(save(stream:compact:));
	-(const TSJson* _Nonnull)getRoot NS_SWIFT_NAME(root());
	-(TSJson* _Nonnull)getRoot_1 NS_SWIFT_NAME(root());
	-(uint32_t)setParent: (TSJson* _Nonnull)parent NS_SWIFT_NAME(setParent(_:));
	-(uint32_t)setParent_: (TSJson* _Nonnull)parent NS_SWIFT_NAME(setParent(parent:));
	-(uint32_t)setParent_1: (TSJson* _Nonnull)parent check: (BOOL)check NS_SWIFT_NAME(setParent(_:_:));
	-(uint32_t)setParent_1_: (TSJson* _Nonnull)parent check: (BOOL)check NS_SWIFT_NAME(setParent(parent:check:));
	-(const TSJson* _Nonnull)getParent NS_SWIFT_NAME(parent());
	-(TSJson* _Nonnull)addChild: (const char* _Nonnull)name NS_SWIFT_NAME(addChild(_:));
	-(TSJson* _Nonnull)addChild_: (const char* _Nonnull)name NS_SWIFT_NAME(addChild(name:));
	-(TSJson* _Nonnull)addChild_1: (const char* _Nonnull)name type: (TS_JsonType)type NS_SWIFT_NAME(addChild(_:_:));
	-(TSJson* _Nonnull)addChild_1_: (const char* _Nonnull)name type: (TS_JsonType)type NS_SWIFT_NAME(addChild(name:type:));
	-(TSJson* _Nonnull)addChild_2: (const char* _Nonnull)name type: (TS_JsonType)type check: (BOOL)check NS_SWIFT_NAME(addChild(_:_:_:));
	-(TSJson* _Nonnull)addChild_2_: (const char* _Nonnull)name type: (TS_JsonType)type check: (BOOL)check NS_SWIFT_NAME(addChild(name:type:check:));
	-(uint32_t)addChild_3: (TSJson* _Nonnull)child NS_SWIFT_NAME(addChild(_:));
	-(uint32_t)addChild_3_: (TSJson* _Nonnull)child NS_SWIFT_NAME(addChild(child:));
	-(uint32_t)addChild_4: (TSJson* _Nonnull)child check: (BOOL)check NS_SWIFT_NAME(addChild(_:_:));
	-(uint32_t)addChild_4_: (TSJson* _Nonnull)child check: (BOOL)check NS_SWIFT_NAME(addChild(child:check:));
	-(BOOL)removeChild: (TSJson* _Nonnull)child NS_SWIFT_NAME(removeChild(_:));
	-(BOOL)removeChild_: (TSJson* _Nonnull)child NS_SWIFT_NAME(removeChild(child:));
	-(void)releaseChildren;
	-(uint32_t)findChild: (const char* _Nonnull)name NS_SWIFT_NAME(findChild(_:));
	-(uint32_t)findChild_: (const char* _Nonnull)name NS_SWIFT_NAME(findChild(name:));
	-(BOOL)isChild: (const char* _Nonnull)name NS_SWIFT_NAME(isChild(_:));
	-(BOOL)isChild_: (const char* _Nonnull)name NS_SWIFT_NAME(isChild(name:));
	-(const TSJson* _Nonnull)getChild: (const char* _Nonnull)name NS_SWIFT_NAME(child(_:));
	-(const TSJson* _Nonnull)getChild_: (const char* _Nonnull)name NS_SWIFT_NAME(child(name:));
	-(uint32_t)getNumChildren NS_SWIFT_NAME(numChildren());
	-(NSArray<TSJson*>* _Nonnull)getChildren NS_SWIFT_NAME(children());
	-(const TSJson* _Nonnull)getChild_1: (uint32_t)index NS_SWIFT_NAME(child(_:));
	-(const TSJson* _Nonnull)getChild_1_: (uint32_t)index NS_SWIFT_NAME(child(index:));
	-(NSString* _Nonnull)getPathName NS_SWIFT_NAME(pathName());
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(void)setName_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(void)setType: (TS_JsonType)type NS_SWIFT_NAME(setType(_:));
	-(void)setType_: (TS_JsonType)type NS_SWIFT_NAME(setType(type:));
	-(TS_JsonType)getType NS_SWIFT_NAME(type());
	+(NSString* _Nonnull)getTypeName: (TS_JsonType)type NS_SWIFT_NAME(typeName(_:));
	+(NSString* _Nonnull)getTypeName_: (TS_JsonType)type NS_SWIFT_NAME(typeName(type:));
	-(NSString* _Nonnull)getTypeName_1 NS_SWIFT_NAME(typeName());
	-(BOOL)isUnknown;
	-(BOOL)isNull;
	-(BOOL)isBool;
	-(BOOL)isNumber;
	-(BOOL)isString;
	-(BOOL)isObject;
	-(BOOL)isArray;
	-(void)setData: (BOOL)value NS_SWIFT_NAME(setData(_:));
	-(void)setData_: (BOOL)value NS_SWIFT_NAME(setData(value:));
	-(void)setData_1: (int32_t)value NS_SWIFT_NAME(setData(_:));
	-(void)setData_1_: (int32_t)value NS_SWIFT_NAME(setData(value:));
	-(void)setData_2: (int32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_2_: (int32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setData(value:radix:));
	-(void)setData_3: (uint32_t)value NS_SWIFT_NAME(setData(_:));
	-(void)setData_3_: (uint32_t)value NS_SWIFT_NAME(setData(value:));
	-(void)setData_4: (uint32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_4_: (uint32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setData(value:radix:));
	-(void)setData_5: (uint64_t)value NS_SWIFT_NAME(setData(_:));
	-(void)setData_5_: (uint64_t)value NS_SWIFT_NAME(setData(value:));
	-(void)setData_6: (uint64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_6_: (uint64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setData(value:radix:));
	-(void)setData_7: (float32_t)value NS_SWIFT_NAME(setData(_:));
	-(void)setData_7_: (float32_t)value NS_SWIFT_NAME(setData(value:));
	-(void)setData_8: (float32_t)value digits: (uint32_t)digits NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_8_: (float32_t)value digits: (uint32_t)digits NS_SWIFT_NAME(setData(value:digits:));
	-(void)setData_9: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_9_: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setData(value:digits:compact:));
	-(void)setData_10: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setData(_:_:_:_:));
	-(void)setData_10_: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setData(value:digits:compact:exponent:));
	-(void)setData_11: (float64_t)value NS_SWIFT_NAME(setData(_:));
	-(void)setData_11_: (float64_t)value NS_SWIFT_NAME(setData(value:));
	-(void)setData_12: (float64_t)value digits: (uint32_t)digits NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_12_: (float64_t)value digits: (uint32_t)digits NS_SWIFT_NAME(setData(value:digits:));
	-(void)setData_13: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_13_: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setData(value:digits:compact:));
	-(void)setData_14: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setData(_:_:_:_:));
	-(void)setData_14_: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setData(value:digits:compact:exponent:));
	-(void)setData_15: (const char* _Nonnull)value NS_SWIFT_NAME(setData(_:));
	-(void)setData_15_: (const char* _Nonnull)value NS_SWIFT_NAME(setData(value:));
	-(void)setData_16: (const TSString* _Nonnull)value NS_SWIFT_NAME(setData(_:));
	-(void)setData_16_: (const TSString* _Nonnull)value NS_SWIFT_NAME(setData(value:));
	-(NSString* _Nonnull)getData NS_SWIFT_NAME(data());
	-(BOOL)getDataBool NS_SWIFT_NAME(dataBool());
	-(int32_t)getDatai32 NS_SWIFT_NAME(datai32());
	-(int32_t)getDatai32_1: (uint32_t)radix NS_SWIFT_NAME(datai32(_:));
	-(int32_t)getDatai32_1_: (uint32_t)radix NS_SWIFT_NAME(datai32(radix:));
	-(uint32_t)getDatau32 NS_SWIFT_NAME(datau32());
	-(uint32_t)getDatau32_1: (uint32_t)radix NS_SWIFT_NAME(datau32(_:));
	-(uint32_t)getDatau32_1_: (uint32_t)radix NS_SWIFT_NAME(datau32(radix:));
	-(uint64_t)getDatau64 NS_SWIFT_NAME(datau64());
	-(uint64_t)getDatau64_1: (uint32_t)radix NS_SWIFT_NAME(datau64(_:));
	-(uint64_t)getDatau64_1_: (uint32_t)radix NS_SWIFT_NAME(datau64(radix:));
	-(float32_t)getDataf32 NS_SWIFT_NAME(dataf32());
	-(float64_t)getDataf64 NS_SWIFT_NAME(dataf64());
	-(NSString* _Nonnull)getNumber NS_SWIFT_NAME(number());
	-(NSString* _Nonnull)getString NS_SWIFT_NAME(string());
	-(BOOL)getData_1: (const char* _Nonnull)name value: (BOOL)value NS_SWIFT_NAME(data(_:_:));
	-(BOOL)getData_1_: (const char* _Nonnull)name value: (BOOL)value NS_SWIFT_NAME(data(name:value:));
	-(int32_t)getData_2: (const char* _Nonnull)name value: (int32_t)value NS_SWIFT_NAME(data(_:_:));
	-(int32_t)getData_2_: (const char* _Nonnull)name value: (int32_t)value NS_SWIFT_NAME(data(name:value:));
	-(int32_t)getData_3: (const char* _Nonnull)name value: (int32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(data(_:_:_:));
	-(int32_t)getData_3_: (const char* _Nonnull)name value: (int32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(data(name:value:radix:));
	-(uint32_t)getData_4: (const char* _Nonnull)name value: (uint32_t)value NS_SWIFT_NAME(data(_:_:));
	-(uint32_t)getData_4_: (const char* _Nonnull)name value: (uint32_t)value NS_SWIFT_NAME(data(name:value:));
	-(uint32_t)getData_5: (const char* _Nonnull)name value: (uint32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(data(_:_:_:));
	-(uint32_t)getData_5_: (const char* _Nonnull)name value: (uint32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(data(name:value:radix:));
	-(uint64_t)getData_6: (const char* _Nonnull)name value: (uint64_t)value NS_SWIFT_NAME(data(_:_:));
	-(uint64_t)getData_6_: (const char* _Nonnull)name value: (uint64_t)value NS_SWIFT_NAME(data(name:value:));
	-(uint64_t)getData_7: (const char* _Nonnull)name value: (uint64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(data(_:_:_:));
	-(uint64_t)getData_7_: (const char* _Nonnull)name value: (uint64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(data(name:value:radix:));
	-(float32_t)getData_8: (const char* _Nonnull)name value: (float32_t)value NS_SWIFT_NAME(data(_:_:));
	-(float32_t)getData_8_: (const char* _Nonnull)name value: (float32_t)value NS_SWIFT_NAME(data(name:value:));
	-(float64_t)getData_9: (const char* _Nonnull)name value: (float64_t)value NS_SWIFT_NAME(data(_:_:));
	-(float64_t)getData_9_: (const char* _Nonnull)name value: (float64_t)value NS_SWIFT_NAME(data(name:value:));
	-(NSString* _Nonnull)getData_10: (const char* _Nonnull)name NS_SWIFT_NAME(data(_:));
	-(NSString* _Nonnull)getData_10_: (const char* _Nonnull)name NS_SWIFT_NAME(data(name:));
	-(NSString* _Nonnull)getData_11: (const char* _Nonnull)name value: (const TSString* _Nonnull)value NS_SWIFT_NAME(data(_:_:));
	-(NSString* _Nonnull)getData_11_: (const char* _Nonnull)name value: (const TSString* _Nonnull)value NS_SWIFT_NAME(data(name:value:));
	-(void)setData_17: (const char* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_17_: (const char* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(setData(values:size:));
	-(void)setData_18: (const TSString* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_18_: (const TSString* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(setData(values:size:));
	-(void)setData_19: (const int32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_19_: (const int32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setData(values:size:));
	-(void)setData_20: (const int32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_20_: (const int32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(setData(values:size:radix:));
	-(void)setData_21: (const uint32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_21_: (const uint32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setData(values:size:));
	-(void)setData_22: (const uint32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_22_: (const uint32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(setData(values:size:radix:));
	-(void)setData_23: (const float32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_23_: (const float32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setData(values:size:));
	-(void)setData_24: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_24_: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits NS_SWIFT_NAME(setData(values:size:digits:));
	-(void)setData_25: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setData(_:_:_:_:));
	-(void)setData_25_: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setData(values:size:digits:compact:));
	-(void)setData_26: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setData(_:_:_:_:_:));
	-(void)setData_26_: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setData(values:size:digits:compact:exponent:));
	-(void)setData_27: (const float64_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_27_: (const float64_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setData(values:size:));
	-(void)setData_28: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_28_: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits NS_SWIFT_NAME(setData(values:size:digits:));
	-(void)setData_29: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setData(_:_:_:_:));
	-(void)setData_29_: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setData(values:size:digits:compact:));
	-(void)setData_30: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setData(_:_:_:_:_:));
	-(void)setData_30_: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setData(values:size:digits:compact:exponent:));
	-(uint32_t)getData_12: (TSString* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(data(_:_:));
	-(uint32_t)getData_12_: (TSString* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(data(values:size:));
	-(uint32_t)getData_13: (int32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(data(_:_:));
	-(uint32_t)getData_13_: (int32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(data(values:size:));
	-(uint32_t)getData_14: (int32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(data(_:_:_:));
	-(uint32_t)getData_14_: (int32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(data(values:size:radix:));
	-(uint32_t)getData_15: (uint32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(data(_:_:));
	-(uint32_t)getData_15_: (uint32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(data(values:size:));
	-(uint32_t)getData_16: (uint32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(data(_:_:_:));
	-(uint32_t)getData_16_: (uint32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(data(values:size:radix:));
	-(uint32_t)getData_17: (float32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(data(_:_:));
	-(uint32_t)getData_17_: (float32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(data(values:size:));
	-(uint32_t)getData_18: (float64_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(data(_:_:));
	-(uint32_t)getData_18_: (float64_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(data(values:size:));
@end

/// Tellusim::Xml
NS_SWIFT_NAME(Xml)
TS_CAPI @interface TSXml : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	-(id _Nonnull)init_1: (const char* _Nonnull)name NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (const char* _Nonnull)name NS_SWIFT_NAME(init(name:));
	-(id _Nonnull)init_2: (const char* _Nonnull)name attributes: (const char* _Nullable)attributes NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (const char* _Nonnull)name attributes: (const char* _Nullable)attributes NS_SWIFT_NAME(init(name:attributes:));
	-(id _Nonnull)init_3: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_3_: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(name:));
	-(id _Nonnull)init_4: (const TSString* _Nonnull)name attributes: (const char* _Nullable)attributes NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_4_: (const TSString* _Nonnull)name attributes: (const char* _Nullable)attributes NS_SWIFT_NAME(init(name:attributes:));
	-(id _Nonnull)init_5: (TSXml* _Nonnull)parent name: (const char* _Nonnull)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_5_: (TSXml* _Nonnull)parent name: (const char* _Nonnull)name NS_SWIFT_NAME(init(parent:name:));
	-(id _Nonnull)init_6: (TSXml* _Nonnull)parent name: (const char* _Nonnull)name attributes: (const char* _Nullable)attributes NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_6_: (TSXml* _Nonnull)parent name: (const char* _Nonnull)name attributes: (const char* _Nullable)attributes NS_SWIFT_NAME(init(parent:name:attributes:));
	-(id _Nonnull)init_7: (TSXml* _Nonnull)parent name: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_7_: (TSXml* _Nonnull)parent name: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(parent:name:));
	-(id _Nonnull)init_8: (TSXml* _Nonnull)parent name: (const TSString* _Nonnull)name attributes: (const char* _Nullable)attributes NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_8_: (TSXml* _Nonnull)parent name: (const TSString* _Nonnull)name attributes: (const char* _Nullable)attributes NS_SWIFT_NAME(init(parent:name:attributes:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Xml* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Xml&)p;
		-(Tellusim::Xml* _Nonnull)pointer;
		-(Tellusim::Xml&)ref;
	#endif
	-(BOOL)equalPtr: (const TSXml* _Nonnull)p;
	-(TSXml* _Nonnull)copyPtr;
	-(TSXml* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSXml* _Nonnull)null;
	-(void)clear;
	-(BOOL)create: (const char* _Nonnull)str NS_SWIFT_NAME(create(_:));
	-(BOOL)create_: (const char* _Nonnull)str NS_SWIFT_NAME(create(str:));
	-(BOOL)create_1: (const char* _Nonnull)str size: (size_t)size NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_1_: (const char* _Nonnull)str size: (size_t)size NS_SWIFT_NAME(create(str:size:));
	-(BOOL)create_2: (const char* _Nonnull)str size: (size_t)size owner: (BOOL)owner NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_2_: (const char* _Nonnull)str size: (size_t)size owner: (BOOL)owner NS_SWIFT_NAME(create(str:size:owner:));
	-(BOOL)create_3: (const TSString* _Nonnull)str NS_SWIFT_NAME(create(_:));
	-(BOOL)create_3_: (const TSString* _Nonnull)str NS_SWIFT_NAME(create(str:));
	-(BOOL)create_4: (const TSString* _Nonnull)str size: (size_t)size NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_4_: (const TSString* _Nonnull)str size: (size_t)size NS_SWIFT_NAME(create(str:size:));
	-(BOOL)create_5: (const TSString* _Nonnull)str size: (size_t)size owner: (BOOL)owner NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_5_: (const TSString* _Nonnull)str size: (size_t)size owner: (BOOL)owner NS_SWIFT_NAME(create(str:size:owner:));
	-(BOOL)load: (const char* _Nonnull)name NS_SWIFT_NAME(load(_:));
	-(BOOL)load_: (const char* _Nonnull)name NS_SWIFT_NAME(load(name:));
	-(BOOL)load_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(load(_:));
	-(BOOL)load_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(load(name:));
	-(BOOL)load_2: (TSStream* _Nonnull)stream NS_SWIFT_NAME(load(_:));
	-(BOOL)load_2_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(load(stream:));
	-(BOOL)save: (const char* _Nonnull)name NS_SWIFT_NAME(save(_:));
	-(BOOL)save_: (const char* _Nonnull)name NS_SWIFT_NAME(save(name:));
	-(BOOL)save_1: (const char* _Nonnull)name compact: (BOOL)compact NS_SWIFT_NAME(save(_:_:));
	-(BOOL)save_1_: (const char* _Nonnull)name compact: (BOOL)compact NS_SWIFT_NAME(save(name:compact:));
	-(BOOL)save_2: (const TSString* _Nonnull)name NS_SWIFT_NAME(save(_:));
	-(BOOL)save_2_: (const TSString* _Nonnull)name NS_SWIFT_NAME(save(name:));
	-(BOOL)save_3: (const TSString* _Nonnull)name compact: (BOOL)compact NS_SWIFT_NAME(save(_:_:));
	-(BOOL)save_3_: (const TSString* _Nonnull)name compact: (BOOL)compact NS_SWIFT_NAME(save(name:compact:));
	-(BOOL)save_4: (TSStream* _Nonnull)stream NS_SWIFT_NAME(save(_:));
	-(BOOL)save_4_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(save(stream:));
	-(BOOL)save_5: (TSStream* _Nonnull)stream compact: (BOOL)compact NS_SWIFT_NAME(save(_:_:));
	-(BOOL)save_5_: (TSStream* _Nonnull)stream compact: (BOOL)compact NS_SWIFT_NAME(save(stream:compact:));
	-(const TSXml* _Nonnull)getRoot NS_SWIFT_NAME(root());
	-(TSXml* _Nonnull)getRoot_1 NS_SWIFT_NAME(root());
	-(uint32_t)setParent: (TSXml* _Nonnull)parent NS_SWIFT_NAME(setParent(_:));
	-(uint32_t)setParent_: (TSXml* _Nonnull)parent NS_SWIFT_NAME(setParent(parent:));
	-(uint32_t)setParent_1: (TSXml* _Nonnull)parent check: (BOOL)check NS_SWIFT_NAME(setParent(_:_:));
	-(uint32_t)setParent_1_: (TSXml* _Nonnull)parent check: (BOOL)check NS_SWIFT_NAME(setParent(parent:check:));
	-(const TSXml* _Nonnull)getParent NS_SWIFT_NAME(parent());
	-(TSXml* _Nonnull)addChild: (const char* _Nonnull)name NS_SWIFT_NAME(addChild(_:));
	-(TSXml* _Nonnull)addChild_: (const char* _Nonnull)name NS_SWIFT_NAME(addChild(name:));
	-(TSXml* _Nonnull)addChild_1: (const char* _Nonnull)name check: (BOOL)check NS_SWIFT_NAME(addChild(_:_:));
	-(TSXml* _Nonnull)addChild_1_: (const char* _Nonnull)name check: (BOOL)check NS_SWIFT_NAME(addChild(name:check:));
	-(uint32_t)addChild_2: (TSXml* _Nonnull)child NS_SWIFT_NAME(addChild(_:));
	-(uint32_t)addChild_2_: (TSXml* _Nonnull)child NS_SWIFT_NAME(addChild(child:));
	-(uint32_t)addChild_3: (TSXml* _Nonnull)child check: (BOOL)check NS_SWIFT_NAME(addChild(_:_:));
	-(uint32_t)addChild_3_: (TSXml* _Nonnull)child check: (BOOL)check NS_SWIFT_NAME(addChild(child:check:));
	-(BOOL)removeChild: (TSXml* _Nonnull)child NS_SWIFT_NAME(removeChild(_:));
	-(BOOL)removeChild_: (TSXml* _Nonnull)child NS_SWIFT_NAME(removeChild(child:));
	-(void)releaseChildren;
	-(uint32_t)findChild: (const char* _Nonnull)name NS_SWIFT_NAME(findChild(_:));
	-(uint32_t)findChild_: (const char* _Nonnull)name NS_SWIFT_NAME(findChild(name:));
	-(BOOL)isChild: (const char* _Nonnull)name NS_SWIFT_NAME(isChild(_:));
	-(BOOL)isChild_: (const char* _Nonnull)name NS_SWIFT_NAME(isChild(name:));
	-(const TSXml* _Nonnull)getChild: (const char* _Nonnull)name NS_SWIFT_NAME(child(_:));
	-(const TSXml* _Nonnull)getChild_: (const char* _Nonnull)name NS_SWIFT_NAME(child(name:));
	-(uint32_t)getNumChildren NS_SWIFT_NAME(numChildren());
	-(NSArray<TSXml*>* _Nonnull)getChildren NS_SWIFT_NAME(children());
	-(const TSXml* _Nonnull)getChild_1: (uint32_t)index NS_SWIFT_NAME(child(_:));
	-(const TSXml* _Nonnull)getChild_1_: (uint32_t)index NS_SWIFT_NAME(child(index:));
	-(NSString* _Nonnull)getPathName NS_SWIFT_NAME(pathName());
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(void)setName_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(void)setData: (BOOL)value NS_SWIFT_NAME(setData(_:));
	-(void)setData_: (BOOL)value NS_SWIFT_NAME(setData(value:));
	-(void)setData_1: (const char* _Nonnull)value NS_SWIFT_NAME(setData(_:));
	-(void)setData_1_: (const char* _Nonnull)value NS_SWIFT_NAME(setData(value:));
	-(void)setData_2: (const TSString* _Nonnull)value NS_SWIFT_NAME(setData(_:));
	-(void)setData_2_: (const TSString* _Nonnull)value NS_SWIFT_NAME(setData(value:));
	-(void)setData_3: (int32_t)value NS_SWIFT_NAME(setData(_:));
	-(void)setData_3_: (int32_t)value NS_SWIFT_NAME(setData(value:));
	-(void)setData_4: (int32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_4_: (int32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setData(value:radix:));
	-(void)setData_5: (uint32_t)value NS_SWIFT_NAME(setData(_:));
	-(void)setData_5_: (uint32_t)value NS_SWIFT_NAME(setData(value:));
	-(void)setData_6: (uint32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_6_: (uint32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setData(value:radix:));
	-(void)setData_7: (uint64_t)value NS_SWIFT_NAME(setData(_:));
	-(void)setData_7_: (uint64_t)value NS_SWIFT_NAME(setData(value:));
	-(void)setData_8: (uint64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_8_: (uint64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setData(value:radix:));
	-(void)setData_9: (float32_t)value NS_SWIFT_NAME(setData(_:));
	-(void)setData_9_: (float32_t)value NS_SWIFT_NAME(setData(value:));
	-(void)setData_10: (float32_t)value digits: (uint32_t)digits NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_10_: (float32_t)value digits: (uint32_t)digits NS_SWIFT_NAME(setData(value:digits:));
	-(void)setData_11: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_11_: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setData(value:digits:compact:));
	-(void)setData_12: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setData(_:_:_:_:));
	-(void)setData_12_: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setData(value:digits:compact:exponent:));
	-(void)setData_13: (float64_t)value NS_SWIFT_NAME(setData(_:));
	-(void)setData_13_: (float64_t)value NS_SWIFT_NAME(setData(value:));
	-(void)setData_14: (float64_t)value digits: (uint32_t)digits NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_14_: (float64_t)value digits: (uint32_t)digits NS_SWIFT_NAME(setData(value:digits:));
	-(void)setData_15: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_15_: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setData(value:digits:compact:));
	-(void)setData_16: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setData(_:_:_:_:));
	-(void)setData_16_: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setData(value:digits:compact:exponent:));
	-(NSString* _Nonnull)getData NS_SWIFT_NAME(data());
	-(BOOL)getDataBool NS_SWIFT_NAME(dataBool());
	-(int32_t)getDatai32 NS_SWIFT_NAME(datai32());
	-(int32_t)getDatai32_1: (uint32_t)radix NS_SWIFT_NAME(datai32(_:));
	-(int32_t)getDatai32_1_: (uint32_t)radix NS_SWIFT_NAME(datai32(radix:));
	-(uint32_t)getDatau32 NS_SWIFT_NAME(datau32());
	-(uint32_t)getDatau32_1: (uint32_t)radix NS_SWIFT_NAME(datau32(_:));
	-(uint32_t)getDatau32_1_: (uint32_t)radix NS_SWIFT_NAME(datau32(radix:));
	-(uint64_t)getDatau64 NS_SWIFT_NAME(datau64());
	-(uint64_t)getDatau64_1: (uint32_t)radix NS_SWIFT_NAME(datau64(_:));
	-(uint64_t)getDatau64_1_: (uint32_t)radix NS_SWIFT_NAME(datau64(radix:));
	-(float32_t)getDataf32 NS_SWIFT_NAME(dataf32());
	-(float64_t)getDataf64 NS_SWIFT_NAME(dataf64());
	-(NSString* _Nonnull)getData_1: (const char* _Nonnull)name NS_SWIFT_NAME(data(_:));
	-(NSString* _Nonnull)getData_1_: (const char* _Nonnull)name NS_SWIFT_NAME(data(name:));
	-(NSString* _Nonnull)getData_2: (const char* _Nonnull)name value: (const TSString* _Nonnull)value NS_SWIFT_NAME(data(_:_:));
	-(NSString* _Nonnull)getData_2_: (const char* _Nonnull)name value: (const TSString* _Nonnull)value NS_SWIFT_NAME(data(name:value:));
	-(BOOL)getData_3: (const char* _Nonnull)name value: (BOOL)value NS_SWIFT_NAME(data(_:_:));
	-(BOOL)getData_3_: (const char* _Nonnull)name value: (BOOL)value NS_SWIFT_NAME(data(name:value:));
	-(int32_t)getData_4: (const char* _Nonnull)name value: (int32_t)value NS_SWIFT_NAME(data(_:_:));
	-(int32_t)getData_4_: (const char* _Nonnull)name value: (int32_t)value NS_SWIFT_NAME(data(name:value:));
	-(int32_t)getData_5: (const char* _Nonnull)name value: (int32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(data(_:_:_:));
	-(int32_t)getData_5_: (const char* _Nonnull)name value: (int32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(data(name:value:radix:));
	-(uint32_t)getData_6: (const char* _Nonnull)name value: (uint32_t)value NS_SWIFT_NAME(data(_:_:));
	-(uint32_t)getData_6_: (const char* _Nonnull)name value: (uint32_t)value NS_SWIFT_NAME(data(name:value:));
	-(uint32_t)getData_7: (const char* _Nonnull)name value: (uint32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(data(_:_:_:));
	-(uint32_t)getData_7_: (const char* _Nonnull)name value: (uint32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(data(name:value:radix:));
	-(uint64_t)getData_8: (const char* _Nonnull)name value: (uint64_t)value NS_SWIFT_NAME(data(_:_:));
	-(uint64_t)getData_8_: (const char* _Nonnull)name value: (uint64_t)value NS_SWIFT_NAME(data(name:value:));
	-(uint64_t)getData_9: (const char* _Nonnull)name value: (uint64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(data(_:_:_:));
	-(uint64_t)getData_9_: (const char* _Nonnull)name value: (uint64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(data(name:value:radix:));
	-(float32_t)getData_10: (const char* _Nonnull)name value: (float32_t)value NS_SWIFT_NAME(data(_:_:));
	-(float32_t)getData_10_: (const char* _Nonnull)name value: (float32_t)value NS_SWIFT_NAME(data(name:value:));
	-(float64_t)getData_11: (const char* _Nonnull)name value: (float64_t)value NS_SWIFT_NAME(data(_:_:));
	-(float64_t)getData_11_: (const char* _Nonnull)name value: (float64_t)value NS_SWIFT_NAME(data(name:value:));
	-(void)setData_17: (const char* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_17_: (const char* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(setData(values:size:));
	-(void)setData_18: (const char* _Nonnull * _Nullable)values size: (uint32_t)size wrap: (uint32_t)wrap NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_18_: (const char* _Nonnull * _Nullable)values size: (uint32_t)size wrap: (uint32_t)wrap NS_SWIFT_NAME(setData(values:size:wrap:));
	-(void)setData_19: (const TSString* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_19_: (const TSString* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(setData(values:size:));
	-(void)setData_20: (const TSString* _Nonnull * _Nullable)values size: (uint32_t)size wrap: (uint32_t)wrap NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_20_: (const TSString* _Nonnull * _Nullable)values size: (uint32_t)size wrap: (uint32_t)wrap NS_SWIFT_NAME(setData(values:size:wrap:));
	-(void)setData_21: (const int32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_21_: (const int32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setData(values:size:));
	-(void)setData_22: (const int32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_22_: (const int32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(setData(values:size:radix:));
	-(void)setData_23: (const int32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix wrap: (uint32_t)wrap NS_SWIFT_NAME(setData(_:_:_:_:));
	-(void)setData_23_: (const int32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix wrap: (uint32_t)wrap NS_SWIFT_NAME(setData(values:size:radix:wrap:));
	-(void)setData_24: (const uint32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_24_: (const uint32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setData(values:size:));
	-(void)setData_25: (const uint32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_25_: (const uint32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(setData(values:size:radix:));
	-(void)setData_26: (const uint32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix wrap: (uint32_t)wrap NS_SWIFT_NAME(setData(_:_:_:_:));
	-(void)setData_26_: (const uint32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix wrap: (uint32_t)wrap NS_SWIFT_NAME(setData(values:size:radix:wrap:));
	-(void)setData_27: (const float32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_27_: (const float32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setData(values:size:));
	-(void)setData_28: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_28_: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits NS_SWIFT_NAME(setData(values:size:digits:));
	-(void)setData_29: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setData(_:_:_:_:));
	-(void)setData_29_: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setData(values:size:digits:compact:));
	-(void)setData_30: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setData(_:_:_:_:_:));
	-(void)setData_30_: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setData(values:size:digits:compact:exponent:));
	-(void)setData_31: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent wrap: (uint32_t)wrap NS_SWIFT_NAME(setData(_:_:_:_:_:_:));
	-(void)setData_31_: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent wrap: (uint32_t)wrap NS_SWIFT_NAME(setData(values:size:digits:compact:exponent:wrap:));
	-(void)setData_32: (const float64_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setData(_:_:));
	-(void)setData_32_: (const float64_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setData(values:size:));
	-(void)setData_33: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits NS_SWIFT_NAME(setData(_:_:_:));
	-(void)setData_33_: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits NS_SWIFT_NAME(setData(values:size:digits:));
	-(void)setData_34: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setData(_:_:_:_:));
	-(void)setData_34_: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setData(values:size:digits:compact:));
	-(void)setData_35: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setData(_:_:_:_:_:));
	-(void)setData_35_: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setData(values:size:digits:compact:exponent:));
	-(void)setData_36: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent wrap: (uint32_t)wrap NS_SWIFT_NAME(setData(_:_:_:_:_:_:));
	-(void)setData_36_: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent wrap: (uint32_t)wrap NS_SWIFT_NAME(setData(values:size:digits:compact:exponent:wrap:));
	-(uint32_t)getData_12: (TSString* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(data(_:_:));
	-(uint32_t)getData_12_: (TSString* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(data(values:size:));
	-(uint32_t)getData_13: (int32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(data(_:_:));
	-(uint32_t)getData_13_: (int32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(data(values:size:));
	-(uint32_t)getData_14: (int32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(data(_:_:_:));
	-(uint32_t)getData_14_: (int32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(data(values:size:radix:));
	-(uint32_t)getData_15: (uint32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(data(_:_:));
	-(uint32_t)getData_15_: (uint32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(data(values:size:));
	-(uint32_t)getData_16: (uint32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(data(_:_:_:));
	-(uint32_t)getData_16_: (uint32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(data(values:size:radix:));
	-(uint32_t)getData_17: (float32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(data(_:_:));
	-(uint32_t)getData_17_: (float32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(data(values:size:));
	-(uint32_t)getData_18: (float64_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(data(_:_:));
	-(uint32_t)getData_18_: (float64_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(data(values:size:));
	-(uint32_t)addAttribute: (const char* _Nonnull)name NS_SWIFT_NAME(addAttribute(_:));
	-(uint32_t)addAttribute_: (const char* _Nonnull)name NS_SWIFT_NAME(addAttribute(name:));
	-(BOOL)removeAttribute: (const char* _Nonnull)name NS_SWIFT_NAME(removeAttribute(_:));
	-(BOOL)removeAttribute_: (const char* _Nonnull)name NS_SWIFT_NAME(removeAttribute(name:));
	-(uint32_t)findAttribute: (const char* _Nonnull)name NS_SWIFT_NAME(findAttribute(_:));
	-(uint32_t)findAttribute_: (const char* _Nonnull)name NS_SWIFT_NAME(findAttribute(name:));
	-(BOOL)isAttribute: (const char* _Nonnull)name NS_SWIFT_NAME(isAttribute(_:));
	-(BOOL)isAttribute_: (const char* _Nonnull)name NS_SWIFT_NAME(isAttribute(name:));
	-(void)removeAttributes;
	-(uint32_t)getNumAttributes NS_SWIFT_NAME(numAttributes());
	-(NSString* _Nonnull)getAttributeName: (uint32_t)index NS_SWIFT_NAME(attributeName(_:));
	-(NSString* _Nonnull)getAttributeName_: (uint32_t)index NS_SWIFT_NAME(attributeName(index:));
	-(BOOL)setAttributes: (const char* _Nonnull)str NS_SWIFT_NAME(setAttributes(_:));
	-(BOOL)setAttributes_: (const char* _Nonnull)str NS_SWIFT_NAME(setAttributes(str:));
	-(void)setAttribute: (uint32_t)index value: (BOOL)value NS_SWIFT_NAME(setAttribute(_:_:));
	-(void)setAttribute_: (uint32_t)index value: (BOOL)value NS_SWIFT_NAME(setAttribute(index:value:));
	-(void)setAttribute_1: (uint32_t)index value: (const char* _Nonnull)value NS_SWIFT_NAME(setAttribute(_:_:));
	-(void)setAttribute_1_: (uint32_t)index value: (const char* _Nonnull)value NS_SWIFT_NAME(setAttribute(index:value:));
	-(void)setAttribute_2: (uint32_t)index value: (const TSString* _Nonnull)value NS_SWIFT_NAME(setAttribute(_:_:));
	-(void)setAttribute_2_: (uint32_t)index value: (const TSString* _Nonnull)value NS_SWIFT_NAME(setAttribute(index:value:));
	-(void)setAttribute_3: (uint32_t)index value: (int32_t)value NS_SWIFT_NAME(setAttribute(_:_:));
	-(void)setAttribute_3_: (uint32_t)index value: (int32_t)value NS_SWIFT_NAME(setAttribute(index:value:));
	-(void)setAttribute_4: (uint32_t)index value: (int32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setAttribute(_:_:_:));
	-(void)setAttribute_4_: (uint32_t)index value: (int32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setAttribute(index:value:radix:));
	-(void)setAttribute_5: (uint32_t)index value: (uint32_t)value NS_SWIFT_NAME(setAttribute(_:_:));
	-(void)setAttribute_5_: (uint32_t)index value: (uint32_t)value NS_SWIFT_NAME(setAttribute(index:value:));
	-(void)setAttribute_6: (uint32_t)index value: (uint32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setAttribute(_:_:_:));
	-(void)setAttribute_6_: (uint32_t)index value: (uint32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setAttribute(index:value:radix:));
	-(void)setAttribute_7: (uint32_t)index value: (uint64_t)value NS_SWIFT_NAME(setAttribute(_:_:));
	-(void)setAttribute_7_: (uint32_t)index value: (uint64_t)value NS_SWIFT_NAME(setAttribute(index:value:));
	-(void)setAttribute_8: (uint32_t)index value: (uint64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setAttribute(_:_:_:));
	-(void)setAttribute_8_: (uint32_t)index value: (uint64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(setAttribute(index:value:radix:));
	-(void)setAttribute_9: (uint32_t)index value: (float32_t)value NS_SWIFT_NAME(setAttribute(_:_:));
	-(void)setAttribute_9_: (uint32_t)index value: (float32_t)value NS_SWIFT_NAME(setAttribute(index:value:));
	-(void)setAttribute_10: (uint32_t)index value: (float32_t)value digits: (uint32_t)digits NS_SWIFT_NAME(setAttribute(_:_:_:));
	-(void)setAttribute_10_: (uint32_t)index value: (float32_t)value digits: (uint32_t)digits NS_SWIFT_NAME(setAttribute(index:value:digits:));
	-(void)setAttribute_11: (uint32_t)index value: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setAttribute(_:_:_:_:));
	-(void)setAttribute_11_: (uint32_t)index value: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setAttribute(index:value:digits:compact:));
	-(void)setAttribute_12: (uint32_t)index value: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setAttribute(_:_:_:_:_:));
	-(void)setAttribute_12_: (uint32_t)index value: (float32_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setAttribute(index:value:digits:compact:exponent:));
	-(void)setAttribute_13: (uint32_t)index value: (float64_t)value NS_SWIFT_NAME(setAttribute(_:_:));
	-(void)setAttribute_13_: (uint32_t)index value: (float64_t)value NS_SWIFT_NAME(setAttribute(index:value:));
	-(void)setAttribute_14: (uint32_t)index value: (float64_t)value digits: (uint32_t)digits NS_SWIFT_NAME(setAttribute(_:_:_:));
	-(void)setAttribute_14_: (uint32_t)index value: (float64_t)value digits: (uint32_t)digits NS_SWIFT_NAME(setAttribute(index:value:digits:));
	-(void)setAttribute_15: (uint32_t)index value: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setAttribute(_:_:_:_:));
	-(void)setAttribute_15_: (uint32_t)index value: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setAttribute(index:value:digits:compact:));
	-(void)setAttribute_16: (uint32_t)index value: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setAttribute(_:_:_:_:_:));
	-(void)setAttribute_16_: (uint32_t)index value: (float64_t)value digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setAttribute(index:value:digits:compact:exponent:));
	-(NSString* _Nonnull)getAttribute: (uint32_t)index NS_SWIFT_NAME(attribute(_:));
	-(NSString* _Nonnull)getAttribute_: (uint32_t)index NS_SWIFT_NAME(attribute(index:));
	-(int32_t)getAttributei32: (uint32_t)index NS_SWIFT_NAME(attributei32(_:));
	-(int32_t)getAttributei32_: (uint32_t)index NS_SWIFT_NAME(attributei32(index:));
	-(int32_t)getAttributei32_1: (uint32_t)index radix: (uint32_t)radix NS_SWIFT_NAME(attributei32(_:_:));
	-(int32_t)getAttributei32_1_: (uint32_t)index radix: (uint32_t)radix NS_SWIFT_NAME(attributei32(index:radix:));
	-(uint32_t)getAttributeu32: (uint32_t)index NS_SWIFT_NAME(attributeu32(_:));
	-(uint32_t)getAttributeu32_: (uint32_t)index NS_SWIFT_NAME(attributeu32(index:));
	-(uint32_t)getAttributeu32_1: (uint32_t)index radix: (uint32_t)radix NS_SWIFT_NAME(attributeu32(_:_:));
	-(uint32_t)getAttributeu32_1_: (uint32_t)index radix: (uint32_t)radix NS_SWIFT_NAME(attributeu32(index:radix:));
	-(uint64_t)getAttributeu64: (uint32_t)index NS_SWIFT_NAME(attributeu64(_:));
	-(uint64_t)getAttributeu64_: (uint32_t)index NS_SWIFT_NAME(attributeu64(index:));
	-(uint64_t)getAttributeu64_1: (uint32_t)index radix: (uint32_t)radix NS_SWIFT_NAME(attributeu64(_:_:));
	-(uint64_t)getAttributeu64_1_: (uint32_t)index radix: (uint32_t)radix NS_SWIFT_NAME(attributeu64(index:radix:));
	-(float32_t)getAttributef32: (uint32_t)index NS_SWIFT_NAME(attributef32(_:));
	-(float32_t)getAttributef32_: (uint32_t)index NS_SWIFT_NAME(attributef32(index:));
	-(float64_t)getAttributef64: (uint32_t)index NS_SWIFT_NAME(attributef64(_:));
	-(float64_t)getAttributef64_: (uint32_t)index NS_SWIFT_NAME(attributef64(index:));
	-(NSString* _Nonnull)getAttribute_1: (const char* _Nonnull)name NS_SWIFT_NAME(attribute(_:));
	-(NSString* _Nonnull)getAttribute_1_: (const char* _Nonnull)name NS_SWIFT_NAME(attribute(name:));
	-(NSString* _Nonnull)getAttribute_2: (const char* _Nonnull)name value: (const TSString* _Nonnull)value NS_SWIFT_NAME(attribute(_:_:));
	-(NSString* _Nonnull)getAttribute_2_: (const char* _Nonnull)name value: (const TSString* _Nonnull)value NS_SWIFT_NAME(attribute(name:value:));
	-(BOOL)getAttribute_3: (const char* _Nonnull)name value: (BOOL)value NS_SWIFT_NAME(attribute(_:_:));
	-(BOOL)getAttribute_3_: (const char* _Nonnull)name value: (BOOL)value NS_SWIFT_NAME(attribute(name:value:));
	-(int32_t)getAttribute_4: (const char* _Nonnull)name value: (int32_t)value NS_SWIFT_NAME(attribute(_:_:));
	-(int32_t)getAttribute_4_: (const char* _Nonnull)name value: (int32_t)value NS_SWIFT_NAME(attribute(name:value:));
	-(int32_t)getAttribute_5: (const char* _Nonnull)name value: (int32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(attribute(_:_:_:));
	-(int32_t)getAttribute_5_: (const char* _Nonnull)name value: (int32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(attribute(name:value:radix:));
	-(uint32_t)getAttribute_6: (const char* _Nonnull)name value: (uint32_t)value NS_SWIFT_NAME(attribute(_:_:));
	-(uint32_t)getAttribute_6_: (const char* _Nonnull)name value: (uint32_t)value NS_SWIFT_NAME(attribute(name:value:));
	-(uint32_t)getAttribute_7: (const char* _Nonnull)name value: (uint32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(attribute(_:_:_:));
	-(uint32_t)getAttribute_7_: (const char* _Nonnull)name value: (uint32_t)value radix: (uint32_t)radix NS_SWIFT_NAME(attribute(name:value:radix:));
	-(uint64_t)getAttribute_8: (const char* _Nonnull)name value: (uint64_t)value NS_SWIFT_NAME(attribute(_:_:));
	-(uint64_t)getAttribute_8_: (const char* _Nonnull)name value: (uint64_t)value NS_SWIFT_NAME(attribute(name:value:));
	-(uint64_t)getAttribute_9: (const char* _Nonnull)name value: (uint64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(attribute(_:_:_:));
	-(uint64_t)getAttribute_9_: (const char* _Nonnull)name value: (uint64_t)value radix: (uint32_t)radix NS_SWIFT_NAME(attribute(name:value:radix:));
	-(float32_t)getAttribute_10: (const char* _Nonnull)name value: (float32_t)value NS_SWIFT_NAME(attribute(_:_:));
	-(float32_t)getAttribute_10_: (const char* _Nonnull)name value: (float32_t)value NS_SWIFT_NAME(attribute(name:value:));
	-(float64_t)getAttribute_11: (const char* _Nonnull)name value: (float64_t)value NS_SWIFT_NAME(attribute(_:_:));
	-(float64_t)getAttribute_11_: (const char* _Nonnull)name value: (float64_t)value NS_SWIFT_NAME(attribute(name:value:));
	-(void)setAttribute_17: (uint32_t)index values: (const char* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(setAttribute(_:_:_:));
	-(void)setAttribute_17_: (uint32_t)index values: (const char* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(setAttribute(index:values:size:));
	-(void)setAttribute_18: (uint32_t)index values: (const char* _Nonnull * _Nullable)values size: (uint32_t)size delimiter: (const char* _Nullable)delimiter NS_SWIFT_NAME(setAttribute(_:_:_:_:));
	-(void)setAttribute_18_: (uint32_t)index values: (const char* _Nonnull * _Nullable)values size: (uint32_t)size delimiter: (const char* _Nullable)delimiter NS_SWIFT_NAME(setAttribute(index:values:size:delimiter:));
	-(void)setAttribute_19: (uint32_t)index values: (const TSString* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(setAttribute(_:_:_:));
	-(void)setAttribute_19_: (uint32_t)index values: (const TSString* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(setAttribute(index:values:size:));
	-(void)setAttribute_20: (uint32_t)index values: (const TSString* _Nonnull * _Nullable)values size: (uint32_t)size delimiter: (const char* _Nullable)delimiter NS_SWIFT_NAME(setAttribute(_:_:_:_:));
	-(void)setAttribute_20_: (uint32_t)index values: (const TSString* _Nonnull * _Nullable)values size: (uint32_t)size delimiter: (const char* _Nullable)delimiter NS_SWIFT_NAME(setAttribute(index:values:size:delimiter:));
	-(void)setAttribute_21: (uint32_t)index values: (const int32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setAttribute(_:_:_:));
	-(void)setAttribute_21_: (uint32_t)index values: (const int32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setAttribute(index:values:size:));
	-(void)setAttribute_22: (uint32_t)index values: (const int32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(setAttribute(_:_:_:_:));
	-(void)setAttribute_22_: (uint32_t)index values: (const int32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(setAttribute(index:values:size:radix:));
	-(void)setAttribute_23: (uint32_t)index values: (const uint32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setAttribute(_:_:_:));
	-(void)setAttribute_23_: (uint32_t)index values: (const uint32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setAttribute(index:values:size:));
	-(void)setAttribute_24: (uint32_t)index values: (const uint32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(setAttribute(_:_:_:_:));
	-(void)setAttribute_24_: (uint32_t)index values: (const uint32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(setAttribute(index:values:size:radix:));
	-(void)setAttribute_25: (uint32_t)index values: (const float32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setAttribute(_:_:_:));
	-(void)setAttribute_25_: (uint32_t)index values: (const float32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setAttribute(index:values:size:));
	-(void)setAttribute_26: (uint32_t)index values: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits NS_SWIFT_NAME(setAttribute(_:_:_:_:));
	-(void)setAttribute_26_: (uint32_t)index values: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits NS_SWIFT_NAME(setAttribute(index:values:size:digits:));
	-(void)setAttribute_27: (uint32_t)index values: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setAttribute(_:_:_:_:_:));
	-(void)setAttribute_27_: (uint32_t)index values: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setAttribute(index:values:size:digits:compact:));
	-(void)setAttribute_28: (uint32_t)index values: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setAttribute(_:_:_:_:_:_:));
	-(void)setAttribute_28_: (uint32_t)index values: (const float32_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setAttribute(index:values:size:digits:compact:exponent:));
	-(void)setAttribute_29: (uint32_t)index values: (const float64_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setAttribute(_:_:_:));
	-(void)setAttribute_29_: (uint32_t)index values: (const float64_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(setAttribute(index:values:size:));
	-(void)setAttribute_30: (uint32_t)index values: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits NS_SWIFT_NAME(setAttribute(_:_:_:_:));
	-(void)setAttribute_30_: (uint32_t)index values: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits NS_SWIFT_NAME(setAttribute(index:values:size:digits:));
	-(void)setAttribute_31: (uint32_t)index values: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setAttribute(_:_:_:_:_:));
	-(void)setAttribute_31_: (uint32_t)index values: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact NS_SWIFT_NAME(setAttribute(index:values:size:digits:compact:));
	-(void)setAttribute_32: (uint32_t)index values: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setAttribute(_:_:_:_:_:_:));
	-(void)setAttribute_32_: (uint32_t)index values: (const float64_t* _Nonnull)values size: (uint32_t)size digits: (uint32_t)digits compact: (BOOL)compact exponent: (BOOL)exponent NS_SWIFT_NAME(setAttribute(index:values:size:digits:compact:exponent:));
	-(uint32_t)getAttribute_12: (uint32_t)index values: (TSString* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(attribute(_:_:_:));
	-(uint32_t)getAttribute_12_: (uint32_t)index values: (TSString* _Nonnull * _Nullable)values size: (uint32_t)size NS_SWIFT_NAME(attribute(index:values:size:));
	-(uint32_t)getAttribute_13: (uint32_t)index values: (TSString* _Nonnull * _Nullable)values size: (uint32_t)size delimiter: (const char* _Nullable)delimiter NS_SWIFT_NAME(attribute(_:_:_:_:));
	-(uint32_t)getAttribute_13_: (uint32_t)index values: (TSString* _Nonnull * _Nullable)values size: (uint32_t)size delimiter: (const char* _Nullable)delimiter NS_SWIFT_NAME(attribute(index:values:size:delimiter:));
	-(uint32_t)getAttribute_14: (uint32_t)index values: (int32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(attribute(_:_:_:));
	-(uint32_t)getAttribute_14_: (uint32_t)index values: (int32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(attribute(index:values:size:));
	-(uint32_t)getAttribute_15: (uint32_t)index values: (int32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(attribute(_:_:_:_:));
	-(uint32_t)getAttribute_15_: (uint32_t)index values: (int32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(attribute(index:values:size:radix:));
	-(uint32_t)getAttribute_16: (uint32_t)index values: (uint32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(attribute(_:_:_:));
	-(uint32_t)getAttribute_16_: (uint32_t)index values: (uint32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(attribute(index:values:size:));
	-(uint32_t)getAttribute_17: (uint32_t)index values: (uint32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(attribute(_:_:_:_:));
	-(uint32_t)getAttribute_17_: (uint32_t)index values: (uint32_t* _Nonnull)values size: (uint32_t)size radix: (uint32_t)radix NS_SWIFT_NAME(attribute(index:values:size:radix:));
	-(uint32_t)getAttribute_18: (uint32_t)index values: (float32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(attribute(_:_:_:));
	-(uint32_t)getAttribute_18_: (uint32_t)index values: (float32_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(attribute(index:values:size:));
	-(uint32_t)getAttribute_19: (uint32_t)index values: (float64_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(attribute(_:_:_:));
	-(uint32_t)getAttribute_19_: (uint32_t)index values: (float64_t* _Nonnull)values size: (uint32_t)size NS_SWIFT_NAME(attribute(index:values:size:));
@end

/// Tellusim::Buffer
NS_SWIFT_NAME(Buffer)
TS_CAPI @interface TSBuffer : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Buffer* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Buffer&)p;
		-(Tellusim::Buffer* _Nonnull)pointer;
		-(Tellusim::Buffer&)ref;
	#endif
	-(BOOL)equalPtr: (const TSBuffer* _Nonnull)p;
	-(TSBuffer* _Nonnull)copyPtr;
	-(TSBuffer* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSBuffer* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)clear;
	-(BOOL)isCreated;
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(BOOL)create: (TS_BufferFlags)flags size: (size_t)size NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_: (TS_BufferFlags)flags size: (size_t)size NS_SWIFT_NAME(create(flags:size:));
	-(BOOL)create_1: (TS_BufferFlags)flags size: (size_t)size format: (TS_Format)format NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_1_: (TS_BufferFlags)flags size: (size_t)size format: (TS_Format)format NS_SWIFT_NAME(create(flags:size:format:));
	-(BOOL)isMapped;
	-(TS_BufferFlags)getFlags NS_SWIFT_NAME(flags());
	-(BOOL)hasFlag: (TS_BufferFlags)flags NS_SWIFT_NAME(hasFlag(_:));
	-(BOOL)hasFlag_: (TS_BufferFlags)flags NS_SWIFT_NAME(hasFlag(flags:));
	-(BOOL)hasFlags: (TS_BufferFlags)flags NS_SWIFT_NAME(hasFlags(_:));
	-(BOOL)hasFlags_: (TS_BufferFlags)flags NS_SWIFT_NAME(hasFlags(flags:));
	-(NSString* _Nonnull)getFlagsName NS_SWIFT_NAME(flagsName());
	-(TS_Format)getFormat NS_SWIFT_NAME(format());
	-(NSString* _Nonnull)getFormatName NS_SWIFT_NAME(formatName());
	-(uint32_t)getComponents NS_SWIFT_NAME(components());
	-(uint32_t)getPixelSize NS_SWIFT_NAME(pixelSize());
	-(size_t)getSize NS_SWIFT_NAME(size());
	-(size_t)getPageSize NS_SWIFT_NAME(pageSize());
	-(NSString* _Nonnull)getDescription NS_SWIFT_NAME(description());
@end

/// Tellusim::BufferTable
NS_SWIFT_NAME(BufferTable)
TS_CAPI @interface TSBufferTable : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::BufferTable* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::BufferTable&)p;
		-(Tellusim::BufferTable* _Nonnull)pointer;
		-(Tellusim::BufferTable&)ref;
	#endif
	-(BOOL)equalPtr: (const TSBufferTable* _Nonnull)p;
	-(TSBufferTable* _Nonnull)copyPtr;
	-(TSBufferTable* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSBufferTable* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)clear;
	-(BOOL)isCreated;
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(BOOL)create: (uint32_t)size NS_SWIFT_NAME(create(_:));
	-(BOOL)create_: (uint32_t)size NS_SWIFT_NAME(create(size:));
	-(uint32_t)getSize NS_SWIFT_NAME(size());
	-(TSBuffer* _Nonnull)get: (uint32_t)index NS_SWIFT_NAME(get(_:));
	-(TSBuffer* _Nonnull)get_: (uint32_t)index NS_SWIFT_NAME(get(index:));
	-(BOOL)isOwner: (uint32_t)index NS_SWIFT_NAME(isOwner(_:));
	-(BOOL)isOwner_: (uint32_t)index NS_SWIFT_NAME(isOwner(index:));
	-(size_t)getMemory NS_SWIFT_NAME(memory());
@end

/// Tellusim::D3D12Buffer
NS_SWIFT_NAME(D3D12Buffer)
TS_CAPI @interface TSD3D12Buffer : TSBuffer
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D12Buffer* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D12Buffer&)p;
		-(Tellusim::D3D12Buffer* _Nonnull)pointer;
		-(Tellusim::D3D12Buffer&)ref;
	#endif
	-(id _Nonnull)initBuffer: (TSBuffer* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSBuffer* _Nonnull)getBuffer;
	-(BOOL)equalPtr: (const TSD3D12Buffer* _Nonnull)p;
	-(TSD3D12Buffer* _Nonnull)copyPtr;
	-(TSD3D12Buffer* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D12Buffer* _Nonnull)null;
	-(BOOL)create_2: (TS_BufferFlags)flags buffer: (ID3D12Resource* _Nonnull)buffer state: (uint32_t)state NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_2_: (TS_BufferFlags)flags buffer: (ID3D12Resource* _Nonnull)buffer state: (uint32_t)state NS_SWIFT_NAME(create(flags:buffer:state:));
	-(ID3D12Resource* _Nonnull)getD3D12Buffer NS_SWIFT_NAME(d3D12Buffer());
	-(size_t)getUnorderedAccessView NS_SWIFT_NAME(unorderedAccessView());
	-(size_t)getShaderResourceView NS_SWIFT_NAME(shaderResourceView());
	-(uint64_t)getBufferAddress NS_SWIFT_NAME(bufferAddress());
	-(void)setBufferState: (uint32_t)state NS_SWIFT_NAME(setBufferState(_:));
	-(void)setBufferState_: (uint32_t)state NS_SWIFT_NAME(setBufferState(state:));
	-(uint32_t)getBufferState NS_SWIFT_NAME(bufferState());
	-(void* _Nonnull)getSharedHandle NS_SWIFT_NAME(sharedHandle());
	-(void* _Nonnull)getInteropHandle NS_SWIFT_NAME(interopHandle());
@end

/// Tellusim::D3D11Buffer
NS_SWIFT_NAME(D3D11Buffer)
TS_CAPI @interface TSD3D11Buffer : TSBuffer
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D11Buffer* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D11Buffer&)p;
		-(Tellusim::D3D11Buffer* _Nonnull)pointer;
		-(Tellusim::D3D11Buffer&)ref;
	#endif
	-(id _Nonnull)initBuffer: (TSBuffer* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSBuffer* _Nonnull)getBuffer;
	-(BOOL)equalPtr: (const TSD3D11Buffer* _Nonnull)p;
	-(TSD3D11Buffer* _Nonnull)copyPtr;
	-(TSD3D11Buffer* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D11Buffer* _Nonnull)null;
	-(BOOL)create_2: (TS_BufferFlags)flags buffer: (ID3D11Buffer* _Nonnull)buffer NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_2_: (TS_BufferFlags)flags buffer: (ID3D11Buffer* _Nonnull)buffer NS_SWIFT_NAME(create(flags:buffer:));
	-(ID3D11Buffer* _Nonnull)getD3D11Buffer NS_SWIFT_NAME(d3D11Buffer());
	-(ID3D11UnorderedAccessView* _Nonnull)getUnorderedAccessView NS_SWIFT_NAME(unorderedAccessView());
	-(ID3D11ShaderResourceView* _Nonnull)getShaderResourceView NS_SWIFT_NAME(shaderResourceView());
	-(void* _Nonnull)getInteropHandle NS_SWIFT_NAME(interopHandle());
@end

/// Tellusim::MTLBuffer
NS_SWIFT_NAME(MTLBuffer)
TS_CAPI @interface TSMTLBuffer : TSBuffer
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MTLBuffer* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MTLBuffer&)p;
		-(Tellusim::MTLBuffer* _Nonnull)pointer;
		-(Tellusim::MTLBuffer&)ref;
	#endif
	-(id _Nonnull)initBuffer: (TSBuffer* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSBuffer* _Nonnull)getBuffer;
	-(BOOL)equalPtr: (const TSMTLBuffer* _Nonnull)p;
	-(TSMTLBuffer* _Nonnull)copyPtr;
	-(TSMTLBuffer* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMTLBuffer* _Nonnull)null;
	-(BOOL)create_2: (TS_BufferFlags)flags buffer: (void* _Nonnull)buffer NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_2_: (TS_BufferFlags)flags buffer: (void* _Nonnull)buffer NS_SWIFT_NAME(create(flags:buffer:));
	-(void* _Nonnull)getMTLBuffer NS_SWIFT_NAME(MTLBuffer());
	-(void* _Nonnull)getSharedPtr NS_SWIFT_NAME(sharedPtr());
@end

/// Tellusim::VKBuffer
NS_SWIFT_NAME(VKBuffer)
TS_CAPI @interface TSVKBuffer : TSBuffer
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::VKBuffer* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::VKBuffer&)p;
		-(Tellusim::VKBuffer* _Nonnull)pointer;
		-(Tellusim::VKBuffer&)ref;
	#endif
	-(id _Nonnull)initBuffer: (TSBuffer* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSBuffer* _Nonnull)getBuffer;
	-(BOOL)equalPtr: (const TSVKBuffer* _Nonnull)p;
	-(TSVKBuffer* _Nonnull)copyPtr;
	-(TSVKBuffer* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSVKBuffer* _Nonnull)null;
	-(BOOL)create_2: (TS_BufferFlags)flags size: (size_t)size buffer: (VkBuffer _Nullable)buffer access: (uint32_t)access NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_2_: (TS_BufferFlags)flags size: (size_t)size buffer: (VkBuffer _Nullable)buffer access: (uint32_t)access NS_SWIFT_NAME(create(flags:size:buffer:access:));
	-(VkBuffer _Nullable)getVKBuffer NS_SWIFT_NAME(VKBuffer());
	-(VkBufferView _Nullable)getBufferView NS_SWIFT_NAME(bufferView());
	-(uint64_t)getBufferAddress NS_SWIFT_NAME(bufferAddress());
	-(void)setBufferAccess: (uint32_t)access NS_SWIFT_NAME(setBufferAccess(_:));
	-(void)setBufferAccess_: (uint32_t)access NS_SWIFT_NAME(setBufferAccess(access:));
	-(uint32_t)getBufferAccess NS_SWIFT_NAME(bufferAccess());
	-(void* _Nonnull)getSharedPtr NS_SWIFT_NAME(sharedPtr());
	-(void* _Nonnull)getInteropHandle NS_SWIFT_NAME(interopHandle());
@end

/// Tellusim::GLBuffer
NS_SWIFT_NAME(GLBuffer)
TS_CAPI @interface TSGLBuffer : TSBuffer
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::GLBuffer* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::GLBuffer&)p;
		-(Tellusim::GLBuffer* _Nonnull)pointer;
		-(Tellusim::GLBuffer&)ref;
	#endif
	-(id _Nonnull)initBuffer: (TSBuffer* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSBuffer* _Nonnull)getBuffer;
	-(BOOL)equalPtr: (const TSGLBuffer* _Nonnull)p;
	-(TSGLBuffer* _Nonnull)copyPtr;
	-(TSGLBuffer* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSGLBuffer* _Nonnull)null;
	-(BOOL)create_2: (TS_BufferFlags)flags target: (uint32_t)target buffer_id: (uint32_t)buffer_id NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_2_: (TS_BufferFlags)flags target: (uint32_t)target buffer_id: (uint32_t)buffer_id NS_SWIFT_NAME(create(flags:target:buffer_id:));
	-(uint32_t)getTarget NS_SWIFT_NAME(target());
	-(uint32_t)getBufferID NS_SWIFT_NAME(bufferID());
@end

/// Tellusim::GLESBuffer
NS_SWIFT_NAME(GLESBuffer)
TS_CAPI @interface TSGLESBuffer : TSBuffer
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::GLESBuffer* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::GLESBuffer&)p;
		-(Tellusim::GLESBuffer* _Nonnull)pointer;
		-(Tellusim::GLESBuffer&)ref;
	#endif
	-(id _Nonnull)initBuffer: (TSBuffer* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSBuffer* _Nonnull)getBuffer;
	-(BOOL)equalPtr: (const TSGLESBuffer* _Nonnull)p;
	-(TSGLESBuffer* _Nonnull)copyPtr;
	-(TSGLESBuffer* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSGLESBuffer* _Nonnull)null;
	-(BOOL)create_2: (TS_BufferFlags)flags target: (uint32_t)target buffer_id: (uint32_t)buffer_id NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_2_: (TS_BufferFlags)flags target: (uint32_t)target buffer_id: (uint32_t)buffer_id NS_SWIFT_NAME(create(flags:target:buffer_id:));
	-(uint32_t)getTarget NS_SWIFT_NAME(target());
	-(uint32_t)getBufferID NS_SWIFT_NAME(bufferID());
@end

/// Tellusim::CUBuffer
NS_SWIFT_NAME(CUBuffer)
TS_CAPI @interface TSCUBuffer : TSBuffer
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::CUBuffer* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::CUBuffer&)p;
		-(Tellusim::CUBuffer* _Nonnull)pointer;
		-(Tellusim::CUBuffer&)ref;
	#endif
	-(id _Nonnull)initBuffer: (TSBuffer* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSBuffer* _Nonnull)getBuffer;
	-(BOOL)equalPtr: (const TSCUBuffer* _Nonnull)p;
	-(TSCUBuffer* _Nonnull)copyPtr;
	-(TSCUBuffer* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSCUBuffer* _Nonnull)null;
	-(size_t)getBufferPtr NS_SWIFT_NAME(bufferPtr());
	-(uint8_t* _Nonnull)getBufferData NS_SWIFT_NAME(bufferData());
	-(CUevent _Nullable)getBufferEvent NS_SWIFT_NAME(bufferEvent());
	-(uint32_t)getArrayFormat NS_SWIFT_NAME(arrayFormat());
	-(uint32_t)getArrayChannels NS_SWIFT_NAME(arrayChannels());
	-(CUexternalMemory _Nullable)getSharedMemory NS_SWIFT_NAME(sharedMemory());
@end

/// Tellusim::HIPBuffer
NS_SWIFT_NAME(HIPBuffer)
TS_CAPI @interface TSHIPBuffer : TSBuffer
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::HIPBuffer* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::HIPBuffer&)p;
		-(Tellusim::HIPBuffer* _Nonnull)pointer;
		-(Tellusim::HIPBuffer&)ref;
	#endif
	-(id _Nonnull)initBuffer: (TSBuffer* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSBuffer* _Nonnull)getBuffer;
	-(BOOL)equalPtr: (const TSHIPBuffer* _Nonnull)p;
	-(TSHIPBuffer* _Nonnull)copyPtr;
	-(TSHIPBuffer* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSHIPBuffer* _Nonnull)null;
	-(void* _Nonnull)getBufferPtr NS_SWIFT_NAME(bufferPtr());
	-(uint8_t* _Nonnull)getBufferData NS_SWIFT_NAME(bufferData());
	-(void* _Nonnull)getBufferEvent NS_SWIFT_NAME(bufferEvent());
	-(uint32_t)getArrayFormat NS_SWIFT_NAME(arrayFormat());
	-(uint32_t)getArrayChannels NS_SWIFT_NAME(arrayChannels());
	-(void* _Nonnull)getSharedMemory NS_SWIFT_NAME(sharedMemory());
@end

/// Tellusim::FUBuffer
NS_SWIFT_NAME(FUBuffer)
TS_CAPI @interface TSFUBuffer : TSBuffer
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(init(buffers:buffers_size:));
	-(id _Nonnull)init_3: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size owner: (BOOL)owner NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_3_: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size owner: (BOOL)owner NS_SWIFT_NAME(init(buffers:buffers_size:owner:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::FUBuffer* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::FUBuffer&)p;
		-(Tellusim::FUBuffer* _Nonnull)pointer;
		-(Tellusim::FUBuffer&)ref;
	#endif
	-(id _Nonnull)initBuffer: (TSBuffer* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSBuffer* _Nonnull)getBuffer;
	-(BOOL)equalPtr: (const TSFUBuffer* _Nonnull)p;
	-(TSFUBuffer* _Nonnull)copyPtr;
	-(TSFUBuffer* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFUBuffer* _Nonnull)null;
	-(void)setMask: (uint32_t)mask NS_SWIFT_NAME(setMask(_:));
	-(void)setMask_: (uint32_t)mask NS_SWIFT_NAME(setMask(mask:));
	-(uint32_t)getMask NS_SWIFT_NAME(mask());
	-(uint32_t)getNumBuffers NS_SWIFT_NAME(numBuffers());
	-(const TSBuffer* _Nonnull)getBuffer: (uint32_t)index NS_SWIFT_NAME(buffer(_:));
	-(const TSBuffer* _Nonnull)getBuffer_: (uint32_t)index NS_SWIFT_NAME(buffer(index:));
@end

/// Tellusim::Command
NS_SWIFT_NAME(Command)
TS_CAPI @interface TSCommand : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Command* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Command&)p;
		-(Tellusim::Command* _Nonnull)pointer;
		-(Tellusim::Command&)ref;
	#endif
	-(BOOL)equalPtr: (const TSCommand* _Nonnull)p;
	-(TSCommand* _Nonnull)copyPtr;
	-(TSCommand* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSCommand* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)setPipeline: (TSPipeline* _Nonnull)pipeline NS_SWIFT_NAME(setPipeline(_:));
	-(void)setPipeline_: (TSPipeline* _Nonnull)pipeline NS_SWIFT_NAME(setPipeline(pipeline:));
	-(TSPipeline* _Nonnull)getPipeline NS_SWIFT_NAME(pipeline());
	-(void)setViewport: (uint32_t)index viewport: (TSViewport)viewport NS_SWIFT_NAME(setViewport(_:_:));
	-(void)setViewport_: (uint32_t)index viewport: (TSViewport)viewport NS_SWIFT_NAME(setViewport(index:viewport:));
	-(void)setViewports: (const TSViewport* _Nonnull)viewports num_viewports: (uint32_t)num_viewports NS_SWIFT_NAME(setViewports(_:_:));
	-(void)setViewports_: (const TSViewport* _Nonnull)viewports num_viewports: (uint32_t)num_viewports NS_SWIFT_NAME(setViewports(viewports:num_viewports:));
	-(void)setScissor: (uint32_t)index scissor: (TSScissor)scissor NS_SWIFT_NAME(setScissor(_:_:));
	-(void)setScissor_: (uint32_t)index scissor: (TSScissor)scissor NS_SWIFT_NAME(setScissor(index:scissor:));
	-(void)setScissors: (const TSScissor* _Nonnull)scissors num_scissors: (uint32_t)num_scissors NS_SWIFT_NAME(setScissors(_:_:));
	-(void)setScissors_: (const TSScissor* _Nonnull)scissors num_scissors: (uint32_t)num_scissors NS_SWIFT_NAME(setScissors(scissors:num_scissors:));
	-(void)setSampler: (uint32_t)index sampler: (TSSampler* _Nonnull)sampler NS_SWIFT_NAME(setSampler(_:_:));
	-(void)setSampler_: (uint32_t)index sampler: (TSSampler* _Nonnull)sampler NS_SWIFT_NAME(setSampler(index:sampler:));
	-(void)setSamplers: (uint32_t)index samplers: (TSSampler* _Nonnull * _Nullable)samplers samplers_size: (uint32_t)samplers_size NS_SWIFT_NAME(setSamplers(_:_:_:));
	-(void)setSamplers_: (uint32_t)index samplers: (TSSampler* _Nonnull * _Nullable)samplers samplers_size: (uint32_t)samplers_size NS_SWIFT_NAME(setSamplers(index:samplers:samplers_size:));
	-(void)setTexture: (uint32_t)index texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setTexture(_:_:));
	-(void)setTexture_: (uint32_t)index texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setTexture(index:texture:));
	-(void)setTexture_1: (uint32_t)index texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(setTexture(_:_:_:));
	-(void)setTexture_1_: (uint32_t)index texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(setTexture(index:texture:slice:));
	-(void)setTextures: (uint32_t)index textures: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(setTextures(_:_:_:));
	-(void)setTextures_: (uint32_t)index textures: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(setTextures(index:textures:textures_size:));
	-(void)setSurfaceTexture: (uint32_t)index texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setSurfaceTexture(_:_:));
	-(void)setSurfaceTexture_: (uint32_t)index texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setSurfaceTexture(index:texture:));
	-(void)setSurfaceTexture_1: (uint32_t)index texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(setSurfaceTexture(_:_:_:));
	-(void)setSurfaceTexture_1_: (uint32_t)index texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(setSurfaceTexture(index:texture:slice:));
	-(void)setSurfaceTexture_2: (uint32_t)index texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice format: (TS_Format)format NS_SWIFT_NAME(setSurfaceTexture(_:_:_:_:));
	-(void)setSurfaceTexture_2_: (uint32_t)index texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice format: (TS_Format)format NS_SWIFT_NAME(setSurfaceTexture(index:texture:slice:format:));
	-(void)setSurfaceTextures: (uint32_t)index textures: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(setSurfaceTextures(_:_:_:));
	-(void)setSurfaceTextures_: (uint32_t)index textures: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(setSurfaceTextures(index:textures:textures_size:));
	-(void* _Nonnull)getUniformData: (uint32_t)index size: (size_t)size NS_SWIFT_NAME(uniformData(_:_:));
	-(void* _Nonnull)getUniformData_: (uint32_t)index size: (size_t)size NS_SWIFT_NAME(uniformData(index:size:));
	-(void)setUniformData: (uint32_t)index src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setUniformData(_:_:_:));
	-(void)setUniformData_: (uint32_t)index src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setUniformData(index:src:size:));
	-(void)setUniformBuffer: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setUniformBuffer(_:_:));
	-(void)setUniformBuffer_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setUniformBuffer(index:buffer:));
	-(void)setUniformBuffer_1: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setUniformBuffer(_:_:_:));
	-(void)setUniformBuffer_1_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setUniformBuffer(index:buffer:offset:));
	-(void)setUniformBuffer_2: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset size: (size_t)size NS_SWIFT_NAME(setUniformBuffer(_:_:_:_:));
	-(void)setUniformBuffer_2_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset size: (size_t)size NS_SWIFT_NAME(setUniformBuffer(index:buffer:offset:size:));
	-(void)setUniformOffset: (uint32_t)index offset: (size_t)offset NS_SWIFT_NAME(setUniformOffset(_:_:));
	-(void)setUniformOffset_: (uint32_t)index offset: (size_t)offset NS_SWIFT_NAME(setUniformOffset(index:offset:));
	-(void)setUniformOffset_1: (uint32_t)index offset: (size_t)offset relative: (BOOL)relative NS_SWIFT_NAME(setUniformOffset(_:_:_:));
	-(void)setUniformOffset_1_: (uint32_t)index offset: (size_t)offset relative: (BOOL)relative NS_SWIFT_NAME(setUniformOffset(index:offset:relative:));
	-(void)setUniformBuffers: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(setUniformBuffers(_:_:_:));
	-(void)setUniformBuffers_: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(setUniformBuffers(index:buffers:buffers_size:));
	-(void)setUniformBuffers_1: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size offsets: (size_t* _Nonnull)offsets offsets_size: (uint32_t)offsets_size NS_SWIFT_NAME(setUniformBuffers(_:_:_:_:_:));
	-(void)setUniformBuffers_1_: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size offsets: (size_t* _Nonnull)offsets offsets_size: (uint32_t)offsets_size NS_SWIFT_NAME(setUniformBuffers(index:buffers:buffers_size:offsets:offsets_size:));
	-(void* _Nonnull)getStorageData: (uint32_t)index size: (size_t)size NS_SWIFT_NAME(storageData(_:_:));
	-(void* _Nonnull)getStorageData_: (uint32_t)index size: (size_t)size NS_SWIFT_NAME(storageData(index:size:));
	-(void)setStorageData: (uint32_t)index src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setStorageData(_:_:_:));
	-(void)setStorageData_: (uint32_t)index src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setStorageData(index:src:size:));
	-(void)setStorageBuffer: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setStorageBuffer(_:_:));
	-(void)setStorageBuffer_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setStorageBuffer(index:buffer:));
	-(void)setStorageBuffer_1: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setStorageBuffer(_:_:_:));
	-(void)setStorageBuffer_1_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setStorageBuffer(index:buffer:offset:));
	-(void)setStorageBuffer_2: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset size: (size_t)size NS_SWIFT_NAME(setStorageBuffer(_:_:_:_:));
	-(void)setStorageBuffer_2_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset size: (size_t)size NS_SWIFT_NAME(setStorageBuffer(index:buffer:offset:size:));
	-(void)setStorageOffset: (uint32_t)index offset: (size_t)offset NS_SWIFT_NAME(setStorageOffset(_:_:));
	-(void)setStorageOffset_: (uint32_t)index offset: (size_t)offset NS_SWIFT_NAME(setStorageOffset(index:offset:));
	-(void)setStorageOffset_1: (uint32_t)index offset: (size_t)offset relative: (BOOL)relative NS_SWIFT_NAME(setStorageOffset(_:_:_:));
	-(void)setStorageOffset_1_: (uint32_t)index offset: (size_t)offset relative: (BOOL)relative NS_SWIFT_NAME(setStorageOffset(index:offset:relative:));
	-(void)setStorageBuffers: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(setStorageBuffers(_:_:_:));
	-(void)setStorageBuffers_: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(setStorageBuffers(index:buffers:buffers_size:));
	-(void)setStorageBuffers_1: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size offsets: (size_t* _Nonnull)offsets offsets_size: (uint32_t)offsets_size NS_SWIFT_NAME(setStorageBuffers(_:_:_:_:_:));
	-(void)setStorageBuffers_1_: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size offsets: (size_t* _Nonnull)offsets offsets_size: (uint32_t)offsets_size NS_SWIFT_NAME(setStorageBuffers(index:buffers:buffers_size:offsets:offsets_size:));
	-(void)setTracing: (uint32_t)index tracing: (TSTracing* _Nonnull)tracing NS_SWIFT_NAME(setTracing(_:_:));
	-(void)setTracing_: (uint32_t)index tracing: (TSTracing* _Nonnull)tracing NS_SWIFT_NAME(setTracing(index:tracing:));
	-(void)setTracings: (uint32_t)index tracings: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size NS_SWIFT_NAME(setTracings(_:_:_:));
	-(void)setTracings_: (uint32_t)index tracings: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size NS_SWIFT_NAME(setTracings(index:tracings:tracings_size:));
	-(void)setTexelBuffer: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setTexelBuffer(_:_:));
	-(void)setTexelBuffer_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setTexelBuffer(index:buffer:));
	-(void)setTexelBuffers: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(setTexelBuffers(_:_:_:));
	-(void)setTexelBuffers_: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(setTexelBuffers(index:buffers:buffers_size:));
	-(void)setTextureTable: (uint32_t)index table: (TSTextureTable* _Nonnull)table NS_SWIFT_NAME(setTextureTable(_:_:));
	-(void)setTextureTable_: (uint32_t)index table: (TSTextureTable* _Nonnull)table NS_SWIFT_NAME(setTextureTable(index:table:));
	-(void)setTextureTables: (uint32_t)index tables: (TSTextureTable* _Nonnull * _Nullable)tables tables_size: (uint32_t)tables_size NS_SWIFT_NAME(setTextureTables(_:_:_:));
	-(void)setTextureTables_: (uint32_t)index tables: (TSTextureTable* _Nonnull * _Nullable)tables tables_size: (uint32_t)tables_size NS_SWIFT_NAME(setTextureTables(index:tables:tables_size:));
	-(void)setStorageTable: (uint32_t)index table: (TSBufferTable* _Nonnull)table NS_SWIFT_NAME(setStorageTable(_:_:));
	-(void)setStorageTable_: (uint32_t)index table: (TSBufferTable* _Nonnull)table NS_SWIFT_NAME(setStorageTable(index:table:));
	-(void)setStorageTables: (uint32_t)index tables: (TSBufferTable* _Nonnull * _Nullable)tables tables_size: (uint32_t)tables_size NS_SWIFT_NAME(setStorageTables(_:_:_:));
	-(void)setStorageTables_: (uint32_t)index tables: (TSBufferTable* _Nonnull * _Nullable)tables tables_size: (uint32_t)tables_size NS_SWIFT_NAME(setStorageTables(index:tables:tables_size:));
	-(void* _Nonnull)getVertexData: (uint32_t)index size: (size_t)size NS_SWIFT_NAME(vertexData(_:_:));
	-(void* _Nonnull)getVertexData_: (uint32_t)index size: (size_t)size NS_SWIFT_NAME(vertexData(index:size:));
	-(void)setVertexData: (uint32_t)index src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setVertexData(_:_:_:));
	-(void)setVertexData_: (uint32_t)index src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setVertexData(index:src:size:));
	-(void)setVertexBuffer: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setVertexBuffer(_:_:));
	-(void)setVertexBuffer_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setVertexBuffer(index:buffer:));
	-(void)setVertexBuffer_1: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setVertexBuffer(_:_:_:));
	-(void)setVertexBuffer_1_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setVertexBuffer(index:buffer:offset:));
	-(void)setVertexOffset: (uint32_t)index offset: (size_t)offset NS_SWIFT_NAME(setVertexOffset(_:_:));
	-(void)setVertexOffset_: (uint32_t)index offset: (size_t)offset NS_SWIFT_NAME(setVertexOffset(index:offset:));
	-(void)setVertexOffset_1: (uint32_t)index offset: (size_t)offset relative: (BOOL)relative NS_SWIFT_NAME(setVertexOffset(_:_:_:));
	-(void)setVertexOffset_1_: (uint32_t)index offset: (size_t)offset relative: (BOOL)relative NS_SWIFT_NAME(setVertexOffset(index:offset:relative:));
	-(void)setVertexBuffers: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(setVertexBuffers(_:_:_:));
	-(void)setVertexBuffers_: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(setVertexBuffers(index:buffers:buffers_size:));
	-(void)setVertexBuffers_1: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size offsets: (size_t* _Nonnull)offsets offsets_size: (uint32_t)offsets_size NS_SWIFT_NAME(setVertexBuffers(_:_:_:_:_:));
	-(void)setVertexBuffers_1_: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size offsets: (size_t* _Nonnull)offsets offsets_size: (uint32_t)offsets_size NS_SWIFT_NAME(setVertexBuffers(index:buffers:buffers_size:offsets:offsets_size:));
	-(void* _Nonnull)getIndexData: (TS_Format)format size: (size_t)size NS_SWIFT_NAME(indexData(_:_:));
	-(void* _Nonnull)getIndexData_: (TS_Format)format size: (size_t)size NS_SWIFT_NAME(indexData(format:size:));
	-(void)setIndexData: (TS_Format)format src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setIndexData(_:_:_:));
	-(void)setIndexData_: (TS_Format)format src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setIndexData(format:src:size:));
	-(void)setIndexBuffer: (TS_Format)format buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setIndexBuffer(_:_:));
	-(void)setIndexBuffer_: (TS_Format)format buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setIndexBuffer(format:buffer:));
	-(void)setIndexBuffer_1: (TS_Format)format buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setIndexBuffer(_:_:_:));
	-(void)setIndexBuffer_1_: (TS_Format)format buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setIndexBuffer(format:buffer:offset:));
	-(void)setIndexOffset: (size_t)offset NS_SWIFT_NAME(setIndexOffset(_:));
	-(void)setIndexOffset_: (size_t)offset NS_SWIFT_NAME(setIndexOffset(offset:));
	-(void)setIndexOffset_1: (size_t)offset relative: (BOOL)relative NS_SWIFT_NAME(setIndexOffset(_:_:));
	-(void)setIndexOffset_1_: (size_t)offset relative: (BOOL)relative NS_SWIFT_NAME(setIndexOffset(offset:relative:));
	-(void* _Nonnull)getIndirectData: (size_t)size NS_SWIFT_NAME(indirectData(_:));
	-(void* _Nonnull)getIndirectData_: (size_t)size NS_SWIFT_NAME(indirectData(size:));
	-(void)setIndirectData: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setIndirectData(_:_:));
	-(void)setIndirectData_: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setIndirectData(src:size:));
	-(void)setIndirectBuffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setIndirectBuffer(_:));
	-(void)setIndirectBuffer_: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setIndirectBuffer(buffer:));
	-(void)setIndirectBuffer_1: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setIndirectBuffer(_:_:));
	-(void)setIndirectBuffer_1_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setIndirectBuffer(buffer:offset:));
	-(void)setIndirectOffset: (size_t)offset NS_SWIFT_NAME(setIndirectOffset(_:));
	-(void)setIndirectOffset_: (size_t)offset NS_SWIFT_NAME(setIndirectOffset(offset:));
	-(void)setIndirectOffset_1: (size_t)offset relative: (BOOL)relative NS_SWIFT_NAME(setIndirectOffset(_:_:));
	-(void)setIndirectOffset_1_: (size_t)offset relative: (BOOL)relative NS_SWIFT_NAME(setIndirectOffset(offset:relative:));
	-(void)setBlendColor: (TSColor)color NS_SWIFT_NAME(setBlendColor(_:));
	-(void)setBlendColor_: (TSColor)color NS_SWIFT_NAME(setBlendColor(color:));
	-(void)setBlendColor_1: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a NS_SWIFT_NAME(setBlendColor(_:_:_:_:));
	-(void)setBlendColor_1_: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a NS_SWIFT_NAME(setBlendColor(r:g:b:a:));
	-(void)setStencilRef: (uint32_t)ref NS_SWIFT_NAME(setStencilRef(_:));
	-(void)setStencilRef_: (uint32_t)ref NS_SWIFT_NAME(setStencilRef(ref:));
	-(void)drawArrays: (uint32_t)num_vertices NS_SWIFT_NAME(drawArrays(_:));
	-(void)drawArrays_: (uint32_t)num_vertices NS_SWIFT_NAME(drawArrays(num_vertices:));
	-(void)drawArrays_1: (uint32_t)num_vertices base_vertex: (uint32_t)base_vertex NS_SWIFT_NAME(drawArrays(_:_:));
	-(void)drawArrays_1_: (uint32_t)num_vertices base_vertex: (uint32_t)base_vertex NS_SWIFT_NAME(drawArrays(num_vertices:base_vertex:));
	-(void)drawArraysInstanced: (uint32_t)num_vertices base_vertex: (uint32_t)base_vertex num_instances: (uint32_t)num_instances NS_SWIFT_NAME(drawArraysInstanced(_:_:_:));
	-(void)drawArraysInstanced_: (uint32_t)num_vertices base_vertex: (uint32_t)base_vertex num_instances: (uint32_t)num_instances NS_SWIFT_NAME(drawArraysInstanced(num_vertices:base_vertex:num_instances:));
	-(void)drawArraysInstanced_1: (uint32_t)num_vertices base_vertex: (uint32_t)base_vertex num_instances: (uint32_t)num_instances base_instance: (uint32_t)base_instance NS_SWIFT_NAME(drawArraysInstanced(_:_:_:_:));
	-(void)drawArraysInstanced_1_: (uint32_t)num_vertices base_vertex: (uint32_t)base_vertex num_instances: (uint32_t)num_instances base_instance: (uint32_t)base_instance NS_SWIFT_NAME(drawArraysInstanced(num_vertices:base_vertex:num_instances:base_instance:));
	-(void)drawArraysIndirect: (uint32_t)num_draws NS_SWIFT_NAME(drawArraysIndirect(_:));
	-(void)drawArraysIndirect_: (uint32_t)num_draws NS_SWIFT_NAME(drawArraysIndirect(num_draws:));
	-(void)drawArraysIndirect_1: (uint32_t)num_draws stride: (size_t)stride NS_SWIFT_NAME(drawArraysIndirect(_:_:));
	-(void)drawArraysIndirect_1_: (uint32_t)num_draws stride: (size_t)stride NS_SWIFT_NAME(drawArraysIndirect(num_draws:stride:));
	-(void)drawArraysIndirect_2: (TSBuffer* _Nonnull)buffer offset: (size_t)offset num_draws: (uint32_t)num_draws NS_SWIFT_NAME(drawArraysIndirect(_:_:_:));
	-(void)drawArraysIndirect_2_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset num_draws: (uint32_t)num_draws NS_SWIFT_NAME(drawArraysIndirect(buffer:offset:num_draws:));
	-(void)drawArraysIndirect_3: (TSBuffer* _Nonnull)buffer offset: (size_t)offset num_draws: (uint32_t)num_draws stride: (size_t)stride NS_SWIFT_NAME(drawArraysIndirect(_:_:_:_:));
	-(void)drawArraysIndirect_3_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset num_draws: (uint32_t)num_draws stride: (size_t)stride NS_SWIFT_NAME(drawArraysIndirect(buffer:offset:num_draws:stride:));
	-(void)drawElements: (uint32_t)num_indices NS_SWIFT_NAME(drawElements(_:));
	-(void)drawElements_: (uint32_t)num_indices NS_SWIFT_NAME(drawElements(num_indices:));
	-(void)drawElements_1: (uint32_t)num_indices base_index: (uint32_t)base_index NS_SWIFT_NAME(drawElements(_:_:));
	-(void)drawElements_1_: (uint32_t)num_indices base_index: (uint32_t)base_index NS_SWIFT_NAME(drawElements(num_indices:base_index:));
	-(void)drawElements_2: (uint32_t)num_indices base_index: (uint32_t)base_index base_vertex: (int32_t)base_vertex NS_SWIFT_NAME(drawElements(_:_:_:));
	-(void)drawElements_2_: (uint32_t)num_indices base_index: (uint32_t)base_index base_vertex: (int32_t)base_vertex NS_SWIFT_NAME(drawElements(num_indices:base_index:base_vertex:));
	-(void)drawElementsInstanced: (uint32_t)num_indices base_index: (uint32_t)base_index num_instances: (uint32_t)num_instances NS_SWIFT_NAME(drawElementsInstanced(_:_:_:));
	-(void)drawElementsInstanced_: (uint32_t)num_indices base_index: (uint32_t)base_index num_instances: (uint32_t)num_instances NS_SWIFT_NAME(drawElementsInstanced(num_indices:base_index:num_instances:));
	-(void)drawElementsInstanced_1: (uint32_t)num_indices base_index: (uint32_t)base_index base_vertex: (int32_t)base_vertex num_instances: (uint32_t)num_instances NS_SWIFT_NAME(drawElementsInstanced(_:_:_:_:));
	-(void)drawElementsInstanced_1_: (uint32_t)num_indices base_index: (uint32_t)base_index base_vertex: (int32_t)base_vertex num_instances: (uint32_t)num_instances NS_SWIFT_NAME(drawElementsInstanced(num_indices:base_index:base_vertex:num_instances:));
	-(void)drawElementsInstanced_2: (uint32_t)num_indices base_index: (uint32_t)base_index base_vertex: (int32_t)base_vertex num_instances: (uint32_t)num_instances base_instance: (uint32_t)base_instance NS_SWIFT_NAME(drawElementsInstanced(_:_:_:_:_:));
	-(void)drawElementsInstanced_2_: (uint32_t)num_indices base_index: (uint32_t)base_index base_vertex: (int32_t)base_vertex num_instances: (uint32_t)num_instances base_instance: (uint32_t)base_instance NS_SWIFT_NAME(drawElementsInstanced(num_indices:base_index:base_vertex:num_instances:base_instance:));
	-(void)drawElementsIndirect: (uint32_t)num_draws NS_SWIFT_NAME(drawElementsIndirect(_:));
	-(void)drawElementsIndirect_: (uint32_t)num_draws NS_SWIFT_NAME(drawElementsIndirect(num_draws:));
	-(void)drawElementsIndirect_1: (uint32_t)num_draws stride: (size_t)stride NS_SWIFT_NAME(drawElementsIndirect(_:_:));
	-(void)drawElementsIndirect_1_: (uint32_t)num_draws stride: (size_t)stride NS_SWIFT_NAME(drawElementsIndirect(num_draws:stride:));
	-(void)drawElementsIndirect_2: (TSBuffer* _Nonnull)buffer offset: (size_t)offset num_draws: (uint32_t)num_draws NS_SWIFT_NAME(drawElementsIndirect(_:_:_:));
	-(void)drawElementsIndirect_2_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset num_draws: (uint32_t)num_draws NS_SWIFT_NAME(drawElementsIndirect(buffer:offset:num_draws:));
	-(void)drawElementsIndirect_3: (TSBuffer* _Nonnull)buffer offset: (size_t)offset num_draws: (uint32_t)num_draws stride: (size_t)stride NS_SWIFT_NAME(drawElementsIndirect(_:_:_:_:));
	-(void)drawElementsIndirect_3_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset num_draws: (uint32_t)num_draws stride: (size_t)stride NS_SWIFT_NAME(drawElementsIndirect(buffer:offset:num_draws:stride:));
	-(void)drawMesh: (uint32_t)width NS_SWIFT_NAME(drawMesh(_:));
	-(void)drawMesh_: (uint32_t)width NS_SWIFT_NAME(drawMesh(width:));
	-(void)drawMesh_1: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(drawMesh(_:_:));
	-(void)drawMesh_1_: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(drawMesh(width:height:));
	-(void)drawMesh_2: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth NS_SWIFT_NAME(drawMesh(_:_:_:));
	-(void)drawMesh_2_: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth NS_SWIFT_NAME(drawMesh(width:height:depth:));
	-(void)drawMeshIndirect: (uint32_t)num_draws NS_SWIFT_NAME(drawMeshIndirect(_:));
	-(void)drawMeshIndirect_: (uint32_t)num_draws NS_SWIFT_NAME(drawMeshIndirect(num_draws:));
	-(void)drawMeshIndirect_1: (uint32_t)num_draws stride: (size_t)stride NS_SWIFT_NAME(drawMeshIndirect(_:_:));
	-(void)drawMeshIndirect_1_: (uint32_t)num_draws stride: (size_t)stride NS_SWIFT_NAME(drawMeshIndirect(num_draws:stride:));
	-(void)drawMeshIndirect_2: (TSBuffer* _Nonnull)buffer offset: (size_t)offset num_draws: (uint32_t)num_draws NS_SWIFT_NAME(drawMeshIndirect(_:_:_:));
	-(void)drawMeshIndirect_2_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset num_draws: (uint32_t)num_draws NS_SWIFT_NAME(drawMeshIndirect(buffer:offset:num_draws:));
	-(void)drawMeshIndirect_3: (TSBuffer* _Nonnull)buffer offset: (size_t)offset num_draws: (uint32_t)num_draws stride: (size_t)stride NS_SWIFT_NAME(drawMeshIndirect(_:_:_:_:));
	-(void)drawMeshIndirect_3_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset num_draws: (uint32_t)num_draws stride: (size_t)stride NS_SWIFT_NAME(drawMeshIndirect(buffer:offset:num_draws:stride:));
	-(void)beginConditional: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(beginConditional(_:_:));
	-(void)beginConditional_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(beginConditional(buffer:offset:));
	-(void)endConditional;
	-(BOOL)beginQuery: (TSQuery* _Nonnull)query NS_SWIFT_NAME(beginQuery(_:));
	-(BOOL)beginQuery_: (TSQuery* _Nonnull)query NS_SWIFT_NAME(beginQuery(query:));
	-(void)endQuery: (TSQuery* _Nonnull)query NS_SWIFT_NAME(endQuery(_:));
	-(void)endQuery_: (TSQuery* _Nonnull)query NS_SWIFT_NAME(endQuery(query:));
@end

/// Tellusim::D3D12Command
NS_SWIFT_NAME(D3D12Command)
TS_CAPI @interface TSD3D12Command : TSCommand
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D12Command* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D12Command&)p;
		-(Tellusim::D3D12Command* _Nonnull)pointer;
		-(Tellusim::D3D12Command&)ref;
	#endif
	-(id _Nonnull)initCommand: (TSCommand* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSCommand* _Nonnull)getCommand;
	-(BOOL)equalPtr: (const TSD3D12Command* _Nonnull)p;
	-(TSD3D12Command* _Nonnull)copyPtr;
	-(TSD3D12Command* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D12Command* _Nonnull)null;
	-(ID3D12GraphicsCommandList* _Nonnull)getD3D12Command NS_SWIFT_NAME(d3D12Command());
	-(void)update;
@end

/// Tellusim::MTLCommand
NS_SWIFT_NAME(MTLCommand)
TS_CAPI @interface TSMTLCommand : TSCommand
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MTLCommand* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MTLCommand&)p;
		-(Tellusim::MTLCommand* _Nonnull)pointer;
		-(Tellusim::MTLCommand&)ref;
	#endif
	-(id _Nonnull)initCommand: (TSCommand* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSCommand* _Nonnull)getCommand;
	-(BOOL)equalPtr: (const TSMTLCommand* _Nonnull)p;
	-(TSMTLCommand* _Nonnull)copyPtr;
	-(TSMTLCommand* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMTLCommand* _Nonnull)null;
	-(void* _Nonnull)getEncoder NS_SWIFT_NAME(encoder());
	-(void)flush: (void* _Nonnull)encoder NS_SWIFT_NAME(flush(_:));
	-(void)flush_: (void* _Nonnull)encoder NS_SWIFT_NAME(flush(encoder:));
	-(void)flush_1: (void* _Nonnull)encoder enqueue: (BOOL)enqueue NS_SWIFT_NAME(flush(_:_:));
	-(void)flush_1_: (void* _Nonnull)encoder enqueue: (BOOL)enqueue NS_SWIFT_NAME(flush(encoder:enqueue:));
	-(void)flush_2 NS_SWIFT_NAME(flush());
	-(void)flush_3: (BOOL)create NS_SWIFT_NAME(flush(_:));
	-(void)flush_3_: (BOOL)create NS_SWIFT_NAME(flush(create:));
	-(void)flush_4: (BOOL)create enqueue: (BOOL)enqueue NS_SWIFT_NAME(flush(_:_:));
	-(void)flush_4_: (BOOL)create enqueue: (BOOL)enqueue NS_SWIFT_NAME(flush(create:enqueue:));
	-(void)update;
@end

/// Tellusim::VKCommand
NS_SWIFT_NAME(VKCommand)
TS_CAPI @interface TSVKCommand : TSCommand
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::VKCommand* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::VKCommand&)p;
		-(Tellusim::VKCommand* _Nonnull)pointer;
		-(Tellusim::VKCommand&)ref;
	#endif
	-(id _Nonnull)initCommand: (TSCommand* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSCommand* _Nonnull)getCommand;
	-(BOOL)equalPtr: (const TSVKCommand* _Nonnull)p;
	-(TSVKCommand* _Nonnull)copyPtr;
	-(TSVKCommand* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSVKCommand* _Nonnull)null;
	-(VkCommandBuffer _Nullable)getVKCommand NS_SWIFT_NAME(VKCommand());
	-(VkDescriptorSet _Nullable)getSamplerDescriptor NS_SWIFT_NAME(samplerDescriptor());
	-(VkDescriptorSet _Nullable)getImageDescriptor NS_SWIFT_NAME(imageDescriptor());
	-(VkDescriptorSet _Nullable)getBufferDescriptor NS_SWIFT_NAME(bufferDescriptor());
	-(VkDescriptorSet _Nullable)getTracingDescriptor NS_SWIFT_NAME(tracingDescriptor());
	-(VkDescriptorSet _Nullable)getTexelDescriptor NS_SWIFT_NAME(texelDescriptor());
	-(void)update;
@end

/// Tellusim::FUCommand
NS_SWIFT_NAME(FUCommand)
TS_CAPI @interface TSFUCommand : TSCommand
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSCommand* _Nonnull * _Nullable)commands commands_size: (uint32_t)commands_size NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TSCommand* _Nonnull * _Nullable)commands commands_size: (uint32_t)commands_size NS_SWIFT_NAME(init(commands:commands_size:));
	-(id _Nonnull)init_3: (TSCommand* _Nonnull * _Nullable)commands commands_size: (uint32_t)commands_size owner: (BOOL)owner NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_3_: (TSCommand* _Nonnull * _Nullable)commands commands_size: (uint32_t)commands_size owner: (BOOL)owner NS_SWIFT_NAME(init(commands:commands_size:owner:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::FUCommand* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::FUCommand&)p;
		-(Tellusim::FUCommand* _Nonnull)pointer;
		-(Tellusim::FUCommand&)ref;
	#endif
	-(id _Nonnull)initCommand: (TSCommand* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSCommand* _Nonnull)getCommand;
	-(BOOL)equalPtr: (const TSFUCommand* _Nonnull)p;
	-(TSFUCommand* _Nonnull)copyPtr;
	-(TSFUCommand* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFUCommand* _Nonnull)null;
	-(void)setMask: (uint32_t)mask NS_SWIFT_NAME(setMask(_:));
	-(void)setMask_: (uint32_t)mask NS_SWIFT_NAME(setMask(mask:));
	-(uint32_t)getMask NS_SWIFT_NAME(mask());
	-(uint32_t)getNumCommands NS_SWIFT_NAME(numCommands());
	-(const TSCommand* _Nonnull)getCommand: (uint32_t)index NS_SWIFT_NAME(command(_:));
	-(const TSCommand* _Nonnull)getCommand_: (uint32_t)index NS_SWIFT_NAME(command(index:));
@end

/// Tellusim::Compute
NS_SWIFT_NAME(Compute)
TS_CAPI @interface TSCompute : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Compute* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Compute&)p;
		-(Tellusim::Compute* _Nonnull)pointer;
		-(Tellusim::Compute&)ref;
	#endif
	-(BOOL)equalPtr: (const TSCompute* _Nonnull)p;
	-(TSCompute* _Nonnull)copyPtr;
	-(TSCompute* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSCompute* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)setKernel: (TSKernel* _Nonnull)kernel NS_SWIFT_NAME(setKernel(_:));
	-(void)setKernel_: (TSKernel* _Nonnull)kernel NS_SWIFT_NAME(setKernel(kernel:));
	-(TSKernel* _Nonnull)getKernel NS_SWIFT_NAME(kernel());
	-(void)setTraversal: (TSTraversal* _Nonnull)traversal NS_SWIFT_NAME(setTraversal(_:));
	-(void)setTraversal_: (TSTraversal* _Nonnull)traversal NS_SWIFT_NAME(setTraversal(traversal:));
	-(TSTraversal* _Nonnull)getTraversal NS_SWIFT_NAME(traversal());
	-(void)setSampler: (uint32_t)index sampler: (TSSampler* _Nonnull)sampler NS_SWIFT_NAME(setSampler(_:_:));
	-(void)setSampler_: (uint32_t)index sampler: (TSSampler* _Nonnull)sampler NS_SWIFT_NAME(setSampler(index:sampler:));
	-(void)setSamplers: (uint32_t)index samplers: (TSSampler* _Nonnull * _Nullable)samplers samplers_size: (uint32_t)samplers_size NS_SWIFT_NAME(setSamplers(_:_:_:));
	-(void)setSamplers_: (uint32_t)index samplers: (TSSampler* _Nonnull * _Nullable)samplers samplers_size: (uint32_t)samplers_size NS_SWIFT_NAME(setSamplers(index:samplers:samplers_size:));
	-(void)setTexture: (uint32_t)index texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setTexture(_:_:));
	-(void)setTexture_: (uint32_t)index texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setTexture(index:texture:));
	-(void)setTexture_1: (uint32_t)index texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(setTexture(_:_:_:));
	-(void)setTexture_1_: (uint32_t)index texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(setTexture(index:texture:slice:));
	-(void)setTextures: (uint32_t)index textures: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(setTextures(_:_:_:));
	-(void)setTextures_: (uint32_t)index textures: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(setTextures(index:textures:textures_size:));
	-(void)setSurfaceTexture: (uint32_t)index texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setSurfaceTexture(_:_:));
	-(void)setSurfaceTexture_: (uint32_t)index texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setSurfaceTexture(index:texture:));
	-(void)setSurfaceTexture_1: (uint32_t)index texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(setSurfaceTexture(_:_:_:));
	-(void)setSurfaceTexture_1_: (uint32_t)index texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(setSurfaceTexture(index:texture:slice:));
	-(void)setSurfaceTexture_2: (uint32_t)index texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice format: (TS_Format)format NS_SWIFT_NAME(setSurfaceTexture(_:_:_:_:));
	-(void)setSurfaceTexture_2_: (uint32_t)index texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice format: (TS_Format)format NS_SWIFT_NAME(setSurfaceTexture(index:texture:slice:format:));
	-(void)setSurfaceTextures: (uint32_t)index textures: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(setSurfaceTextures(_:_:_:));
	-(void)setSurfaceTextures_: (uint32_t)index textures: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(setSurfaceTextures(index:textures:textures_size:));
	-(void* _Nonnull)getUniformData: (uint32_t)index size: (size_t)size NS_SWIFT_NAME(uniformData(_:_:));
	-(void* _Nonnull)getUniformData_: (uint32_t)index size: (size_t)size NS_SWIFT_NAME(uniformData(index:size:));
	-(void)setUniformData: (uint32_t)index src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setUniformData(_:_:_:));
	-(void)setUniformData_: (uint32_t)index src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setUniformData(index:src:size:));
	-(void)setUniformBuffer: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setUniformBuffer(_:_:));
	-(void)setUniformBuffer_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setUniformBuffer(index:buffer:));
	-(void)setUniformBuffer_1: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setUniformBuffer(_:_:_:));
	-(void)setUniformBuffer_1_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setUniformBuffer(index:buffer:offset:));
	-(void)setUniformBuffer_2: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset size: (size_t)size NS_SWIFT_NAME(setUniformBuffer(_:_:_:_:));
	-(void)setUniformBuffer_2_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset size: (size_t)size NS_SWIFT_NAME(setUniformBuffer(index:buffer:offset:size:));
	-(void)setUniformOffset: (uint32_t)index offset: (size_t)offset NS_SWIFT_NAME(setUniformOffset(_:_:));
	-(void)setUniformOffset_: (uint32_t)index offset: (size_t)offset NS_SWIFT_NAME(setUniformOffset(index:offset:));
	-(void)setUniformOffset_1: (uint32_t)index offset: (size_t)offset relative: (BOOL)relative NS_SWIFT_NAME(setUniformOffset(_:_:_:));
	-(void)setUniformOffset_1_: (uint32_t)index offset: (size_t)offset relative: (BOOL)relative NS_SWIFT_NAME(setUniformOffset(index:offset:relative:));
	-(void)setUniformBuffers: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(setUniformBuffers(_:_:_:));
	-(void)setUniformBuffers_: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(setUniformBuffers(index:buffers:buffers_size:));
	-(void)setUniformBuffers_1: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size offsets: (size_t* _Nonnull)offsets offsets_size: (uint32_t)offsets_size NS_SWIFT_NAME(setUniformBuffers(_:_:_:_:_:));
	-(void)setUniformBuffers_1_: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size offsets: (size_t* _Nonnull)offsets offsets_size: (uint32_t)offsets_size NS_SWIFT_NAME(setUniformBuffers(index:buffers:buffers_size:offsets:offsets_size:));
	-(void* _Nonnull)getStorageData: (uint32_t)index size: (size_t)size NS_SWIFT_NAME(storageData(_:_:));
	-(void* _Nonnull)getStorageData_: (uint32_t)index size: (size_t)size NS_SWIFT_NAME(storageData(index:size:));
	-(void)setStorageData: (uint32_t)index src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setStorageData(_:_:_:));
	-(void)setStorageData_: (uint32_t)index src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setStorageData(index:src:size:));
	-(void)setStorageBuffer: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setStorageBuffer(_:_:));
	-(void)setStorageBuffer_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setStorageBuffer(index:buffer:));
	-(void)setStorageBuffer_1: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setStorageBuffer(_:_:_:));
	-(void)setStorageBuffer_1_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setStorageBuffer(index:buffer:offset:));
	-(void)setStorageBuffer_2: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset size: (size_t)size NS_SWIFT_NAME(setStorageBuffer(_:_:_:_:));
	-(void)setStorageBuffer_2_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset size: (size_t)size NS_SWIFT_NAME(setStorageBuffer(index:buffer:offset:size:));
	-(void)setStorageOffset: (uint32_t)index offset: (size_t)offset NS_SWIFT_NAME(setStorageOffset(_:_:));
	-(void)setStorageOffset_: (uint32_t)index offset: (size_t)offset NS_SWIFT_NAME(setStorageOffset(index:offset:));
	-(void)setStorageOffset_1: (uint32_t)index offset: (size_t)offset relative: (BOOL)relative NS_SWIFT_NAME(setStorageOffset(_:_:_:));
	-(void)setStorageOffset_1_: (uint32_t)index offset: (size_t)offset relative: (BOOL)relative NS_SWIFT_NAME(setStorageOffset(index:offset:relative:));
	-(void)setStorageBuffers: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(setStorageBuffers(_:_:_:));
	-(void)setStorageBuffers_: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(setStorageBuffers(index:buffers:buffers_size:));
	-(void)setStorageBuffers_1: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size offsets: (size_t* _Nonnull)offsets offsets_size: (uint32_t)offsets_size NS_SWIFT_NAME(setStorageBuffers(_:_:_:_:_:));
	-(void)setStorageBuffers_1_: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size offsets: (size_t* _Nonnull)offsets offsets_size: (uint32_t)offsets_size NS_SWIFT_NAME(setStorageBuffers(index:buffers:buffers_size:offsets:offsets_size:));
	-(void)setTracing: (uint32_t)index tracing: (TSTracing* _Nonnull)tracing NS_SWIFT_NAME(setTracing(_:_:));
	-(void)setTracing_: (uint32_t)index tracing: (TSTracing* _Nonnull)tracing NS_SWIFT_NAME(setTracing(index:tracing:));
	-(void)setTracings: (uint32_t)index tracings: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size NS_SWIFT_NAME(setTracings(_:_:_:));
	-(void)setTracings_: (uint32_t)index tracings: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size NS_SWIFT_NAME(setTracings(index:tracings:tracings_size:));
	-(void)setTexelBuffer: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setTexelBuffer(_:_:));
	-(void)setTexelBuffer_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setTexelBuffer(index:buffer:));
	-(void)setTexelBuffers: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(setTexelBuffers(_:_:_:));
	-(void)setTexelBuffers_: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(setTexelBuffers(index:buffers:buffers_size:));
	-(void)setTextureTable: (uint32_t)index table: (TSTextureTable* _Nonnull)table NS_SWIFT_NAME(setTextureTable(_:_:));
	-(void)setTextureTable_: (uint32_t)index table: (TSTextureTable* _Nonnull)table NS_SWIFT_NAME(setTextureTable(index:table:));
	-(void)setTextureTables: (uint32_t)index tables: (TSTextureTable* _Nonnull * _Nullable)tables tables_size: (uint32_t)tables_size NS_SWIFT_NAME(setTextureTables(_:_:_:));
	-(void)setTextureTables_: (uint32_t)index tables: (TSTextureTable* _Nonnull * _Nullable)tables tables_size: (uint32_t)tables_size NS_SWIFT_NAME(setTextureTables(index:tables:tables_size:));
	-(void)setStorageTable: (uint32_t)index table: (TSBufferTable* _Nonnull)table NS_SWIFT_NAME(setStorageTable(_:_:));
	-(void)setStorageTable_: (uint32_t)index table: (TSBufferTable* _Nonnull)table NS_SWIFT_NAME(setStorageTable(index:table:));
	-(void)setStorageTables: (uint32_t)index tables: (TSBufferTable* _Nonnull * _Nullable)tables tables_size: (uint32_t)tables_size NS_SWIFT_NAME(setStorageTables(_:_:_:));
	-(void)setStorageTables_: (uint32_t)index tables: (TSBufferTable* _Nonnull * _Nullable)tables tables_size: (uint32_t)tables_size NS_SWIFT_NAME(setStorageTables(index:tables:tables_size:));
	-(void* _Nonnull)getIndirectData: (size_t)size NS_SWIFT_NAME(indirectData(_:));
	-(void* _Nonnull)getIndirectData_: (size_t)size NS_SWIFT_NAME(indirectData(size:));
	-(void)setIndirectData: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setIndirectData(_:_:));
	-(void)setIndirectData_: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setIndirectData(src:size:));
	-(void)setIndirectBuffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setIndirectBuffer(_:));
	-(void)setIndirectBuffer_: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setIndirectBuffer(buffer:));
	-(void)setIndirectBuffer_1: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setIndirectBuffer(_:_:));
	-(void)setIndirectBuffer_1_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setIndirectBuffer(buffer:offset:));
	-(void)setIndirectOffset: (size_t)offset NS_SWIFT_NAME(setIndirectOffset(_:));
	-(void)setIndirectOffset_: (size_t)offset NS_SWIFT_NAME(setIndirectOffset(offset:));
	-(void)setIndirectOffset_1: (size_t)offset relative: (BOOL)relative NS_SWIFT_NAME(setIndirectOffset(_:_:));
	-(void)setIndirectOffset_1_: (size_t)offset relative: (BOOL)relative NS_SWIFT_NAME(setIndirectOffset(offset:relative:));
	-(void)dispatch: (uint32_t)width NS_SWIFT_NAME(dispatch(_:));
	-(void)dispatch_: (uint32_t)width NS_SWIFT_NAME(dispatch(width:));
	-(void)dispatch_1: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(dispatch(_:_:));
	-(void)dispatch_1_: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(dispatch(width:height:));
	-(void)dispatch_2: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth NS_SWIFT_NAME(dispatch(_:_:_:));
	-(void)dispatch_2_: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth NS_SWIFT_NAME(dispatch(width:height:depth:));
	-(void)dispatch_3: (const TSTexture* _Nonnull)texture NS_SWIFT_NAME(dispatch(_:));
	-(void)dispatch_3_: (const TSTexture* _Nonnull)texture NS_SWIFT_NAME(dispatch(texture:));
	-(void)dispatch_4: (TSSize)size NS_SWIFT_NAME(dispatch(_:));
	-(void)dispatch_4_: (TSSize)size NS_SWIFT_NAME(dispatch(size:));
	-(void)dispatchIndirect;
	-(BOOL)setBuffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setBuffer(_:_:_:_:));
	-(BOOL)setBuffer_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setBuffer(buffer:offset:src:size:));
	-(BOOL)setBuffer_1: (TSBuffer* _Nonnull)buffer src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setBuffer(_:_:_:));
	-(BOOL)setBuffer_1_: (TSBuffer* _Nonnull)buffer src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setBuffer(buffer:src:size:));
	-(BOOL)setBuffer_2: (TSBuffer* _Nonnull)buffer src: (const void* _Nonnull)src NS_SWIFT_NAME(setBuffer(_:_:));
	-(BOOL)setBuffer_2_: (TSBuffer* _Nonnull)buffer src: (const void* _Nonnull)src NS_SWIFT_NAME(setBuffer(buffer:src:));
	-(BOOL)copyBuffer: (TSBuffer* _Nonnull)buffer dest_offset: (size_t)dest_offset src: (TSBuffer* _Nonnull)src src_offset: (size_t)src_offset size: (size_t)size NS_SWIFT_NAME(copyBuffer(_:_:_:_:_:));
	-(BOOL)copyBuffer_: (TSBuffer* _Nonnull)buffer dest_offset: (size_t)dest_offset src: (TSBuffer* _Nonnull)src src_offset: (size_t)src_offset size: (size_t)size NS_SWIFT_NAME(copyBuffer(buffer:dest_offset:src:src_offset:size:));
	-(BOOL)copyBuffer_1: (TSBuffer* _Nonnull)buffer dest_offset: (size_t)dest_offset src: (TSBuffer* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(copyBuffer(_:_:_:_:));
	-(BOOL)copyBuffer_1_: (TSBuffer* _Nonnull)buffer dest_offset: (size_t)dest_offset src: (TSBuffer* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(copyBuffer(buffer:dest_offset:src:size:));
	-(BOOL)copyBuffer_2: (TSBuffer* _Nonnull)buffer src: (TSBuffer* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(copyBuffer(_:_:_:));
	-(BOOL)copyBuffer_2_: (TSBuffer* _Nonnull)buffer src: (TSBuffer* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(copyBuffer(buffer:src:size:));
	-(BOOL)copyBuffer_3: (TSBuffer* _Nonnull)buffer src: (TSBuffer* _Nonnull)src NS_SWIFT_NAME(copyBuffer(_:_:));
	-(BOOL)copyBuffer_3_: (TSBuffer* _Nonnull)buffer src: (TSBuffer* _Nonnull)src NS_SWIFT_NAME(copyBuffer(buffer:src:));
	-(BOOL)clearBuffer: (TSBuffer* _Nonnull)buffer format: (TS_Format)format offset: (size_t)offset src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(clearBuffer(_:_:_:_:_:));
	-(BOOL)clearBuffer_: (TSBuffer* _Nonnull)buffer format: (TS_Format)format offset: (size_t)offset src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(clearBuffer(buffer:format:offset:src:size:));
	-(BOOL)clearBuffer_1: (TSBuffer* _Nonnull)buffer format: (TS_Format)format src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(clearBuffer(_:_:_:_:));
	-(BOOL)clearBuffer_1_: (TSBuffer* _Nonnull)buffer format: (TS_Format)format src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(clearBuffer(buffer:format:src:size:));
	-(BOOL)clearBuffer_2: (TSBuffer* _Nonnull)buffer format: (TS_Format)format src: (const void* _Nonnull)src NS_SWIFT_NAME(clearBuffer(_:_:_:));
	-(BOOL)clearBuffer_2_: (TSBuffer* _Nonnull)buffer format: (TS_Format)format src: (const void* _Nonnull)src NS_SWIFT_NAME(clearBuffer(buffer:format:src:));
	-(BOOL)clearBuffer_3: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(clearBuffer(_:));
	-(BOOL)clearBuffer_3_: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(clearBuffer(buffer:));
	-(BOOL)setTexture_2: (TSTexture* _Nonnull)texture dest_origin: (TSOrigin)dest_origin dest_slice: (TSSlice)dest_slice image: (const TSImage* _Nonnull)image src_slice: (TSSlice)src_slice NS_SWIFT_NAME(setTexture(_:_:_:_:_:));
	-(BOOL)setTexture_2_: (TSTexture* _Nonnull)texture dest_origin: (TSOrigin)dest_origin dest_slice: (TSSlice)dest_slice image: (const TSImage* _Nonnull)image src_slice: (TSSlice)src_slice NS_SWIFT_NAME(setTexture(texture:dest_origin:dest_slice:image:src_slice:));
	-(BOOL)setTexture_3: (TSTexture* _Nonnull)texture dest_origin: (TSOrigin)dest_origin image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(setTexture(_:_:_:));
	-(BOOL)setTexture_3_: (TSTexture* _Nonnull)texture dest_origin: (TSOrigin)dest_origin image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(setTexture(texture:dest_origin:image:));
	-(BOOL)setTexture_4: (TSTexture* _Nonnull)texture dest_slice: (TSSlice)dest_slice image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(setTexture(_:_:_:));
	-(BOOL)setTexture_4_: (TSTexture* _Nonnull)texture dest_slice: (TSSlice)dest_slice image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(setTexture(texture:dest_slice:image:));
	-(BOOL)setTexture_5: (TSTexture* _Nonnull)texture image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(setTexture(_:_:));
	-(BOOL)setTexture_5_: (TSTexture* _Nonnull)texture image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(setTexture(texture:image:));
	-(BOOL)copyTexture: (TSTexture* _Nonnull)texture dest_origin: (TSOrigin)dest_origin dest_slice: (TSSlice)dest_slice src: (TSTexture* _Nonnull)src src_region: (TSRegion)src_region src_slice: (TSSlice)src_slice NS_SWIFT_NAME(copyTexture(_:_:_:_:_:_:));
	-(BOOL)copyTexture_: (TSTexture* _Nonnull)texture dest_origin: (TSOrigin)dest_origin dest_slice: (TSSlice)dest_slice src: (TSTexture* _Nonnull)src src_region: (TSRegion)src_region src_slice: (TSSlice)src_slice NS_SWIFT_NAME(copyTexture(texture:dest_origin:dest_slice:src:src_region:src_slice:));
	-(BOOL)copyTexture_1: (TSTexture* _Nonnull)texture dest_origin: (TSOrigin)dest_origin src: (TSTexture* _Nonnull)src src_region: (TSRegion)src_region NS_SWIFT_NAME(copyTexture(_:_:_:_:));
	-(BOOL)copyTexture_1_: (TSTexture* _Nonnull)texture dest_origin: (TSOrigin)dest_origin src: (TSTexture* _Nonnull)src src_region: (TSRegion)src_region NS_SWIFT_NAME(copyTexture(texture:dest_origin:src:src_region:));
	-(BOOL)copyTexture_2: (TSTexture* _Nonnull)texture dest_slice: (TSSlice)dest_slice src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(copyTexture(_:_:_:_:));
	-(BOOL)copyTexture_2_: (TSTexture* _Nonnull)texture dest_slice: (TSSlice)dest_slice src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(copyTexture(texture:dest_slice:src:src_slice:));
	-(BOOL)copyTexture_3: (TSTexture* _Nonnull)texture src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(copyTexture(_:_:));
	-(BOOL)copyTexture_3_: (TSTexture* _Nonnull)texture src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(copyTexture(texture:src:));
	-(BOOL)clearTexture: (TSTexture* _Nonnull)texture region: (TSRegion)region slice: (TSSlice)slice src: (const void* _Nonnull)src NS_SWIFT_NAME(clearTexture(_:_:_:_:));
	-(BOOL)clearTexture_: (TSTexture* _Nonnull)texture region: (TSRegion)region slice: (TSSlice)slice src: (const void* _Nonnull)src NS_SWIFT_NAME(clearTexture(texture:region:slice:src:));
	-(BOOL)clearTexture_1: (TSTexture* _Nonnull)texture region: (TSRegion)region src: (const void* _Nonnull)src NS_SWIFT_NAME(clearTexture(_:_:_:));
	-(BOOL)clearTexture_1_: (TSTexture* _Nonnull)texture region: (TSRegion)region src: (const void* _Nonnull)src NS_SWIFT_NAME(clearTexture(texture:region:src:));
	-(BOOL)clearTexture_2: (TSTexture* _Nonnull)texture slice: (TSSlice)slice src: (const void* _Nonnull)src NS_SWIFT_NAME(clearTexture(_:_:_:));
	-(BOOL)clearTexture_2_: (TSTexture* _Nonnull)texture slice: (TSSlice)slice src: (const void* _Nonnull)src NS_SWIFT_NAME(clearTexture(texture:slice:src:));
	-(BOOL)clearTexture_3: (TSTexture* _Nonnull)texture src: (const void* _Nonnull)src NS_SWIFT_NAME(clearTexture(_:_:));
	-(BOOL)clearTexture_3_: (TSTexture* _Nonnull)texture src: (const void* _Nonnull)src NS_SWIFT_NAME(clearTexture(texture:src:));
	-(void)barrier: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(barrier(_:));
	-(void)barrier_: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(barrier(texture:));
	-(void)barrier_1: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(barrier(_:));
	-(void)barrier_1_: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(barrier(buffer:));
	-(void)barrier_2: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(barrier(_:_:));
	-(void)barrier_2_: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(barrier(textures:textures_size:));
	-(void)barrier_3: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(barrier(_:_:));
	-(void)barrier_3_: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(barrier(buffers:buffers_size:));
	-(void)beginConditional: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(beginConditional(_:_:));
	-(void)beginConditional_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(beginConditional(buffer:offset:));
	-(void)endConditional;
	-(BOOL)beginQuery: (TSQuery* _Nonnull)query NS_SWIFT_NAME(beginQuery(_:));
	-(BOOL)beginQuery_: (TSQuery* _Nonnull)query NS_SWIFT_NAME(beginQuery(query:));
	-(void)endQuery: (TSQuery* _Nonnull)query NS_SWIFT_NAME(endQuery(_:));
	-(void)endQuery_: (TSQuery* _Nonnull)query NS_SWIFT_NAME(endQuery(query:));
@end

/// Tellusim::D3D12Compute
NS_SWIFT_NAME(D3D12Compute)
TS_CAPI @interface TSD3D12Compute : TSCompute
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D12Compute* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D12Compute&)p;
		-(Tellusim::D3D12Compute* _Nonnull)pointer;
		-(Tellusim::D3D12Compute&)ref;
	#endif
	-(id _Nonnull)initCompute: (TSCompute* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSCompute* _Nonnull)getCompute;
	-(BOOL)equalPtr: (const TSD3D12Compute* _Nonnull)p;
	-(TSD3D12Compute* _Nonnull)copyPtr;
	-(TSD3D12Compute* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D12Compute* _Nonnull)null;
	-(ID3D12GraphicsCommandList* _Nonnull)getCommand NS_SWIFT_NAME(command());
	-(void)update;
@end

/// Tellusim::MTLCompute
NS_SWIFT_NAME(MTLCompute)
TS_CAPI @interface TSMTLCompute : TSCompute
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MTLCompute* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MTLCompute&)p;
		-(Tellusim::MTLCompute* _Nonnull)pointer;
		-(Tellusim::MTLCompute&)ref;
	#endif
	-(id _Nonnull)initCompute: (TSCompute* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSCompute* _Nonnull)getCompute;
	-(BOOL)equalPtr: (const TSMTLCompute* _Nonnull)p;
	-(TSMTLCompute* _Nonnull)copyPtr;
	-(TSMTLCompute* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMTLCompute* _Nonnull)null;
	-(void* _Nonnull)getEncoder NS_SWIFT_NAME(encoder());
	-(void)flush: (void* _Nonnull)encoder NS_SWIFT_NAME(flush(_:));
	-(void)flush_: (void* _Nonnull)encoder NS_SWIFT_NAME(flush(encoder:));
	-(void)flush_1: (void* _Nonnull)encoder enqueue: (BOOL)enqueue NS_SWIFT_NAME(flush(_:_:));
	-(void)flush_1_: (void* _Nonnull)encoder enqueue: (BOOL)enqueue NS_SWIFT_NAME(flush(encoder:enqueue:));
	-(void)flush_2 NS_SWIFT_NAME(flush());
	-(void)flush_3: (BOOL)create NS_SWIFT_NAME(flush(_:));
	-(void)flush_3_: (BOOL)create NS_SWIFT_NAME(flush(create:));
	-(void)flush_4: (BOOL)create enqueue: (BOOL)enqueue NS_SWIFT_NAME(flush(_:_:));
	-(void)flush_4_: (BOOL)create enqueue: (BOOL)enqueue NS_SWIFT_NAME(flush(create:enqueue:));
	-(void)update;
@end

/// Tellusim::VKCompute
NS_SWIFT_NAME(VKCompute)
TS_CAPI @interface TSVKCompute : TSCompute
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::VKCompute* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::VKCompute&)p;
		-(Tellusim::VKCompute* _Nonnull)pointer;
		-(Tellusim::VKCompute&)ref;
	#endif
	-(id _Nonnull)initCompute: (TSCompute* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSCompute* _Nonnull)getCompute;
	-(BOOL)equalPtr: (const TSVKCompute* _Nonnull)p;
	-(TSVKCompute* _Nonnull)copyPtr;
	-(TSVKCompute* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSVKCompute* _Nonnull)null;
	-(VkCommandBuffer _Nullable)getCommand NS_SWIFT_NAME(command());
	-(VkDescriptorSet _Nullable)getSamplerDescriptor NS_SWIFT_NAME(samplerDescriptor());
	-(VkDescriptorSet _Nullable)getImageDescriptor NS_SWIFT_NAME(imageDescriptor());
	-(VkDescriptorSet _Nullable)getBufferDescriptor NS_SWIFT_NAME(bufferDescriptor());
	-(VkDescriptorSet _Nullable)getTracingDescriptor NS_SWIFT_NAME(tracingDescriptor());
	-(VkDescriptorSet _Nullable)getTexelDescriptor NS_SWIFT_NAME(texelDescriptor());
	-(void)update;
@end

/// Tellusim::FUCompute
NS_SWIFT_NAME(FUCompute)
TS_CAPI @interface TSFUCompute : TSCompute
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSCompute* _Nonnull * _Nullable)computes computes_size: (uint32_t)computes_size NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TSCompute* _Nonnull * _Nullable)computes computes_size: (uint32_t)computes_size NS_SWIFT_NAME(init(computes:computes_size:));
	-(id _Nonnull)init_3: (TSCompute* _Nonnull * _Nullable)computes computes_size: (uint32_t)computes_size owner: (BOOL)owner NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_3_: (TSCompute* _Nonnull * _Nullable)computes computes_size: (uint32_t)computes_size owner: (BOOL)owner NS_SWIFT_NAME(init(computes:computes_size:owner:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::FUCompute* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::FUCompute&)p;
		-(Tellusim::FUCompute* _Nonnull)pointer;
		-(Tellusim::FUCompute&)ref;
	#endif
	-(id _Nonnull)initCompute: (TSCompute* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSCompute* _Nonnull)getCompute;
	-(BOOL)equalPtr: (const TSFUCompute* _Nonnull)p;
	-(TSFUCompute* _Nonnull)copyPtr;
	-(TSFUCompute* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFUCompute* _Nonnull)null;
	-(void)setMask: (uint32_t)mask NS_SWIFT_NAME(setMask(_:));
	-(void)setMask_: (uint32_t)mask NS_SWIFT_NAME(setMask(mask:));
	-(uint32_t)getMask NS_SWIFT_NAME(mask());
	-(uint32_t)getNumComputes NS_SWIFT_NAME(numComputes());
	-(const TSCompute* _Nonnull)getCompute: (uint32_t)index NS_SWIFT_NAME(compute(_:));
	-(const TSCompute* _Nonnull)getCompute_: (uint32_t)index NS_SWIFT_NAME(compute(index:));
@end

/// Tellusim::Context
NS_SWIFT_NAME(Context)
TS_CAPI @interface TSContext : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	-(id _Nonnull)init_1: (TS_Platform)platform NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (TS_Platform)platform NS_SWIFT_NAME(init(platform:));
	-(id _Nonnull)init_2: (TS_Platform)platform index: (uint32_t)index NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TS_Platform)platform index: (uint32_t)index NS_SWIFT_NAME(init(platform:index:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Context* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Context&)p;
		-(Tellusim::Context* _Nonnull)pointer;
		-(Tellusim::Context&)ref;
	#endif
	-(BOOL)equalPtr: (const TSContext* _Nonnull)p;
	-(TSContext* _Nonnull)copyPtr;
	-(TSContext* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSContext* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(BOOL)isCreated;
	-(BOOL)create;
	-(BOOL)flush;
	-(BOOL)finish;
@end

/// Tellusim::D3D12Context
NS_SWIFT_NAME(D3D12Context)
TS_CAPI @interface TSD3D12Context : TSContext
	-(id _Nonnull)init_3 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D12Context* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D12Context&)p;
		-(Tellusim::D3D12Context* _Nonnull)pointer;
		-(Tellusim::D3D12Context&)ref;
	#endif
	-(id _Nonnull)initContext: (TSContext* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSContext* _Nonnull)getContext;
	-(BOOL)equalPtr: (const TSD3D12Context* _Nonnull)p;
	-(TSD3D12Context* _Nonnull)copyPtr;
	-(TSD3D12Context* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D12Context* _Nonnull)null;
	-(BOOL)create_1: (ID3D12Device* _Nonnull)device queue: (ID3D12CommandQueue* _Nonnull)queue NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_1_: (ID3D12Device* _Nonnull)device queue: (ID3D12CommandQueue* _Nonnull)queue NS_SWIFT_NAME(create(device:queue:));
	-(IDXGIFactory4* _Nonnull)getFactory NS_SWIFT_NAME(factory());
	-(ID3D12Device* _Nonnull)getDevice NS_SWIFT_NAME(device());
	-(ID3D12CommandQueue* _Nonnull)getQueue NS_SWIFT_NAME(queue());
	-(ID3D12GraphicsCommandList* _Nonnull)getCommand NS_SWIFT_NAME(command());
	+(void* _Nonnull)getProcAddress: (const char* _Nonnull)name NS_SWIFT_NAME(procAddress(_:));
	+(void* _Nonnull)getProcAddress_: (const char* _Nonnull)name NS_SWIFT_NAME(procAddress(name:));
	+(BOOL)error: (uint32_t)result NS_SWIFT_NAME(error(_:));
	+(BOOL)error_: (uint32_t)result NS_SWIFT_NAME(error(result:));
@end

/// Tellusim::D3D11Context
NS_SWIFT_NAME(D3D11Context)
TS_CAPI @interface TSD3D11Context : TSContext
	-(id _Nonnull)init_3 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D11Context* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D11Context&)p;
		-(Tellusim::D3D11Context* _Nonnull)pointer;
		-(Tellusim::D3D11Context&)ref;
	#endif
	-(id _Nonnull)initContext: (TSContext* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSContext* _Nonnull)getContext;
	-(BOOL)equalPtr: (const TSD3D11Context* _Nonnull)p;
	-(TSD3D11Context* _Nonnull)copyPtr;
	-(TSD3D11Context* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D11Context* _Nonnull)null;
	-(BOOL)create_1: (ID3D11Device* _Nonnull)device NS_SWIFT_NAME(create(_:));
	-(BOOL)create_1_: (ID3D11Device* _Nonnull)device NS_SWIFT_NAME(create(device:));
	-(IDXGIFactory* _Nonnull)getFactory NS_SWIFT_NAME(factory());
	-(ID3D11Device* _Nonnull)getDevice NS_SWIFT_NAME(device());
	-(ID3D11DeviceContext* _Nonnull)getD3D11Context NS_SWIFT_NAME(d3D11Context());
	+(void* _Nonnull)getProcAddress: (const char* _Nonnull)name NS_SWIFT_NAME(procAddress(_:));
	+(void* _Nonnull)getProcAddress_: (const char* _Nonnull)name NS_SWIFT_NAME(procAddress(name:));
	+(BOOL)error: (uint32_t)result NS_SWIFT_NAME(error(_:));
	+(BOOL)error_: (uint32_t)result NS_SWIFT_NAME(error(result:));
@end

/// Tellusim::MTLContext
NS_SWIFT_NAME(MTLContext)
TS_CAPI @interface TSMTLContext : TSContext
	-(id _Nonnull)init_3 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MTLContext* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MTLContext&)p;
		-(Tellusim::MTLContext* _Nonnull)pointer;
		-(Tellusim::MTLContext&)ref;
	#endif
	-(id _Nonnull)initContext: (TSContext* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSContext* _Nonnull)getContext;
	-(BOOL)equalPtr: (const TSMTLContext* _Nonnull)p;
	-(TSMTLContext* _Nonnull)copyPtr;
	-(TSMTLContext* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMTLContext* _Nonnull)null;
	-(BOOL)create_1: (void* _Nonnull)device queue: (void* _Nonnull)queue NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_1_: (void* _Nonnull)device queue: (void* _Nonnull)queue NS_SWIFT_NAME(create(device:queue:));
	-(void* _Nonnull)getDevice NS_SWIFT_NAME(device());
	-(void* _Nonnull)getQueue NS_SWIFT_NAME(queue());
	-(void* _Nonnull)getCommand NS_SWIFT_NAME(command());
	-(void* _Nonnull)getEncoder NS_SWIFT_NAME(encoder());
	-(void* _Nonnull)getRenderEncoder: (void* _Nonnull)descriptor NS_SWIFT_NAME(renderEncoder(_:));
	-(void* _Nonnull)getRenderEncoder_: (void* _Nonnull)descriptor NS_SWIFT_NAME(renderEncoder(descriptor:));
	-(void* _Nonnull)getComputeEncoder NS_SWIFT_NAME(computeEncoder());
	-(void* _Nonnull)getTracingEncoder NS_SWIFT_NAME(tracingEncoder());
	-(void* _Nonnull)getBlitEncoder NS_SWIFT_NAME(blitEncoder());
	-(void)endEncoder;
@end

/// Tellusim::VKContext
NS_SWIFT_NAME(VKContext)
TS_CAPI @interface TSVKContext : TSContext
	-(id _Nonnull)init_3 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::VKContext* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::VKContext&)p;
		-(Tellusim::VKContext* _Nonnull)pointer;
		-(Tellusim::VKContext&)ref;
	#endif
	-(id _Nonnull)initContext: (TSContext* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSContext* _Nonnull)getContext;
	-(BOOL)equalPtr: (const TSVKContext* _Nonnull)p;
	-(TSVKContext* _Nonnull)copyPtr;
	-(TSVKContext* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSVKContext* _Nonnull)null;
	-(BOOL)create_1: (VkInstance _Nullable)instance func: (PFN_vkGetInstanceProcAddr _Nullable)func adapter: (VkPhysicalDevice _Nullable)adapter device: (VkDevice _Nullable)device family: (uint32_t)family index: (uint32_t)index NS_SWIFT_NAME(create(_:_:_:_:_:_:));
	-(BOOL)create_1_: (VkInstance _Nullable)instance func: (PFN_vkGetInstanceProcAddr _Nullable)func adapter: (VkPhysicalDevice _Nullable)adapter device: (VkDevice _Nullable)device family: (uint32_t)family index: (uint32_t)index NS_SWIFT_NAME(create(instance:func:adapter:device:family:index:));
	-(VkInstance _Nullable)getInstance NS_SWIFT_NAME(instance());
	-(VkPhysicalDevice _Nullable)getAdapter NS_SWIFT_NAME(adapter());
	-(VkDevice _Nullable)getDevice NS_SWIFT_NAME(device());
	-(VkQueue _Nullable)getQueue NS_SWIFT_NAME(queue());
	-(VkCommandBuffer _Nullable)getCommand NS_SWIFT_NAME(command());
	-(uint32_t)getFamily NS_SWIFT_NAME(family());
	-(uint32_t)getNumQueues NS_SWIFT_NAME(numQueues());
	-(uint32_t)getQueueFlags: (uint32_t)index NS_SWIFT_NAME(queueFlags(_:));
	-(uint32_t)getQueueFlags_: (uint32_t)index NS_SWIFT_NAME(queueFlags(index:));
	-(uint32_t)getQueueFamily: (uint32_t)index NS_SWIFT_NAME(queueFamily(_:));
	-(uint32_t)getQueueFamily_: (uint32_t)index NS_SWIFT_NAME(queueFamily(index:));
	+(void)addContextExtension: (const char* _Nonnull)name NS_SWIFT_NAME(addContextExtension(_:));
	+(void)addContextExtension_: (const char* _Nonnull)name NS_SWIFT_NAME(addContextExtension(name:));
	+(void)addAdapterExtension: (const char* _Nonnull)name NS_SWIFT_NAME(addAdapterExtension(_:));
	+(void)addAdapterExtension_: (const char* _Nonnull)name NS_SWIFT_NAME(addAdapterExtension(name:));
	+(void)addAdapterFeatures: (void* _Nonnull)features NS_SWIFT_NAME(addAdapterFeatures(_:));
	+(void)addAdapterFeatures_: (void* _Nonnull)features NS_SWIFT_NAME(addAdapterFeatures(features:));
	+(PFN_vkGetInstanceProcAddr _Nullable)getInstanceProcAddress NS_SWIFT_NAME(instanceProcAddress());
	+(PFN_vkGetDeviceProcAddr _Nullable)getDeviceProcAddress NS_SWIFT_NAME(deviceProcAddress());
	+(void* _Nonnull)getProcAddress: (const char* _Nonnull)name NS_SWIFT_NAME(procAddress(_:));
	+(void* _Nonnull)getProcAddress_: (const char* _Nonnull)name NS_SWIFT_NAME(procAddress(name:));
	+(BOOL)error: (uint32_t)result NS_SWIFT_NAME(error(_:));
	+(BOOL)error_: (uint32_t)result NS_SWIFT_NAME(error(result:));
@end

/// Tellusim::GLContext
NS_SWIFT_NAME(GLContext)
TS_CAPI @interface TSGLContext : TSContext
	-(id _Nonnull)init_3 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::GLContext* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::GLContext&)p;
		-(Tellusim::GLContext* _Nonnull)pointer;
		-(Tellusim::GLContext&)ref;
	#endif
	-(id _Nonnull)initContext: (TSContext* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSContext* _Nonnull)getContext;
	-(BOOL)equalPtr: (const TSGLContext* _Nonnull)p;
	-(TSGLContext* _Nonnull)copyPtr;
	-(TSGLContext* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSGLContext* _Nonnull)null;
	-(BOOL)create_1: (void* _Nonnull)context NS_SWIFT_NAME(create(_:));
	-(BOOL)create_1_: (void* _Nonnull)context NS_SWIFT_NAME(create(context:));
	-(void* _Nonnull)getGLDisplay NS_SWIFT_NAME(GLDisplay());
	-(void* _Nonnull)getGLVisual NS_SWIFT_NAME(GLVisual());
	-(void* _Nonnull)getGLConfig NS_SWIFT_NAME(GLConfig());
	-(void* _Nonnull)getGLSurface NS_SWIFT_NAME(GLSurface());
	-(void* _Nonnull)getGLContext NS_SWIFT_NAME(GLContext());
	+(void* _Nonnull)getProcAddress: (const char* _Nonnull)name NS_SWIFT_NAME(procAddress(_:));
	+(void* _Nonnull)getProcAddress_: (const char* _Nonnull)name NS_SWIFT_NAME(procAddress(name:));
	+(BOOL)error: (uint32_t)result NS_SWIFT_NAME(error(_:));
	+(BOOL)error_: (uint32_t)result NS_SWIFT_NAME(error(result:));
	+(BOOL)check;
@end

/// Tellusim::GLESContext
NS_SWIFT_NAME(GLESContext)
TS_CAPI @interface TSGLESContext : TSContext
	-(id _Nonnull)init_3 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::GLESContext* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::GLESContext&)p;
		-(Tellusim::GLESContext* _Nonnull)pointer;
		-(Tellusim::GLESContext&)ref;
	#endif
	-(id _Nonnull)initContext: (TSContext* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSContext* _Nonnull)getContext;
	-(BOOL)equalPtr: (const TSGLESContext* _Nonnull)p;
	-(TSGLESContext* _Nonnull)copyPtr;
	-(TSGLESContext* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSGLESContext* _Nonnull)null;
	-(BOOL)create_1: (void* _Nonnull)context NS_SWIFT_NAME(create(_:));
	-(BOOL)create_1_: (void* _Nonnull)context NS_SWIFT_NAME(create(context:));
	-(void* _Nonnull)getGLESDisplay NS_SWIFT_NAME(GLESDisplay());
	-(void* _Nonnull)getGLESConfig NS_SWIFT_NAME(GLESConfig());
	-(void* _Nonnull)getGLESContext NS_SWIFT_NAME(GLESContext());
	+(void* _Nonnull)getProcAddress: (const char* _Nonnull)name NS_SWIFT_NAME(procAddress(_:));
	+(void* _Nonnull)getProcAddress_: (const char* _Nonnull)name NS_SWIFT_NAME(procAddress(name:));
	+(BOOL)error: (uint32_t)result NS_SWIFT_NAME(error(_:));
	+(BOOL)error_: (uint32_t)result NS_SWIFT_NAME(error(result:));
	+(BOOL)check;
@end

/// Tellusim::WGContext
NS_SWIFT_NAME(WGContext)
TS_CAPI @interface TSWGContext : TSContext
	-(id _Nonnull)init_3 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::WGContext* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::WGContext&)p;
		-(Tellusim::WGContext* _Nonnull)pointer;
		-(Tellusim::WGContext&)ref;
	#endif
	-(id _Nonnull)initContext: (TSContext* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSContext* _Nonnull)getContext;
	-(BOOL)equalPtr: (const TSWGContext* _Nonnull)p;
	-(TSWGContext* _Nonnull)copyPtr;
	-(TSWGContext* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSWGContext* _Nonnull)null;
	+(BOOL)open: (WGPUInstance _Nullable)instance adapter: (WGPUAdapter _Nullable)adapter device: (WGPUDevice _Nullable)device NS_SWIFT_NAME(open(_:_:_:));
	+(BOOL)open_: (WGPUInstance _Nullable)instance adapter: (WGPUAdapter _Nullable)adapter device: (WGPUDevice _Nullable)device NS_SWIFT_NAME(open(instance:adapter:device:));
	-(BOOL)create_1: (WGPUInstance _Nullable)instance adapter: (WGPUAdapter _Nullable)adapter device: (WGPUDevice _Nullable)device NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_1_: (WGPUInstance _Nullable)instance adapter: (WGPUAdapter _Nullable)adapter device: (WGPUDevice _Nullable)device NS_SWIFT_NAME(create(instance:adapter:device:));
	-(WGPUInstance _Nullable)getInstance NS_SWIFT_NAME(instance());
	-(WGPUAdapter _Nullable)getAdapter NS_SWIFT_NAME(adapter());
	-(WGPUDevice _Nullable)getDevice NS_SWIFT_NAME(device());
@end

/// Tellusim::CUContext
NS_SWIFT_NAME(CUContext)
TS_CAPI @interface TSCUContext : TSContext
	-(id _Nonnull)init_3 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::CUContext* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::CUContext&)p;
		-(Tellusim::CUContext* _Nonnull)pointer;
		-(Tellusim::CUContext&)ref;
	#endif
	-(id _Nonnull)initContext: (TSContext* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSContext* _Nonnull)getContext;
	-(BOOL)equalPtr: (const TSCUContext* _Nonnull)p;
	-(TSCUContext* _Nonnull)copyPtr;
	-(TSCUContext* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSCUContext* _Nonnull)null;
	-(int32_t)getDevice NS_SWIFT_NAME(device());
	-(CUcontext _Nullable)getCUContext NS_SWIFT_NAME(CUContext());
	-(CUstream _Nullable)getStream NS_SWIFT_NAME(stream());
	+(void* _Nonnull)getProcAddress: (const char* _Nonnull)name NS_SWIFT_NAME(procAddress(_:));
	+(void* _Nonnull)getProcAddress_: (const char* _Nonnull)name NS_SWIFT_NAME(procAddress(name:));
	+(BOOL)error: (uint32_t)result NS_SWIFT_NAME(error(_:));
	+(BOOL)error_: (uint32_t)result NS_SWIFT_NAME(error(result:));
@end

/// Tellusim::HIPContext
NS_SWIFT_NAME(HIPContext)
TS_CAPI @interface TSHIPContext : TSContext
	-(id _Nonnull)init_3 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::HIPContext* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::HIPContext&)p;
		-(Tellusim::HIPContext* _Nonnull)pointer;
		-(Tellusim::HIPContext&)ref;
	#endif
	-(id _Nonnull)initContext: (TSContext* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSContext* _Nonnull)getContext;
	-(BOOL)equalPtr: (const TSHIPContext* _Nonnull)p;
	-(TSHIPContext* _Nonnull)copyPtr;
	-(TSHIPContext* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSHIPContext* _Nonnull)null;
	-(int32_t)getDevice NS_SWIFT_NAME(device());
	-(void* _Nonnull)getHIPContext NS_SWIFT_NAME(HIPContext());
	-(void* _Nonnull)getStream NS_SWIFT_NAME(stream());
	+(void* _Nonnull)getProcAddress: (const char* _Nonnull)name NS_SWIFT_NAME(procAddress(_:));
	+(void* _Nonnull)getProcAddress_: (const char* _Nonnull)name NS_SWIFT_NAME(procAddress(name:));
	+(BOOL)error: (uint32_t)result NS_SWIFT_NAME(error(_:));
	+(BOOL)error_: (uint32_t)result NS_SWIFT_NAME(error(result:));
@end

/// Tellusim::Query
NS_SWIFT_NAME(Query)
TS_CAPI @interface TSQuery : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Query* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Query&)p;
		-(Tellusim::Query* _Nonnull)pointer;
		-(Tellusim::Query&)ref;
	#endif
	-(BOOL)equalPtr: (const TSQuery* _Nonnull)p;
	-(TSQuery* _Nonnull)copyPtr;
	-(TSQuery* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSQuery* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)clear;
	-(BOOL)isCreated;
	-(BOOL)isAvailable;
	-(BOOL)isBegan;
	-(BOOL)isEnded;
	-(BOOL)create: (TS_QueryType)type NS_SWIFT_NAME(create(_:));
	-(BOOL)create_: (TS_QueryType)type NS_SWIFT_NAME(create(type:));
	-(TS_QueryType)getType NS_SWIFT_NAME(type());
	+(NSString* _Nonnull)getTypeName: (TS_QueryType)type NS_SWIFT_NAME(typeName(_:));
	+(NSString* _Nonnull)getTypeName_: (TS_QueryType)type NS_SWIFT_NAME(typeName(type:));
	-(NSString* _Nonnull)getTypeName_1 NS_SWIFT_NAME(typeName());
	-(size_t)getTypeSize NS_SWIFT_NAME(typeSize());
	-(BOOL)isTime;
	-(BOOL)isClock;
	-(BOOL)isSamples;
	-(BOOL)isSamples1;
	-(BOOL)isStatistics;
	-(BOOL)isTimeType;
	-(BOOL)isSamplesType;
	-(BOOL)get: (void* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(get(_:_:));
	-(BOOL)get_: (void* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(get(dest:size:));
	-(BOOL)get_1: (void* _Nonnull)dest size: (size_t)size wait: (BOOL)wait NS_SWIFT_NAME(get(_:_:_:));
	-(BOOL)get_1_: (void* _Nonnull)dest size: (size_t)size wait: (BOOL)wait NS_SWIFT_NAME(get(dest:size:wait:));
	-(uint64_t)getTime NS_SWIFT_NAME(time());
	-(uint64_t)getTime_1: (BOOL)wait NS_SWIFT_NAME(time(_:));
	-(uint64_t)getTime_1_: (BOOL)wait NS_SWIFT_NAME(time(wait:));
	-(uint64_t)getTime_2: (BOOL)wait status: (BOOL* _Nullable)status NS_SWIFT_NAME(time(_:_:));
	-(uint64_t)getTime_2_: (BOOL)wait status: (BOOL* _Nullable)status NS_SWIFT_NAME(time(wait:status:));
	-(uint32_t)getSamples NS_SWIFT_NAME(samples());
	-(uint32_t)getSamples_1: (BOOL)wait NS_SWIFT_NAME(samples(_:));
	-(uint32_t)getSamples_1_: (BOOL)wait NS_SWIFT_NAME(samples(wait:));
	-(uint32_t)getSamples_2: (BOOL)wait status: (BOOL* _Nullable)status NS_SWIFT_NAME(samples(_:_:));
	-(uint32_t)getSamples_2_: (BOOL)wait status: (BOOL* _Nullable)status NS_SWIFT_NAME(samples(wait:status:));
	-(TSQueryStatistics)getStatistics NS_SWIFT_NAME(statistics());
	-(TSQueryStatistics)getStatistics_1: (BOOL)wait NS_SWIFT_NAME(statistics(_:));
	-(TSQueryStatistics)getStatistics_1_: (BOOL)wait NS_SWIFT_NAME(statistics(wait:));
	-(TSQueryStatistics)getStatistics_2: (BOOL)wait status: (BOOL* _Nullable)status NS_SWIFT_NAME(statistics(_:_:));
	-(TSQueryStatistics)getStatistics_2_: (BOOL)wait status: (BOOL* _Nullable)status NS_SWIFT_NAME(statistics(wait:status:));
@end

/// Tellusim::FUQuery
NS_SWIFT_NAME(FUQuery)
TS_CAPI @interface TSFUQuery : TSQuery
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSQuery* _Nonnull * _Nullable)queries queries_size: (uint32_t)queries_size NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TSQuery* _Nonnull * _Nullable)queries queries_size: (uint32_t)queries_size NS_SWIFT_NAME(init(queries:queries_size:));
	-(id _Nonnull)init_3: (TSQuery* _Nonnull * _Nullable)queries queries_size: (uint32_t)queries_size owner: (BOOL)owner NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_3_: (TSQuery* _Nonnull * _Nullable)queries queries_size: (uint32_t)queries_size owner: (BOOL)owner NS_SWIFT_NAME(init(queries:queries_size:owner:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::FUQuery* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::FUQuery&)p;
		-(Tellusim::FUQuery* _Nonnull)pointer;
		-(Tellusim::FUQuery&)ref;
	#endif
	-(id _Nonnull)initQuery: (TSQuery* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSQuery* _Nonnull)getQuery;
	-(BOOL)equalPtr: (const TSFUQuery* _Nonnull)p;
	-(TSFUQuery* _Nonnull)copyPtr;
	-(TSFUQuery* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFUQuery* _Nonnull)null;
	-(void)setMask: (uint32_t)mask NS_SWIFT_NAME(setMask(_:));
	-(void)setMask_: (uint32_t)mask NS_SWIFT_NAME(setMask(mask:));
	-(uint32_t)getMask NS_SWIFT_NAME(mask());
	-(uint32_t)getNumQueries NS_SWIFT_NAME(numQueries());
	-(const TSQuery* _Nonnull)getQuery: (uint32_t)index NS_SWIFT_NAME(query(_:));
	-(const TSQuery* _Nonnull)getQuery_: (uint32_t)index NS_SWIFT_NAME(query(index:));
@end

/// Tellusim::Fence
NS_SWIFT_NAME(Fence)
TS_CAPI @interface TSFence : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Fence* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Fence&)p;
		-(Tellusim::Fence* _Nonnull)pointer;
		-(Tellusim::Fence&)ref;
	#endif
	-(BOOL)equalPtr: (const TSFence* _Nonnull)p;
	-(TSFence* _Nonnull)copyPtr;
	-(TSFence* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFence* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)clear;
	-(BOOL)isCreated;
	-(BOOL)create NS_SWIFT_NAME(create());
	-(BOOL)create_1: (TS_FenceFlags)flags NS_SWIFT_NAME(create(_:));
	-(BOOL)create_1_: (TS_FenceFlags)flags NS_SWIFT_NAME(create(flags:));
	-(TS_FenceFlags)getFlags NS_SWIFT_NAME(flags());
	-(BOOL)hasFlag: (TS_FenceFlags)flags NS_SWIFT_NAME(hasFlag(_:));
	-(BOOL)hasFlag_: (TS_FenceFlags)flags NS_SWIFT_NAME(hasFlag(flags:));
	-(BOOL)hasFlags: (TS_FenceFlags)flags NS_SWIFT_NAME(hasFlags(_:));
	-(BOOL)hasFlags_: (TS_FenceFlags)flags NS_SWIFT_NAME(hasFlags(flags:));
	-(NSString* _Nonnull)getFlagsName NS_SWIFT_NAME(flagsName());
	-(NSString* _Nonnull)getDescription NS_SWIFT_NAME(description());
@end

/// Tellusim::VKFence
NS_SWIFT_NAME(VKFence)
TS_CAPI @interface TSVKFence : TSFence
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::VKFence* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::VKFence&)p;
		-(Tellusim::VKFence* _Nonnull)pointer;
		-(Tellusim::VKFence&)ref;
	#endif
	-(id _Nonnull)initFence: (TSFence* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSFence* _Nonnull)getFence;
	-(BOOL)equalPtr: (const TSVKFence* _Nonnull)p;
	-(TSVKFence* _Nonnull)copyPtr;
	-(TSVKFence* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSVKFence* _Nonnull)null;
	-(VkFence _Nullable)getVKFence NS_SWIFT_NAME(VKFence());
	-(VkSemaphore _Nullable)getSemaphore NS_SWIFT_NAME(semaphore());
	-(void* _Nonnull)getSharedHandle NS_SWIFT_NAME(sharedHandle());
@end

/// Tellusim::FUFence
NS_SWIFT_NAME(FUFence)
TS_CAPI @interface TSFUFence : TSFence
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSFence* _Nonnull * _Nullable)fences fences_size: (uint32_t)fences_size NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TSFence* _Nonnull * _Nullable)fences fences_size: (uint32_t)fences_size NS_SWIFT_NAME(init(fences:fences_size:));
	-(id _Nonnull)init_3: (TSFence* _Nonnull * _Nullable)fences fences_size: (uint32_t)fences_size owner: (BOOL)owner NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_3_: (TSFence* _Nonnull * _Nullable)fences fences_size: (uint32_t)fences_size owner: (BOOL)owner NS_SWIFT_NAME(init(fences:fences_size:owner:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::FUFence* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::FUFence&)p;
		-(Tellusim::FUFence* _Nonnull)pointer;
		-(Tellusim::FUFence&)ref;
	#endif
	-(id _Nonnull)initFence: (TSFence* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSFence* _Nonnull)getFence;
	-(BOOL)equalPtr: (const TSFUFence* _Nonnull)p;
	-(TSFUFence* _Nonnull)copyPtr;
	-(TSFUFence* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFUFence* _Nonnull)null;
	-(void)setMask: (uint32_t)mask NS_SWIFT_NAME(setMask(_:));
	-(void)setMask_: (uint32_t)mask NS_SWIFT_NAME(setMask(mask:));
	-(uint32_t)getMask NS_SWIFT_NAME(mask());
	-(uint32_t)getNumFences NS_SWIFT_NAME(numFences());
	-(const TSFence* _Nonnull)getFence: (uint32_t)index NS_SWIFT_NAME(fence(_:));
	-(const TSFence* _Nonnull)getFence_: (uint32_t)index NS_SWIFT_NAME(fence(index:));
@end

/// Tellusim::Shader
NS_SWIFT_NAME(Shader)
TS_CAPI @interface TSShader : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Shader* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Shader&)p;
		-(Tellusim::Shader* _Nonnull)pointer;
		-(Tellusim::Shader&)ref;
	#endif
	-(BOOL)equalPtr: (const TSShader* _Nonnull)p;
	-(TSShader* _Nonnull)copyPtr;
	-(TSShader* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSShader* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)clear;
	-(BOOL)isCreated;
	-(BOOL)saveState: (TSStream* _Nonnull)stream NS_SWIFT_NAME(saveState(_:));
	-(BOOL)saveState_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(saveState(stream:));
	-(TS_ShaderType)getType NS_SWIFT_NAME(type());
	+(NSString* _Nonnull)getTypeName: (TS_ShaderType)type NS_SWIFT_NAME(typeName(_:));
	+(NSString* _Nonnull)getTypeName_: (TS_ShaderType)type NS_SWIFT_NAME(typeName(type:));
	-(NSString* _Nonnull)getTypeName_1 NS_SWIFT_NAME(typeName());
	-(BOOL)isVertex;
	-(BOOL)isControl;
	-(BOOL)isEvaluate;
	-(BOOL)isGeometry;
	-(BOOL)isFragment;
	-(BOOL)isCompute;
	-(BOOL)isTask;
	-(BOOL)isMesh;
	-(BOOL)isRayGen;
	-(BOOL)isRayMiss;
	-(BOOL)isClosest;
	-(BOOL)isFirstHit;
	-(BOOL)isIntersection;
	-(BOOL)isCallable;
	-(BOOL)isGraphicsType;
	-(BOOL)isTessellationType;
	-(BOOL)isTracingType;
	-(BOOL)isMeshType;
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(NSString* _Nonnull)getMacros NS_SWIFT_NAME(macros());
	-(void)setSamplerOffset: (int32_t)offset NS_SWIFT_NAME(setSamplerOffset(_:));
	-(void)setSamplerOffset_: (int32_t)offset NS_SWIFT_NAME(setSamplerOffset(offset:));
	-(int32_t)getSamplerOffset NS_SWIFT_NAME(samplerOffset());
	-(void)setTextureOffset: (int32_t)offset NS_SWIFT_NAME(setTextureOffset(_:));
	-(void)setTextureOffset_: (int32_t)offset NS_SWIFT_NAME(setTextureOffset(offset:));
	-(int32_t)getTextureOffset NS_SWIFT_NAME(textureOffset());
	-(void)setSurfaceOffset: (int32_t)offset NS_SWIFT_NAME(setSurfaceOffset(_:));
	-(void)setSurfaceOffset_: (int32_t)offset NS_SWIFT_NAME(setSurfaceOffset(offset:));
	-(int32_t)getSurfaceOffset NS_SWIFT_NAME(surfaceOffset());
	-(void)setUniformOffset: (int32_t)offset NS_SWIFT_NAME(setUniformOffset(_:));
	-(void)setUniformOffset_: (int32_t)offset NS_SWIFT_NAME(setUniformOffset(offset:));
	-(int32_t)getUniformOffset NS_SWIFT_NAME(uniformOffset());
	-(void)setStorageOffset: (int32_t)offset NS_SWIFT_NAME(setStorageOffset(_:));
	-(void)setStorageOffset_: (int32_t)offset NS_SWIFT_NAME(setStorageOffset(offset:));
	-(int32_t)getStorageOffset NS_SWIFT_NAME(storageOffset());
	-(void)setTracingOffset: (int32_t)offset NS_SWIFT_NAME(setTracingOffset(_:));
	-(void)setTracingOffset_: (int32_t)offset NS_SWIFT_NAME(setTracingOffset(offset:));
	-(int32_t)getTracingOffset NS_SWIFT_NAME(tracingOffset());
	-(void)setTexelOffset: (int32_t)offset NS_SWIFT_NAME(setTexelOffset(_:));
	-(void)setTexelOffset_: (int32_t)offset NS_SWIFT_NAME(setTexelOffset(offset:));
	-(int32_t)getTexelOffset NS_SWIFT_NAME(texelOffset());
	-(void)setTableOffset: (int32_t)offset NS_SWIFT_NAME(setTableOffset(_:));
	-(void)setTableOffset_: (int32_t)offset NS_SWIFT_NAME(setTableOffset(offset:));
	-(int32_t)getTableOffset NS_SWIFT_NAME(tableOffset());
	-(void)setPatchSize: (uint32_t)size NS_SWIFT_NAME(setPatchSize(_:));
	-(void)setPatchSize_: (uint32_t)size NS_SWIFT_NAME(setPatchSize(size:));
	-(uint32_t)getPatchSize NS_SWIFT_NAME(patchSize());
	-(void)setInputSize: (uint32_t)size NS_SWIFT_NAME(setInputSize(_:));
	-(void)setInputSize_: (uint32_t)size NS_SWIFT_NAME(setInputSize(size:));
	-(uint32_t)getInputSize NS_SWIFT_NAME(inputSize());
	-(void)setOutputSize: (uint32_t)size NS_SWIFT_NAME(setOutputSize(_:));
	-(void)setOutputSize_: (uint32_t)size NS_SWIFT_NAME(setOutputSize(size:));
	-(uint32_t)getOutputSize NS_SWIFT_NAME(outputSize());
	-(BOOL)load: (TS_ShaderType)type name: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(load(_:_:_:));
	-(BOOL)load_: (TS_ShaderType)type name: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(load(type:name:format:));
	-(BOOL)create: (TS_ShaderType)type src: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_: (TS_ShaderType)type src: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(create(type:src:format:));
	-(BOOL)load_1: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(load(_:_:));
	-(BOOL)load_1_: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(load(type:name:));
	-(BOOL)load_2: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(load(_:_:_:));
	-(BOOL)load_2_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(load(type:name:macros:));
	-(BOOL)load_3: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(load(_:_:_:_:));
	-(BOOL)load_3_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(load(type:name:macros:includes:));
	-(BOOL)load_4: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(load(_:_:_:_:_:));
	-(BOOL)load_4_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(load(type:name:macros:includes:size:));
	-(BOOL)create_1: (TS_ShaderType)type src: (const char* _Nonnull)src NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_1_: (TS_ShaderType)type src: (const char* _Nonnull)src NS_SWIFT_NAME(create(type:src:));
	-(BOOL)create_2: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_2_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(create(type:src:macros:));
	-(BOOL)create_3: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_3_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(create(type:src:macros:includes:));
	-(BOOL)create_4: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_4_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(create(type:src:macros:includes:size:));
	-(BOOL)loadGLSL: (TS_ShaderType)type name: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadGLSL(_:_:_:));
	-(BOOL)loadGLSL_: (TS_ShaderType)type name: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadGLSL(type:name:format:));
	-(BOOL)createGLSL: (TS_ShaderType)type src: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createGLSL(_:_:_:));
	-(BOOL)createGLSL_: (TS_ShaderType)type src: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createGLSL(type:src:format:));
	-(BOOL)loadGLSL_1: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadGLSL(_:_:));
	-(BOOL)loadGLSL_1_: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadGLSL(type:name:));
	-(BOOL)loadGLSL_2: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadGLSL(_:_:_:));
	-(BOOL)loadGLSL_2_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadGLSL(type:name:macros:));
	-(BOOL)loadGLSL_3: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(loadGLSL(_:_:_:_:));
	-(BOOL)loadGLSL_3_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(loadGLSL(type:name:macros:includes:));
	-(BOOL)loadGLSL_4: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(loadGLSL(_:_:_:_:_:));
	-(BOOL)loadGLSL_4_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(loadGLSL(type:name:macros:includes:size:));
	-(BOOL)createGLSL_1: (TS_ShaderType)type src: (const char* _Nonnull)src NS_SWIFT_NAME(createGLSL(_:_:));
	-(BOOL)createGLSL_1_: (TS_ShaderType)type src: (const char* _Nonnull)src NS_SWIFT_NAME(createGLSL(type:src:));
	-(BOOL)createGLSL_2: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createGLSL(_:_:_:));
	-(BOOL)createGLSL_2_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createGLSL(type:src:macros:));
	-(BOOL)createGLSL_3: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(createGLSL(_:_:_:_:));
	-(BOOL)createGLSL_3_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(createGLSL(type:src:macros:includes:));
	-(BOOL)createGLSL_4: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(createGLSL(_:_:_:_:_:));
	-(BOOL)createGLSL_4_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(createGLSL(type:src:macros:includes:size:));
	-(BOOL)loadSPIRV: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadSPIRV(_:_:));
	-(BOOL)loadSPIRV_: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadSPIRV(type:name:));
	-(BOOL)createSPIRV: (TS_ShaderType)type data: (uint32_t* _Nonnull)data data_size: (uint32_t)data_size NS_SWIFT_NAME(createSPIRV(_:_:_:));
	-(BOOL)createSPIRV_: (TS_ShaderType)type data: (uint32_t* _Nonnull)data data_size: (uint32_t)data_size NS_SWIFT_NAME(createSPIRV(type:data:data_size:));
	+(BOOL)hasCache;
	+(BOOL)setCache: (const char* _Nonnull)name NS_SWIFT_NAME(setCache(_:));
	+(BOOL)setCache_: (const char* _Nonnull)name NS_SWIFT_NAME(setCache(name:));
	+(BOOL)loadCache: (const TSString* _Nonnull)hash stream: (TSStream* _Nonnull)stream NS_SWIFT_NAME(loadCache(_:_:));
	+(BOOL)loadCache_: (const TSString* _Nonnull)hash stream: (TSStream* _Nonnull)stream NS_SWIFT_NAME(loadCache(hash:stream:));
	+(BOOL)saveCache: (const TSString* _Nonnull)hash stream: (TSStream* _Nonnull)stream NS_SWIFT_NAME(saveCache(_:_:));
	+(BOOL)saveCache_: (const TSString* _Nonnull)hash stream: (TSStream* _Nonnull)stream NS_SWIFT_NAME(saveCache(hash:stream:));
	+(void)clearCache;
	+(BOOL)isMacro: (const char* _Nonnull)name NS_SWIFT_NAME(isMacro(_:));
	+(BOOL)isMacro_: (const char* _Nonnull)name NS_SWIFT_NAME(isMacro(name:));
	+(BOOL)setMacro: (const char* _Nonnull)name value: (int32_t)value NS_SWIFT_NAME(setMacro(_:_:));
	+(BOOL)setMacro_: (const char* _Nonnull)name value: (int32_t)value NS_SWIFT_NAME(setMacro(name:value:));
	+(BOOL)setMacro_1: (const char* _Nonnull)name value: (uint32_t)value NS_SWIFT_NAME(setMacro(_:_:));
	+(BOOL)setMacro_1_: (const char* _Nonnull)name value: (uint32_t)value NS_SWIFT_NAME(setMacro(name:value:));
	+(BOOL)setMacro_2: (const char* _Nonnull)name NS_SWIFT_NAME(setMacro(_:));
	+(BOOL)setMacro_2_: (const char* _Nonnull)name NS_SWIFT_NAME(setMacro(name:));
	+(BOOL)setMacro_3: (const char* _Nonnull)name value: (const char* _Nullable)value NS_SWIFT_NAME(setMacro(_:_:));
	+(BOOL)setMacro_3_: (const char* _Nonnull)name value: (const char* _Nullable)value NS_SWIFT_NAME(setMacro(name:value:));
	+(BOOL)setMacros: (const char* _Nonnull)macros NS_SWIFT_NAME(setMacros(_:));
	+(BOOL)setMacros_: (const char* _Nonnull)macros NS_SWIFT_NAME(setMacros(macros:));
	+(BOOL)removeMacro: (const char* _Nonnull)name NS_SWIFT_NAME(removeMacro(_:));
	+(BOOL)removeMacro_: (const char* _Nonnull)name NS_SWIFT_NAME(removeMacro(name:));
	+(void)clearMacros;
	+(BOOL)isInclude: (const char* _Nonnull)name NS_SWIFT_NAME(isInclude(_:));
	+(BOOL)isInclude_: (const char* _Nonnull)name NS_SWIFT_NAME(isInclude(name:));
	+(BOOL)setInclude: (const char* _Nonnull)name src: (const TSString* _Nonnull)src NS_SWIFT_NAME(setInclude(_:_:));
	+(BOOL)setInclude_: (const char* _Nonnull)name src: (const TSString* _Nonnull)src NS_SWIFT_NAME(setInclude(name:src:));
	+(BOOL)removeInclude: (const char* _Nonnull)name NS_SWIFT_NAME(removeInclude(_:));
	+(BOOL)removeInclude_: (const char* _Nonnull)name NS_SWIFT_NAME(removeInclude(name:));
	+(void)clearIncludes;
	+(NSString* _Nonnull)preprocessor: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(preprocessor(_:_:));
	+(NSString* _Nonnull)preprocessor_: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(preprocessor(src:format:));
	+(NSString* _Nonnull)preprocessor_1: (const char* _Nonnull)src NS_SWIFT_NAME(preprocessor(_:));
	+(NSString* _Nonnull)preprocessor_1_: (const char* _Nonnull)src NS_SWIFT_NAME(preprocessor(src:));
	+(NSString* _Nonnull)preprocessor_2: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(preprocessor(_:_:));
	+(NSString* _Nonnull)preprocessor_2_: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(preprocessor(src:macros:));
	+(NSString* _Nonnull)preprocessor_3: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(preprocessor(_:_:_:));
	+(NSString* _Nonnull)preprocessor_3_: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(preprocessor(src:macros:includes:));
	+(NSString* _Nonnull)preprocessor_4: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(preprocessor(_:_:_:_:));
	+(NSString* _Nonnull)preprocessor_4_: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(preprocessor(src:macros:includes:size:));
@end

/// Tellusim::ShaderCompiler
NS_SWIFT_NAME(ShaderCompiler)
TS_CAPI @interface TSShaderCompiler : TSShader
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ShaderCompiler* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ShaderCompiler&)p;
		-(Tellusim::ShaderCompiler* _Nonnull)pointer;
		-(Tellusim::ShaderCompiler&)ref;
	#endif
	-(id _Nonnull)initShader: (TSShader* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSShader* _Nonnull)getShader;
	-(BOOL)equalPtr: (const TSShaderCompiler* _Nonnull)p;
	-(TSShaderCompiler* _Nonnull)copyPtr;
	-(TSShaderCompiler* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSShaderCompiler* _Nonnull)null;
	-(void)setFlags: (TS_ShaderCompilerFlags)flags NS_SWIFT_NAME(setFlags(_:));
	-(void)setFlags_: (TS_ShaderCompilerFlags)flags NS_SWIFT_NAME(setFlags(flags:));
	-(TS_ShaderCompilerFlags)getFlags NS_SWIFT_NAME(flags());
	-(BOOL)getBinary: (TSStream* _Nonnull)stream NS_SWIFT_NAME(binary(_:));
	-(BOOL)getBinary_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(binary(stream:));
	-(BOOL)getBinary_1: (TSStream* _Nonnull)stream platform: (TS_Platform)platform NS_SWIFT_NAME(binary(_:_:));
	-(BOOL)getBinary_1_: (TSStream* _Nonnull)stream platform: (TS_Platform)platform NS_SWIFT_NAME(binary(stream:platform:));
	-(NSString* _Nonnull)getSource NS_SWIFT_NAME(source());
	-(NSString* _Nonnull)getSource_1: (TS_Platform)platform NS_SWIFT_NAME(source(_:));
	-(NSString* _Nonnull)getSource_1_: (TS_Platform)platform NS_SWIFT_NAME(source(platform:));
@end

/// Tellusim::D3D12Shader
NS_SWIFT_NAME(D3D12Shader)
TS_CAPI @interface TSD3D12Shader : TSShader
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D12Shader* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D12Shader&)p;
		-(Tellusim::D3D12Shader* _Nonnull)pointer;
		-(Tellusim::D3D12Shader&)ref;
	#endif
	-(id _Nonnull)initShader: (TSShader* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSShader* _Nonnull)getShader;
	-(BOOL)equalPtr: (const TSD3D12Shader* _Nonnull)p;
	-(TSD3D12Shader* _Nonnull)copyPtr;
	-(TSD3D12Shader* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D12Shader* _Nonnull)null;
	-(ID3DBlob* _Nonnull)getShaderBlob NS_SWIFT_NAME(shaderBlob());
@end

/// Tellusim::D3D11Shader
NS_SWIFT_NAME(D3D11Shader)
TS_CAPI @interface TSD3D11Shader : TSShader
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D11Shader* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D11Shader&)p;
		-(Tellusim::D3D11Shader* _Nonnull)pointer;
		-(Tellusim::D3D11Shader&)ref;
	#endif
	-(id _Nonnull)initShader: (TSShader* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSShader* _Nonnull)getShader;
	-(BOOL)equalPtr: (const TSD3D11Shader* _Nonnull)p;
	-(TSD3D11Shader* _Nonnull)copyPtr;
	-(TSD3D11Shader* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D11Shader* _Nonnull)null;
	-(void* _Nonnull)getD3D11Shader NS_SWIFT_NAME(d3D11Shader());
	-(ID3DBlob* _Nonnull)getShaderBlob NS_SWIFT_NAME(shaderBlob());
@end

/// Tellusim::MTLShader
NS_SWIFT_NAME(MTLShader)
TS_CAPI @interface TSMTLShader : TSShader
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MTLShader* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MTLShader&)p;
		-(Tellusim::MTLShader* _Nonnull)pointer;
		-(Tellusim::MTLShader&)ref;
	#endif
	-(id _Nonnull)initShader: (TSShader* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSShader* _Nonnull)getShader;
	-(BOOL)equalPtr: (const TSMTLShader* _Nonnull)p;
	-(TSMTLShader* _Nonnull)copyPtr;
	-(TSMTLShader* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMTLShader* _Nonnull)null;
	-(void)setIndirect: (BOOL)enabled NS_SWIFT_NAME(setIndirect(_:));
	-(void)setIndirect_: (BOOL)enabled NS_SWIFT_NAME(setIndirect(enabled:));
	-(BOOL)isIndirect;
	-(void* _Nonnull)getLibrary NS_SWIFT_NAME(library());
	-(void* _Nonnull)getFunction NS_SWIFT_NAME(function());
@end

/// Tellusim::VKShader
NS_SWIFT_NAME(VKShader)
TS_CAPI @interface TSVKShader : TSShader
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::VKShader* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::VKShader&)p;
		-(Tellusim::VKShader* _Nonnull)pointer;
		-(Tellusim::VKShader&)ref;
	#endif
	-(id _Nonnull)initShader: (TSShader* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSShader* _Nonnull)getShader;
	-(BOOL)equalPtr: (const TSVKShader* _Nonnull)p;
	-(TSVKShader* _Nonnull)copyPtr;
	-(TSVKShader* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSVKShader* _Nonnull)null;
	-(VkShaderModule _Nullable)getModule NS_SWIFT_NAME(module());
@end

/// Tellusim::GLShader
NS_SWIFT_NAME(GLShader)
TS_CAPI @interface TSGLShader : TSShader
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::GLShader* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::GLShader&)p;
		-(Tellusim::GLShader* _Nonnull)pointer;
		-(Tellusim::GLShader&)ref;
	#endif
	-(id _Nonnull)initShader: (TSShader* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSShader* _Nonnull)getShader;
	-(BOOL)equalPtr: (const TSGLShader* _Nonnull)p;
	-(TSGLShader* _Nonnull)copyPtr;
	-(TSGLShader* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSGLShader* _Nonnull)null;
	-(BOOL)attachShader: (uint32_t)program_id NS_SWIFT_NAME(attachShader(_:));
	-(BOOL)attachShader_: (uint32_t)program_id NS_SWIFT_NAME(attachShader(program_id:));
	-(uint32_t)getShaderType NS_SWIFT_NAME(shaderType());
	-(uint32_t)getShaderID NS_SWIFT_NAME(shaderID());
@end

/// Tellusim::GLESShader
NS_SWIFT_NAME(GLESShader)
TS_CAPI @interface TSGLESShader : TSShader
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::GLESShader* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::GLESShader&)p;
		-(Tellusim::GLESShader* _Nonnull)pointer;
		-(Tellusim::GLESShader&)ref;
	#endif
	-(id _Nonnull)initShader: (TSShader* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSShader* _Nonnull)getShader;
	-(BOOL)equalPtr: (const TSGLESShader* _Nonnull)p;
	-(TSGLESShader* _Nonnull)copyPtr;
	-(TSGLESShader* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSGLESShader* _Nonnull)null;
	-(BOOL)attachShader: (uint32_t)program_id NS_SWIFT_NAME(attachShader(_:));
	-(BOOL)attachShader_: (uint32_t)program_id NS_SWIFT_NAME(attachShader(program_id:));
	-(uint32_t)getShaderType NS_SWIFT_NAME(shaderType());
	-(uint32_t)getShaderID NS_SWIFT_NAME(shaderID());
@end

/// Tellusim::CUShader
NS_SWIFT_NAME(CUShader)
TS_CAPI @interface TSCUShader : TSShader
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::CUShader* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::CUShader&)p;
		-(Tellusim::CUShader* _Nonnull)pointer;
		-(Tellusim::CUShader&)ref;
	#endif
	-(id _Nonnull)initShader: (TSShader* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSShader* _Nonnull)getShader;
	-(BOOL)equalPtr: (const TSCUShader* _Nonnull)p;
	-(TSCUShader* _Nonnull)copyPtr;
	-(TSCUShader* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSCUShader* _Nonnull)null;
	-(CUmodule _Nullable)getModule NS_SWIFT_NAME(module());
	-(CUfunction _Nullable)getFunction NS_SWIFT_NAME(function());
@end

/// Tellusim::HIPShader
NS_SWIFT_NAME(HIPShader)
TS_CAPI @interface TSHIPShader : TSShader
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::HIPShader* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::HIPShader&)p;
		-(Tellusim::HIPShader* _Nonnull)pointer;
		-(Tellusim::HIPShader&)ref;
	#endif
	-(id _Nonnull)initShader: (TSShader* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSShader* _Nonnull)getShader;
	-(BOOL)equalPtr: (const TSHIPShader* _Nonnull)p;
	-(TSHIPShader* _Nonnull)copyPtr;
	-(TSHIPShader* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSHIPShader* _Nonnull)null;
	-(void* _Nonnull)getModule NS_SWIFT_NAME(module());
	-(void* _Nonnull)getFunction NS_SWIFT_NAME(function());
@end

/// Tellusim::FUShader
NS_SWIFT_NAME(FUShader)
TS_CAPI @interface TSFUShader : TSShader
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSShader* _Nonnull * _Nullable)shaders shaders_size: (uint32_t)shaders_size NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TSShader* _Nonnull * _Nullable)shaders shaders_size: (uint32_t)shaders_size NS_SWIFT_NAME(init(shaders:shaders_size:));
	-(id _Nonnull)init_3: (TSShader* _Nonnull * _Nullable)shaders shaders_size: (uint32_t)shaders_size owner: (BOOL)owner NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_3_: (TSShader* _Nonnull * _Nullable)shaders shaders_size: (uint32_t)shaders_size owner: (BOOL)owner NS_SWIFT_NAME(init(shaders:shaders_size:owner:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::FUShader* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::FUShader&)p;
		-(Tellusim::FUShader* _Nonnull)pointer;
		-(Tellusim::FUShader&)ref;
	#endif
	-(id _Nonnull)initShader: (TSShader* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSShader* _Nonnull)getShader;
	-(BOOL)equalPtr: (const TSFUShader* _Nonnull)p;
	-(TSFUShader* _Nonnull)copyPtr;
	-(TSFUShader* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFUShader* _Nonnull)null;
	-(void)setMask: (uint32_t)mask NS_SWIFT_NAME(setMask(_:));
	-(void)setMask_: (uint32_t)mask NS_SWIFT_NAME(setMask(mask:));
	-(uint32_t)getMask NS_SWIFT_NAME(mask());
	-(uint32_t)getNumShaders NS_SWIFT_NAME(numShaders());
	-(const TSShader* _Nonnull)getShader: (uint32_t)index NS_SWIFT_NAME(shader(_:));
	-(const TSShader* _Nonnull)getShader_: (uint32_t)index NS_SWIFT_NAME(shader(index:));
@end

/// Tellusim::Sampler
NS_SWIFT_NAME(Sampler)
TS_CAPI @interface TSSampler : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Sampler* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Sampler&)p;
		-(Tellusim::Sampler* _Nonnull)pointer;
		-(Tellusim::Sampler&)ref;
	#endif
	-(BOOL)equalPtr: (const TSSampler* _Nonnull)p;
	-(TSSampler* _Nonnull)copyPtr;
	-(TSSampler* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSSampler* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)clear;
	-(BOOL)isCreated;
	-(BOOL)create;
	-(void)setParameters: (const TSSampler* _Nonnull)sampler NS_SWIFT_NAME(setParameters(_:));
	-(void)setParameters_: (const TSSampler* _Nonnull)sampler NS_SWIFT_NAME(setParameters(sampler:));
	-(void)setFilter: (TS_SamplerFilter)filter NS_SWIFT_NAME(setFilter(_:));
	-(void)setFilter_: (TS_SamplerFilter)filter NS_SWIFT_NAME(setFilter(filter:));
	-(TS_SamplerFilter)getFilter NS_SWIFT_NAME(filter());
	-(BOOL)isPointFilter;
	-(void)setAnisotropy: (uint32_t)anisotropy NS_SWIFT_NAME(setAnisotropy(_:));
	-(void)setAnisotropy_: (uint32_t)anisotropy NS_SWIFT_NAME(setAnisotropy(anisotropy:));
	-(uint32_t)getAnisotropy NS_SWIFT_NAME(anisotropy());
	-(BOOL)hasAnisotropy;
	-(void)setWrapMode: (TS_SamplerWrapMode)mode NS_SWIFT_NAME(setWrapMode(_:));
	-(void)setWrapMode_: (TS_SamplerWrapMode)mode NS_SWIFT_NAME(setWrapMode(mode:));
	-(void)setWrapMode_1: (TS_SamplerWrapMode)mode_s mode_t: (TS_SamplerWrapMode)mode_t mode_r: (TS_SamplerWrapMode)mode_r NS_SWIFT_NAME(setWrapMode(_:_:_:));
	-(void)setWrapMode_1_: (TS_SamplerWrapMode)mode_s mode_t: (TS_SamplerWrapMode)mode_t mode_r: (TS_SamplerWrapMode)mode_r NS_SWIFT_NAME(setWrapMode(mode_s:mode_t:mode_r:));
	-(void)setWrapModeS: (TS_SamplerWrapMode)mode NS_SWIFT_NAME(setWrapModeS(_:));
	-(void)setWrapModeS_: (TS_SamplerWrapMode)mode NS_SWIFT_NAME(setWrapModeS(mode:));
	-(TS_SamplerWrapMode)getWrapModeS NS_SWIFT_NAME(wrapModeS());
	-(void)setWrapModeT: (TS_SamplerWrapMode)mode NS_SWIFT_NAME(setWrapModeT(_:));
	-(void)setWrapModeT_: (TS_SamplerWrapMode)mode NS_SWIFT_NAME(setWrapModeT(mode:));
	-(TS_SamplerWrapMode)getWrapModeT NS_SWIFT_NAME(wrapModeT());
	-(void)setWrapModeR: (TS_SamplerWrapMode)mode NS_SWIFT_NAME(setWrapModeR(_:));
	-(void)setWrapModeR_: (TS_SamplerWrapMode)mode NS_SWIFT_NAME(setWrapModeR(mode:));
	-(TS_SamplerWrapMode)getWrapModeR NS_SWIFT_NAME(wrapModeR());
	-(void)setLod: (float32_t)min max: (float32_t)max bias: (float32_t)bias NS_SWIFT_NAME(setLod(_:_:_:));
	-(void)setLod_: (float32_t)min max: (float32_t)max bias: (float32_t)bias NS_SWIFT_NAME(setLod(min:max:bias:));
	-(void)setLodMin: (float32_t)min NS_SWIFT_NAME(setLodMin(_:));
	-(void)setLodMin_: (float32_t)min NS_SWIFT_NAME(setLodMin(min:));
	-(float32_t)getLodMin NS_SWIFT_NAME(lodMin());
	-(void)setLodMax: (float32_t)max NS_SWIFT_NAME(setLodMax(_:));
	-(void)setLodMax_: (float32_t)max NS_SWIFT_NAME(setLodMax(max:));
	-(float32_t)getLodMax NS_SWIFT_NAME(lodMax());
	-(void)setLodBias: (float32_t)bias NS_SWIFT_NAME(setLodBias(_:));
	-(void)setLodBias_: (float32_t)bias NS_SWIFT_NAME(setLodBias(bias:));
	-(float32_t)getLodBias NS_SWIFT_NAME(lodBias());
	-(void)setBorderColor: (TSColor)color NS_SWIFT_NAME(setBorderColor(_:));
	-(void)setBorderColor_: (TSColor)color NS_SWIFT_NAME(setBorderColor(color:));
	-(void)setBorderColor_1: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a NS_SWIFT_NAME(setBorderColor(_:_:_:_:));
	-(void)setBorderColor_1_: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a NS_SWIFT_NAME(setBorderColor(r:g:b:a:));
	-(TSColor)getBorderColor NS_SWIFT_NAME(borderColor());
	-(void)setCompareFunc: (TS_SamplerCompareFunc)func NS_SWIFT_NAME(setCompareFunc(_:));
	-(void)setCompareFunc_: (TS_SamplerCompareFunc)func NS_SWIFT_NAME(setCompareFunc(func:));
	-(TS_SamplerCompareFunc)getCompareFunc NS_SWIFT_NAME(compareFunc());
	-(void)setReductionMode: (TS_SamplerReductionMode)mode NS_SWIFT_NAME(setReductionMode(_:));
	-(void)setReductionMode_: (TS_SamplerReductionMode)mode NS_SWIFT_NAME(setReductionMode(mode:));
	-(TS_SamplerReductionMode)getReductionMode NS_SWIFT_NAME(reductionMode());
@end

/// Tellusim::MTLSampler
NS_SWIFT_NAME(MTLSampler)
TS_CAPI @interface TSMTLSampler : TSSampler
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MTLSampler* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MTLSampler&)p;
		-(Tellusim::MTLSampler* _Nonnull)pointer;
		-(Tellusim::MTLSampler&)ref;
	#endif
	-(id _Nonnull)initSampler: (TSSampler* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSSampler* _Nonnull)getSampler;
	-(BOOL)equalPtr: (const TSMTLSampler* _Nonnull)p;
	-(TSMTLSampler* _Nonnull)copyPtr;
	-(TSMTLSampler* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMTLSampler* _Nonnull)null;
	-(void)setIndirect: (BOOL)enabled NS_SWIFT_NAME(setIndirect(_:));
	-(void)setIndirect_: (BOOL)enabled NS_SWIFT_NAME(setIndirect(enabled:));
	-(BOOL)isIndirect;
@end

/// Tellusim::FUSampler
NS_SWIFT_NAME(FUSampler)
TS_CAPI @interface TSFUSampler : TSSampler
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSSampler* _Nonnull * _Nullable)samplers samplers_size: (uint32_t)samplers_size NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TSSampler* _Nonnull * _Nullable)samplers samplers_size: (uint32_t)samplers_size NS_SWIFT_NAME(init(samplers:samplers_size:));
	-(id _Nonnull)init_3: (TSSampler* _Nonnull * _Nullable)samplers samplers_size: (uint32_t)samplers_size owner: (BOOL)owner NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_3_: (TSSampler* _Nonnull * _Nullable)samplers samplers_size: (uint32_t)samplers_size owner: (BOOL)owner NS_SWIFT_NAME(init(samplers:samplers_size:owner:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::FUSampler* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::FUSampler&)p;
		-(Tellusim::FUSampler* _Nonnull)pointer;
		-(Tellusim::FUSampler&)ref;
	#endif
	-(id _Nonnull)initSampler: (TSSampler* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSSampler* _Nonnull)getSampler;
	-(BOOL)equalPtr: (const TSFUSampler* _Nonnull)p;
	-(TSFUSampler* _Nonnull)copyPtr;
	-(TSFUSampler* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFUSampler* _Nonnull)null;
	-(void)setMask: (uint32_t)mask NS_SWIFT_NAME(setMask(_:));
	-(void)setMask_: (uint32_t)mask NS_SWIFT_NAME(setMask(mask:));
	-(uint32_t)getMask NS_SWIFT_NAME(mask());
	-(uint32_t)getNumSamplers NS_SWIFT_NAME(numSamplers());
	-(const TSSampler* _Nonnull)getSampler: (uint32_t)index NS_SWIFT_NAME(sampler(_:));
	-(const TSSampler* _Nonnull)getSampler_: (uint32_t)index NS_SWIFT_NAME(sampler(index:));
@end

/// Tellusim::Texture
NS_SWIFT_NAME(Texture)
TS_CAPI @interface TSTexture : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Texture* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Texture&)p;
		-(Tellusim::Texture* _Nonnull)pointer;
		-(Tellusim::Texture&)ref;
	#endif
	-(BOOL)equalPtr: (const TSTexture* _Nonnull)p;
	-(TSTexture* _Nonnull)copyPtr;
	-(TSTexture* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSTexture* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)clear;
	-(BOOL)isCreated;
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(BOOL)create: (TS_TextureType)type format: (TS_Format)format size: (TSSize)size layers: (uint32_t)layers NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_: (TS_TextureType)type format: (TS_Format)format size: (TSSize)size layers: (uint32_t)layers NS_SWIFT_NAME(create(type:format:size:layers:));
	-(BOOL)create_1: (TS_TextureType)type format: (TS_Format)format size: (TSSize)size layers: (uint32_t)layers flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_1_: (TS_TextureType)type format: (TS_Format)format size: (TSSize)size layers: (uint32_t)layers flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create(type:format:size:layers:flags:));
	-(BOOL)create2D: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(create2D(_:_:));
	-(BOOL)create2D_: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(create2D(format:size:));
	-(BOOL)create2D_1: (TS_Format)format size: (uint32_t)size flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create2D(_:_:_:));
	-(BOOL)create2D_1_: (TS_Format)format size: (uint32_t)size flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create2D(format:size:flags:));
	-(BOOL)create3D: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(create3D(_:_:));
	-(BOOL)create3D_: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(create3D(format:size:));
	-(BOOL)create3D_1: (TS_Format)format size: (uint32_t)size flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create3D(_:_:_:));
	-(BOOL)create3D_1_: (TS_Format)format size: (uint32_t)size flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create3D(format:size:flags:));
	-(BOOL)createCube: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(createCube(_:_:));
	-(BOOL)createCube_: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(createCube(format:size:));
	-(BOOL)createCube_1: (TS_Format)format size: (uint32_t)size flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createCube(_:_:_:));
	-(BOOL)createCube_1_: (TS_Format)format size: (uint32_t)size flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createCube(format:size:flags:));
	-(BOOL)create2D_2: (TS_Format)format width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(create2D(_:_:_:));
	-(BOOL)create2D_2_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(create2D(format:width:height:));
	-(BOOL)create2D_3: (TS_Format)format width: (uint32_t)width height: (uint32_t)height flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create2D(_:_:_:_:));
	-(BOOL)create2D_3_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create2D(format:width:height:flags:));
	-(BOOL)create3D_2: (TS_Format)format width: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth NS_SWIFT_NAME(create3D(_:_:_:_:));
	-(BOOL)create3D_2_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth NS_SWIFT_NAME(create3D(format:width:height:depth:));
	-(BOOL)create3D_3: (TS_Format)format width: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create3D(_:_:_:_:_:));
	-(BOOL)create3D_3_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create3D(format:width:height:depth:flags:));
	-(BOOL)create2D_4: (TS_Format)format width: (uint32_t)width height: (uint32_t)height layers: (uint32_t)layers NS_SWIFT_NAME(create2D(_:_:_:_:));
	-(BOOL)create2D_4_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height layers: (uint32_t)layers NS_SWIFT_NAME(create2D(format:width:height:layers:));
	-(BOOL)create2D_5: (TS_Format)format width: (uint32_t)width height: (uint32_t)height layers: (uint32_t)layers flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create2D(_:_:_:_:_:));
	-(BOOL)create2D_5_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height layers: (uint32_t)layers flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create2D(format:width:height:layers:flags:));
	-(BOOL)createCube_2: (TS_Format)format size: (uint32_t)size layers: (uint32_t)layers NS_SWIFT_NAME(createCube(_:_:_:));
	-(BOOL)createCube_2_: (TS_Format)format size: (uint32_t)size layers: (uint32_t)layers NS_SWIFT_NAME(createCube(format:size:layers:));
	-(BOOL)createCube_3: (TS_Format)format size: (uint32_t)size layers: (uint32_t)layers flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createCube(_:_:_:_:));
	-(BOOL)createCube_3_: (TS_Format)format size: (uint32_t)size layers: (uint32_t)layers flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createCube(format:size:layers:flags:));
	-(TS_TextureType)getType NS_SWIFT_NAME(type());
	+(NSString* _Nonnull)getTypeName: (TS_TextureType)type NS_SWIFT_NAME(typeName(_:));
	+(NSString* _Nonnull)getTypeName_: (TS_TextureType)type NS_SWIFT_NAME(typeName(type:));
	-(NSString* _Nonnull)getTypeName_1 NS_SWIFT_NAME(typeName());
	-(BOOL)is2DType;
	-(BOOL)is3DType;
	-(BOOL)isCubeType;
	-(TS_Format)getFormat NS_SWIFT_NAME(format());
	-(NSString* _Nonnull)getFormatName NS_SWIFT_NAME(formatName());
	-(BOOL)isColorFormat;
	-(BOOL)isDepthFormat;
	-(BOOL)isPixelFormat;
	-(BOOL)isPlainFormat;
	-(BOOL)isMixedFormat;
	-(BOOL)isBlockFormat;
	-(BOOL)isStencilFormat;
	-(BOOL)isNormFormat;
	-(BOOL)isSRGBFormat;
	-(BOOL)isFloatFormat;
	-(BOOL)isSignedFormat;
	-(BOOL)isUnsignedFormat;
	-(BOOL)isIntegerFormat;
	-(BOOL)isi8Format;
	-(BOOL)isu8Format;
	-(BOOL)is8BitFormat;
	-(BOOL)isi16Format;
	-(BOOL)isu16Format;
	-(BOOL)isf16Format;
	-(BOOL)is16BitFormat;
	-(BOOL)isi32Format;
	-(BOOL)isu32Format;
	-(BOOL)isf32Format;
	-(BOOL)is32BitFormat;
	-(BOOL)isi64Format;
	-(BOOL)isu64Format;
	-(BOOL)isf64Format;
	-(BOOL)is64BitFormat;
	-(BOOL)isBC15Format;
	-(BOOL)isBC67Format;
	-(BOOL)isETC2Format;
	-(BOOL)isASTCFormat;
	-(uint32_t)getComponents NS_SWIFT_NAME(components());
	-(uint32_t)getPixelSize NS_SWIFT_NAME(pixelSize());
	-(uint32_t)getBlockSize NS_SWIFT_NAME(blockSize());
	-(uint32_t)getBlockWidth NS_SWIFT_NAME(blockWidth());
	-(uint32_t)getBlockHeight NS_SWIFT_NAME(blockHeight());
	-(TS_TextureFlags)getFlags NS_SWIFT_NAME(flags());
	-(BOOL)hasFlag: (TS_TextureFlags)flags NS_SWIFT_NAME(hasFlag(_:));
	-(BOOL)hasFlag_: (TS_TextureFlags)flags NS_SWIFT_NAME(hasFlag(flags:));
	-(BOOL)hasFlags: (TS_TextureFlags)flags NS_SWIFT_NAME(hasFlags(_:));
	-(BOOL)hasFlags_: (TS_TextureFlags)flags NS_SWIFT_NAME(hasFlags(flags:));
	-(NSString* _Nonnull)getFlagsName NS_SWIFT_NAME(flagsName());
	-(uint32_t)getMultisample NS_SWIFT_NAME(multisample());
	-(BOOL)hasMultisample;
	-(uint32_t)getWidth NS_SWIFT_NAME(width());
	-(uint32_t)getHeight NS_SWIFT_NAME(height());
	-(uint32_t)getDepth NS_SWIFT_NAME(depth());
	-(uint32_t)getFaces NS_SWIFT_NAME(faces());
	-(uint32_t)getLayers NS_SWIFT_NAME(layers());
	-(uint32_t)getMipmaps NS_SWIFT_NAME(mipmaps());
	-(uint32_t)findMipmap: (TSSize)size NS_SWIFT_NAME(findMipmap(_:));
	-(uint32_t)findMipmap_: (TSSize)size NS_SWIFT_NAME(findMipmap(size:));
	-(uint32_t)getWidth_1: (uint32_t)mipmap NS_SWIFT_NAME(width(_:));
	-(uint32_t)getWidth_1_: (uint32_t)mipmap NS_SWIFT_NAME(width(mipmap:));
	-(uint32_t)getHeight_1: (uint32_t)mipmap NS_SWIFT_NAME(height(_:));
	-(uint32_t)getHeight_1_: (uint32_t)mipmap NS_SWIFT_NAME(height(mipmap:));
	-(uint32_t)getDepth_1: (uint32_t)mipmap NS_SWIFT_NAME(depth(_:));
	-(uint32_t)getDepth_1_: (uint32_t)mipmap NS_SWIFT_NAME(depth(mipmap:));
	-(BOOL)hasFaces;
	-(BOOL)hasLayers;
	-(BOOL)hasMipmaps;
	-(TSSize)getSize NS_SWIFT_NAME(size());
	-(TSRegion)getRegion NS_SWIFT_NAME(region());
	-(TSSlice)getSlice NS_SWIFT_NAME(slice());
	-(TSSize)getSize_1: (uint32_t)mipmap NS_SWIFT_NAME(size(_:));
	-(TSSize)getSize_1_: (uint32_t)mipmap NS_SWIFT_NAME(size(mipmap:));
	-(TSRegion)getRegion_1: (uint32_t)mipmap NS_SWIFT_NAME(region(_:));
	-(TSRegion)getRegion_1_: (uint32_t)mipmap NS_SWIFT_NAME(region(mipmap:));
	-(TSSlice)getSlice_1: (uint32_t)mipmap NS_SWIFT_NAME(slice(_:));
	-(TSSlice)getSlice_1_: (uint32_t)mipmap NS_SWIFT_NAME(slice(mipmap:));
	-(uint32_t)getTileWidth NS_SWIFT_NAME(tileWidth());
	-(uint32_t)getTileHeight NS_SWIFT_NAME(tileHeight());
	-(uint32_t)getTileDepth NS_SWIFT_NAME(tileDepth());
	-(uint32_t)getTileMipmaps NS_SWIFT_NAME(tileMipmaps());
	-(TSSize)getTileSize NS_SWIFT_NAME(tileSize());
	-(NSString* _Nonnull)getDescription NS_SWIFT_NAME(description());
	-(size_t)getMemory NS_SWIFT_NAME(memory());
@end

/// Tellusim::TextureTable
NS_SWIFT_NAME(TextureTable)
TS_CAPI @interface TSTextureTable : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::TextureTable* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::TextureTable&)p;
		-(Tellusim::TextureTable* _Nonnull)pointer;
		-(Tellusim::TextureTable&)ref;
	#endif
	-(BOOL)equalPtr: (const TSTextureTable* _Nonnull)p;
	-(TSTextureTable* _Nonnull)copyPtr;
	-(TSTextureTable* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSTextureTable* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)clear;
	-(BOOL)isCreated;
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(BOOL)create: (TS_TextureType)type size: (uint32_t)size NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_: (TS_TextureType)type size: (uint32_t)size NS_SWIFT_NAME(create(type:size:));
	-(TS_TextureType)getType NS_SWIFT_NAME(type());
	-(NSString* _Nonnull)getTypeName NS_SWIFT_NAME(typeName());
	-(uint32_t)getSize NS_SWIFT_NAME(size());
	-(TSTexture* _Nonnull)get: (uint32_t)index NS_SWIFT_NAME(get(_:));
	-(TSTexture* _Nonnull)get_: (uint32_t)index NS_SWIFT_NAME(get(index:));
	-(BOOL)isOwner: (uint32_t)index NS_SWIFT_NAME(isOwner(_:));
	-(BOOL)isOwner_: (uint32_t)index NS_SWIFT_NAME(isOwner(index:));
	-(size_t)getMemory NS_SWIFT_NAME(memory());
@end

/// Tellusim::D3D12Texture
NS_SWIFT_NAME(D3D12Texture)
TS_CAPI @interface TSD3D12Texture : TSTexture
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D12Texture* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D12Texture&)p;
		-(Tellusim::D3D12Texture* _Nonnull)pointer;
		-(Tellusim::D3D12Texture&)ref;
	#endif
	-(id _Nonnull)initTexture: (TSTexture* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTexture* _Nonnull)getTexture;
	-(BOOL)equalPtr: (const TSD3D12Texture* _Nonnull)p;
	-(TSD3D12Texture* _Nonnull)copyPtr;
	-(TSD3D12Texture* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D12Texture* _Nonnull)null;
	-(BOOL)create_2: (TS_TextureType)type texture: (ID3D12Resource* _Nonnull)texture state: (uint32_t)state NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_2_: (TS_TextureType)type texture: (ID3D12Resource* _Nonnull)texture state: (uint32_t)state NS_SWIFT_NAME(create(type:texture:state:));
	-(BOOL)create_3: (TS_TextureType)type texture: (ID3D12Resource* _Nonnull)texture state: (uint32_t)state flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_3_: (TS_TextureType)type texture: (ID3D12Resource* _Nonnull)texture state: (uint32_t)state flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create(type:texture:state:flags:));
	-(BOOL)create_4: (TS_TextureType)type texture: (ID3D12Resource* _Nonnull)texture state: (uint32_t)state flags: (TS_TextureFlags)flags format: (TS_Format)format NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_4_: (TS_TextureType)type texture: (ID3D12Resource* _Nonnull)texture state: (uint32_t)state flags: (TS_TextureFlags)flags format: (TS_Format)format NS_SWIFT_NAME(create(type:texture:state:flags:format:));
	-(uint32_t)getDXGIFormat NS_SWIFT_NAME(DXGIFormat());
	-(ID3D12Resource* _Nonnull)getD3D12Texture NS_SWIFT_NAME(d3D12Texture());
	-(size_t)getShaderResourceView NS_SWIFT_NAME(shaderResourceView());
	-(size_t)getRenderTargetView NS_SWIFT_NAME(renderTargetView());
	-(size_t)getDepthStencilView NS_SWIFT_NAME(depthStencilView());
	-(size_t)getUnorderedAccessView NS_SWIFT_NAME(unorderedAccessView());
	-(void)setTextureState: (uint32_t)state NS_SWIFT_NAME(setTextureState(_:));
	-(void)setTextureState_: (uint32_t)state NS_SWIFT_NAME(setTextureState(state:));
	-(uint32_t)getTextureState NS_SWIFT_NAME(textureState());
	-(void* _Nonnull)getSharedHandle NS_SWIFT_NAME(sharedHandle());
	-(void* _Nonnull)getInteropHandle NS_SWIFT_NAME(interopHandle());
@end

/// Tellusim::D3D11Texture
NS_SWIFT_NAME(D3D11Texture)
TS_CAPI @interface TSD3D11Texture : TSTexture
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D11Texture* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D11Texture&)p;
		-(Tellusim::D3D11Texture* _Nonnull)pointer;
		-(Tellusim::D3D11Texture&)ref;
	#endif
	-(id _Nonnull)initTexture: (TSTexture* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTexture* _Nonnull)getTexture;
	-(BOOL)equalPtr: (const TSD3D11Texture* _Nonnull)p;
	-(TSD3D11Texture* _Nonnull)copyPtr;
	-(TSD3D11Texture* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D11Texture* _Nonnull)null;
	-(BOOL)create_2: (TS_TextureType)type texture: (ID3D11Texture2D* _Nonnull)texture NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_2_: (TS_TextureType)type texture: (ID3D11Texture2D* _Nonnull)texture NS_SWIFT_NAME(create(type:texture:));
	-(BOOL)create_3: (TS_TextureType)type texture: (ID3D11Texture2D* _Nonnull)texture flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_3_: (TS_TextureType)type texture: (ID3D11Texture2D* _Nonnull)texture flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create(type:texture:flags:));
	-(BOOL)create_4: (TS_TextureType)type texture: (ID3D11Texture2D* _Nonnull)texture flags: (TS_TextureFlags)flags format: (TS_Format)format NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_4_: (TS_TextureType)type texture: (ID3D11Texture2D* _Nonnull)texture flags: (TS_TextureFlags)flags format: (TS_Format)format NS_SWIFT_NAME(create(type:texture:flags:format:));
	-(uint32_t)getDXGIFormat NS_SWIFT_NAME(DXGIFormat());
	-(ID3D11Texture2D* _Nonnull)getD3D11Texture NS_SWIFT_NAME(d3D11Texture());
	-(ID3D11ShaderResourceView* _Nonnull)getShaderResourceView NS_SWIFT_NAME(shaderResourceView());
	-(ID3D11RenderTargetView* _Nonnull)getRenderTargetView NS_SWIFT_NAME(renderTargetView());
	-(ID3D11DepthStencilView* _Nonnull)getDepthStencilView NS_SWIFT_NAME(depthStencilView());
	-(ID3D11UnorderedAccessView* _Nonnull)getUnorderedAccessView NS_SWIFT_NAME(unorderedAccessView());
	-(void* _Nonnull)getInteropHandle NS_SWIFT_NAME(interopHandle());
@end

/// Tellusim::MTLTexture
NS_SWIFT_NAME(MTLTexture)
TS_CAPI @interface TSMTLTexture : TSTexture
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MTLTexture* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MTLTexture&)p;
		-(Tellusim::MTLTexture* _Nonnull)pointer;
		-(Tellusim::MTLTexture&)ref;
	#endif
	-(id _Nonnull)initTexture: (TSTexture* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTexture* _Nonnull)getTexture;
	-(BOOL)equalPtr: (const TSMTLTexture* _Nonnull)p;
	-(TSMTLTexture* _Nonnull)copyPtr;
	-(TSMTLTexture* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMTLTexture* _Nonnull)null;
	-(BOOL)create_2: (void* _Nonnull)texture NS_SWIFT_NAME(create(_:));
	-(BOOL)create_2_: (void* _Nonnull)texture NS_SWIFT_NAME(create(texture:));
	-(BOOL)create_3: (void* _Nonnull)texture flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_3_: (void* _Nonnull)texture flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create(texture:flags:));
	-(BOOL)create_4: (void* _Nonnull)texture flags: (TS_TextureFlags)flags format: (TS_Format)format NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_4_: (void* _Nonnull)texture flags: (TS_TextureFlags)flags format: (TS_Format)format NS_SWIFT_NAME(create(texture:flags:format:));
	-(uint32_t)getPixelFormat NS_SWIFT_NAME(pixelFormat());
	-(uint32_t)getTextureType NS_SWIFT_NAME(textureType());
	-(void* _Nonnull)getMTLTexture NS_SWIFT_NAME(MTLTexture());
	-(void* _Nonnull)getMTLBuffer NS_SWIFT_NAME(MTLBuffer());
	-(void* _Nonnull)getSharedPtr NS_SWIFT_NAME(sharedPtr());
@end

/// Tellusim::VKTexture
NS_SWIFT_NAME(VKTexture)
TS_CAPI @interface TSVKTexture : TSTexture
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::VKTexture* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::VKTexture&)p;
		-(Tellusim::VKTexture* _Nonnull)pointer;
		-(Tellusim::VKTexture&)ref;
	#endif
	-(id _Nonnull)initTexture: (TSTexture* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTexture* _Nonnull)getTexture;
	-(BOOL)equalPtr: (const TSVKTexture* _Nonnull)p;
	-(TSVKTexture* _Nonnull)copyPtr;
	-(TSVKTexture* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSVKTexture* _Nonnull)null;
	-(BOOL)create_2: (TS_TextureType)type format: (uint32_t)format texture: (VkImage _Nullable)texture layout: (uint32_t)layout NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_2_: (TS_TextureType)type format: (uint32_t)format texture: (VkImage _Nullable)texture layout: (uint32_t)layout NS_SWIFT_NAME(create(type:format:texture:layout:));
	-(BOOL)create_3: (TS_TextureType)type format: (uint32_t)format texture: (VkImage _Nullable)texture layout: (uint32_t)layout flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_3_: (TS_TextureType)type format: (uint32_t)format texture: (VkImage _Nullable)texture layout: (uint32_t)layout flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create(type:format:texture:layout:flags:));
	-(BOOL)create_4: (TS_TextureType)type format: (uint32_t)format texture: (VkImage _Nullable)texture layout: (uint32_t)layout flags: (TS_TextureFlags)flags texture_format: (TS_Format)texture_format NS_SWIFT_NAME(create(_:_:_:_:_:_:));
	-(BOOL)create_4_: (TS_TextureType)type format: (uint32_t)format texture: (VkImage _Nullable)texture layout: (uint32_t)layout flags: (TS_TextureFlags)flags texture_format: (TS_Format)texture_format NS_SWIFT_NAME(create(type:format:texture:layout:flags:texture_format:));
	-(uint32_t)getPixelFormat NS_SWIFT_NAME(pixelFormat());
	-(VkImage _Nullable)getVKTexture NS_SWIFT_NAME(VKTexture());
	-(VkImageView _Nullable)getTextureView NS_SWIFT_NAME(textureView());
	-(void)setTextureLayout: (uint32_t)layout NS_SWIFT_NAME(setTextureLayout(_:));
	-(void)setTextureLayout_: (uint32_t)layout NS_SWIFT_NAME(setTextureLayout(layout:));
	-(uint32_t)getTextureLayout NS_SWIFT_NAME(textureLayout());
	-(void)getTextureRange: (void* _Nonnull)range slice: (TSSlice)slice NS_SWIFT_NAME(textureRange(_:_:));
	-(void)getTextureRange_: (void* _Nonnull)range slice: (TSSlice)slice NS_SWIFT_NAME(textureRange(range:slice:));
	-(void* _Nonnull)getSharedPtr NS_SWIFT_NAME(sharedPtr());
	-(void* _Nonnull)getInteropHandle NS_SWIFT_NAME(interopHandle());
@end

/// Tellusim::GLTexture
NS_SWIFT_NAME(GLTexture)
TS_CAPI @interface TSGLTexture : TSTexture
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::GLTexture* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::GLTexture&)p;
		-(Tellusim::GLTexture* _Nonnull)pointer;
		-(Tellusim::GLTexture&)ref;
	#endif
	-(id _Nonnull)initTexture: (TSTexture* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTexture* _Nonnull)getTexture;
	-(BOOL)equalPtr: (const TSGLTexture* _Nonnull)p;
	-(TSGLTexture* _Nonnull)copyPtr;
	-(TSGLTexture* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSGLTexture* _Nonnull)null;
	-(BOOL)create_2: (uint32_t)target texture_id: (uint32_t)texture_id NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_2_: (uint32_t)target texture_id: (uint32_t)texture_id NS_SWIFT_NAME(create(target:texture_id:));
	-(BOOL)create_3: (uint32_t)target texture_id: (uint32_t)texture_id flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_3_: (uint32_t)target texture_id: (uint32_t)texture_id flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create(target:texture_id:flags:));
	-(BOOL)create_4: (uint32_t)target texture_id: (uint32_t)texture_id flags: (TS_TextureFlags)flags format: (TS_Format)format NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_4_: (uint32_t)target texture_id: (uint32_t)texture_id flags: (TS_TextureFlags)flags format: (TS_Format)format NS_SWIFT_NAME(create(target:texture_id:flags:format:));
	-(uint32_t)getTarget NS_SWIFT_NAME(target());
	-(uint32_t)getInternalFormat NS_SWIFT_NAME(internalFormat());
	-(uint32_t)getTextureID NS_SWIFT_NAME(textureID());
@end

/// Tellusim::GLESTexture
NS_SWIFT_NAME(GLESTexture)
TS_CAPI @interface TSGLESTexture : TSTexture
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::GLESTexture* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::GLESTexture&)p;
		-(Tellusim::GLESTexture* _Nonnull)pointer;
		-(Tellusim::GLESTexture&)ref;
	#endif
	-(id _Nonnull)initTexture: (TSTexture* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTexture* _Nonnull)getTexture;
	-(BOOL)equalPtr: (const TSGLESTexture* _Nonnull)p;
	-(TSGLESTexture* _Nonnull)copyPtr;
	-(TSGLESTexture* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSGLESTexture* _Nonnull)null;
	-(BOOL)create_2: (uint32_t)target texture_id: (uint32_t)texture_id NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_2_: (uint32_t)target texture_id: (uint32_t)texture_id NS_SWIFT_NAME(create(target:texture_id:));
	-(BOOL)create_3: (uint32_t)target texture_id: (uint32_t)texture_id flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_3_: (uint32_t)target texture_id: (uint32_t)texture_id flags: (TS_TextureFlags)flags NS_SWIFT_NAME(create(target:texture_id:flags:));
	-(BOOL)create_4: (uint32_t)target texture_id: (uint32_t)texture_id flags: (TS_TextureFlags)flags format: (TS_Format)format NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_4_: (uint32_t)target texture_id: (uint32_t)texture_id flags: (TS_TextureFlags)flags format: (TS_Format)format NS_SWIFT_NAME(create(target:texture_id:flags:format:));
	-(uint32_t)getTarget NS_SWIFT_NAME(target());
	-(uint32_t)getInternalFormat NS_SWIFT_NAME(internalFormat());
	-(uint32_t)getTextureID NS_SWIFT_NAME(textureID());
@end

/// Tellusim::CUTexture
NS_SWIFT_NAME(CUTexture)
TS_CAPI @interface TSCUTexture : TSTexture
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::CUTexture* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::CUTexture&)p;
		-(Tellusim::CUTexture* _Nonnull)pointer;
		-(Tellusim::CUTexture&)ref;
	#endif
	-(id _Nonnull)initTexture: (TSTexture* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTexture* _Nonnull)getTexture;
	-(BOOL)equalPtr: (const TSCUTexture* _Nonnull)p;
	-(TSCUTexture* _Nonnull)copyPtr;
	-(TSCUTexture* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSCUTexture* _Nonnull)null;
	-(CUmipmappedArray _Nullable)getTextureArray NS_SWIFT_NAME(textureArray());
	-(CUarray _Nullable)getTextureLevel: (uint32_t)index NS_SWIFT_NAME(textureLevel(_:));
	-(CUarray _Nullable)getTextureLevel_: (uint32_t)index NS_SWIFT_NAME(textureLevel(index:));
	-(uint32_t)getArrayFormat NS_SWIFT_NAME(arrayFormat());
	-(uint32_t)getArrayChannels NS_SWIFT_NAME(arrayChannels());
	-(CUexternalMemory _Nullable)getSharedMemory NS_SWIFT_NAME(sharedMemory());
@end

/// Tellusim::HIPTexture
NS_SWIFT_NAME(HIPTexture)
TS_CAPI @interface TSHIPTexture : TSTexture
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::HIPTexture* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::HIPTexture&)p;
		-(Tellusim::HIPTexture* _Nonnull)pointer;
		-(Tellusim::HIPTexture&)ref;
	#endif
	-(id _Nonnull)initTexture: (TSTexture* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTexture* _Nonnull)getTexture;
	-(BOOL)equalPtr: (const TSHIPTexture* _Nonnull)p;
	-(TSHIPTexture* _Nonnull)copyPtr;
	-(TSHIPTexture* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSHIPTexture* _Nonnull)null;
	-(void* _Nonnull)getTextureArray NS_SWIFT_NAME(textureArray());
	-(void* _Nonnull)getTextureLevel: (uint32_t)index NS_SWIFT_NAME(textureLevel(_:));
	-(void* _Nonnull)getTextureLevel_: (uint32_t)index NS_SWIFT_NAME(textureLevel(index:));
	-(uint32_t)getArrayFormat NS_SWIFT_NAME(arrayFormat());
	-(uint32_t)getArrayChannels NS_SWIFT_NAME(arrayChannels());
	-(void* _Nonnull)getSharedMemory NS_SWIFT_NAME(sharedMemory());
@end

/// Tellusim::FUTexture
NS_SWIFT_NAME(FUTexture)
TS_CAPI @interface TSFUTexture : TSTexture
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(init(textures:textures_size:));
	-(id _Nonnull)init_3: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size owner: (BOOL)owner NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_3_: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size owner: (BOOL)owner NS_SWIFT_NAME(init(textures:textures_size:owner:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::FUTexture* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::FUTexture&)p;
		-(Tellusim::FUTexture* _Nonnull)pointer;
		-(Tellusim::FUTexture&)ref;
	#endif
	-(id _Nonnull)initTexture: (TSTexture* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTexture* _Nonnull)getTexture;
	-(BOOL)equalPtr: (const TSFUTexture* _Nonnull)p;
	-(TSFUTexture* _Nonnull)copyPtr;
	-(TSFUTexture* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFUTexture* _Nonnull)null;
	-(void)setMask: (uint32_t)mask NS_SWIFT_NAME(setMask(_:));
	-(void)setMask_: (uint32_t)mask NS_SWIFT_NAME(setMask(mask:));
	-(uint32_t)getMask NS_SWIFT_NAME(mask());
	-(uint32_t)getNumTextures NS_SWIFT_NAME(numTextures());
	-(const TSTexture* _Nonnull)getTexture: (uint32_t)index NS_SWIFT_NAME(texture(_:));
	-(const TSTexture* _Nonnull)getTexture_: (uint32_t)index NS_SWIFT_NAME(texture(index:));
@end

/// Tellusim::Tracing
NS_SWIFT_NAME(Tracing)
TS_CAPI @interface TSTracing : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Tracing* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Tracing&)p;
		-(Tellusim::Tracing* _Nonnull)pointer;
		-(Tellusim::Tracing&)ref;
	#endif
	-(BOOL)equalPtr: (const TSTracing* _Nonnull)p;
	-(TSTracing* _Nonnull)copyPtr;
	-(TSTracing* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSTracing* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)clear;
	-(BOOL)isCreated;
	-(BOOL)isBuilt;
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(BOOL)create: (TS_TracingType)type NS_SWIFT_NAME(create(_:));
	-(BOOL)create_: (TS_TracingType)type NS_SWIFT_NAME(create(type:));
	-(BOOL)create_1: (TS_TracingType)type flags: (TS_TracingFlags)flags NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_1_: (TS_TracingType)type flags: (TS_TracingFlags)flags NS_SWIFT_NAME(create(type:flags:));
	-(TS_TracingType)getType NS_SWIFT_NAME(type());
	+(NSString* _Nonnull)getTypeName: (TS_TracingType)type NS_SWIFT_NAME(typeName(_:));
	+(NSString* _Nonnull)getTypeName_: (TS_TracingType)type NS_SWIFT_NAME(typeName(type:));
	-(NSString* _Nonnull)getTypeName_1 NS_SWIFT_NAME(typeName());
	-(BOOL)isInstanceType;
	-(BOOL)isTriangleType;
	-(BOOL)isBoundType;
	-(BOOL)isGeometryType;
	-(void)setParameters: (const TSTracing* _Nonnull)tracing NS_SWIFT_NAME(setParameters(_:));
	-(void)setParameters_: (const TSTracing* _Nonnull)tracing NS_SWIFT_NAME(setParameters(tracing:));
	-(uint32_t)getNumGeometries NS_SWIFT_NAME(numGeometries());
	-(void)setInstanceBuffer: (uint32_t)num_instances buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setInstanceBuffer(_:_:));
	-(void)setInstanceBuffer_: (uint32_t)num_instances buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setInstanceBuffer(num_instances:buffer:));
	-(void)setInstanceBuffer_1: (uint32_t)num_instances buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setInstanceBuffer(_:_:_:));
	-(void)setInstanceBuffer_1_: (uint32_t)num_instances buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setInstanceBuffer(num_instances:buffer:offset:));
	-(void)setInstanceBuffer_2: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setInstanceBuffer(_:));
	-(void)setInstanceBuffer_2_: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setInstanceBuffer(buffer:));
	-(void)setInstanceBuffer_3: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setInstanceBuffer(_:_:));
	-(void)setInstanceBuffer_3_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setInstanceBuffer(buffer:offset:));
	-(void)setNumInstances: (uint32_t)num_instances NS_SWIFT_NAME(setNumInstances(_:));
	-(void)setNumInstances_: (uint32_t)num_instances NS_SWIFT_NAME(setNumInstances(num_instances:));
	-(uint32_t)getNumInstances NS_SWIFT_NAME(numInstances());
	-(TSBuffer* _Nonnull)getInstanceBuffer NS_SWIFT_NAME(instanceBuffer());
	-(size_t)getInstanceOffset NS_SWIFT_NAME(instanceOffset());
	-(void)setIndirectBuffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setIndirectBuffer(_:));
	-(void)setIndirectBuffer_: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setIndirectBuffer(buffer:));
	-(void)setIndirectBuffer_1: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setIndirectBuffer(_:_:));
	-(void)setIndirectBuffer_1_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setIndirectBuffer(buffer:offset:));
	-(TSBuffer* _Nonnull)getIndirectBuffer NS_SWIFT_NAME(indirectBuffer());
	-(size_t)getIndirectOffset NS_SWIFT_NAME(indirectOffset());
	-(uint32_t)addVertexBuffer: (uint32_t)num_vertices format: (TS_Format)format stride: (size_t)stride NS_SWIFT_NAME(addVertexBuffer(_:_:_:));
	-(uint32_t)addVertexBuffer_: (uint32_t)num_vertices format: (TS_Format)format stride: (size_t)stride NS_SWIFT_NAME(addVertexBuffer(num_vertices:format:stride:));
	-(uint32_t)addVertexBuffer_1: (uint32_t)num_vertices format: (TS_Format)format stride: (size_t)stride buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(addVertexBuffer(_:_:_:_:));
	-(uint32_t)addVertexBuffer_1_: (uint32_t)num_vertices format: (TS_Format)format stride: (size_t)stride buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(addVertexBuffer(num_vertices:format:stride:buffer:));
	-(uint32_t)addVertexBuffer_2: (uint32_t)num_vertices format: (TS_Format)format stride: (size_t)stride buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(addVertexBuffer(_:_:_:_:_:));
	-(uint32_t)addVertexBuffer_2_: (uint32_t)num_vertices format: (TS_Format)format stride: (size_t)stride buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(addVertexBuffer(num_vertices:format:stride:buffer:offset:));
	-(void)setVertexBuffer: (uint32_t)index num_vertices: (uint32_t)num_vertices buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setVertexBuffer(_:_:_:));
	-(void)setVertexBuffer_: (uint32_t)index num_vertices: (uint32_t)num_vertices buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setVertexBuffer(index:num_vertices:buffer:));
	-(void)setVertexBuffer_1: (uint32_t)index num_vertices: (uint32_t)num_vertices buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setVertexBuffer(_:_:_:_:));
	-(void)setVertexBuffer_1_: (uint32_t)index num_vertices: (uint32_t)num_vertices buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setVertexBuffer(index:num_vertices:buffer:offset:));
	-(void)setVertexBuffer_2: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setVertexBuffer(_:_:));
	-(void)setVertexBuffer_2_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setVertexBuffer(index:buffer:));
	-(void)setVertexBuffer_3: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setVertexBuffer(_:_:_:));
	-(void)setVertexBuffer_3_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setVertexBuffer(index:buffer:offset:));
	-(void)setNumVertices: (uint32_t)index num_vertices: (uint32_t)num_vertices NS_SWIFT_NAME(setNumVertices(_:_:));
	-(void)setNumVertices_: (uint32_t)index num_vertices: (uint32_t)num_vertices NS_SWIFT_NAME(setNumVertices(index:num_vertices:));
	-(uint32_t)getNumVertices: (uint32_t)index NS_SWIFT_NAME(numVertices(_:));
	-(uint32_t)getNumVertices_: (uint32_t)index NS_SWIFT_NAME(numVertices(index:));
	-(TS_Format)getVertexFormat: (uint32_t)index NS_SWIFT_NAME(vertexFormat(_:));
	-(TS_Format)getVertexFormat_: (uint32_t)index NS_SWIFT_NAME(vertexFormat(index:));
	-(uint32_t)getVertexStride: (uint32_t)index NS_SWIFT_NAME(vertexStride(_:));
	-(uint32_t)getVertexStride_: (uint32_t)index NS_SWIFT_NAME(vertexStride(index:));
	-(TSBuffer* _Nonnull)getVertexBuffer: (uint32_t)index NS_SWIFT_NAME(vertexBuffer(_:));
	-(TSBuffer* _Nonnull)getVertexBuffer_: (uint32_t)index NS_SWIFT_NAME(vertexBuffer(index:));
	-(size_t)getVertexOffset: (uint32_t)index NS_SWIFT_NAME(vertexOffset(_:));
	-(size_t)getVertexOffset_: (uint32_t)index NS_SWIFT_NAME(vertexOffset(index:));
	-(uint32_t)addIndexBuffer: (uint32_t)num_indices format: (TS_Format)format NS_SWIFT_NAME(addIndexBuffer(_:_:));
	-(uint32_t)addIndexBuffer_: (uint32_t)num_indices format: (TS_Format)format NS_SWIFT_NAME(addIndexBuffer(num_indices:format:));
	-(uint32_t)addIndexBuffer_1: (uint32_t)num_indices format: (TS_Format)format buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(addIndexBuffer(_:_:_:));
	-(uint32_t)addIndexBuffer_1_: (uint32_t)num_indices format: (TS_Format)format buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(addIndexBuffer(num_indices:format:buffer:));
	-(uint32_t)addIndexBuffer_2: (uint32_t)num_indices format: (TS_Format)format buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(addIndexBuffer(_:_:_:_:));
	-(uint32_t)addIndexBuffer_2_: (uint32_t)num_indices format: (TS_Format)format buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(addIndexBuffer(num_indices:format:buffer:offset:));
	-(void)setIndexBuffer: (uint32_t)index num_indices: (uint32_t)num_indices buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setIndexBuffer(_:_:_:));
	-(void)setIndexBuffer_: (uint32_t)index num_indices: (uint32_t)num_indices buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setIndexBuffer(index:num_indices:buffer:));
	-(void)setIndexBuffer_1: (uint32_t)index num_indices: (uint32_t)num_indices buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setIndexBuffer(_:_:_:_:));
	-(void)setIndexBuffer_1_: (uint32_t)index num_indices: (uint32_t)num_indices buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setIndexBuffer(index:num_indices:buffer:offset:));
	-(void)setIndexBuffer_2: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setIndexBuffer(_:_:));
	-(void)setIndexBuffer_2_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setIndexBuffer(index:buffer:));
	-(void)setIndexBuffer_3: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setIndexBuffer(_:_:_:));
	-(void)setIndexBuffer_3_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setIndexBuffer(index:buffer:offset:));
	-(void)setNumIndices: (uint32_t)index num_indices: (uint32_t)num_indices NS_SWIFT_NAME(setNumIndices(_:_:));
	-(void)setNumIndices_: (uint32_t)index num_indices: (uint32_t)num_indices NS_SWIFT_NAME(setNumIndices(index:num_indices:));
	-(uint32_t)getNumIndices: (uint32_t)index NS_SWIFT_NAME(numIndices(_:));
	-(uint32_t)getNumIndices_: (uint32_t)index NS_SWIFT_NAME(numIndices(index:));
	-(TS_Format)getIndexFormat: (uint32_t)index NS_SWIFT_NAME(indexFormat(_:));
	-(TS_Format)getIndexFormat_: (uint32_t)index NS_SWIFT_NAME(indexFormat(index:));
	-(TSBuffer* _Nonnull)getIndexBuffer: (uint32_t)index NS_SWIFT_NAME(indexBuffer(_:));
	-(TSBuffer* _Nonnull)getIndexBuffer_: (uint32_t)index NS_SWIFT_NAME(indexBuffer(index:));
	-(size_t)getIndexOffset: (uint32_t)index NS_SWIFT_NAME(indexOffset(_:));
	-(size_t)getIndexOffset_: (uint32_t)index NS_SWIFT_NAME(indexOffset(index:));
	-(uint32_t)addBoundBuffer: (uint32_t)num_bounds stride: (size_t)stride NS_SWIFT_NAME(addBoundBuffer(_:_:));
	-(uint32_t)addBoundBuffer_: (uint32_t)num_bounds stride: (size_t)stride NS_SWIFT_NAME(addBoundBuffer(num_bounds:stride:));
	-(uint32_t)addBoundBuffer_1: (uint32_t)num_bounds stride: (size_t)stride buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(addBoundBuffer(_:_:_:));
	-(uint32_t)addBoundBuffer_1_: (uint32_t)num_bounds stride: (size_t)stride buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(addBoundBuffer(num_bounds:stride:buffer:));
	-(uint32_t)addBoundBuffer_2: (uint32_t)num_bounds stride: (size_t)stride buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(addBoundBuffer(_:_:_:_:));
	-(uint32_t)addBoundBuffer_2_: (uint32_t)num_bounds stride: (size_t)stride buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(addBoundBuffer(num_bounds:stride:buffer:offset:));
	-(void)setBoundBuffer: (uint32_t)index num_bounds: (uint32_t)num_bounds buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setBoundBuffer(_:_:_:));
	-(void)setBoundBuffer_: (uint32_t)index num_bounds: (uint32_t)num_bounds buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setBoundBuffer(index:num_bounds:buffer:));
	-(void)setBoundBuffer_1: (uint32_t)index num_bounds: (uint32_t)num_bounds buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setBoundBuffer(_:_:_:_:));
	-(void)setBoundBuffer_1_: (uint32_t)index num_bounds: (uint32_t)num_bounds buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setBoundBuffer(index:num_bounds:buffer:offset:));
	-(void)setBoundBuffer_2: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setBoundBuffer(_:_:));
	-(void)setBoundBuffer_2_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setBoundBuffer(index:buffer:));
	-(void)setBoundBuffer_3: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setBoundBuffer(_:_:_:));
	-(void)setBoundBuffer_3_: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(setBoundBuffer(index:buffer:offset:));
	-(void)setNumBounds: (uint32_t)index num_bounds: (uint32_t)num_bounds NS_SWIFT_NAME(setNumBounds(_:_:));
	-(void)setNumBounds_: (uint32_t)index num_bounds: (uint32_t)num_bounds NS_SWIFT_NAME(setNumBounds(index:num_bounds:));
	-(uint32_t)getNumBounds: (uint32_t)index NS_SWIFT_NAME(numBounds(_:));
	-(uint32_t)getNumBounds_: (uint32_t)index NS_SWIFT_NAME(numBounds(index:));
	-(uint32_t)getBoundStride: (uint32_t)index NS_SWIFT_NAME(boundStride(_:));
	-(uint32_t)getBoundStride_: (uint32_t)index NS_SWIFT_NAME(boundStride(index:));
	-(TSBuffer* _Nonnull)getBoundBuffer: (uint32_t)index NS_SWIFT_NAME(boundBuffer(_:));
	-(TSBuffer* _Nonnull)getBoundBuffer_: (uint32_t)index NS_SWIFT_NAME(boundBuffer(index:));
	-(size_t)getBoundOffset: (uint32_t)index NS_SWIFT_NAME(boundOffset(_:));
	-(size_t)getBoundOffset_: (uint32_t)index NS_SWIFT_NAME(boundOffset(index:));
	-(NSString* _Nonnull)getDescription NS_SWIFT_NAME(description());
	-(uint64_t)getTracingAddress NS_SWIFT_NAME(tracingAddress());
	-(size_t)getBuildSize NS_SWIFT_NAME(buildSize());
	-(size_t)getUpdateSize NS_SWIFT_NAME(updateSize());
	-(size_t)getMemory NS_SWIFT_NAME(memory());
@end

/// Tellusim::D3D12Tracing
NS_SWIFT_NAME(D3D12Tracing)
TS_CAPI @interface TSD3D12Tracing : TSTracing
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D12Tracing* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D12Tracing&)p;
		-(Tellusim::D3D12Tracing* _Nonnull)pointer;
		-(Tellusim::D3D12Tracing&)ref;
	#endif
	-(id _Nonnull)initTracing: (TSTracing* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTracing* _Nonnull)getTracing;
	-(BOOL)equalPtr: (const TSD3D12Tracing* _Nonnull)p;
	-(TSD3D12Tracing* _Nonnull)copyPtr;
	-(TSD3D12Tracing* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D12Tracing* _Nonnull)null;
	-(void* _Nonnull)getGeometryDesc: (uint32_t)index NS_SWIFT_NAME(geometryDesc(_:));
	-(void* _Nonnull)getGeometryDesc_: (uint32_t)index NS_SWIFT_NAME(geometryDesc(index:));
	-(void* _Nonnull)getBuildInputs NS_SWIFT_NAME(buildInputs());
	-(void* _Nonnull)getPrebuildInfo NS_SWIFT_NAME(prebuildInfo());
	-(void* _Nonnull)getBuildDesc NS_SWIFT_NAME(buildDesc());
	-(TSBuffer* _Nonnull)getTracingBuffer NS_SWIFT_NAME(tracingBuffer());
	-(size_t)getShaderResourceView NS_SWIFT_NAME(shaderResourceView());
@end

/// Tellusim::MTLTracing
NS_SWIFT_NAME(MTLTracing)
TS_CAPI @interface TSMTLTracing : TSTracing
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MTLTracing* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MTLTracing&)p;
		-(Tellusim::MTLTracing* _Nonnull)pointer;
		-(Tellusim::MTLTracing&)ref;
	#endif
	-(id _Nonnull)initTracing: (TSTracing* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTracing* _Nonnull)getTracing;
	-(BOOL)equalPtr: (const TSMTLTracing* _Nonnull)p;
	-(TSMTLTracing* _Nonnull)copyPtr;
	-(TSMTLTracing* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMTLTracing* _Nonnull)null;
	-(void* _Nonnull)getGeometryDesc: (uint32_t)index NS_SWIFT_NAME(geometryDesc(_:));
	-(void* _Nonnull)getGeometryDesc_: (uint32_t)index NS_SWIFT_NAME(geometryDesc(index:));
	-(void* _Nonnull)getPrimitiveDesc NS_SWIFT_NAME(primitiveDesc());
	-(void* _Nonnull)getInstanceDesc NS_SWIFT_NAME(instanceDesc());
	-(void* _Nonnull)getAccelerationStructure NS_SWIFT_NAME(accelerationStructure());
@end

/// Tellusim::VKTracing
NS_SWIFT_NAME(VKTracing)
TS_CAPI @interface TSVKTracing : TSTracing
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::VKTracing* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::VKTracing&)p;
		-(Tellusim::VKTracing* _Nonnull)pointer;
		-(Tellusim::VKTracing&)ref;
	#endif
	-(id _Nonnull)initTracing: (TSTracing* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTracing* _Nonnull)getTracing;
	-(BOOL)equalPtr: (const TSVKTracing* _Nonnull)p;
	-(TSVKTracing* _Nonnull)copyPtr;
	-(TSVKTracing* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSVKTracing* _Nonnull)null;
	-(void* _Nonnull)getBuildGeometryInfo NS_SWIFT_NAME(buildGeometryInfo());
	-(void* _Nonnull)getBuildSizeInfo NS_SWIFT_NAME(buildSizeInfo());
	-(TSBuffer* _Nonnull)getTracingBuffer NS_SWIFT_NAME(tracingBuffer());
	-(VkAccelerationStructureKHR _Nullable)getAccelerationStructure NS_SWIFT_NAME(accelerationStructure());
@end

/// Tellusim::FUTracing
NS_SWIFT_NAME(FUTracing)
TS_CAPI @interface TSFUTracing : TSTracing
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size NS_SWIFT_NAME(init(tracings:tracings_size:));
	-(id _Nonnull)init_3: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size owner: (BOOL)owner NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_3_: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size owner: (BOOL)owner NS_SWIFT_NAME(init(tracings:tracings_size:owner:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::FUTracing* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::FUTracing&)p;
		-(Tellusim::FUTracing* _Nonnull)pointer;
		-(Tellusim::FUTracing&)ref;
	#endif
	-(id _Nonnull)initTracing: (TSTracing* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTracing* _Nonnull)getTracing;
	-(BOOL)equalPtr: (const TSFUTracing* _Nonnull)p;
	-(TSFUTracing* _Nonnull)copyPtr;
	-(TSFUTracing* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFUTracing* _Nonnull)null;
	-(void)setMask: (uint32_t)mask NS_SWIFT_NAME(setMask(_:));
	-(void)setMask_: (uint32_t)mask NS_SWIFT_NAME(setMask(mask:));
	-(uint32_t)getMask NS_SWIFT_NAME(mask());
	-(uint32_t)getNumTracings NS_SWIFT_NAME(numTracings());
	-(const TSTracing* _Nonnull)getTracing: (uint32_t)index NS_SWIFT_NAME(tracing(_:));
	-(const TSTracing* _Nonnull)getTracing_: (uint32_t)index NS_SWIFT_NAME(tracing(index:));
@end

/// Tellusim::Target
NS_SWIFT_NAME(Target)
TS_CAPI @interface TSTarget : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Target* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Target&)p;
		-(Tellusim::Target* _Nonnull)pointer;
		-(Tellusim::Target&)ref;
	#endif
	-(BOOL)equalPtr: (const TSTarget* _Nonnull)p;
	-(TSTarget* _Nonnull)copyPtr;
	-(TSTarget* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSTarget* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(BOOL)begin: (TSFence* _Nonnull)fence NS_SWIFT_NAME(begin(_:));
	-(BOOL)begin_: (TSFence* _Nonnull)fence NS_SWIFT_NAME(begin(fence:));
	-(BOOL)begin_1 NS_SWIFT_NAME(begin());
	-(void)end: (TSFence* _Nonnull)fence NS_SWIFT_NAME(end(_:));
	-(void)end_: (TSFence* _Nonnull)fence NS_SWIFT_NAME(end(fence:));
	-(void)end_1 NS_SWIFT_NAME(end());
	-(void)swap: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(swap(_:));
	-(void)swap_: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(swap(surface:));
	-(BOOL)isEnabled;
	-(TS_Format)getColorFormat NS_SWIFT_NAME(colorFormat());
	-(TS_Format)getColorFormat_1: (uint32_t)index NS_SWIFT_NAME(colorFormat(_:));
	-(TS_Format)getColorFormat_1_: (uint32_t)index NS_SWIFT_NAME(colorFormat(index:));
	-(TS_Format)getDepthFormat NS_SWIFT_NAME(depthFormat());
	-(uint32_t)getMultisample NS_SWIFT_NAME(multisample());
	-(BOOL)hasMultisample;
	-(BOOL)isFlipped;
	-(BOOL)isAtomic;
	-(uint32_t)getWidth NS_SWIFT_NAME(width());
	-(uint32_t)getHeight NS_SWIFT_NAME(height());
	-(uint32_t)getDepth NS_SWIFT_NAME(depth());
	-(uint32_t)getFaces NS_SWIFT_NAME(faces());
	-(uint32_t)getLayers NS_SWIFT_NAME(layers());
	-(uint32_t)getMipmaps NS_SWIFT_NAME(mipmaps());
	-(void)setClearColor: (TSColor)color NS_SWIFT_NAME(setClearColor(_:));
	-(void)setClearColor_: (TSColor)color NS_SWIFT_NAME(setClearColor(color:));
	-(void)setClearColor_1: (uint32_t)index color: (TSColor)color NS_SWIFT_NAME(setClearColor(_:_:));
	-(void)setClearColor_1_: (uint32_t)index color: (TSColor)color NS_SWIFT_NAME(setClearColor(index:color:));
	-(void)setClearColor_2: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a NS_SWIFT_NAME(setClearColor(_:_:_:_:));
	-(void)setClearColor_2_: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a NS_SWIFT_NAME(setClearColor(r:g:b:a:));
	-(void)setClearColor_3: (uint32_t)index r: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a NS_SWIFT_NAME(setClearColor(_:_:_:_:_:));
	-(void)setClearColor_3_: (uint32_t)index r: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a NS_SWIFT_NAME(setClearColor(index:r:g:b:a:));
	-(void)setColorTexture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setColorTexture(_:));
	-(void)setColorTexture_: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setColorTexture(texture:));
	-(void)setColorTexture_1: (TSTexture* _Nonnull)texture op: (TS_TargetOperation)op NS_SWIFT_NAME(setColorTexture(_:_:));
	-(void)setColorTexture_1_: (TSTexture* _Nonnull)texture op: (TS_TargetOperation)op NS_SWIFT_NAME(setColorTexture(texture:op:));
	-(void)setColorTexture_2: (TSTexture* _Nonnull)texture op: (TS_TargetOperation)op slice: (TSSlice)slice NS_SWIFT_NAME(setColorTexture(_:_:_:));
	-(void)setColorTexture_2_: (TSTexture* _Nonnull)texture op: (TS_TargetOperation)op slice: (TSSlice)slice NS_SWIFT_NAME(setColorTexture(texture:op:slice:));
	-(void)setColorTexture_3: (uint32_t)index texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setColorTexture(_:_:));
	-(void)setColorTexture_3_: (uint32_t)index texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setColorTexture(index:texture:));
	-(void)setColorTexture_4: (uint32_t)index texture: (TSTexture* _Nonnull)texture op: (TS_TargetOperation)op NS_SWIFT_NAME(setColorTexture(_:_:_:));
	-(void)setColorTexture_4_: (uint32_t)index texture: (TSTexture* _Nonnull)texture op: (TS_TargetOperation)op NS_SWIFT_NAME(setColorTexture(index:texture:op:));
	-(void)setColorTexture_5: (uint32_t)index texture: (TSTexture* _Nonnull)texture op: (TS_TargetOperation)op slice: (TSSlice)slice NS_SWIFT_NAME(setColorTexture(_:_:_:_:));
	-(void)setColorTexture_5_: (uint32_t)index texture: (TSTexture* _Nonnull)texture op: (TS_TargetOperation)op slice: (TSSlice)slice NS_SWIFT_NAME(setColorTexture(index:texture:op:slice:));
	-(void)setColorResolve: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setColorResolve(_:));
	-(void)setColorResolve_: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setColorResolve(texture:));
	-(void)setColorResolve_1: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(setColorResolve(_:_:));
	-(void)setColorResolve_1_: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(setColorResolve(texture:slice:));
	-(void)setColorResolve_2: (uint32_t)index texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setColorResolve(_:_:));
	-(void)setColorResolve_2_: (uint32_t)index texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setColorResolve(index:texture:));
	-(void)setColorResolve_3: (uint32_t)index texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(setColorResolve(_:_:_:));
	-(void)setColorResolve_3_: (uint32_t)index texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(setColorResolve(index:texture:slice:));
	-(uint32_t)getNumTargets NS_SWIFT_NAME(numTargets());
	-(TSColor)getClearColor NS_SWIFT_NAME(clearColor());
	-(TSColor)getClearColor_1: (uint32_t)index NS_SWIFT_NAME(clearColor(_:));
	-(TSColor)getClearColor_1_: (uint32_t)index NS_SWIFT_NAME(clearColor(index:));
	-(TS_TargetOperation)getColorOp NS_SWIFT_NAME(colorOp());
	-(TS_TargetOperation)getColorOp_1: (uint32_t)index NS_SWIFT_NAME(colorOp(_:));
	-(TS_TargetOperation)getColorOp_1_: (uint32_t)index NS_SWIFT_NAME(colorOp(index:));
	-(TSTexture* _Nonnull)getColorTexture: (uint32_t)index NS_SWIFT_NAME(colorTexture(_:));
	-(TSTexture* _Nonnull)getColorTexture_: (uint32_t)index NS_SWIFT_NAME(colorTexture(index:));
	-(TSTexture* _Nonnull)getColorResolve: (uint32_t)index NS_SWIFT_NAME(colorResolve(_:));
	-(TSTexture* _Nonnull)getColorResolve_: (uint32_t)index NS_SWIFT_NAME(colorResolve(index:));
	-(TSSlice)getColorTextureSlice: (uint32_t)index NS_SWIFT_NAME(colorTextureSlice(_:));
	-(TSSlice)getColorTextureSlice_: (uint32_t)index NS_SWIFT_NAME(colorTextureSlice(index:));
	-(TSSlice)getColorResolveSlice: (uint32_t)index NS_SWIFT_NAME(colorResolveSlice(_:));
	-(TSSlice)getColorResolveSlice_: (uint32_t)index NS_SWIFT_NAME(colorResolveSlice(index:));
	-(void)setClearDepth: (float32_t)depth NS_SWIFT_NAME(setClearDepth(_:));
	-(void)setClearDepth_: (float32_t)depth NS_SWIFT_NAME(setClearDepth(depth:));
	-(void)setClearDepth_1: (float32_t)depth stencil: (uint32_t)stencil NS_SWIFT_NAME(setClearDepth(_:_:));
	-(void)setClearDepth_1_: (float32_t)depth stencil: (uint32_t)stencil NS_SWIFT_NAME(setClearDepth(depth:stencil:));
	-(void)setDepthTexture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setDepthTexture(_:));
	-(void)setDepthTexture_: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setDepthTexture(texture:));
	-(void)setDepthTexture_1: (TSTexture* _Nonnull)texture op: (TS_TargetOperation)op NS_SWIFT_NAME(setDepthTexture(_:_:));
	-(void)setDepthTexture_1_: (TSTexture* _Nonnull)texture op: (TS_TargetOperation)op NS_SWIFT_NAME(setDepthTexture(texture:op:));
	-(void)setDepthTexture_2: (TSTexture* _Nonnull)texture op: (TS_TargetOperation)op slice: (TSSlice)slice NS_SWIFT_NAME(setDepthTexture(_:_:_:));
	-(void)setDepthTexture_2_: (TSTexture* _Nonnull)texture op: (TS_TargetOperation)op slice: (TSSlice)slice NS_SWIFT_NAME(setDepthTexture(texture:op:slice:));
	-(void)setDepthResolve: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setDepthResolve(_:));
	-(void)setDepthResolve_: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setDepthResolve(texture:));
	-(void)setDepthResolve_1: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(setDepthResolve(_:_:));
	-(void)setDepthResolve_1_: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(setDepthResolve(texture:slice:));
	-(float32_t)getClearDepth NS_SWIFT_NAME(clearDepth());
	-(uint32_t)getClearStencil NS_SWIFT_NAME(clearStencil());
	-(TS_TargetOperation)getDepthOp NS_SWIFT_NAME(depthOp());
	-(TSTexture* _Nonnull)getDepthTexture NS_SWIFT_NAME(depthTexture());
	-(TSTexture* _Nonnull)getDepthResolve NS_SWIFT_NAME(depthResolve());
	-(TSSlice)getDepthTextureSlice NS_SWIFT_NAME(depthTextureSlice());
	-(TSSlice)getDepthResolveSlice NS_SWIFT_NAME(depthResolveSlice());
@end

/// Tellusim::D3D12Target
NS_SWIFT_NAME(D3D12Target)
TS_CAPI @interface TSD3D12Target : TSTarget
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D12Target* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D12Target&)p;
		-(Tellusim::D3D12Target* _Nonnull)pointer;
		-(Tellusim::D3D12Target&)ref;
	#endif
	-(id _Nonnull)initTarget: (TSTarget* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTarget* _Nonnull)getTarget;
	-(BOOL)equalPtr: (const TSD3D12Target* _Nonnull)p;
	-(TSD3D12Target* _Nonnull)copyPtr;
	-(TSD3D12Target* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D12Target* _Nonnull)null;
	-(size_t* _Nonnull)getRenderTargetViews NS_SWIFT_NAME(renderTargetViews());
	-(size_t)getDepthStencilView NS_SWIFT_NAME(depthStencilView());
@end

/// Tellusim::D3D11Target
NS_SWIFT_NAME(D3D11Target)
TS_CAPI @interface TSD3D11Target : TSTarget
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D11Target* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D11Target&)p;
		-(Tellusim::D3D11Target* _Nonnull)pointer;
		-(Tellusim::D3D11Target&)ref;
	#endif
	-(id _Nonnull)initTarget: (TSTarget* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTarget* _Nonnull)getTarget;
	-(BOOL)equalPtr: (const TSD3D11Target* _Nonnull)p;
	-(TSD3D11Target* _Nonnull)copyPtr;
	-(TSD3D11Target* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D11Target* _Nonnull)null;
	-(ID3D11RenderTargetView* _Nonnull * _Nullable)getRenderTargetViews NS_SWIFT_NAME(renderTargetViews());
	-(ID3D11DepthStencilView* _Nonnull)getDepthStencilView NS_SWIFT_NAME(depthStencilView());
@end

/// Tellusim::MTLTarget
NS_SWIFT_NAME(MTLTarget)
TS_CAPI @interface TSMTLTarget : TSTarget
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MTLTarget* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MTLTarget&)p;
		-(Tellusim::MTLTarget* _Nonnull)pointer;
		-(Tellusim::MTLTarget&)ref;
	#endif
	-(id _Nonnull)initTarget: (TSTarget* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTarget* _Nonnull)getTarget;
	-(BOOL)equalPtr: (const TSMTLTarget* _Nonnull)p;
	-(TSMTLTarget* _Nonnull)copyPtr;
	-(TSMTLTarget* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMTLTarget* _Nonnull)null;
	-(void* _Nonnull)getDescriptor NS_SWIFT_NAME(descriptor());
@end

/// Tellusim::VKTarget
NS_SWIFT_NAME(VKTarget)
TS_CAPI @interface TSVKTarget : TSTarget
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::VKTarget* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::VKTarget&)p;
		-(Tellusim::VKTarget* _Nonnull)pointer;
		-(Tellusim::VKTarget&)ref;
	#endif
	-(id _Nonnull)initTarget: (TSTarget* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTarget* _Nonnull)getTarget;
	-(BOOL)equalPtr: (const TSVKTarget* _Nonnull)p;
	-(TSVKTarget* _Nonnull)copyPtr;
	-(TSVKTarget* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSVKTarget* _Nonnull)null;
	-(VkRenderPass _Nullable)getRenderPass NS_SWIFT_NAME(renderPass());
	-(VkFramebuffer _Nullable)getFramebuffer NS_SWIFT_NAME(framebuffer());
@end

/// Tellusim::GLTarget
NS_SWIFT_NAME(GLTarget)
TS_CAPI @interface TSGLTarget : TSTarget
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::GLTarget* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::GLTarget&)p;
		-(Tellusim::GLTarget* _Nonnull)pointer;
		-(Tellusim::GLTarget&)ref;
	#endif
	-(id _Nonnull)initTarget: (TSTarget* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTarget* _Nonnull)getTarget;
	-(BOOL)equalPtr: (const TSGLTarget* _Nonnull)p;
	-(TSGLTarget* _Nonnull)copyPtr;
	-(TSGLTarget* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSGLTarget* _Nonnull)null;
	-(uint32_t)getFramebufferID NS_SWIFT_NAME(framebufferID());
@end

/// Tellusim::GLESTarget
NS_SWIFT_NAME(GLESTarget)
TS_CAPI @interface TSGLESTarget : TSTarget
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::GLESTarget* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::GLESTarget&)p;
		-(Tellusim::GLESTarget* _Nonnull)pointer;
		-(Tellusim::GLESTarget&)ref;
	#endif
	-(id _Nonnull)initTarget: (TSTarget* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTarget* _Nonnull)getTarget;
	-(BOOL)equalPtr: (const TSGLESTarget* _Nonnull)p;
	-(TSGLESTarget* _Nonnull)copyPtr;
	-(TSGLESTarget* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSGLESTarget* _Nonnull)null;
	-(uint32_t)getFramebufferID NS_SWIFT_NAME(framebufferID());
@end

/// Tellusim::FUTarget
NS_SWIFT_NAME(FUTarget)
TS_CAPI @interface TSFUTarget : TSTarget
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSTarget* _Nonnull * _Nullable)targets targets_size: (uint32_t)targets_size NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TSTarget* _Nonnull * _Nullable)targets targets_size: (uint32_t)targets_size NS_SWIFT_NAME(init(targets:targets_size:));
	-(id _Nonnull)init_3: (TSTarget* _Nonnull * _Nullable)targets targets_size: (uint32_t)targets_size owner: (BOOL)owner NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_3_: (TSTarget* _Nonnull * _Nullable)targets targets_size: (uint32_t)targets_size owner: (BOOL)owner NS_SWIFT_NAME(init(targets:targets_size:owner:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::FUTarget* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::FUTarget&)p;
		-(Tellusim::FUTarget* _Nonnull)pointer;
		-(Tellusim::FUTarget&)ref;
	#endif
	-(id _Nonnull)initTarget: (TSTarget* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTarget* _Nonnull)getTarget;
	-(BOOL)equalPtr: (const TSFUTarget* _Nonnull)p;
	-(TSFUTarget* _Nonnull)copyPtr;
	-(TSFUTarget* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFUTarget* _Nonnull)null;
	-(void)setMask: (uint32_t)mask NS_SWIFT_NAME(setMask(_:));
	-(void)setMask_: (uint32_t)mask NS_SWIFT_NAME(setMask(mask:));
	-(uint32_t)getMask NS_SWIFT_NAME(mask());
	-(uint32_t)getNumTargets_1 NS_SWIFT_NAME(numTargets());
	-(const TSTarget* _Nonnull)getTarget: (uint32_t)index NS_SWIFT_NAME(target(_:));
	-(const TSTarget* _Nonnull)getTarget_: (uint32_t)index NS_SWIFT_NAME(target(index:));
@end

/// Tellusim::Device
NS_SWIFT_NAME(Device)
TS_CAPI @interface TSDevice : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	-(id _Nonnull)init_1: (TSContext* _Nonnull)context NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (TSContext* _Nonnull)context NS_SWIFT_NAME(init(context:));
	-(id _Nonnull)init_2: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(init(surface:));
	-(id _Nonnull)init_3: (TSWindow* _Nonnull)window NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_3_: (TSWindow* _Nonnull)window NS_SWIFT_NAME(init(window:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Device* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Device&)p;
		-(Tellusim::Device* _Nonnull)pointer;
		-(Tellusim::Device&)ref;
	#endif
	-(BOOL)equalPtr: (const TSDevice* _Nonnull)p;
	-(TSDevice* _Nonnull)copyPtr;
	-(TSDevice* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSDevice* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(NSString* _Nonnull)getVendor NS_SWIFT_NAME(vendor());
	-(NSString* _Nonnull)getVersion NS_SWIFT_NAME(version());
	-(TSDeviceFeatures)getFeatures NS_SWIFT_NAME(features());
	-(BOOL)hasQuery: (TS_QueryType)type NS_SWIFT_NAME(hasQuery(_:));
	-(BOOL)hasQuery_: (TS_QueryType)type NS_SWIFT_NAME(hasQuery(type:));
	-(BOOL)hasShader: (TS_ShaderType)type NS_SWIFT_NAME(hasShader(_:));
	-(BOOL)hasShader_: (TS_ShaderType)type NS_SWIFT_NAME(hasShader(type:));
	-(BOOL)hasTarget: (TS_Format)format NS_SWIFT_NAME(hasTarget(_:));
	-(BOOL)hasTarget_: (TS_Format)format NS_SWIFT_NAME(hasTarget(format:));
	-(BOOL)hasTexture: (TS_Format)format NS_SWIFT_NAME(hasTexture(_:));
	-(BOOL)hasTexture_: (TS_Format)format NS_SWIFT_NAME(hasTexture(format:));
	-(BOOL)hasSurface: (TS_Format)format NS_SWIFT_NAME(hasSurface(_:));
	-(BOOL)hasSurface_: (TS_Format)format NS_SWIFT_NAME(hasSurface(format:));
	-(TSDevice* _Nonnull)createDevice: (uint32_t)index NS_SWIFT_NAME(createDevice(_:));
	-(TSDevice* _Nonnull)createDevice_: (uint32_t)index NS_SWIFT_NAME(createDevice(index:));
	-(TSDevice* _Nonnull)createDevice_1: (uint32_t)index frames: (uint32_t)frames NS_SWIFT_NAME(createDevice(_:_:));
	-(TSDevice* _Nonnull)createDevice_1_: (uint32_t)index frames: (uint32_t)frames NS_SWIFT_NAME(createDevice(index:frames:));
	-(TSDevice* _Nonnull)createCommandDevice NS_SWIFT_NAME(createCommandDevice());
	-(TSDevice* _Nonnull)createCommandDevice_1: (uint32_t)frames NS_SWIFT_NAME(createCommandDevice(_:));
	-(TSDevice* _Nonnull)createCommandDevice_1_: (uint32_t)frames NS_SWIFT_NAME(createCommandDevice(frames:));
	-(TSDevice* _Nonnull)createComputeDevice NS_SWIFT_NAME(createComputeDevice());
	-(TSDevice* _Nonnull)createComputeDevice_1: (uint32_t)frames NS_SWIFT_NAME(createComputeDevice(_:));
	-(TSDevice* _Nonnull)createComputeDevice_1_: (uint32_t)frames NS_SWIFT_NAME(createComputeDevice(frames:));
	-(TSDevice* _Nonnull)createCopyDevice NS_SWIFT_NAME(createCopyDevice());
	-(TSDevice* _Nonnull)createCopyDevice_1: (uint32_t)frames NS_SWIFT_NAME(createCopyDevice(_:));
	-(TSDevice* _Nonnull)createCopyDevice_1_: (uint32_t)frames NS_SWIFT_NAME(createCopyDevice(frames:));
	-(TSQuery* _Nonnull)createQuery;
	-(TSQuery* _Nonnull)createQuery_1: (TS_QueryType)type NS_SWIFT_NAME(createQuery(_:));
	-(TSQuery* _Nonnull)createQuery_1_: (TS_QueryType)type NS_SWIFT_NAME(createQuery(type:));
	-(TSFence* _Nonnull)createFence;
	-(TSFence* _Nonnull)createFence_1: (TSFence* _Nonnull)shared NS_SWIFT_NAME(createFence(_:));
	-(TSFence* _Nonnull)createFence_1_: (TSFence* _Nonnull)shared NS_SWIFT_NAME(createFence(shared:));
	-(TSFence* _Nonnull)createFence_2: (TS_FenceFlags)flags NS_SWIFT_NAME(createFence(_:));
	-(TSFence* _Nonnull)createFence_2_: (TS_FenceFlags)flags NS_SWIFT_NAME(createFence(flags:));
	-(TSBuffer* _Nonnull)createBuffer;
	-(TSBuffer* _Nonnull)createBuffer_1: (TSBuffer* _Nonnull)shared NS_SWIFT_NAME(createBuffer(_:));
	-(TSBuffer* _Nonnull)createBuffer_1_: (TSBuffer* _Nonnull)shared NS_SWIFT_NAME(createBuffer(shared:));
	-(TSBuffer* _Nonnull)createBuffer_2: (TS_BufferFlags)flags size: (size_t)size NS_SWIFT_NAME(createBuffer(_:_:));
	-(TSBuffer* _Nonnull)createBuffer_2_: (TS_BufferFlags)flags size: (size_t)size NS_SWIFT_NAME(createBuffer(flags:size:));
	-(TSBuffer* _Nonnull)createBuffer_3: (TS_BufferFlags)flags size: (size_t)size format: (TS_Format)format NS_SWIFT_NAME(createBuffer(_:_:_:));
	-(TSBuffer* _Nonnull)createBuffer_3_: (TS_BufferFlags)flags size: (size_t)size format: (TS_Format)format NS_SWIFT_NAME(createBuffer(flags:size:format:));
	-(TSBuffer* _Nonnull)createBuffer_4: (TS_BufferFlags)flags src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(createBuffer(_:_:_:));
	-(TSBuffer* _Nonnull)createBuffer_4_: (TS_BufferFlags)flags src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(createBuffer(flags:src:size:));
	-(TSBuffer* _Nonnull)createBuffer_5: (TS_BufferFlags)flags src: (const void* _Nonnull)src size: (size_t)size format: (TS_Format)format NS_SWIFT_NAME(createBuffer(_:_:_:_:));
	-(TSBuffer* _Nonnull)createBuffer_5_: (TS_BufferFlags)flags src: (const void* _Nonnull)src size: (size_t)size format: (TS_Format)format NS_SWIFT_NAME(createBuffer(flags:src:size:format:));
	-(TSSampler* _Nonnull)createSampler;
	-(TSSampler* _Nonnull)createSampler_1: (const TSSampler* _Nonnull)sampler NS_SWIFT_NAME(createSampler(_:));
	-(TSSampler* _Nonnull)createSampler_1_: (const TSSampler* _Nonnull)sampler NS_SWIFT_NAME(createSampler(sampler:));
	-(TSSampler* _Nonnull)createSampler_2: (TS_SamplerFilter)filter NS_SWIFT_NAME(createSampler(_:));
	-(TSSampler* _Nonnull)createSampler_2_: (TS_SamplerFilter)filter NS_SWIFT_NAME(createSampler(filter:));
	-(TSSampler* _Nonnull)createSampler_3: (TS_SamplerFilter)filter mode: (TS_SamplerWrapMode)mode NS_SWIFT_NAME(createSampler(_:_:));
	-(TSSampler* _Nonnull)createSampler_3_: (TS_SamplerFilter)filter mode: (TS_SamplerWrapMode)mode NS_SWIFT_NAME(createSampler(filter:mode:));
	-(TSSampler* _Nonnull)createSampler_4: (TS_SamplerFilter)filter mode: (TS_SamplerWrapMode)mode anisotropy: (uint32_t)anisotropy NS_SWIFT_NAME(createSampler(_:_:_:));
	-(TSSampler* _Nonnull)createSampler_4_: (TS_SamplerFilter)filter mode: (TS_SamplerWrapMode)mode anisotropy: (uint32_t)anisotropy NS_SWIFT_NAME(createSampler(filter:mode:anisotropy:));
	-(TSTexture* _Nonnull)createTexture;
	-(TSTexture* _Nonnull)createTexture_1: (TSTexture* _Nonnull)shared NS_SWIFT_NAME(createTexture(_:));
	-(TSTexture* _Nonnull)createTexture_1_: (TSTexture* _Nonnull)shared NS_SWIFT_NAME(createTexture(shared:));
	-(TSTexture* _Nonnull)createTexture_2: (TS_TextureType)type format: (TS_Format)format size: (TSSize)size layers: (uint32_t)layers NS_SWIFT_NAME(createTexture(_:_:_:_:));
	-(TSTexture* _Nonnull)createTexture_2_: (TS_TextureType)type format: (TS_Format)format size: (TSSize)size layers: (uint32_t)layers NS_SWIFT_NAME(createTexture(type:format:size:layers:));
	-(TSTexture* _Nonnull)createTexture_3: (TS_TextureType)type format: (TS_Format)format size: (TSSize)size layers: (uint32_t)layers flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTexture(_:_:_:_:_:));
	-(TSTexture* _Nonnull)createTexture_3_: (TS_TextureType)type format: (TS_Format)format size: (TSSize)size layers: (uint32_t)layers flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTexture(type:format:size:layers:flags:));
	-(TSTexture* _Nonnull)createTexture_4: (TS_TextureType)type format: (TS_Format)format size: (TSSize)size NS_SWIFT_NAME(createTexture(_:_:_:));
	-(TSTexture* _Nonnull)createTexture_4_: (TS_TextureType)type format: (TS_Format)format size: (TSSize)size NS_SWIFT_NAME(createTexture(type:format:size:));
	-(TSTexture* _Nonnull)createTexture_5: (TS_TextureType)type format: (TS_Format)format size: (TSSize)size flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTexture(_:_:_:_:));
	-(TSTexture* _Nonnull)createTexture_5_: (TS_TextureType)type format: (TS_Format)format size: (TSSize)size flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTexture(type:format:size:flags:));
	-(TSTexture* _Nonnull)createTexture_6: (const TSImage* _Nonnull)image NS_SWIFT_NAME(createTexture(_:));
	-(TSTexture* _Nonnull)createTexture_6_: (const TSImage* _Nonnull)image NS_SWIFT_NAME(createTexture(image:));
	-(TSTexture* _Nonnull)createTexture_7: (const TSImage* _Nonnull)image flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTexture(_:_:));
	-(TSTexture* _Nonnull)createTexture_7_: (const TSImage* _Nonnull)image flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTexture(image:flags:));
	-(TSTexture* _Nonnull)createTexture_8: (const TSImage* _Nonnull)image flags: (TS_TextureFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createTexture(_:_:_:));
	-(TSTexture* _Nonnull)createTexture_8_: (const TSImage* _Nonnull)image flags: (TS_TextureFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(createTexture(image:flags:async:));
	-(TSTexture* _Nonnull)createTexture2D: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(createTexture2D(_:_:));
	-(TSTexture* _Nonnull)createTexture2D_: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(createTexture2D(format:size:));
	-(TSTexture* _Nonnull)createTexture2D_1: (TS_Format)format size: (uint32_t)size flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTexture2D(_:_:_:));
	-(TSTexture* _Nonnull)createTexture2D_1_: (TS_Format)format size: (uint32_t)size flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTexture2D(format:size:flags:));
	-(TSTexture* _Nonnull)createTexture3D: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(createTexture3D(_:_:));
	-(TSTexture* _Nonnull)createTexture3D_: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(createTexture3D(format:size:));
	-(TSTexture* _Nonnull)createTexture3D_1: (TS_Format)format size: (uint32_t)size flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTexture3D(_:_:_:));
	-(TSTexture* _Nonnull)createTexture3D_1_: (TS_Format)format size: (uint32_t)size flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTexture3D(format:size:flags:));
	-(TSTexture* _Nonnull)createTextureCube: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(createTextureCube(_:_:));
	-(TSTexture* _Nonnull)createTextureCube_: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(createTextureCube(format:size:));
	-(TSTexture* _Nonnull)createTextureCube_1: (TS_Format)format size: (uint32_t)size flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTextureCube(_:_:_:));
	-(TSTexture* _Nonnull)createTextureCube_1_: (TS_Format)format size: (uint32_t)size flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTextureCube(format:size:flags:));
	-(TSTexture* _Nonnull)createTexture2D_2: (TS_Format)format width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(createTexture2D(_:_:_:));
	-(TSTexture* _Nonnull)createTexture2D_2_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(createTexture2D(format:width:height:));
	-(TSTexture* _Nonnull)createTexture2D_3: (TS_Format)format width: (uint32_t)width height: (uint32_t)height flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTexture2D(_:_:_:_:));
	-(TSTexture* _Nonnull)createTexture2D_3_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTexture2D(format:width:height:flags:));
	-(TSTexture* _Nonnull)createTexture3D_2: (TS_Format)format width: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth NS_SWIFT_NAME(createTexture3D(_:_:_:_:));
	-(TSTexture* _Nonnull)createTexture3D_2_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth NS_SWIFT_NAME(createTexture3D(format:width:height:depth:));
	-(TSTexture* _Nonnull)createTexture3D_3: (TS_Format)format width: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTexture3D(_:_:_:_:_:));
	-(TSTexture* _Nonnull)createTexture3D_3_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTexture3D(format:width:height:depth:flags:));
	-(TSTexture* _Nonnull)createTexture2D_4: (TS_Format)format width: (uint32_t)width height: (uint32_t)height layers: (uint32_t)layers NS_SWIFT_NAME(createTexture2D(_:_:_:_:));
	-(TSTexture* _Nonnull)createTexture2D_4_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height layers: (uint32_t)layers NS_SWIFT_NAME(createTexture2D(format:width:height:layers:));
	-(TSTexture* _Nonnull)createTexture2D_5: (TS_Format)format width: (uint32_t)width height: (uint32_t)height layers: (uint32_t)layers flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTexture2D(_:_:_:_:_:));
	-(TSTexture* _Nonnull)createTexture2D_5_: (TS_Format)format width: (uint32_t)width height: (uint32_t)height layers: (uint32_t)layers flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTexture2D(format:width:height:layers:flags:));
	-(TSTexture* _Nonnull)createTextureCube_2: (TS_Format)format size: (uint32_t)size layers: (uint32_t)layers NS_SWIFT_NAME(createTextureCube(_:_:_:));
	-(TSTexture* _Nonnull)createTextureCube_2_: (TS_Format)format size: (uint32_t)size layers: (uint32_t)layers NS_SWIFT_NAME(createTextureCube(format:size:layers:));
	-(TSTexture* _Nonnull)createTextureCube_3: (TS_Format)format size: (uint32_t)size layers: (uint32_t)layers flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTextureCube(_:_:_:_:));
	-(TSTexture* _Nonnull)createTextureCube_3_: (TS_Format)format size: (uint32_t)size layers: (uint32_t)layers flags: (TS_TextureFlags)flags NS_SWIFT_NAME(createTextureCube(format:size:layers:flags:));
	-(TSTexture* _Nonnull)loadTexture: (const char* _Nonnull)name NS_SWIFT_NAME(loadTexture(_:));
	-(TSTexture* _Nonnull)loadTexture_: (const char* _Nonnull)name NS_SWIFT_NAME(loadTexture(name:));
	-(TSTexture* _Nonnull)loadTexture_1: (const char* _Nonnull)name flags: (TS_TextureFlags)flags NS_SWIFT_NAME(loadTexture(_:_:));
	-(TSTexture* _Nonnull)loadTexture_1_: (const char* _Nonnull)name flags: (TS_TextureFlags)flags NS_SWIFT_NAME(loadTexture(name:flags:));
	-(TSTexture* _Nonnull)loadTexture_2: (const char* _Nonnull)name flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags NS_SWIFT_NAME(loadTexture(_:_:_:));
	-(TSTexture* _Nonnull)loadTexture_2_: (const char* _Nonnull)name flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags NS_SWIFT_NAME(loadTexture(name:flags:image_flags:));
	-(TSTexture* _Nonnull)loadTexture_3: (const char* _Nonnull)name flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags offset: (uint32_t)offset NS_SWIFT_NAME(loadTexture(_:_:_:_:));
	-(TSTexture* _Nonnull)loadTexture_3_: (const char* _Nonnull)name flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags offset: (uint32_t)offset NS_SWIFT_NAME(loadTexture(name:flags:image_flags:offset:));
	-(TSTexture* _Nonnull)loadTexture_4: (const char* _Nonnull)name flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(loadTexture(_:_:_:_:_:));
	-(TSTexture* _Nonnull)loadTexture_4_: (const char* _Nonnull)name flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(loadTexture(name:flags:image_flags:offset:async:));
	-(TSTexture* _Nonnull)loadTexture_5: (const TSString* _Nonnull)name NS_SWIFT_NAME(loadTexture(_:));
	-(TSTexture* _Nonnull)loadTexture_5_: (const TSString* _Nonnull)name NS_SWIFT_NAME(loadTexture(name:));
	-(TSTexture* _Nonnull)loadTexture_6: (const TSString* _Nonnull)name flags: (TS_TextureFlags)flags NS_SWIFT_NAME(loadTexture(_:_:));
	-(TSTexture* _Nonnull)loadTexture_6_: (const TSString* _Nonnull)name flags: (TS_TextureFlags)flags NS_SWIFT_NAME(loadTexture(name:flags:));
	-(TSTexture* _Nonnull)loadTexture_7: (const TSString* _Nonnull)name flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags NS_SWIFT_NAME(loadTexture(_:_:_:));
	-(TSTexture* _Nonnull)loadTexture_7_: (const TSString* _Nonnull)name flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags NS_SWIFT_NAME(loadTexture(name:flags:image_flags:));
	-(TSTexture* _Nonnull)loadTexture_8: (const TSString* _Nonnull)name flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags offset: (uint32_t)offset NS_SWIFT_NAME(loadTexture(_:_:_:_:));
	-(TSTexture* _Nonnull)loadTexture_8_: (const TSString* _Nonnull)name flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags offset: (uint32_t)offset NS_SWIFT_NAME(loadTexture(name:flags:image_flags:offset:));
	-(TSTexture* _Nonnull)loadTexture_9: (const TSString* _Nonnull)name flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(loadTexture(_:_:_:_:_:));
	-(TSTexture* _Nonnull)loadTexture_9_: (const TSString* _Nonnull)name flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(loadTexture(name:flags:image_flags:offset:async:));
	-(TSTexture* _Nonnull)loadTexture_10: (TSStream* _Nonnull)stream NS_SWIFT_NAME(loadTexture(_:));
	-(TSTexture* _Nonnull)loadTexture_10_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(loadTexture(stream:));
	-(TSTexture* _Nonnull)loadTexture_11: (TSStream* _Nonnull)stream flags: (TS_TextureFlags)flags NS_SWIFT_NAME(loadTexture(_:_:));
	-(TSTexture* _Nonnull)loadTexture_11_: (TSStream* _Nonnull)stream flags: (TS_TextureFlags)flags NS_SWIFT_NAME(loadTexture(stream:flags:));
	-(TSTexture* _Nonnull)loadTexture_12: (TSStream* _Nonnull)stream flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags NS_SWIFT_NAME(loadTexture(_:_:_:));
	-(TSTexture* _Nonnull)loadTexture_12_: (TSStream* _Nonnull)stream flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags NS_SWIFT_NAME(loadTexture(stream:flags:image_flags:));
	-(TSTexture* _Nonnull)loadTexture_13: (TSStream* _Nonnull)stream flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags offset: (uint32_t)offset NS_SWIFT_NAME(loadTexture(_:_:_:_:));
	-(TSTexture* _Nonnull)loadTexture_13_: (TSStream* _Nonnull)stream flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags offset: (uint32_t)offset NS_SWIFT_NAME(loadTexture(stream:flags:image_flags:offset:));
	-(TSTexture* _Nonnull)loadTexture_14: (TSStream* _Nonnull)stream flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(loadTexture(_:_:_:_:_:));
	-(TSTexture* _Nonnull)loadTexture_14_: (TSStream* _Nonnull)stream flags: (TS_TextureFlags)flags image_flags: (TS_ImageFlags)image_flags offset: (uint32_t)offset async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(loadTexture(stream:flags:image_flags:offset:async:));
	-(TSTracing* _Nonnull)createTracing;
	-(TSTracing* _Nonnull)createTracing_1: (const TSTracing* _Nonnull)tracing NS_SWIFT_NAME(createTracing(_:));
	-(TSTracing* _Nonnull)createTracing_1_: (const TSTracing* _Nonnull)tracing NS_SWIFT_NAME(createTracing(tracing:));
	-(TSTracing* _Nonnull)createTracing_2: (uint32_t)num_instances NS_SWIFT_NAME(createTracing(_:));
	-(TSTracing* _Nonnull)createTracing_2_: (uint32_t)num_instances NS_SWIFT_NAME(createTracing(num_instances:));
	-(TSTracing* _Nonnull)createTracing_3: (uint32_t)num_instances instance_buffer: (TSBuffer* _Nonnull)instance_buffer NS_SWIFT_NAME(createTracing(_:_:));
	-(TSTracing* _Nonnull)createTracing_3_: (uint32_t)num_instances instance_buffer: (TSBuffer* _Nonnull)instance_buffer NS_SWIFT_NAME(createTracing(num_instances:instance_buffer:));
	-(TSTracing* _Nonnull)createTracing_4: (uint32_t)num_instances instance_buffer: (TSBuffer* _Nonnull)instance_buffer instance_offset: (size_t)instance_offset NS_SWIFT_NAME(createTracing(_:_:_:));
	-(TSTracing* _Nonnull)createTracing_4_: (uint32_t)num_instances instance_buffer: (TSBuffer* _Nonnull)instance_buffer instance_offset: (size_t)instance_offset NS_SWIFT_NAME(createTracing(num_instances:instance_buffer:instance_offset:));
	-(TSTracing* _Nonnull)createTracing_5: (uint32_t)num_instances instance_buffer: (TSBuffer* _Nonnull)instance_buffer instance_offset: (size_t)instance_offset flags: (TS_TracingFlags)flags NS_SWIFT_NAME(createTracing(_:_:_:_:));
	-(TSTracing* _Nonnull)createTracing_5_: (uint32_t)num_instances instance_buffer: (TSBuffer* _Nonnull)instance_buffer instance_offset: (size_t)instance_offset flags: (TS_TracingFlags)flags NS_SWIFT_NAME(createTracing(num_instances:instance_buffer:instance_offset:flags:));
	-(TSTracing* _Nonnull)createTracing_6: (uint32_t)num_vertices vertex_format: (TS_Format)vertex_format vertex_stride: (size_t)vertex_stride num_indices: (uint32_t)num_indices index_format: (TS_Format)index_format NS_SWIFT_NAME(createTracing(_:_:_:_:_:));
	-(TSTracing* _Nonnull)createTracing_6_: (uint32_t)num_vertices vertex_format: (TS_Format)vertex_format vertex_stride: (size_t)vertex_stride num_indices: (uint32_t)num_indices index_format: (TS_Format)index_format NS_SWIFT_NAME(createTracing(num_vertices:vertex_format:vertex_stride:num_indices:index_format:));
	-(TSTracing* _Nonnull)createTracing_7: (uint32_t)num_vertices vertex_format: (TS_Format)vertex_format vertex_stride: (size_t)vertex_stride num_indices: (uint32_t)num_indices index_format: (TS_Format)index_format flags: (TS_TracingFlags)flags NS_SWIFT_NAME(createTracing(_:_:_:_:_:_:));
	-(TSTracing* _Nonnull)createTracing_7_: (uint32_t)num_vertices vertex_format: (TS_Format)vertex_format vertex_stride: (size_t)vertex_stride num_indices: (uint32_t)num_indices index_format: (TS_Format)index_format flags: (TS_TracingFlags)flags NS_SWIFT_NAME(createTracing(num_vertices:vertex_format:vertex_stride:num_indices:index_format:flags:));
	-(TSTracing* _Nonnull)createTracing_8: (uint32_t)num_bounds bound_stride: (size_t)bound_stride NS_SWIFT_NAME(createTracing(_:_:));
	-(TSTracing* _Nonnull)createTracing_8_: (uint32_t)num_bounds bound_stride: (size_t)bound_stride NS_SWIFT_NAME(createTracing(num_bounds:bound_stride:));
	-(TSTracing* _Nonnull)createTracing_9: (uint32_t)num_bounds bound_stride: (size_t)bound_stride bound_buffer: (TSBuffer* _Nonnull)bound_buffer NS_SWIFT_NAME(createTracing(_:_:_:));
	-(TSTracing* _Nonnull)createTracing_9_: (uint32_t)num_bounds bound_stride: (size_t)bound_stride bound_buffer: (TSBuffer* _Nonnull)bound_buffer NS_SWIFT_NAME(createTracing(num_bounds:bound_stride:bound_buffer:));
	-(TSTracing* _Nonnull)createTracing_10: (uint32_t)num_bounds bound_stride: (size_t)bound_stride bound_buffer: (TSBuffer* _Nonnull)bound_buffer bound_offset: (size_t)bound_offset NS_SWIFT_NAME(createTracing(_:_:_:_:));
	-(TSTracing* _Nonnull)createTracing_10_: (uint32_t)num_bounds bound_stride: (size_t)bound_stride bound_buffer: (TSBuffer* _Nonnull)bound_buffer bound_offset: (size_t)bound_offset NS_SWIFT_NAME(createTracing(num_bounds:bound_stride:bound_buffer:bound_offset:));
	-(TSTracing* _Nonnull)createTracing_11: (uint32_t)num_bounds bound_stride: (size_t)bound_stride bound_buffer: (TSBuffer* _Nonnull)bound_buffer bound_offset: (size_t)bound_offset flags: (TS_TracingFlags)flags NS_SWIFT_NAME(createTracing(_:_:_:_:_:));
	-(TSTracing* _Nonnull)createTracing_11_: (uint32_t)num_bounds bound_stride: (size_t)bound_stride bound_buffer: (TSBuffer* _Nonnull)bound_buffer bound_offset: (size_t)bound_offset flags: (TS_TracingFlags)flags NS_SWIFT_NAME(createTracing(num_bounds:bound_stride:bound_buffer:bound_offset:flags:));
	-(TSBufferTable* _Nonnull)createBufferTable;
	-(TSBufferTable* _Nonnull)createBufferTable_1: (uint32_t)size NS_SWIFT_NAME(createBufferTable(_:));
	-(TSBufferTable* _Nonnull)createBufferTable_1_: (uint32_t)size NS_SWIFT_NAME(createBufferTable(size:));
	-(TSBufferTable* _Nonnull)createBufferTable_2: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(createBufferTable(_:_:));
	-(TSBufferTable* _Nonnull)createBufferTable_2_: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(createBufferTable(buffers:buffers_size:));
	-(TSBufferTable* _Nonnull)createBufferTable_3: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size owner: (BOOL)owner NS_SWIFT_NAME(createBufferTable(_:_:_:));
	-(TSBufferTable* _Nonnull)createBufferTable_3_: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size owner: (BOOL)owner NS_SWIFT_NAME(createBufferTable(buffers:buffers_size:owner:));
	-(TSTextureTable* _Nonnull)createTextureTable;
	-(TSTextureTable* _Nonnull)createTextureTable_1: (TS_TextureType)type size: (uint32_t)size NS_SWIFT_NAME(createTextureTable(_:_:));
	-(TSTextureTable* _Nonnull)createTextureTable_1_: (TS_TextureType)type size: (uint32_t)size NS_SWIFT_NAME(createTextureTable(type:size:));
	-(TSTextureTable* _Nonnull)createTextureTable_2: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(createTextureTable(_:_:));
	-(TSTextureTable* _Nonnull)createTextureTable_2_: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(createTextureTable(textures:textures_size:));
	-(TSTextureTable* _Nonnull)createTextureTable_3: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size owner: (BOOL)owner NS_SWIFT_NAME(createTextureTable(_:_:_:));
	-(TSTextureTable* _Nonnull)createTextureTable_3_: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size owner: (BOOL)owner NS_SWIFT_NAME(createTextureTable(textures:textures_size:owner:));
	-(TSShader* _Nonnull)createShader;
	-(TSShader* _Nonnull)loadShader: (TS_ShaderType)type name: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadShader(_:_:_:));
	-(TSShader* _Nonnull)loadShader_: (TS_ShaderType)type name: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadShader(type:name:format:));
	-(TSShader* _Nonnull)loadShaderGLSL: (TS_ShaderType)type name: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadShaderGLSL(_:_:_:));
	-(TSShader* _Nonnull)loadShaderGLSL_: (TS_ShaderType)type name: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadShaderGLSL(type:name:format:));
	-(TSShader* _Nonnull)loadShader_1: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShader(_:_:));
	-(TSShader* _Nonnull)loadShader_1_: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShader(type:name:));
	-(TSShader* _Nonnull)loadShader_2: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadShader(_:_:_:));
	-(TSShader* _Nonnull)loadShader_2_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadShader(type:name:macros:));
	-(TSShader* _Nonnull)loadShaderGLSL_1: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShaderGLSL(_:_:));
	-(TSShader* _Nonnull)loadShaderGLSL_1_: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShaderGLSL(type:name:));
	-(TSShader* _Nonnull)loadShaderGLSL_2: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadShaderGLSL(_:_:_:));
	-(TSShader* _Nonnull)loadShaderGLSL_2_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadShaderGLSL(type:name:macros:));
	-(TSShader* _Nonnull)loadShaderSPIRV: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShaderSPIRV(_:_:));
	-(TSShader* _Nonnull)loadShaderSPIRV_: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShaderSPIRV(type:name:));
	-(TSShader* _Nonnull)createShader_1: (TS_ShaderType)type src: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createShader(_:_:_:));
	-(TSShader* _Nonnull)createShader_1_: (TS_ShaderType)type src: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createShader(type:src:format:));
	-(TSShader* _Nonnull)createShaderGLSL: (TS_ShaderType)type src: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createShaderGLSL(_:_:_:));
	-(TSShader* _Nonnull)createShaderGLSL_: (TS_ShaderType)type src: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createShaderGLSL(type:src:format:));
	-(TSShader* _Nonnull)createShader_2: (TS_ShaderType)type src: (const char* _Nonnull)src NS_SWIFT_NAME(createShader(_:_:));
	-(TSShader* _Nonnull)createShader_2_: (TS_ShaderType)type src: (const char* _Nonnull)src NS_SWIFT_NAME(createShader(type:src:));
	-(TSShader* _Nonnull)createShader_3: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createShader(_:_:_:));
	-(TSShader* _Nonnull)createShader_3_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createShader(type:src:macros:));
	-(TSShader* _Nonnull)createShaderGLSL_1: (TS_ShaderType)type src: (const char* _Nonnull)src NS_SWIFT_NAME(createShaderGLSL(_:_:));
	-(TSShader* _Nonnull)createShaderGLSL_1_: (TS_ShaderType)type src: (const char* _Nonnull)src NS_SWIFT_NAME(createShaderGLSL(type:src:));
	-(TSShader* _Nonnull)createShaderGLSL_2: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createShaderGLSL(_:_:_:));
	-(TSShader* _Nonnull)createShaderGLSL_2_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createShaderGLSL(type:src:macros:));
	-(TSShader* _Nonnull)createShaderSPIRV: (TS_ShaderType)type data: (uint32_t* _Nonnull)data data_size: (uint32_t)data_size NS_SWIFT_NAME(createShaderSPIRV(_:_:_:));
	-(TSShader* _Nonnull)createShaderSPIRV_: (TS_ShaderType)type data: (uint32_t* _Nonnull)data data_size: (uint32_t)data_size NS_SWIFT_NAME(createShaderSPIRV(type:data:data_size:));
	-(TSKernel* _Nonnull)createKernel;
	-(TSKernel* _Nonnull)createKernel_1: (const TSKernel* _Nonnull)kernel NS_SWIFT_NAME(createKernel(_:));
	-(TSKernel* _Nonnull)createKernel_1_: (const TSKernel* _Nonnull)kernel NS_SWIFT_NAME(createKernel(kernel:));
	-(void)releaseKernel: (TSKernel* _Nonnull)kernel NS_SWIFT_NAME(releaseKernel(_:));
	-(void)releaseKernel_: (TSKernel* _Nonnull)kernel NS_SWIFT_NAME(releaseKernel(kernel:));
	-(TSPipeline* _Nonnull)createPipeline;
	-(TSPipeline* _Nonnull)createPipeline_1: (const TSPipeline* _Nonnull)pipeline NS_SWIFT_NAME(createPipeline(_:));
	-(TSPipeline* _Nonnull)createPipeline_1_: (const TSPipeline* _Nonnull)pipeline NS_SWIFT_NAME(createPipeline(pipeline:));
	-(void)releasePipeline: (TSPipeline* _Nonnull)pipeline NS_SWIFT_NAME(releasePipeline(_:));
	-(void)releasePipeline_: (TSPipeline* _Nonnull)pipeline NS_SWIFT_NAME(releasePipeline(pipeline:));
	-(TSTraversal* _Nonnull)createTraversal;
	-(TSTraversal* _Nonnull)createTraversal_1: (const TSTraversal* _Nonnull)traversal NS_SWIFT_NAME(createTraversal(_:));
	-(TSTraversal* _Nonnull)createTraversal_1_: (const TSTraversal* _Nonnull)traversal NS_SWIFT_NAME(createTraversal(traversal:));
	-(void)releaseTraversal: (TSTraversal* _Nonnull)traversal NS_SWIFT_NAME(releaseTraversal(_:));
	-(void)releaseTraversal_: (TSTraversal* _Nonnull)traversal NS_SWIFT_NAME(releaseTraversal(traversal:));
	-(TSTarget* _Nonnull)createTarget;
	-(TSTarget* _Nonnull)createTarget_1: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(createTarget(_:));
	-(TSTarget* _Nonnull)createTarget_1_: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(createTarget(surface:));
	-(TSTarget* _Nonnull)createTarget_2: (TSWindow* _Nonnull)window NS_SWIFT_NAME(createTarget(_:));
	-(TSTarget* _Nonnull)createTarget_2_: (TSWindow* _Nonnull)window NS_SWIFT_NAME(createTarget(window:));
	-(TSCompute* _Nonnull)createCompute;
	-(TSCommand* _Nonnull)createCommand;
	-(TSCommand* _Nonnull)createCommand_1: (TSTarget* _Nonnull)target NS_SWIFT_NAME(createCommand(_:));
	-(TSCommand* _Nonnull)createCommand_1_: (TSTarget* _Nonnull)target NS_SWIFT_NAME(createCommand(target:));
	-(BOOL)setBuffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setBuffer(_:_:_:_:));
	-(BOOL)setBuffer_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setBuffer(buffer:offset:src:size:));
	-(BOOL)setBuffer_1: (TSBuffer* _Nonnull)buffer src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setBuffer(_:_:_:));
	-(BOOL)setBuffer_1_: (TSBuffer* _Nonnull)buffer src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(setBuffer(buffer:src:size:));
	-(BOOL)setBuffer_2: (TSBuffer* _Nonnull)buffer src: (const void* _Nonnull)src NS_SWIFT_NAME(setBuffer(_:_:));
	-(BOOL)setBuffer_2_: (TSBuffer* _Nonnull)buffer src: (const void* _Nonnull)src NS_SWIFT_NAME(setBuffer(buffer:src:));
	-(BOOL)getBuffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset dest: (void* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(buffer(_:_:_:_:));
	-(BOOL)getBuffer_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset dest: (void* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(buffer(buffer:offset:dest:size:));
	-(BOOL)getBuffer_1: (TSBuffer* _Nonnull)buffer dest: (void* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(buffer(_:_:_:));
	-(BOOL)getBuffer_1_: (TSBuffer* _Nonnull)buffer dest: (void* _Nonnull)dest size: (size_t)size NS_SWIFT_NAME(buffer(buffer:dest:size:));
	-(BOOL)getBuffer_2: (TSBuffer* _Nonnull)buffer dest: (void* _Nonnull)dest NS_SWIFT_NAME(buffer(_:_:));
	-(BOOL)getBuffer_2_: (TSBuffer* _Nonnull)buffer dest: (void* _Nonnull)dest NS_SWIFT_NAME(buffer(buffer:dest:));
	-(void* _Nonnull)mapBuffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset size: (size_t)size NS_SWIFT_NAME(mapBuffer(_:_:_:));
	-(void* _Nonnull)mapBuffer_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset size: (size_t)size NS_SWIFT_NAME(mapBuffer(buffer:offset:size:));
	-(void* _Nonnull)mapBuffer_1: (TSBuffer* _Nonnull)buffer size: (size_t)size NS_SWIFT_NAME(mapBuffer(_:_:));
	-(void* _Nonnull)mapBuffer_1_: (TSBuffer* _Nonnull)buffer size: (size_t)size NS_SWIFT_NAME(mapBuffer(buffer:size:));
	-(void* _Nonnull)mapBuffer_2: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(mapBuffer(_:));
	-(void* _Nonnull)mapBuffer_2_: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(mapBuffer(buffer:));
	-(BOOL)unmapBuffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(unmapBuffer(_:));
	-(BOOL)unmapBuffer_: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(unmapBuffer(buffer:));
	-(BOOL)copyBuffer: (TSBuffer* _Nonnull)buffer dest_offset: (size_t)dest_offset src: (TSBuffer* _Nonnull)src src_offset: (size_t)src_offset size: (size_t)size NS_SWIFT_NAME(copyBuffer(_:_:_:_:_:));
	-(BOOL)copyBuffer_: (TSBuffer* _Nonnull)buffer dest_offset: (size_t)dest_offset src: (TSBuffer* _Nonnull)src src_offset: (size_t)src_offset size: (size_t)size NS_SWIFT_NAME(copyBuffer(buffer:dest_offset:src:src_offset:size:));
	-(BOOL)copyBuffer_1: (TSBuffer* _Nonnull)buffer dest_offset: (size_t)dest_offset src: (TSBuffer* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(copyBuffer(_:_:_:_:));
	-(BOOL)copyBuffer_1_: (TSBuffer* _Nonnull)buffer dest_offset: (size_t)dest_offset src: (TSBuffer* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(copyBuffer(buffer:dest_offset:src:size:));
	-(BOOL)copyBuffer_2: (TSBuffer* _Nonnull)buffer src: (TSBuffer* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(copyBuffer(_:_:_:));
	-(BOOL)copyBuffer_2_: (TSBuffer* _Nonnull)buffer src: (TSBuffer* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(copyBuffer(buffer:src:size:));
	-(BOOL)copyBuffer_3: (TSBuffer* _Nonnull)buffer src: (TSBuffer* _Nonnull)src NS_SWIFT_NAME(copyBuffer(_:_:));
	-(BOOL)copyBuffer_3_: (TSBuffer* _Nonnull)buffer src: (TSBuffer* _Nonnull)src NS_SWIFT_NAME(copyBuffer(buffer:src:));
	-(BOOL)clearBuffer: (TSBuffer* _Nonnull)buffer format: (TS_Format)format offset: (size_t)offset src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(clearBuffer(_:_:_:_:_:));
	-(BOOL)clearBuffer_: (TSBuffer* _Nonnull)buffer format: (TS_Format)format offset: (size_t)offset src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(clearBuffer(buffer:format:offset:src:size:));
	-(BOOL)clearBuffer_1: (TSBuffer* _Nonnull)buffer format: (TS_Format)format src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(clearBuffer(_:_:_:_:));
	-(BOOL)clearBuffer_1_: (TSBuffer* _Nonnull)buffer format: (TS_Format)format src: (const void* _Nonnull)src size: (size_t)size NS_SWIFT_NAME(clearBuffer(buffer:format:src:size:));
	-(BOOL)clearBuffer_2: (TSBuffer* _Nonnull)buffer format: (TS_Format)format src: (const void* _Nonnull)src NS_SWIFT_NAME(clearBuffer(_:_:_:));
	-(BOOL)clearBuffer_2_: (TSBuffer* _Nonnull)buffer format: (TS_Format)format src: (const void* _Nonnull)src NS_SWIFT_NAME(clearBuffer(buffer:format:src:));
	-(BOOL)clearBuffer_3: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(clearBuffer(_:));
	-(BOOL)clearBuffer_3_: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(clearBuffer(buffer:));
	-(BOOL)bindBuffer: (TSBuffer* _Nonnull)buffer offsets: (size_t* _Nonnull)offsets offsets_size: (uint32_t)offsets_size sizes: (size_t* _Nonnull)sizes sizes_size: (uint32_t)sizes_size commit: (BOOL)commit fence: (TSFence* _Nonnull)fence NS_SWIFT_NAME(bindBuffer(_:_:_:_:_:_:_:));
	-(BOOL)bindBuffer_: (TSBuffer* _Nonnull)buffer offsets: (size_t* _Nonnull)offsets offsets_size: (uint32_t)offsets_size sizes: (size_t* _Nonnull)sizes sizes_size: (uint32_t)sizes_size commit: (BOOL)commit fence: (TSFence* _Nonnull)fence NS_SWIFT_NAME(bindBuffer(buffer:offsets:offsets_size:sizes:sizes_size:commit:fence:));
	-(BOOL)bindBuffer_1: (TSBuffer* _Nonnull)buffer offsets: (size_t* _Nonnull)offsets offsets_size: (uint32_t)offsets_size sizes: (size_t* _Nonnull)sizes sizes_size: (uint32_t)sizes_size commit: (BOOL)commit NS_SWIFT_NAME(bindBuffer(_:_:_:_:_:_:));
	-(BOOL)bindBuffer_1_: (TSBuffer* _Nonnull)buffer offsets: (size_t* _Nonnull)offsets offsets_size: (uint32_t)offsets_size sizes: (size_t* _Nonnull)sizes sizes_size: (uint32_t)sizes_size commit: (BOOL)commit NS_SWIFT_NAME(bindBuffer(buffer:offsets:offsets_size:sizes:sizes_size:commit:));
	-(BOOL)bindBuffer_2: (TSBuffer* _Nonnull)buffer offset: (size_t)offset size: (size_t)size commit: (BOOL)commit fence: (TSFence* _Nonnull)fence NS_SWIFT_NAME(bindBuffer(_:_:_:_:_:));
	-(BOOL)bindBuffer_2_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset size: (size_t)size commit: (BOOL)commit fence: (TSFence* _Nonnull)fence NS_SWIFT_NAME(bindBuffer(buffer:offset:size:commit:fence:));
	-(BOOL)bindBuffer_3: (TSBuffer* _Nonnull)buffer offset: (size_t)offset size: (size_t)size commit: (BOOL)commit NS_SWIFT_NAME(bindBuffer(_:_:_:_:));
	-(BOOL)bindBuffer_3_: (TSBuffer* _Nonnull)buffer offset: (size_t)offset size: (size_t)size commit: (BOOL)commit NS_SWIFT_NAME(bindBuffer(buffer:offset:size:commit:));
	-(BOOL)flushBuffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(flushBuffer(_:));
	-(BOOL)flushBuffer_: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(flushBuffer(buffer:));
	-(BOOL)flushBuffer_1: (TSBuffer* _Nonnull)buffer flags: (TS_BufferFlags)flags NS_SWIFT_NAME(flushBuffer(_:_:));
	-(BOOL)flushBuffer_1_: (TSBuffer* _Nonnull)buffer flags: (TS_BufferFlags)flags NS_SWIFT_NAME(flushBuffer(buffer:flags:));
	-(BOOL)flushBuffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(flushBuffers(_:_:));
	-(BOOL)flushBuffers_: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(flushBuffers(buffers:buffers_size:));
	-(BOOL)flushBuffers_1: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size flags: (TS_BufferFlags)flags NS_SWIFT_NAME(flushBuffers(_:_:_:));
	-(BOOL)flushBuffers_1_: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size flags: (TS_BufferFlags)flags NS_SWIFT_NAME(flushBuffers(buffers:buffers_size:flags:));
	-(void)releaseBuffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(releaseBuffer(_:));
	-(void)releaseBuffer_: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(releaseBuffer(buffer:));
	-(void)releaseSampler: (TSSampler* _Nonnull)sampler NS_SWIFT_NAME(releaseSampler(_:));
	-(void)releaseSampler_: (TSSampler* _Nonnull)sampler NS_SWIFT_NAME(releaseSampler(sampler:));
	-(BOOL)setTexture: (TSTexture* _Nonnull)texture dest_origin: (TSOrigin)dest_origin dest_slice: (TSSlice)dest_slice image: (const TSImage* _Nonnull)image src_slice: (TSSlice)src_slice NS_SWIFT_NAME(setTexture(_:_:_:_:_:));
	-(BOOL)setTexture_: (TSTexture* _Nonnull)texture dest_origin: (TSOrigin)dest_origin dest_slice: (TSSlice)dest_slice image: (const TSImage* _Nonnull)image src_slice: (TSSlice)src_slice NS_SWIFT_NAME(setTexture(texture:dest_origin:dest_slice:image:src_slice:));
	-(BOOL)setTexture_1: (TSTexture* _Nonnull)texture dest_origin: (TSOrigin)dest_origin image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(setTexture(_:_:_:));
	-(BOOL)setTexture_1_: (TSTexture* _Nonnull)texture dest_origin: (TSOrigin)dest_origin image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(setTexture(texture:dest_origin:image:));
	-(BOOL)setTexture_2: (TSTexture* _Nonnull)texture dest_slice: (TSSlice)dest_slice image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(setTexture(_:_:_:));
	-(BOOL)setTexture_2_: (TSTexture* _Nonnull)texture dest_slice: (TSSlice)dest_slice image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(setTexture(texture:dest_slice:image:));
	-(BOOL)setTexture_3: (TSTexture* _Nonnull)texture image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(setTexture(_:_:));
	-(BOOL)setTexture_3_: (TSTexture* _Nonnull)texture image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(setTexture(texture:image:));
	-(BOOL)getTexture: (TSTexture* _Nonnull)texture src_slice: (TSSlice)src_slice image: (TSImage* _Nonnull)image dest_slice: (TSSlice)dest_slice NS_SWIFT_NAME(texture(_:_:_:_:));
	-(BOOL)getTexture_: (TSTexture* _Nonnull)texture src_slice: (TSSlice)src_slice image: (TSImage* _Nonnull)image dest_slice: (TSSlice)dest_slice NS_SWIFT_NAME(texture(texture:src_slice:image:dest_slice:));
	-(BOOL)getTexture_1: (TSTexture* _Nonnull)texture image: (TSImage* _Nonnull)image dest_slice: (TSSlice)dest_slice NS_SWIFT_NAME(texture(_:_:_:));
	-(BOOL)getTexture_1_: (TSTexture* _Nonnull)texture image: (TSImage* _Nonnull)image dest_slice: (TSSlice)dest_slice NS_SWIFT_NAME(texture(texture:image:dest_slice:));
	-(BOOL)getTexture_2: (TSTexture* _Nonnull)texture image: (TSImage* _Nonnull)image NS_SWIFT_NAME(texture(_:_:));
	-(BOOL)getTexture_2_: (TSTexture* _Nonnull)texture image: (TSImage* _Nonnull)image NS_SWIFT_NAME(texture(texture:image:));
	-(BOOL)copyTexture: (TSTexture* _Nonnull)texture dest_origin: (TSOrigin)dest_origin dest_slice: (TSSlice)dest_slice src: (TSTexture* _Nonnull)src src_region: (TSRegion)src_region src_slice: (TSSlice)src_slice NS_SWIFT_NAME(copyTexture(_:_:_:_:_:_:));
	-(BOOL)copyTexture_: (TSTexture* _Nonnull)texture dest_origin: (TSOrigin)dest_origin dest_slice: (TSSlice)dest_slice src: (TSTexture* _Nonnull)src src_region: (TSRegion)src_region src_slice: (TSSlice)src_slice NS_SWIFT_NAME(copyTexture(texture:dest_origin:dest_slice:src:src_region:src_slice:));
	-(BOOL)copyTexture_1: (TSTexture* _Nonnull)texture dest_origin: (TSOrigin)dest_origin src: (TSTexture* _Nonnull)src src_region: (TSRegion)src_region NS_SWIFT_NAME(copyTexture(_:_:_:_:));
	-(BOOL)copyTexture_1_: (TSTexture* _Nonnull)texture dest_origin: (TSOrigin)dest_origin src: (TSTexture* _Nonnull)src src_region: (TSRegion)src_region NS_SWIFT_NAME(copyTexture(texture:dest_origin:src:src_region:));
	-(BOOL)copyTexture_2: (TSTexture* _Nonnull)texture dest_slice: (TSSlice)dest_slice src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(copyTexture(_:_:_:_:));
	-(BOOL)copyTexture_2_: (TSTexture* _Nonnull)texture dest_slice: (TSSlice)dest_slice src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(copyTexture(texture:dest_slice:src:src_slice:));
	-(BOOL)copyTexture_3: (TSTexture* _Nonnull)texture src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(copyTexture(_:_:));
	-(BOOL)copyTexture_3_: (TSTexture* _Nonnull)texture src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(copyTexture(texture:src:));
	-(BOOL)clearTexture: (TSTexture* _Nonnull)texture region: (TSRegion)region slice: (TSSlice)slice src: (const void* _Nonnull)src NS_SWIFT_NAME(clearTexture(_:_:_:_:));
	-(BOOL)clearTexture_: (TSTexture* _Nonnull)texture region: (TSRegion)region slice: (TSSlice)slice src: (const void* _Nonnull)src NS_SWIFT_NAME(clearTexture(texture:region:slice:src:));
	-(BOOL)clearTexture_1: (TSTexture* _Nonnull)texture region: (TSRegion)region src: (const void* _Nonnull)src NS_SWIFT_NAME(clearTexture(_:_:_:));
	-(BOOL)clearTexture_1_: (TSTexture* _Nonnull)texture region: (TSRegion)region src: (const void* _Nonnull)src NS_SWIFT_NAME(clearTexture(texture:region:src:));
	-(BOOL)clearTexture_2: (TSTexture* _Nonnull)texture slice: (TSSlice)slice src: (const void* _Nonnull)src NS_SWIFT_NAME(clearTexture(_:_:_:));
	-(BOOL)clearTexture_2_: (TSTexture* _Nonnull)texture slice: (TSSlice)slice src: (const void* _Nonnull)src NS_SWIFT_NAME(clearTexture(texture:slice:src:));
	-(BOOL)clearTexture_3: (TSTexture* _Nonnull)texture src: (const void* _Nonnull)src NS_SWIFT_NAME(clearTexture(_:_:));
	-(BOOL)clearTexture_3_: (TSTexture* _Nonnull)texture src: (const void* _Nonnull)src NS_SWIFT_NAME(clearTexture(texture:src:));
	-(BOOL)bindTexture: (TSTexture* _Nonnull)texture regions: (const TSRegion* _Nonnull)regions num_regions: (uint32_t)num_regions slices: (const TSSlice* _Nonnull)slices num_slices: (uint32_t)num_slices commit: (BOOL)commit fence: (TSFence* _Nonnull)fence NS_SWIFT_NAME(bindTexture(_:_:_:_:_:_:_:));
	-(BOOL)bindTexture_: (TSTexture* _Nonnull)texture regions: (const TSRegion* _Nonnull)regions num_regions: (uint32_t)num_regions slices: (const TSSlice* _Nonnull)slices num_slices: (uint32_t)num_slices commit: (BOOL)commit fence: (TSFence* _Nonnull)fence NS_SWIFT_NAME(bindTexture(texture:regions:num_regions:slices:num_slices:commit:fence:));
	-(BOOL)bindTexture_1: (TSTexture* _Nonnull)texture regions: (const TSRegion* _Nonnull)regions num_regions: (uint32_t)num_regions slices: (const TSSlice* _Nonnull)slices num_slices: (uint32_t)num_slices commit: (BOOL)commit NS_SWIFT_NAME(bindTexture(_:_:_:_:_:_:));
	-(BOOL)bindTexture_1_: (TSTexture* _Nonnull)texture regions: (const TSRegion* _Nonnull)regions num_regions: (uint32_t)num_regions slices: (const TSSlice* _Nonnull)slices num_slices: (uint32_t)num_slices commit: (BOOL)commit NS_SWIFT_NAME(bindTexture(texture:regions:num_regions:slices:num_slices:commit:));
	-(BOOL)bindTexture_2: (TSTexture* _Nonnull)texture region: (TSRegion)region slice: (TSSlice)slice commit: (BOOL)commit fence: (TSFence* _Nonnull)fence NS_SWIFT_NAME(bindTexture(_:_:_:_:_:));
	-(BOOL)bindTexture_2_: (TSTexture* _Nonnull)texture region: (TSRegion)region slice: (TSSlice)slice commit: (BOOL)commit fence: (TSFence* _Nonnull)fence NS_SWIFT_NAME(bindTexture(texture:region:slice:commit:fence:));
	-(BOOL)bindTexture_3: (TSTexture* _Nonnull)texture region: (TSRegion)region slice: (TSSlice)slice commit: (BOOL)commit NS_SWIFT_NAME(bindTexture(_:_:_:_:));
	-(BOOL)bindTexture_3_: (TSTexture* _Nonnull)texture region: (TSRegion)region slice: (TSSlice)slice commit: (BOOL)commit NS_SWIFT_NAME(bindTexture(texture:region:slice:commit:));
	-(BOOL)createMipmaps: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(createMipmaps(_:_:));
	-(BOOL)createMipmaps_: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(createMipmaps(texture:slice:));
	-(BOOL)createMipmaps_1: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(createMipmaps(_:));
	-(BOOL)createMipmaps_1_: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(createMipmaps(texture:));
	-(BOOL)flushTexture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(flushTexture(_:));
	-(BOOL)flushTexture_: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(flushTexture(texture:));
	-(BOOL)flushTexture_1: (TSTexture* _Nonnull)texture flags: (TS_TextureFlags)flags NS_SWIFT_NAME(flushTexture(_:_:));
	-(BOOL)flushTexture_1_: (TSTexture* _Nonnull)texture flags: (TS_TextureFlags)flags NS_SWIFT_NAME(flushTexture(texture:flags:));
	-(BOOL)flushTexture_2: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(flushTexture(_:_:));
	-(BOOL)flushTexture_2_: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(flushTexture(texture:slice:));
	-(BOOL)flushTexture_3: (TSTexture* _Nonnull)texture slice: (TSSlice)slice flags: (TS_TextureFlags)flags NS_SWIFT_NAME(flushTexture(_:_:_:));
	-(BOOL)flushTexture_3_: (TSTexture* _Nonnull)texture slice: (TSSlice)slice flags: (TS_TextureFlags)flags NS_SWIFT_NAME(flushTexture(texture:slice:flags:));
	-(BOOL)flushTextures: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(flushTextures(_:_:));
	-(BOOL)flushTextures_: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(flushTextures(textures:textures_size:));
	-(BOOL)flushTextures_1: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size flags: (TS_TextureFlags)flags NS_SWIFT_NAME(flushTextures(_:_:_:));
	-(BOOL)flushTextures_1_: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size flags: (TS_TextureFlags)flags NS_SWIFT_NAME(flushTextures(textures:textures_size:flags:));
	-(void)releaseTexture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(releaseTexture(_:));
	-(void)releaseTexture_: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(releaseTexture(texture:));
	-(BOOL)setTracing: (TSTracing* _Nonnull)tracing instances: (const TSTracingInstance* _Nonnull)instances num_instances: (uint32_t)num_instances NS_SWIFT_NAME(setTracing(_:_:_:));
	-(BOOL)setTracing_: (TSTracing* _Nonnull)tracing instances: (const TSTracingInstance* _Nonnull)instances num_instances: (uint32_t)num_instances NS_SWIFT_NAME(setTracing(tracing:instances:num_instances:));
	-(BOOL)buildTracing: (TSTracing* _Nonnull)tracing buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(buildTracing(_:_:));
	-(BOOL)buildTracing_: (TSTracing* _Nonnull)tracing buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(buildTracing(tracing:buffer:));
	-(BOOL)buildTracing_1: (TSTracing* _Nonnull)tracing buffer: (TSBuffer* _Nonnull)buffer flags: (TS_TracingFlags)flags NS_SWIFT_NAME(buildTracing(_:_:_:));
	-(BOOL)buildTracing_1_: (TSTracing* _Nonnull)tracing buffer: (TSBuffer* _Nonnull)buffer flags: (TS_TracingFlags)flags NS_SWIFT_NAME(buildTracing(tracing:buffer:flags:));
	-(BOOL)buildTracing_2: (TSTracing* _Nonnull)tracing buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(buildTracing(_:_:_:));
	-(BOOL)buildTracing_2_: (TSTracing* _Nonnull)tracing buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(buildTracing(tracing:buffer:offset:));
	-(BOOL)buildTracing_3: (TSTracing* _Nonnull)tracing buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset flags: (TS_TracingFlags)flags NS_SWIFT_NAME(buildTracing(_:_:_:_:));
	-(BOOL)buildTracing_3_: (TSTracing* _Nonnull)tracing buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset flags: (TS_TracingFlags)flags NS_SWIFT_NAME(buildTracing(tracing:buffer:offset:flags:));
	-(BOOL)buildTracings: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(buildTracings(_:_:_:));
	-(BOOL)buildTracings_: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(buildTracings(tracings:tracings_size:buffer:));
	-(BOOL)buildTracings_1: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size buffer: (TSBuffer* _Nonnull)buffer flags: (TS_TracingFlags)flags NS_SWIFT_NAME(buildTracings(_:_:_:_:));
	-(BOOL)buildTracings_1_: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size buffer: (TSBuffer* _Nonnull)buffer flags: (TS_TracingFlags)flags NS_SWIFT_NAME(buildTracings(tracings:tracings_size:buffer:flags:));
	-(BOOL)buildTracings_2: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(buildTracings(_:_:_:_:));
	-(BOOL)buildTracings_2_: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(buildTracings(tracings:tracings_size:buffer:offset:));
	-(BOOL)buildTracings_3: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset flags: (TS_TracingFlags)flags NS_SWIFT_NAME(buildTracings(_:_:_:_:_:));
	-(BOOL)buildTracings_3_: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset flags: (TS_TracingFlags)flags NS_SWIFT_NAME(buildTracings(tracings:tracings_size:buffer:offset:flags:));
	-(BOOL)copyTracing: (TSTracing* _Nonnull)tracing buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(copyTracing(_:_:));
	-(BOOL)copyTracing_: (TSTracing* _Nonnull)tracing buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(copyTracing(tracing:buffer:));
	-(BOOL)copyTracing_1: (TSTracing* _Nonnull)tracing buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(copyTracing(_:_:_:));
	-(BOOL)copyTracing_1_: (TSTracing* _Nonnull)tracing buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(copyTracing(tracing:buffer:offset:));
	-(BOOL)copyTracings: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(copyTracings(_:_:_:_:));
	-(BOOL)copyTracings_: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(copyTracings(tracings:tracings_size:buffer:offset:));
	-(BOOL)copyTracings_1: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset stride: (size_t)stride NS_SWIFT_NAME(copyTracings(_:_:_:_:_:));
	-(BOOL)copyTracings_1_: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset stride: (size_t)stride NS_SWIFT_NAME(copyTracings(tracings:tracings_size:buffer:offset:stride:));
	-(BOOL)flushTracing: (TSTracing* _Nonnull)tracing NS_SWIFT_NAME(flushTracing(_:));
	-(BOOL)flushTracing_: (TSTracing* _Nonnull)tracing NS_SWIFT_NAME(flushTracing(tracing:));
	-(BOOL)flushTracings: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size NS_SWIFT_NAME(flushTracings(_:_:));
	-(BOOL)flushTracings_: (TSTracing* _Nonnull * _Nullable)tracings tracings_size: (uint32_t)tracings_size NS_SWIFT_NAME(flushTracings(tracings:tracings_size:));
	-(void)releaseTracing: (TSTracing* _Nonnull)tracing NS_SWIFT_NAME(releaseTracing(_:));
	-(void)releaseTracing_: (TSTracing* _Nonnull)tracing NS_SWIFT_NAME(releaseTracing(tracing:));
	-(BOOL)setBufferTable: (TSBufferTable* _Nonnull)table index: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setBufferTable(_:_:_:));
	-(BOOL)setBufferTable_: (TSBufferTable* _Nonnull)table index: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(setBufferTable(table:index:buffer:));
	-(BOOL)setBufferTable_1: (TSBufferTable* _Nonnull)table index: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer owner: (BOOL)owner NS_SWIFT_NAME(setBufferTable(_:_:_:_:));
	-(BOOL)setBufferTable_1_: (TSBufferTable* _Nonnull)table index: (uint32_t)index buffer: (TSBuffer* _Nonnull)buffer owner: (BOOL)owner NS_SWIFT_NAME(setBufferTable(table:index:buffer:owner:));
	-(BOOL)setBufferTable_2: (TSBufferTable* _Nonnull)table index: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(setBufferTable(_:_:_:_:));
	-(BOOL)setBufferTable_2_: (TSBufferTable* _Nonnull)table index: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size NS_SWIFT_NAME(setBufferTable(table:index:buffers:buffers_size:));
	-(BOOL)setBufferTable_3: (TSBufferTable* _Nonnull)table index: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size owner: (BOOL)owner NS_SWIFT_NAME(setBufferTable(_:_:_:_:_:));
	-(BOOL)setBufferTable_3_: (TSBufferTable* _Nonnull)table index: (uint32_t)index buffers: (TSBuffer* _Nonnull * _Nullable)buffers buffers_size: (uint32_t)buffers_size owner: (BOOL)owner NS_SWIFT_NAME(setBufferTable(table:index:buffers:buffers_size:owner:));
	-(void)releaseBufferTable: (TSBufferTable* _Nonnull)table NS_SWIFT_NAME(releaseBufferTable(_:));
	-(void)releaseBufferTable_: (TSBufferTable* _Nonnull)table NS_SWIFT_NAME(releaseBufferTable(table:));
	-(BOOL)setTextureTable: (TSTextureTable* _Nonnull)table index: (uint32_t)index texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setTextureTable(_:_:_:));
	-(BOOL)setTextureTable_: (TSTextureTable* _Nonnull)table index: (uint32_t)index texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setTextureTable(table:index:texture:));
	-(BOOL)setTextureTable_1: (TSTextureTable* _Nonnull)table index: (uint32_t)index texture: (TSTexture* _Nonnull)texture owner: (BOOL)owner NS_SWIFT_NAME(setTextureTable(_:_:_:_:));
	-(BOOL)setTextureTable_1_: (TSTextureTable* _Nonnull)table index: (uint32_t)index texture: (TSTexture* _Nonnull)texture owner: (BOOL)owner NS_SWIFT_NAME(setTextureTable(table:index:texture:owner:));
	-(BOOL)setTextureTable_2: (TSTextureTable* _Nonnull)table index: (uint32_t)index textures: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(setTextureTable(_:_:_:_:));
	-(BOOL)setTextureTable_2_: (TSTextureTable* _Nonnull)table index: (uint32_t)index textures: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size NS_SWIFT_NAME(setTextureTable(table:index:textures:textures_size:));
	-(BOOL)setTextureTable_3: (TSTextureTable* _Nonnull)table index: (uint32_t)index textures: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size owner: (BOOL)owner NS_SWIFT_NAME(setTextureTable(_:_:_:_:_:));
	-(BOOL)setTextureTable_3_: (TSTextureTable* _Nonnull)table index: (uint32_t)index textures: (TSTexture* _Nonnull * _Nullable)textures textures_size: (uint32_t)textures_size owner: (BOOL)owner NS_SWIFT_NAME(setTextureTable(table:index:textures:textures_size:owner:));
	-(void)releaseTextureTable: (TSTextureTable* _Nonnull)table NS_SWIFT_NAME(releaseTextureTable(_:));
	-(void)releaseTextureTable_: (TSTextureTable* _Nonnull)table NS_SWIFT_NAME(releaseTextureTable(table:));
	-(BOOL)beginQuery: (TSQuery* _Nonnull)query NS_SWIFT_NAME(beginQuery(_:));
	-(BOOL)beginQuery_: (TSQuery* _Nonnull)query NS_SWIFT_NAME(beginQuery(query:));
	-(void)endQuery: (TSQuery* _Nonnull)query NS_SWIFT_NAME(endQuery(_:));
	-(void)endQuery_: (TSQuery* _Nonnull)query NS_SWIFT_NAME(endQuery(query:));
	-(BOOL)copyQuery: (TSQuery* _Nonnull)query buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(copyQuery(_:_:));
	-(BOOL)copyQuery_: (TSQuery* _Nonnull)query buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(copyQuery(query:buffer:));
	-(BOOL)copyQuery_1: (TSQuery* _Nonnull)query buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(copyQuery(_:_:_:));
	-(BOOL)copyQuery_1_: (TSQuery* _Nonnull)query buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(copyQuery(query:buffer:offset:));
	-(BOOL)copyQueries: (TSQuery* _Nonnull * _Nullable)queries queries_size: (uint32_t)queries_size buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(copyQueries(_:_:_:));
	-(BOOL)copyQueries_: (TSQuery* _Nonnull * _Nullable)queries queries_size: (uint32_t)queries_size buffer: (TSBuffer* _Nonnull)buffer NS_SWIFT_NAME(copyQueries(queries:queries_size:buffer:));
	-(BOOL)copyQueries_1: (TSQuery* _Nonnull * _Nullable)queries queries_size: (uint32_t)queries_size buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(copyQueries(_:_:_:_:));
	-(BOOL)copyQueries_1_: (TSQuery* _Nonnull * _Nullable)queries queries_size: (uint32_t)queries_size buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset NS_SWIFT_NAME(copyQueries(queries:queries_size:buffer:offset:));
	-(BOOL)copyQueries_2: (TSQuery* _Nonnull * _Nullable)queries queries_size: (uint32_t)queries_size buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset stride: (size_t)stride NS_SWIFT_NAME(copyQueries(_:_:_:_:_:));
	-(BOOL)copyQueries_2_: (TSQuery* _Nonnull * _Nullable)queries queries_size: (uint32_t)queries_size buffer: (TSBuffer* _Nonnull)buffer offset: (size_t)offset stride: (size_t)stride NS_SWIFT_NAME(copyQueries(queries:queries_size:buffer:offset:stride:));
	-(BOOL)waitFence: (TSFence* _Nonnull)fence NS_SWIFT_NAME(waitFence(_:));
	-(BOOL)waitFence_: (TSFence* _Nonnull)fence NS_SWIFT_NAME(waitFence(fence:));
	-(BOOL)signalFence: (TSFence* _Nonnull)fence NS_SWIFT_NAME(signalFence(_:));
	-(BOOL)signalFence_: (TSFence* _Nonnull)fence NS_SWIFT_NAME(signalFence(fence:));
	-(BOOL)execute: (TSDevice* _Nonnull)device NS_SWIFT_NAME(execute(_:));
	-(BOOL)execute_: (TSDevice* _Nonnull)device NS_SWIFT_NAME(execute(device:));
	-(BOOL)flip: (TSFence* _Nonnull)fence NS_SWIFT_NAME(flip(_:));
	-(BOOL)flip_: (TSFence* _Nonnull)fence NS_SWIFT_NAME(flip(fence:));
	-(BOOL)flip_1 NS_SWIFT_NAME(flip());
	-(BOOL)flush;
	-(BOOL)finish;
	-(BOOL)check;
@end

/// Tellusim::D3D12Device
NS_SWIFT_NAME(D3D12Device)
TS_CAPI @interface TSD3D12Device : TSDevice
	-(id _Nonnull)init_4 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_5: (TSContext* _Nonnull)context NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_5_: (TSContext* _Nonnull)context NS_SWIFT_NAME(init(context:));
	-(id _Nonnull)init_6: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_6_: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(init(surface:));
	-(id _Nonnull)init_7: (TSWindow* _Nonnull)window NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_7_: (TSWindow* _Nonnull)window NS_SWIFT_NAME(init(window:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D12Device* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D12Device&)p;
		-(Tellusim::D3D12Device* _Nonnull)pointer;
		-(Tellusim::D3D12Device&)ref;
	#endif
	-(id _Nonnull)initDevice: (TSDevice* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSDevice* _Nonnull)getDevice;
	-(BOOL)equalPtr: (const TSD3D12Device* _Nonnull)p;
	-(TSD3D12Device* _Nonnull)copyPtr;
	-(TSD3D12Device* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D12Device* _Nonnull)null;
	-(void)setBufferState: (TSBuffer* _Nonnull)buffer state: (uint32_t)state NS_SWIFT_NAME(setBufferState(_:_:));
	-(void)setBufferState_: (TSBuffer* _Nonnull)buffer state: (uint32_t)state NS_SWIFT_NAME(setBufferState(buffer:state:));
	-(void)setTextureState: (TSTexture* _Nonnull)texture state: (uint32_t)state NS_SWIFT_NAME(setTextureState(_:_:));
	-(void)setTextureState_: (TSTexture* _Nonnull)texture state: (uint32_t)state NS_SWIFT_NAME(setTextureState(texture:state:));
	-(ID3D12Device* _Nonnull)getD3D12Device NS_SWIFT_NAME(d3D12Device());
	-(ID3D12CommandQueue* _Nonnull)getQueue NS_SWIFT_NAME(queue());
	-(ID3D12GraphicsCommandList* _Nonnull)getCommand NS_SWIFT_NAME(command());
@end

/// Tellusim::D3D11Device
NS_SWIFT_NAME(D3D11Device)
TS_CAPI @interface TSD3D11Device : TSDevice
	-(id _Nonnull)init_4 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_5: (TSContext* _Nonnull)context NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_5_: (TSContext* _Nonnull)context NS_SWIFT_NAME(init(context:));
	-(id _Nonnull)init_6: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_6_: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(init(surface:));
	-(id _Nonnull)init_7: (TSWindow* _Nonnull)window NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_7_: (TSWindow* _Nonnull)window NS_SWIFT_NAME(init(window:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D11Device* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D11Device&)p;
		-(Tellusim::D3D11Device* _Nonnull)pointer;
		-(Tellusim::D3D11Device&)ref;
	#endif
	-(id _Nonnull)initDevice: (TSDevice* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSDevice* _Nonnull)getDevice;
	-(BOOL)equalPtr: (const TSD3D11Device* _Nonnull)p;
	-(TSD3D11Device* _Nonnull)copyPtr;
	-(TSD3D11Device* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D11Device* _Nonnull)null;
	-(ID3D11Device* _Nonnull)getD3D11Device NS_SWIFT_NAME(d3D11Device());
	-(ID3D11DeviceContext* _Nonnull)getCommand NS_SWIFT_NAME(command());
@end

/// Tellusim::MTLDevice
NS_SWIFT_NAME(MTLDevice)
TS_CAPI @interface TSMTLDevice : TSDevice
	-(id _Nonnull)init_4 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_5: (TSContext* _Nonnull)context NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_5_: (TSContext* _Nonnull)context NS_SWIFT_NAME(init(context:));
	-(id _Nonnull)init_6: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_6_: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(init(surface:));
	-(id _Nonnull)init_7: (TSWindow* _Nonnull)window NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_7_: (TSWindow* _Nonnull)window NS_SWIFT_NAME(init(window:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MTLDevice* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MTLDevice&)p;
		-(Tellusim::MTLDevice* _Nonnull)pointer;
		-(Tellusim::MTLDevice&)ref;
	#endif
	-(id _Nonnull)initDevice: (TSDevice* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSDevice* _Nonnull)getDevice;
	-(BOOL)equalPtr: (const TSMTLDevice* _Nonnull)p;
	-(TSMTLDevice* _Nonnull)copyPtr;
	-(TSMTLDevice* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMTLDevice* _Nonnull)null;
	-(void* _Nonnull)getMTLDevice NS_SWIFT_NAME(MTLDevice());
	-(void* _Nonnull)getQueue NS_SWIFT_NAME(queue());
	-(void* _Nonnull)getCommand NS_SWIFT_NAME(command());
	-(void* _Nonnull)getEncoder NS_SWIFT_NAME(encoder());
	-(void* _Nonnull)getRenderEncoder: (void* _Nonnull)descriptor NS_SWIFT_NAME(renderEncoder(_:));
	-(void* _Nonnull)getRenderEncoder_: (void* _Nonnull)descriptor NS_SWIFT_NAME(renderEncoder(descriptor:));
	-(void* _Nonnull)getComputeEncoder NS_SWIFT_NAME(computeEncoder());
	-(void* _Nonnull)getTracingEncoder NS_SWIFT_NAME(tracingEncoder());
	-(void* _Nonnull)getBlitEncoder NS_SWIFT_NAME(blitEncoder());
	-(void)endEncoder;
@end

/// Tellusim::VKDevice
NS_SWIFT_NAME(VKDevice)
TS_CAPI @interface TSVKDevice : TSDevice
	-(id _Nonnull)init_4 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_5: (TSContext* _Nonnull)context NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_5_: (TSContext* _Nonnull)context NS_SWIFT_NAME(init(context:));
	-(id _Nonnull)init_6: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_6_: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(init(surface:));
	-(id _Nonnull)init_7: (TSWindow* _Nonnull)window NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_7_: (TSWindow* _Nonnull)window NS_SWIFT_NAME(init(window:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::VKDevice* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::VKDevice&)p;
		-(Tellusim::VKDevice* _Nonnull)pointer;
		-(Tellusim::VKDevice&)ref;
	#endif
	-(id _Nonnull)initDevice: (TSDevice* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSDevice* _Nonnull)getDevice;
	-(BOOL)equalPtr: (const TSVKDevice* _Nonnull)p;
	-(TSVKDevice* _Nonnull)copyPtr;
	-(TSVKDevice* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSVKDevice* _Nonnull)null;
	-(void)setBufferAccess: (TSBuffer* _Nonnull)buffer access: (uint32_t)access NS_SWIFT_NAME(setBufferAccess(_:_:));
	-(void)setBufferAccess_: (TSBuffer* _Nonnull)buffer access: (uint32_t)access NS_SWIFT_NAME(setBufferAccess(buffer:access:));
	-(void)setTextureLayout: (TSTexture* _Nonnull)texture layout: (uint32_t)layout NS_SWIFT_NAME(setTextureLayout(_:_:));
	-(void)setTextureLayout_: (TSTexture* _Nonnull)texture layout: (uint32_t)layout NS_SWIFT_NAME(setTextureLayout(texture:layout:));
	-(BOOL)waitVKFence: (void* _Nonnull)fence timeout: (uint64_t)timeout reset: (BOOL)reset NS_SWIFT_NAME(waitVKFence(_:_:_:));
	-(BOOL)waitVKFence_: (void* _Nonnull)fence timeout: (uint64_t)timeout reset: (BOOL)reset NS_SWIFT_NAME(waitVKFence(fence:timeout:reset:));
	-(BOOL)signalVKFence: (void* _Nonnull)fence NS_SWIFT_NAME(signalVKFence(_:));
	-(BOOL)signalVKFence_: (void* _Nonnull)fence NS_SWIFT_NAME(signalVKFence(fence:));
	-(void)waitSemaphore: (void* _Nonnull)semaphore mask: (uint32_t)mask NS_SWIFT_NAME(waitSemaphore(_:_:));
	-(void)waitSemaphore_: (void* _Nonnull)semaphore mask: (uint32_t)mask NS_SWIFT_NAME(waitSemaphore(semaphore:mask:));
	-(void)signalSemaphore: (void* _Nonnull)semaphore NS_SWIFT_NAME(signalSemaphore(_:));
	-(void)signalSemaphore_: (void* _Nonnull)semaphore NS_SWIFT_NAME(signalSemaphore(semaphore:));
	-(BOOL)hasMemoryType: (uint32_t)flags NS_SWIFT_NAME(hasMemoryType(_:));
	-(BOOL)hasMemoryType_: (uint32_t)flags NS_SWIFT_NAME(hasMemoryType(flags:));
	-(uint32_t)getMemoryIndex: (uint32_t)types flags: (uint32_t)flags NS_SWIFT_NAME(memoryIndex(_:_:));
	-(uint32_t)getMemoryIndex_: (uint32_t)types flags: (uint32_t)flags NS_SWIFT_NAME(memoryIndex(types:flags:));
	-(VkInstance _Nullable)getInstance NS_SWIFT_NAME(instance());
	-(VkPhysicalDevice _Nullable)getAdapter NS_SWIFT_NAME(adapter());
	-(VkDevice _Nullable)getVKDevice NS_SWIFT_NAME(VKDevice());
	-(VkQueue _Nullable)getQueue NS_SWIFT_NAME(queue());
	-(VkCommandBuffer _Nullable)getCommand NS_SWIFT_NAME(command());
	-(uint32_t)getFamily NS_SWIFT_NAME(family());
@end

/// Tellusim::FUDevice
NS_SWIFT_NAME(FUDevice)
TS_CAPI @interface TSFUDevice : TSDevice
	-(id _Nonnull)init_4 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_5: (TSDevice* _Nonnull * _Nullable)devices devices_size: (uint32_t)devices_size NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_5_: (TSDevice* _Nonnull * _Nullable)devices devices_size: (uint32_t)devices_size NS_SWIFT_NAME(init(devices:devices_size:));
	-(id _Nonnull)init_6: (TSDevice* _Nonnull * _Nullable)devices devices_size: (uint32_t)devices_size owner: (BOOL)owner NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_6_: (TSDevice* _Nonnull * _Nullable)devices devices_size: (uint32_t)devices_size owner: (BOOL)owner NS_SWIFT_NAME(init(devices:devices_size:owner:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::FUDevice* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::FUDevice&)p;
		-(Tellusim::FUDevice* _Nonnull)pointer;
		-(Tellusim::FUDevice&)ref;
	#endif
	-(id _Nonnull)initDevice: (TSDevice* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSDevice* _Nonnull)getDevice;
	-(BOOL)equalPtr: (const TSFUDevice* _Nonnull)p;
	-(TSFUDevice* _Nonnull)copyPtr;
	-(TSFUDevice* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFUDevice* _Nonnull)null;
	-(void)setMask: (uint32_t)mask NS_SWIFT_NAME(setMask(_:));
	-(void)setMask_: (uint32_t)mask NS_SWIFT_NAME(setMask(mask:));
	-(uint32_t)getMask NS_SWIFT_NAME(mask());
	-(uint32_t)getNumDevices NS_SWIFT_NAME(numDevices());
	-(const TSDevice* _Nonnull)getDevice: (uint32_t)index NS_SWIFT_NAME(device(_:));
	-(const TSDevice* _Nonnull)getDevice_: (uint32_t)index NS_SWIFT_NAME(device(index:));
@end

/// Tellusim::Kernel
NS_SWIFT_NAME(Kernel)
TS_CAPI @interface TSKernel : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Kernel* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Kernel&)p;
		-(Tellusim::Kernel* _Nonnull)pointer;
		-(Tellusim::Kernel&)ref;
	#endif
	-(BOOL)equalPtr: (const TSKernel* _Nonnull)p;
	-(TSKernel* _Nonnull)copyPtr;
	-(TSKernel* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSKernel* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)clear;
	-(BOOL)isCreated;
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(BOOL)create;
	-(void)setParameters: (const TSKernel* _Nonnull)kernel NS_SWIFT_NAME(setParameters(_:));
	-(void)setParameters_: (const TSKernel* _Nonnull)kernel NS_SWIFT_NAME(setParameters(kernel:));
	-(BOOL)saveState: (TSStream* _Nonnull)stream NS_SWIFT_NAME(saveState(_:));
	-(BOOL)saveState_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(saveState(stream:));
	-(void)setShader: (TSShader* _Nonnull)shader NS_SWIFT_NAME(setShader(_:));
	-(void)setShader_: (TSShader* _Nonnull)shader NS_SWIFT_NAME(setShader(shader:));
	-(void)setShader_1: (TSShader* _Nonnull)shader owner: (BOOL)owner NS_SWIFT_NAME(setShader(_:_:));
	-(void)setShader_1_: (TSShader* _Nonnull)shader owner: (BOOL)owner NS_SWIFT_NAME(setShader(shader:owner:));
	-(TSShader* _Nonnull)getComputeShader NS_SWIFT_NAME(computeShader());
	-(BOOL)loadShader: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadShader(_:_:));
	-(BOOL)loadShader_: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadShader(name:format:));
	-(BOOL)loadShaderGLSL: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadShaderGLSL(_:_:));
	-(BOOL)loadShaderGLSL_: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadShaderGLSL(name:format:));
	-(BOOL)loadShader_1: (const char* _Nonnull)name NS_SWIFT_NAME(loadShader(_:));
	-(BOOL)loadShader_1_: (const char* _Nonnull)name NS_SWIFT_NAME(loadShader(name:));
	-(BOOL)loadShader_2: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadShader(_:_:));
	-(BOOL)loadShader_2_: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadShader(name:macros:));
	-(BOOL)loadShader_3: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(loadShader(_:_:_:));
	-(BOOL)loadShader_3_: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(loadShader(name:macros:includes:));
	-(BOOL)loadShader_4: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(loadShader(_:_:_:_:));
	-(BOOL)loadShader_4_: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(loadShader(name:macros:includes:size:));
	-(BOOL)loadShaderGLSL_1: (const char* _Nonnull)name NS_SWIFT_NAME(loadShaderGLSL(_:));
	-(BOOL)loadShaderGLSL_1_: (const char* _Nonnull)name NS_SWIFT_NAME(loadShaderGLSL(name:));
	-(BOOL)loadShaderGLSL_2: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadShaderGLSL(_:_:));
	-(BOOL)loadShaderGLSL_2_: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadShaderGLSL(name:macros:));
	-(BOOL)loadShaderGLSL_3: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(loadShaderGLSL(_:_:_:));
	-(BOOL)loadShaderGLSL_3_: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(loadShaderGLSL(name:macros:includes:));
	-(BOOL)loadShaderGLSL_4: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(loadShaderGLSL(_:_:_:_:));
	-(BOOL)loadShaderGLSL_4_: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(loadShaderGLSL(name:macros:includes:size:));
	-(BOOL)loadShaderSPIRV: (const char* _Nonnull)name NS_SWIFT_NAME(loadShaderSPIRV(_:));
	-(BOOL)loadShaderSPIRV_: (const char* _Nonnull)name NS_SWIFT_NAME(loadShaderSPIRV(name:));
	-(BOOL)createShader: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createShader(_:_:));
	-(BOOL)createShader_: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createShader(src:format:));
	-(BOOL)createShaderGLSL: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createShaderGLSL(_:_:));
	-(BOOL)createShaderGLSL_: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createShaderGLSL(src:format:));
	-(BOOL)createShader_1: (const char* _Nonnull)src NS_SWIFT_NAME(createShader(_:));
	-(BOOL)createShader_1_: (const char* _Nonnull)src NS_SWIFT_NAME(createShader(src:));
	-(BOOL)createShader_2: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createShader(_:_:));
	-(BOOL)createShader_2_: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createShader(src:macros:));
	-(BOOL)createShader_3: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(createShader(_:_:_:));
	-(BOOL)createShader_3_: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(createShader(src:macros:includes:));
	-(BOOL)createShader_4: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(createShader(_:_:_:_:));
	-(BOOL)createShader_4_: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(createShader(src:macros:includes:size:));
	-(BOOL)createShaderGLSL_1: (const char* _Nonnull)src NS_SWIFT_NAME(createShaderGLSL(_:));
	-(BOOL)createShaderGLSL_1_: (const char* _Nonnull)src NS_SWIFT_NAME(createShaderGLSL(src:));
	-(BOOL)createShaderGLSL_2: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createShaderGLSL(_:_:));
	-(BOOL)createShaderGLSL_2_: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createShaderGLSL(src:macros:));
	-(BOOL)createShaderGLSL_3: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(createShaderGLSL(_:_:_:));
	-(BOOL)createShaderGLSL_3_: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(createShaderGLSL(src:macros:includes:));
	-(BOOL)createShaderGLSL_4: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(createShaderGLSL(_:_:_:_:));
	-(BOOL)createShaderGLSL_4_: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(createShaderGLSL(src:macros:includes:size:));
	-(BOOL)createShaderSPIRV: (uint32_t* _Nonnull)data data_size: (uint32_t)data_size NS_SWIFT_NAME(createShaderSPIRV(_:_:));
	-(BOOL)createShaderSPIRV_: (uint32_t* _Nonnull)data data_size: (uint32_t)data_size NS_SWIFT_NAME(createShaderSPIRV(data:data_size:));
	-(uint32_t)addSampler;
	-(TSKernel* _Nonnull)setSamplers: (uint32_t)num NS_SWIFT_NAME(setSamplers(_:));
	-(TSKernel* _Nonnull)setSamplers_: (uint32_t)num NS_SWIFT_NAME(setSamplers(num:));
	-(uint32_t)getNumSamplers NS_SWIFT_NAME(numSamplers());
	-(TSKernel* _Nonnull)setSamplerOffset: (uint32_t)offset NS_SWIFT_NAME(setSamplerOffset(_:));
	-(TSKernel* _Nonnull)setSamplerOffset_: (uint32_t)offset NS_SWIFT_NAME(setSamplerOffset(offset:));
	-(uint32_t)getSamplerOffset NS_SWIFT_NAME(samplerOffset());
	-(TSKernel* _Nonnull)setSamplerArray: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setSamplerArray(_:_:_:));
	-(TSKernel* _Nonnull)setSamplerArray_: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setSamplerArray(index:num:array:));
	-(uint32_t)getSamplerArray: (uint32_t)index NS_SWIFT_NAME(samplerArray(_:));
	-(uint32_t)getSamplerArray_: (uint32_t)index NS_SWIFT_NAME(samplerArray(index:));
	-(uint32_t)addTexture;
	-(TSKernel* _Nonnull)setTextures: (uint32_t)num NS_SWIFT_NAME(setTextures(_:));
	-(TSKernel* _Nonnull)setTextures_: (uint32_t)num NS_SWIFT_NAME(setTextures(num:));
	-(uint32_t)getNumTextures NS_SWIFT_NAME(numTextures());
	-(TSKernel* _Nonnull)setTextureOffset: (uint32_t)offset NS_SWIFT_NAME(setTextureOffset(_:));
	-(TSKernel* _Nonnull)setTextureOffset_: (uint32_t)offset NS_SWIFT_NAME(setTextureOffset(offset:));
	-(uint32_t)getTextureOffset NS_SWIFT_NAME(textureOffset());
	-(TSKernel* _Nonnull)setTextureArray: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setTextureArray(_:_:_:));
	-(TSKernel* _Nonnull)setTextureArray_: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setTextureArray(index:num:array:));
	-(uint32_t)getTextureArray: (uint32_t)index NS_SWIFT_NAME(textureArray(_:));
	-(uint32_t)getTextureArray_: (uint32_t)index NS_SWIFT_NAME(textureArray(index:));
	-(uint32_t)addSurface;
	-(TSKernel* _Nonnull)setSurfaces: (uint32_t)num NS_SWIFT_NAME(setSurfaces(_:));
	-(TSKernel* _Nonnull)setSurfaces_: (uint32_t)num NS_SWIFT_NAME(setSurfaces(num:));
	-(uint32_t)getNumSurfaces NS_SWIFT_NAME(numSurfaces());
	-(TSKernel* _Nonnull)setSurfaceOffset: (uint32_t)offset NS_SWIFT_NAME(setSurfaceOffset(_:));
	-(TSKernel* _Nonnull)setSurfaceOffset_: (uint32_t)offset NS_SWIFT_NAME(setSurfaceOffset(offset:));
	-(uint32_t)getSurfaceOffset NS_SWIFT_NAME(surfaceOffset());
	-(TSKernel* _Nonnull)setSurfaceArray: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setSurfaceArray(_:_:_:));
	-(TSKernel* _Nonnull)setSurfaceArray_: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setSurfaceArray(index:num:array:));
	-(uint32_t)getSurfaceArray: (uint32_t)index NS_SWIFT_NAME(surfaceArray(_:));
	-(uint32_t)getSurfaceArray_: (uint32_t)index NS_SWIFT_NAME(surfaceArray(index:));
	-(uint32_t)addUniform NS_SWIFT_NAME(addUniform());
	-(uint32_t)addUniform_1: (TS_BindFlags)flags NS_SWIFT_NAME(addUniform(_:));
	-(uint32_t)addUniform_1_: (TS_BindFlags)flags NS_SWIFT_NAME(addUniform(flags:));
	-(TSKernel* _Nonnull)setUniforms: (uint32_t)num NS_SWIFT_NAME(setUniforms(_:));
	-(TSKernel* _Nonnull)setUniforms_: (uint32_t)num NS_SWIFT_NAME(setUniforms(num:));
	-(TSKernel* _Nonnull)setUniforms_1: (uint32_t)num flags: (TS_BindFlags)flags NS_SWIFT_NAME(setUniforms(_:_:));
	-(TSKernel* _Nonnull)setUniforms_1_: (uint32_t)num flags: (TS_BindFlags)flags NS_SWIFT_NAME(setUniforms(num:flags:));
	-(uint32_t)getNumUniforms NS_SWIFT_NAME(numUniforms());
	-(TSKernel* _Nonnull)setUniformOffset: (uint32_t)offset NS_SWIFT_NAME(setUniformOffset(_:));
	-(TSKernel* _Nonnull)setUniformOffset_: (uint32_t)offset NS_SWIFT_NAME(setUniformOffset(offset:));
	-(uint32_t)getUniformOffset NS_SWIFT_NAME(uniformOffset());
	-(TSKernel* _Nonnull)setUniformFlags: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setUniformFlags(_:_:));
	-(TSKernel* _Nonnull)setUniformFlags_: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setUniformFlags(index:flags:));
	-(TS_BindFlags)getUniformFlags: (uint32_t)index NS_SWIFT_NAME(uniformFlags(_:));
	-(TS_BindFlags)getUniformFlags_: (uint32_t)index NS_SWIFT_NAME(uniformFlags(index:));
	-(uint32_t)addStorage NS_SWIFT_NAME(addStorage());
	-(uint32_t)addStorage_1: (TS_BindFlags)flags NS_SWIFT_NAME(addStorage(_:));
	-(uint32_t)addStorage_1_: (TS_BindFlags)flags NS_SWIFT_NAME(addStorage(flags:));
	-(TSKernel* _Nonnull)setStorages: (uint32_t)num NS_SWIFT_NAME(setStorages(_:));
	-(TSKernel* _Nonnull)setStorages_: (uint32_t)num NS_SWIFT_NAME(setStorages(num:));
	-(TSKernel* _Nonnull)setStorages_1: (uint32_t)num flags: (TS_BindFlags)flags NS_SWIFT_NAME(setStorages(_:_:));
	-(TSKernel* _Nonnull)setStorages_1_: (uint32_t)num flags: (TS_BindFlags)flags NS_SWIFT_NAME(setStorages(num:flags:));
	-(uint32_t)getNumStorages NS_SWIFT_NAME(numStorages());
	-(TSKernel* _Nonnull)setStorageOffset: (uint32_t)offset NS_SWIFT_NAME(setStorageOffset(_:));
	-(TSKernel* _Nonnull)setStorageOffset_: (uint32_t)offset NS_SWIFT_NAME(setStorageOffset(offset:));
	-(uint32_t)getStorageOffset NS_SWIFT_NAME(storageOffset());
	-(TSKernel* _Nonnull)setStorageFlags: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setStorageFlags(_:_:));
	-(TSKernel* _Nonnull)setStorageFlags_: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setStorageFlags(index:flags:));
	-(TS_BindFlags)getStorageFlags: (uint32_t)index NS_SWIFT_NAME(storageFlags(_:));
	-(TS_BindFlags)getStorageFlags_: (uint32_t)index NS_SWIFT_NAME(storageFlags(index:));
	-(uint32_t)addTracing;
	-(TSKernel* _Nonnull)setTracings: (uint32_t)num NS_SWIFT_NAME(setTracings(_:));
	-(TSKernel* _Nonnull)setTracings_: (uint32_t)num NS_SWIFT_NAME(setTracings(num:));
	-(uint32_t)getNumTracings NS_SWIFT_NAME(numTracings());
	-(TSKernel* _Nonnull)setTracingOffset: (uint32_t)offset NS_SWIFT_NAME(setTracingOffset(_:));
	-(TSKernel* _Nonnull)setTracingOffset_: (uint32_t)offset NS_SWIFT_NAME(setTracingOffset(offset:));
	-(uint32_t)getTracingOffset NS_SWIFT_NAME(tracingOffset());
	-(uint32_t)addTexel;
	-(TSKernel* _Nonnull)setTexels: (uint32_t)num NS_SWIFT_NAME(setTexels(_:));
	-(TSKernel* _Nonnull)setTexels_: (uint32_t)num NS_SWIFT_NAME(setTexels(num:));
	-(uint32_t)getNumTexels NS_SWIFT_NAME(numTexels());
	-(TSKernel* _Nonnull)setTexelOffset: (uint32_t)offset NS_SWIFT_NAME(setTexelOffset(_:));
	-(TSKernel* _Nonnull)setTexelOffset_: (uint32_t)offset NS_SWIFT_NAME(setTexelOffset(offset:));
	-(uint32_t)getTexelOffset NS_SWIFT_NAME(texelOffset());
	-(uint32_t)addTable: (TS_TableType)type size: (uint32_t)size NS_SWIFT_NAME(addTable(_:_:));
	-(uint32_t)addTable_: (TS_TableType)type size: (uint32_t)size NS_SWIFT_NAME(addTable(type:size:));
	-(uint32_t)getNumTables NS_SWIFT_NAME(numTables());
	-(TSKernel* _Nonnull)setTableOffset: (uint32_t)offset NS_SWIFT_NAME(setTableOffset(_:));
	-(TSKernel* _Nonnull)setTableOffset_: (uint32_t)offset NS_SWIFT_NAME(setTableOffset(offset:));
	-(uint32_t)getTableOffset NS_SWIFT_NAME(tableOffset());
	-(TSKernel* _Nonnull)setTableType: (uint32_t)index type: (TS_TableType)type size: (uint32_t)size NS_SWIFT_NAME(setTableType(_:_:_:));
	-(TSKernel* _Nonnull)setTableType_: (uint32_t)index type: (TS_TableType)type size: (uint32_t)size NS_SWIFT_NAME(setTableType(index:type:size:));
	-(TSKernel* _Nonnull)setTableType_1: (uint32_t)index type: (TS_TableType)type size: (uint32_t)size flags: (TS_BindFlags)flags NS_SWIFT_NAME(setTableType(_:_:_:_:));
	-(TSKernel* _Nonnull)setTableType_1_: (uint32_t)index type: (TS_TableType)type size: (uint32_t)size flags: (TS_BindFlags)flags NS_SWIFT_NAME(setTableType(index:type:size:flags:));
	-(TS_TableType)getTableType: (uint32_t)index NS_SWIFT_NAME(tableType(_:));
	-(TS_TableType)getTableType_: (uint32_t)index NS_SWIFT_NAME(tableType(index:));
	-(uint32_t)getTableSize: (uint32_t)index NS_SWIFT_NAME(tableSize(_:));
	-(uint32_t)getTableSize_: (uint32_t)index NS_SWIFT_NAME(tableSize(index:));
	-(TSKernel* _Nonnull)setTableFlags: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setTableFlags(_:_:));
	-(TSKernel* _Nonnull)setTableFlags_: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setTableFlags(index:flags:));
	-(TS_BindFlags)getTableFlags: (uint32_t)index NS_SWIFT_NAME(tableFlags(_:));
	-(TS_BindFlags)getTableFlags_: (uint32_t)index NS_SWIFT_NAME(tableFlags(index:));
	-(void)setGroupSize: (uint32_t)width NS_SWIFT_NAME(setGroupSize(_:));
	-(void)setGroupSize_: (uint32_t)width NS_SWIFT_NAME(setGroupSize(width:));
	-(void)setGroupSize_1: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setGroupSize(_:_:));
	-(void)setGroupSize_1_: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setGroupSize(width:height:));
	-(void)setGroupSize_2: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth NS_SWIFT_NAME(setGroupSize(_:_:_:));
	-(void)setGroupSize_2_: (uint32_t)width height: (uint32_t)height depth: (uint32_t)depth NS_SWIFT_NAME(setGroupSize(width:height:depth:));
	-(uint32_t)getGroupSizeX NS_SWIFT_NAME(groupSizeX());
	-(uint32_t)getGroupSizeY NS_SWIFT_NAME(groupSizeY());
	-(uint32_t)getGroupSizeZ NS_SWIFT_NAME(groupSizeZ());
@end

/// Tellusim::D3D12Kernel
NS_SWIFT_NAME(D3D12Kernel)
TS_CAPI @interface TSD3D12Kernel : TSKernel
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D12Kernel* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D12Kernel&)p;
		-(Tellusim::D3D12Kernel* _Nonnull)pointer;
		-(Tellusim::D3D12Kernel&)ref;
	#endif
	-(id _Nonnull)initKernel: (TSKernel* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSKernel* _Nonnull)getKernel;
	-(BOOL)equalPtr: (const TSD3D12Kernel* _Nonnull)p;
	-(TSD3D12Kernel* _Nonnull)copyPtr;
	-(TSD3D12Kernel* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D12Kernel* _Nonnull)null;
	-(ID3D12RootSignature* _Nonnull)getRootSignature NS_SWIFT_NAME(rootSignature());
@end

/// Tellusim::MTLKernel
NS_SWIFT_NAME(MTLKernel)
TS_CAPI @interface TSMTLKernel : TSKernel
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MTLKernel* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MTLKernel&)p;
		-(Tellusim::MTLKernel* _Nonnull)pointer;
		-(Tellusim::MTLKernel&)ref;
	#endif
	-(id _Nonnull)initKernel: (TSKernel* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSKernel* _Nonnull)getKernel;
	-(BOOL)equalPtr: (const TSMTLKernel* _Nonnull)p;
	-(TSMTLKernel* _Nonnull)copyPtr;
	-(TSMTLKernel* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMTLKernel* _Nonnull)null;
	-(void)setIndirect: (BOOL)enabled NS_SWIFT_NAME(setIndirect(_:));
	-(void)setIndirect_: (BOOL)enabled NS_SWIFT_NAME(setIndirect(enabled:));
	-(BOOL)isIndirect;
	-(void* _Nonnull)getComputeFunction NS_SWIFT_NAME(computeFunction());
@end

/// Tellusim::FUKernel
NS_SWIFT_NAME(FUKernel)
TS_CAPI @interface TSFUKernel : TSKernel
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSKernel* _Nonnull * _Nullable)kernels kernels_size: (uint32_t)kernels_size NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TSKernel* _Nonnull * _Nullable)kernels kernels_size: (uint32_t)kernels_size NS_SWIFT_NAME(init(kernels:kernels_size:));
	-(id _Nonnull)init_3: (TSKernel* _Nonnull * _Nullable)kernels kernels_size: (uint32_t)kernels_size owner: (BOOL)owner NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_3_: (TSKernel* _Nonnull * _Nullable)kernels kernels_size: (uint32_t)kernels_size owner: (BOOL)owner NS_SWIFT_NAME(init(kernels:kernels_size:owner:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::FUKernel* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::FUKernel&)p;
		-(Tellusim::FUKernel* _Nonnull)pointer;
		-(Tellusim::FUKernel&)ref;
	#endif
	-(id _Nonnull)initKernel: (TSKernel* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSKernel* _Nonnull)getKernel;
	-(BOOL)equalPtr: (const TSFUKernel* _Nonnull)p;
	-(TSFUKernel* _Nonnull)copyPtr;
	-(TSFUKernel* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFUKernel* _Nonnull)null;
	-(void)setMask: (uint32_t)mask NS_SWIFT_NAME(setMask(_:));
	-(void)setMask_: (uint32_t)mask NS_SWIFT_NAME(setMask(mask:));
	-(uint32_t)getMask NS_SWIFT_NAME(mask());
	-(uint32_t)getNumKernels NS_SWIFT_NAME(numKernels());
	-(const TSKernel* _Nonnull)getKernel: (uint32_t)index NS_SWIFT_NAME(kernel(_:));
	-(const TSKernel* _Nonnull)getKernel_: (uint32_t)index NS_SWIFT_NAME(kernel(index:));
@end

/// Tellusim::Pipeline
NS_SWIFT_NAME(Pipeline)
TS_CAPI @interface TSPipeline : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Pipeline* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Pipeline&)p;
		-(Tellusim::Pipeline* _Nonnull)pointer;
		-(Tellusim::Pipeline&)ref;
	#endif
	-(BOOL)equalPtr: (const TSPipeline* _Nonnull)p;
	-(TSPipeline* _Nonnull)copyPtr;
	-(TSPipeline* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSPipeline* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)clear;
	-(BOOL)isCreated;
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(BOOL)create;
	-(void)setParameters: (const TSPipeline* _Nonnull)pipeline NS_SWIFT_NAME(setParameters(_:));
	-(void)setParameters_: (const TSPipeline* _Nonnull)pipeline NS_SWIFT_NAME(setParameters(pipeline:));
	-(BOOL)saveState: (TSStream* _Nonnull)stream NS_SWIFT_NAME(saveState(_:));
	-(BOOL)saveState_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(saveState(stream:));
	-(void)addShader: (TSShader* _Nonnull)shader NS_SWIFT_NAME(addShader(_:));
	-(void)addShader_: (TSShader* _Nonnull)shader NS_SWIFT_NAME(addShader(shader:));
	-(void)addShader_1: (TSShader* _Nonnull)shader owner: (BOOL)owner NS_SWIFT_NAME(addShader(_:_:));
	-(void)addShader_1_: (TSShader* _Nonnull)shader owner: (BOOL)owner NS_SWIFT_NAME(addShader(shader:owner:));
	-(TSShader* _Nonnull)getVertexShader NS_SWIFT_NAME(vertexShader());
	-(TSShader* _Nonnull)getControlShader NS_SWIFT_NAME(controlShader());
	-(TSShader* _Nonnull)getEvaluateShader NS_SWIFT_NAME(evaluateShader());
	-(TSShader* _Nonnull)getGeometryShader NS_SWIFT_NAME(geometryShader());
	-(TSShader* _Nonnull)getFragmentShader NS_SWIFT_NAME(fragmentShader());
	-(TSShader* _Nonnull)getTaskShader NS_SWIFT_NAME(taskShader());
	-(TSShader* _Nonnull)getMeshShader NS_SWIFT_NAME(meshShader());
	-(BOOL)loadShader: (TS_ShaderType)type name: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadShader(_:_:_:));
	-(BOOL)loadShader_: (TS_ShaderType)type name: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadShader(type:name:format:));
	-(BOOL)loadShaderGLSL: (TS_ShaderType)type name: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadShaderGLSL(_:_:_:));
	-(BOOL)loadShaderGLSL_: (TS_ShaderType)type name: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadShaderGLSL(type:name:format:));
	-(BOOL)loadShader_1: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShader(_:_:));
	-(BOOL)loadShader_1_: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShader(type:name:));
	-(BOOL)loadShader_2: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadShader(_:_:_:));
	-(BOOL)loadShader_2_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadShader(type:name:macros:));
	-(BOOL)loadShader_3: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(loadShader(_:_:_:_:));
	-(BOOL)loadShader_3_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(loadShader(type:name:macros:includes:));
	-(BOOL)loadShader_4: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(loadShader(_:_:_:_:_:));
	-(BOOL)loadShader_4_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(loadShader(type:name:macros:includes:size:));
	-(BOOL)loadShaderGLSL_1: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShaderGLSL(_:_:));
	-(BOOL)loadShaderGLSL_1_: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShaderGLSL(type:name:));
	-(BOOL)loadShaderGLSL_2: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadShaderGLSL(_:_:_:));
	-(BOOL)loadShaderGLSL_2_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadShaderGLSL(type:name:macros:));
	-(BOOL)loadShaderGLSL_3: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(loadShaderGLSL(_:_:_:_:));
	-(BOOL)loadShaderGLSL_3_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(loadShaderGLSL(type:name:macros:includes:));
	-(BOOL)loadShaderGLSL_4: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(loadShaderGLSL(_:_:_:_:_:));
	-(BOOL)loadShaderGLSL_4_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(loadShaderGLSL(type:name:macros:includes:size:));
	-(BOOL)loadShaderSPIRV: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShaderSPIRV(_:_:));
	-(BOOL)loadShaderSPIRV_: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShaderSPIRV(type:name:));
	-(BOOL)createShader: (TS_ShaderType)type src: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createShader(_:_:_:));
	-(BOOL)createShader_: (TS_ShaderType)type src: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createShader(type:src:format:));
	-(BOOL)createShaderGLSL: (TS_ShaderType)type src: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createShaderGLSL(_:_:_:));
	-(BOOL)createShaderGLSL_: (TS_ShaderType)type src: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createShaderGLSL(type:src:format:));
	-(BOOL)createShader_1: (TS_ShaderType)type src: (const char* _Nonnull)src NS_SWIFT_NAME(createShader(_:_:));
	-(BOOL)createShader_1_: (TS_ShaderType)type src: (const char* _Nonnull)src NS_SWIFT_NAME(createShader(type:src:));
	-(BOOL)createShader_2: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createShader(_:_:_:));
	-(BOOL)createShader_2_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createShader(type:src:macros:));
	-(BOOL)createShader_3: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(createShader(_:_:_:_:));
	-(BOOL)createShader_3_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(createShader(type:src:macros:includes:));
	-(BOOL)createShader_4: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(createShader(_:_:_:_:_:));
	-(BOOL)createShader_4_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(createShader(type:src:macros:includes:size:));
	-(BOOL)createShaderGLSL_1: (TS_ShaderType)type src: (const char* _Nonnull)src NS_SWIFT_NAME(createShaderGLSL(_:_:));
	-(BOOL)createShaderGLSL_1_: (TS_ShaderType)type src: (const char* _Nonnull)src NS_SWIFT_NAME(createShaderGLSL(type:src:));
	-(BOOL)createShaderGLSL_2: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createShaderGLSL(_:_:_:));
	-(BOOL)createShaderGLSL_2_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createShaderGLSL(type:src:macros:));
	-(BOOL)createShaderGLSL_3: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(createShaderGLSL(_:_:_:_:));
	-(BOOL)createShaderGLSL_3_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(createShaderGLSL(type:src:macros:includes:));
	-(BOOL)createShaderGLSL_4: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(createShaderGLSL(_:_:_:_:_:));
	-(BOOL)createShaderGLSL_4_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(createShaderGLSL(type:src:macros:includes:size:));
	-(BOOL)createShaderSPIRV: (TS_ShaderType)type data: (uint32_t* _Nonnull)data data_size: (uint32_t)data_size NS_SWIFT_NAME(createShaderSPIRV(_:_:_:));
	-(BOOL)createShaderSPIRV_: (TS_ShaderType)type data: (uint32_t* _Nonnull)data data_size: (uint32_t)data_size NS_SWIFT_NAME(createShaderSPIRV(type:data:data_size:));
	-(uint32_t)addSampler: (TS_ShaderMask)mask NS_SWIFT_NAME(addSampler(_:));
	-(uint32_t)addSampler_: (TS_ShaderMask)mask NS_SWIFT_NAME(addSampler(mask:));
	-(uint32_t)getNumSamplers NS_SWIFT_NAME(numSamplers());
	-(TSPipeline* _Nonnull)setSamplerOffset: (uint32_t)offset NS_SWIFT_NAME(setSamplerOffset(_:));
	-(TSPipeline* _Nonnull)setSamplerOffset_: (uint32_t)offset NS_SWIFT_NAME(setSamplerOffset(offset:));
	-(uint32_t)getSamplerOffset NS_SWIFT_NAME(samplerOffset());
	-(TSPipeline* _Nonnull)setSamplerMask: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setSamplerMask(_:_:));
	-(TSPipeline* _Nonnull)setSamplerMask_: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setSamplerMask(index:mask:));
	-(TS_ShaderMask)getSamplerMask: (uint32_t)index NS_SWIFT_NAME(samplerMask(_:));
	-(TS_ShaderMask)getSamplerMask_: (uint32_t)index NS_SWIFT_NAME(samplerMask(index:));
	-(TSPipeline* _Nonnull)setSamplerMasks: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setSamplerMasks(_:_:_:));
	-(TSPipeline* _Nonnull)setSamplerMasks_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setSamplerMasks(index:num:mask:));
	-(TSPipeline* _Nonnull)setSamplerMasks_1: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask array: (BOOL)array NS_SWIFT_NAME(setSamplerMasks(_:_:_:_:));
	-(TSPipeline* _Nonnull)setSamplerMasks_1_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask array: (BOOL)array NS_SWIFT_NAME(setSamplerMasks(index:num:mask:array:));
	-(TS_ShaderMask)getSamplerMasks: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(samplerMasks(_:_:));
	-(TS_ShaderMask)getSamplerMasks_: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(samplerMasks(index:num:));
	-(TSPipeline* _Nonnull)setSamplerArray: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setSamplerArray(_:_:_:));
	-(TSPipeline* _Nonnull)setSamplerArray_: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setSamplerArray(index:num:array:));
	-(uint32_t)getSamplerArray: (uint32_t)index NS_SWIFT_NAME(samplerArray(_:));
	-(uint32_t)getSamplerArray_: (uint32_t)index NS_SWIFT_NAME(samplerArray(index:));
	-(uint32_t)addTexture: (TS_ShaderMask)mask NS_SWIFT_NAME(addTexture(_:));
	-(uint32_t)addTexture_: (TS_ShaderMask)mask NS_SWIFT_NAME(addTexture(mask:));
	-(uint32_t)getNumTextures NS_SWIFT_NAME(numTextures());
	-(TSPipeline* _Nonnull)setTextureOffset: (uint32_t)offset NS_SWIFT_NAME(setTextureOffset(_:));
	-(TSPipeline* _Nonnull)setTextureOffset_: (uint32_t)offset NS_SWIFT_NAME(setTextureOffset(offset:));
	-(uint32_t)getTextureOffset NS_SWIFT_NAME(textureOffset());
	-(TSPipeline* _Nonnull)setTextureMask: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTextureMask(_:_:));
	-(TSPipeline* _Nonnull)setTextureMask_: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTextureMask(index:mask:));
	-(TS_ShaderMask)getTextureMask: (uint32_t)index NS_SWIFT_NAME(textureMask(_:));
	-(TS_ShaderMask)getTextureMask_: (uint32_t)index NS_SWIFT_NAME(textureMask(index:));
	-(TSPipeline* _Nonnull)setTextureMasks: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTextureMasks(_:_:_:));
	-(TSPipeline* _Nonnull)setTextureMasks_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTextureMasks(index:num:mask:));
	-(TSPipeline* _Nonnull)setTextureMasks_1: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask array: (BOOL)array NS_SWIFT_NAME(setTextureMasks(_:_:_:_:));
	-(TSPipeline* _Nonnull)setTextureMasks_1_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask array: (BOOL)array NS_SWIFT_NAME(setTextureMasks(index:num:mask:array:));
	-(TS_ShaderMask)getTextureMasks: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(textureMasks(_:_:));
	-(TS_ShaderMask)getTextureMasks_: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(textureMasks(index:num:));
	-(TSPipeline* _Nonnull)setTextureArray: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setTextureArray(_:_:_:));
	-(TSPipeline* _Nonnull)setTextureArray_: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setTextureArray(index:num:array:));
	-(uint32_t)getTextureArray: (uint32_t)index NS_SWIFT_NAME(textureArray(_:));
	-(uint32_t)getTextureArray_: (uint32_t)index NS_SWIFT_NAME(textureArray(index:));
	-(uint32_t)addSurface: (TS_ShaderMask)mask NS_SWIFT_NAME(addSurface(_:));
	-(uint32_t)addSurface_: (TS_ShaderMask)mask NS_SWIFT_NAME(addSurface(mask:));
	-(uint32_t)getNumSurfaces NS_SWIFT_NAME(numSurfaces());
	-(TSPipeline* _Nonnull)setSurfaceOffset: (uint32_t)offset NS_SWIFT_NAME(setSurfaceOffset(_:));
	-(TSPipeline* _Nonnull)setSurfaceOffset_: (uint32_t)offset NS_SWIFT_NAME(setSurfaceOffset(offset:));
	-(uint32_t)getSurfaceOffset NS_SWIFT_NAME(surfaceOffset());
	-(TSPipeline* _Nonnull)setSurfaceMask: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setSurfaceMask(_:_:));
	-(TSPipeline* _Nonnull)setSurfaceMask_: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setSurfaceMask(index:mask:));
	-(TS_ShaderMask)getSurfaceMask: (uint32_t)index NS_SWIFT_NAME(surfaceMask(_:));
	-(TS_ShaderMask)getSurfaceMask_: (uint32_t)index NS_SWIFT_NAME(surfaceMask(index:));
	-(TSPipeline* _Nonnull)setSurfaceMasks: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setSurfaceMasks(_:_:_:));
	-(TSPipeline* _Nonnull)setSurfaceMasks_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setSurfaceMasks(index:num:mask:));
	-(TSPipeline* _Nonnull)setSurfaceMasks_1: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask array: (BOOL)array NS_SWIFT_NAME(setSurfaceMasks(_:_:_:_:));
	-(TSPipeline* _Nonnull)setSurfaceMasks_1_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask array: (BOOL)array NS_SWIFT_NAME(setSurfaceMasks(index:num:mask:array:));
	-(TS_ShaderMask)getSurfaceMasks: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(surfaceMasks(_:_:));
	-(TS_ShaderMask)getSurfaceMasks_: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(surfaceMasks(index:num:));
	-(TSPipeline* _Nonnull)setSurfaceArray: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setSurfaceArray(_:_:_:));
	-(TSPipeline* _Nonnull)setSurfaceArray_: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setSurfaceArray(index:num:array:));
	-(uint32_t)getSurfaceArray: (uint32_t)index NS_SWIFT_NAME(surfaceArray(_:));
	-(uint32_t)getSurfaceArray_: (uint32_t)index NS_SWIFT_NAME(surfaceArray(index:));
	-(uint32_t)addUniform: (TS_ShaderMask)mask NS_SWIFT_NAME(addUniform(_:));
	-(uint32_t)addUniform_: (TS_ShaderMask)mask NS_SWIFT_NAME(addUniform(mask:));
	-(uint32_t)addUniform_1: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(addUniform(_:_:));
	-(uint32_t)addUniform_1_: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(addUniform(mask:flags:));
	-(uint32_t)getNumUniforms NS_SWIFT_NAME(numUniforms());
	-(TSPipeline* _Nonnull)setUniformOffset: (uint32_t)offset NS_SWIFT_NAME(setUniformOffset(_:));
	-(TSPipeline* _Nonnull)setUniformOffset_: (uint32_t)offset NS_SWIFT_NAME(setUniformOffset(offset:));
	-(uint32_t)getUniformOffset NS_SWIFT_NAME(uniformOffset());
	-(TSPipeline* _Nonnull)setUniformMask: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setUniformMask(_:_:));
	-(TSPipeline* _Nonnull)setUniformMask_: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setUniformMask(index:mask:));
	-(TSPipeline* _Nonnull)setUniformMask_1: (uint32_t)index mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setUniformMask(_:_:_:));
	-(TSPipeline* _Nonnull)setUniformMask_1_: (uint32_t)index mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setUniformMask(index:mask:flags:));
	-(TS_ShaderMask)getUniformMask: (uint32_t)index NS_SWIFT_NAME(uniformMask(_:));
	-(TS_ShaderMask)getUniformMask_: (uint32_t)index NS_SWIFT_NAME(uniformMask(index:));
	-(TSPipeline* _Nonnull)setUniformMasks: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setUniformMasks(_:_:_:));
	-(TSPipeline* _Nonnull)setUniformMasks_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setUniformMasks(index:num:mask:));
	-(TSPipeline* _Nonnull)setUniformMasks_1: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setUniformMasks(_:_:_:_:));
	-(TSPipeline* _Nonnull)setUniformMasks_1_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setUniformMasks(index:num:mask:flags:));
	-(TS_ShaderMask)getUniformMasks: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(uniformMasks(_:_:));
	-(TS_ShaderMask)getUniformMasks_: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(uniformMasks(index:num:));
	-(TSPipeline* _Nonnull)setUniformFlags: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setUniformFlags(_:_:));
	-(TSPipeline* _Nonnull)setUniformFlags_: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setUniformFlags(index:flags:));
	-(TS_BindFlags)getUniformFlags: (uint32_t)index NS_SWIFT_NAME(uniformFlags(_:));
	-(TS_BindFlags)getUniformFlags_: (uint32_t)index NS_SWIFT_NAME(uniformFlags(index:));
	-(uint32_t)addStorage: (TS_ShaderMask)mask NS_SWIFT_NAME(addStorage(_:));
	-(uint32_t)addStorage_: (TS_ShaderMask)mask NS_SWIFT_NAME(addStorage(mask:));
	-(uint32_t)addStorage_1: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(addStorage(_:_:));
	-(uint32_t)addStorage_1_: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(addStorage(mask:flags:));
	-(uint32_t)getNumStorages NS_SWIFT_NAME(numStorages());
	-(TSPipeline* _Nonnull)setStorageOffset: (uint32_t)offset NS_SWIFT_NAME(setStorageOffset(_:));
	-(TSPipeline* _Nonnull)setStorageOffset_: (uint32_t)offset NS_SWIFT_NAME(setStorageOffset(offset:));
	-(uint32_t)getStorageOffset NS_SWIFT_NAME(storageOffset());
	-(TSPipeline* _Nonnull)setStorageMask: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setStorageMask(_:_:));
	-(TSPipeline* _Nonnull)setStorageMask_: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setStorageMask(index:mask:));
	-(TSPipeline* _Nonnull)setStorageMask_1: (uint32_t)index mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setStorageMask(_:_:_:));
	-(TSPipeline* _Nonnull)setStorageMask_1_: (uint32_t)index mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setStorageMask(index:mask:flags:));
	-(TS_ShaderMask)getStorageMask: (uint32_t)index NS_SWIFT_NAME(storageMask(_:));
	-(TS_ShaderMask)getStorageMask_: (uint32_t)index NS_SWIFT_NAME(storageMask(index:));
	-(TSPipeline* _Nonnull)setStorageMasks: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setStorageMasks(_:_:_:));
	-(TSPipeline* _Nonnull)setStorageMasks_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setStorageMasks(index:num:mask:));
	-(TSPipeline* _Nonnull)setStorageMasks_1: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setStorageMasks(_:_:_:_:));
	-(TSPipeline* _Nonnull)setStorageMasks_1_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setStorageMasks(index:num:mask:flags:));
	-(TS_ShaderMask)getStorageMasks: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(storageMasks(_:_:));
	-(TS_ShaderMask)getStorageMasks_: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(storageMasks(index:num:));
	-(TSPipeline* _Nonnull)setStorageFlags: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setStorageFlags(_:_:));
	-(TSPipeline* _Nonnull)setStorageFlags_: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setStorageFlags(index:flags:));
	-(TS_BindFlags)getStorageFlags: (uint32_t)index NS_SWIFT_NAME(storageFlags(_:));
	-(TS_BindFlags)getStorageFlags_: (uint32_t)index NS_SWIFT_NAME(storageFlags(index:));
	-(uint32_t)addTracing: (TS_ShaderMask)mask NS_SWIFT_NAME(addTracing(_:));
	-(uint32_t)addTracing_: (TS_ShaderMask)mask NS_SWIFT_NAME(addTracing(mask:));
	-(uint32_t)getNumTracings NS_SWIFT_NAME(numTracings());
	-(TSPipeline* _Nonnull)setTracingOffset: (uint32_t)offset NS_SWIFT_NAME(setTracingOffset(_:));
	-(TSPipeline* _Nonnull)setTracingOffset_: (uint32_t)offset NS_SWIFT_NAME(setTracingOffset(offset:));
	-(uint32_t)getTracingOffset NS_SWIFT_NAME(tracingOffset());
	-(TSPipeline* _Nonnull)setTracingMask: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTracingMask(_:_:));
	-(TSPipeline* _Nonnull)setTracingMask_: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTracingMask(index:mask:));
	-(TS_ShaderMask)getTracingMask: (uint32_t)index NS_SWIFT_NAME(tracingMask(_:));
	-(TS_ShaderMask)getTracingMask_: (uint32_t)index NS_SWIFT_NAME(tracingMask(index:));
	-(TSPipeline* _Nonnull)setTracingMasks: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTracingMasks(_:_:_:));
	-(TSPipeline* _Nonnull)setTracingMasks_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTracingMasks(index:num:mask:));
	-(TS_ShaderMask)getTracingMasks: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(tracingMasks(_:_:));
	-(TS_ShaderMask)getTracingMasks_: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(tracingMasks(index:num:));
	-(uint32_t)addTexel: (TS_ShaderMask)mask NS_SWIFT_NAME(addTexel(_:));
	-(uint32_t)addTexel_: (TS_ShaderMask)mask NS_SWIFT_NAME(addTexel(mask:));
	-(uint32_t)getNumTexels NS_SWIFT_NAME(numTexels());
	-(TSPipeline* _Nonnull)setTexelOffset: (uint32_t)offset NS_SWIFT_NAME(setTexelOffset(_:));
	-(TSPipeline* _Nonnull)setTexelOffset_: (uint32_t)offset NS_SWIFT_NAME(setTexelOffset(offset:));
	-(uint32_t)getTexelOffset NS_SWIFT_NAME(texelOffset());
	-(TSPipeline* _Nonnull)setTexelMask: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTexelMask(_:_:));
	-(TSPipeline* _Nonnull)setTexelMask_: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTexelMask(index:mask:));
	-(TS_ShaderMask)getTexelMask: (uint32_t)index NS_SWIFT_NAME(texelMask(_:));
	-(TS_ShaderMask)getTexelMask_: (uint32_t)index NS_SWIFT_NAME(texelMask(index:));
	-(TSPipeline* _Nonnull)setTexelMasks: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTexelMasks(_:_:_:));
	-(TSPipeline* _Nonnull)setTexelMasks_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTexelMasks(index:num:mask:));
	-(TS_ShaderMask)getTexelMasks: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(texelMasks(_:_:));
	-(TS_ShaderMask)getTexelMasks_: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(texelMasks(index:num:));
	-(uint32_t)addTable: (TS_TableType)type size: (uint32_t)size mask: (TS_ShaderMask)mask NS_SWIFT_NAME(addTable(_:_:_:));
	-(uint32_t)addTable_: (TS_TableType)type size: (uint32_t)size mask: (TS_ShaderMask)mask NS_SWIFT_NAME(addTable(type:size:mask:));
	-(uint32_t)addTable_1: (TS_TableType)type size: (uint32_t)size mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(addTable(_:_:_:_:));
	-(uint32_t)addTable_1_: (TS_TableType)type size: (uint32_t)size mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(addTable(type:size:mask:flags:));
	-(uint32_t)getNumTables NS_SWIFT_NAME(numTables());
	-(TSPipeline* _Nonnull)setTableOffset: (uint32_t)offset NS_SWIFT_NAME(setTableOffset(_:));
	-(TSPipeline* _Nonnull)setTableOffset_: (uint32_t)offset NS_SWIFT_NAME(setTableOffset(offset:));
	-(uint32_t)getTableOffset NS_SWIFT_NAME(tableOffset());
	-(TSPipeline* _Nonnull)setTableType: (uint32_t)index type: (TS_TableType)type size: (uint32_t)size mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTableType(_:_:_:_:));
	-(TSPipeline* _Nonnull)setTableType_: (uint32_t)index type: (TS_TableType)type size: (uint32_t)size mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTableType(index:type:size:mask:));
	-(TSPipeline* _Nonnull)setTableType_1: (uint32_t)index type: (TS_TableType)type size: (uint32_t)size mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setTableType(_:_:_:_:_:));
	-(TSPipeline* _Nonnull)setTableType_1_: (uint32_t)index type: (TS_TableType)type size: (uint32_t)size mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setTableType(index:type:size:mask:flags:));
	-(TS_TableType)getTableType: (uint32_t)index NS_SWIFT_NAME(tableType(_:));
	-(TS_TableType)getTableType_: (uint32_t)index NS_SWIFT_NAME(tableType(index:));
	-(uint32_t)getTableSize: (uint32_t)index NS_SWIFT_NAME(tableSize(_:));
	-(uint32_t)getTableSize_: (uint32_t)index NS_SWIFT_NAME(tableSize(index:));
	-(TSPipeline* _Nonnull)setTableMask: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTableMask(_:_:));
	-(TSPipeline* _Nonnull)setTableMask_: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTableMask(index:mask:));
	-(TSPipeline* _Nonnull)setTableMask_1: (uint32_t)index mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setTableMask(_:_:_:));
	-(TSPipeline* _Nonnull)setTableMask_1_: (uint32_t)index mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setTableMask(index:mask:flags:));
	-(TS_ShaderMask)getTableMask: (uint32_t)index NS_SWIFT_NAME(tableMask(_:));
	-(TS_ShaderMask)getTableMask_: (uint32_t)index NS_SWIFT_NAME(tableMask(index:));
	-(TSPipeline* _Nonnull)setTableFlags: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setTableFlags(_:_:));
	-(TSPipeline* _Nonnull)setTableFlags_: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setTableFlags(index:flags:));
	-(TS_BindFlags)getTableFlags: (uint32_t)index NS_SWIFT_NAME(tableFlags(_:));
	-(TS_BindFlags)getTableFlags_: (uint32_t)index NS_SWIFT_NAME(tableFlags(index:));
	-(uint32_t)getNumVertices NS_SWIFT_NAME(numVertices());
	-(uint32_t)getVertexStride: (uint32_t)index NS_SWIFT_NAME(vertexStride(_:));
	-(uint32_t)getVertexStride_: (uint32_t)index NS_SWIFT_NAME(vertexStride(index:));
	-(uint32_t)getVertexRate: (uint32_t)index NS_SWIFT_NAME(vertexRate(_:));
	-(uint32_t)getVertexRate_: (uint32_t)index NS_SWIFT_NAME(vertexRate(index:));
	-(uint32_t)addAttribute: (TS_PipelineAttribute)attribute format: (TS_Format)format vertex: (uint32_t)vertex offset: (size_t)offset stride: (size_t)stride NS_SWIFT_NAME(addAttribute(_:_:_:_:_:));
	-(uint32_t)addAttribute_: (TS_PipelineAttribute)attribute format: (TS_Format)format vertex: (uint32_t)vertex offset: (size_t)offset stride: (size_t)stride NS_SWIFT_NAME(addAttribute(attribute:format:vertex:offset:stride:));
	-(uint32_t)addAttribute_1: (TS_PipelineAttribute)attribute format: (TS_Format)format vertex: (uint32_t)vertex offset: (size_t)offset stride: (size_t)stride rate: (uint32_t)rate NS_SWIFT_NAME(addAttribute(_:_:_:_:_:_:));
	-(uint32_t)addAttribute_1_: (TS_PipelineAttribute)attribute format: (TS_Format)format vertex: (uint32_t)vertex offset: (size_t)offset stride: (size_t)stride rate: (uint32_t)rate NS_SWIFT_NAME(addAttribute(attribute:format:vertex:offset:stride:rate:));
	-(TSPipeline* _Nonnull)setAttribute: (uint32_t)index attribute: (TS_PipelineAttribute)attribute format: (TS_Format)format vertex: (uint32_t)vertex offset: (size_t)offset stride: (size_t)stride NS_SWIFT_NAME(setAttribute(_:_:_:_:_:_:));
	-(TSPipeline* _Nonnull)setAttribute_: (uint32_t)index attribute: (TS_PipelineAttribute)attribute format: (TS_Format)format vertex: (uint32_t)vertex offset: (size_t)offset stride: (size_t)stride NS_SWIFT_NAME(setAttribute(index:attribute:format:vertex:offset:stride:));
	-(TSPipeline* _Nonnull)setAttribute_1: (uint32_t)index attribute: (TS_PipelineAttribute)attribute format: (TS_Format)format vertex: (uint32_t)vertex offset: (size_t)offset stride: (size_t)stride rate: (uint32_t)rate NS_SWIFT_NAME(setAttribute(_:_:_:_:_:_:_:));
	-(TSPipeline* _Nonnull)setAttribute_1_: (uint32_t)index attribute: (TS_PipelineAttribute)attribute format: (TS_Format)format vertex: (uint32_t)vertex offset: (size_t)offset stride: (size_t)stride rate: (uint32_t)rate NS_SWIFT_NAME(setAttribute(index:attribute:format:vertex:offset:stride:rate:));
	-(TSPipeline* _Nonnull)setAttributeType: (uint32_t)index attribute: (TS_PipelineAttribute)attribute NS_SWIFT_NAME(setAttributeType(_:_:));
	-(TSPipeline* _Nonnull)setAttributeType_: (uint32_t)index attribute: (TS_PipelineAttribute)attribute NS_SWIFT_NAME(setAttributeType(index:attribute:));
	-(TSPipeline* _Nonnull)setAttributeFormat: (uint32_t)index format: (TS_Format)format NS_SWIFT_NAME(setAttributeFormat(_:_:));
	-(TSPipeline* _Nonnull)setAttributeFormat_: (uint32_t)index format: (TS_Format)format NS_SWIFT_NAME(setAttributeFormat(index:format:));
	-(TSPipeline* _Nonnull)setAttributeVertex: (uint32_t)index vertex: (uint32_t)vertex NS_SWIFT_NAME(setAttributeVertex(_:_:));
	-(TSPipeline* _Nonnull)setAttributeVertex_: (uint32_t)index vertex: (uint32_t)vertex NS_SWIFT_NAME(setAttributeVertex(index:vertex:));
	-(TSPipeline* _Nonnull)setAttributeOffset: (uint32_t)index offset: (size_t)offset NS_SWIFT_NAME(setAttributeOffset(_:_:));
	-(TSPipeline* _Nonnull)setAttributeOffset_: (uint32_t)index offset: (size_t)offset NS_SWIFT_NAME(setAttributeOffset(index:offset:));
	-(TSPipeline* _Nonnull)setAttributeStride: (uint32_t)index stride: (size_t)stride NS_SWIFT_NAME(setAttributeStride(_:_:));
	-(TSPipeline* _Nonnull)setAttributeStride_: (uint32_t)index stride: (size_t)stride NS_SWIFT_NAME(setAttributeStride(index:stride:));
	-(TSPipeline* _Nonnull)setAttributeRate: (uint32_t)index rate: (uint32_t)rate NS_SWIFT_NAME(setAttributeRate(_:_:));
	-(TSPipeline* _Nonnull)setAttributeRate_: (uint32_t)index rate: (uint32_t)rate NS_SWIFT_NAME(setAttributeRate(index:rate:));
	-(uint32_t)getNumAttributes NS_SWIFT_NAME(numAttributes());
	-(TS_PipelineAttribute)getAttributeType: (uint32_t)index NS_SWIFT_NAME(attributeType(_:));
	-(TS_PipelineAttribute)getAttributeType_: (uint32_t)index NS_SWIFT_NAME(attributeType(index:));
	-(TS_Format)getAttributeFormat: (uint32_t)index NS_SWIFT_NAME(attributeFormat(_:));
	-(TS_Format)getAttributeFormat_: (uint32_t)index NS_SWIFT_NAME(attributeFormat(index:));
	-(uint32_t)getAttributeVertex: (uint32_t)index NS_SWIFT_NAME(attributeVertex(_:));
	-(uint32_t)getAttributeVertex_: (uint32_t)index NS_SWIFT_NAME(attributeVertex(index:));
	-(uint32_t)getAttributeOffset: (uint32_t)index NS_SWIFT_NAME(attributeOffset(_:));
	-(uint32_t)getAttributeOffset_: (uint32_t)index NS_SWIFT_NAME(attributeOffset(index:));
	-(uint32_t)getAttributeStride: (uint32_t)index NS_SWIFT_NAME(attributeStride(_:));
	-(uint32_t)getAttributeStride_: (uint32_t)index NS_SWIFT_NAME(attributeStride(index:));
	-(uint32_t)getAttributeRate: (uint32_t)index NS_SWIFT_NAME(attributeRate(_:));
	-(uint32_t)getAttributeRate_: (uint32_t)index NS_SWIFT_NAME(attributeRate(index:));
	-(void)setPrimitive: (TS_PipelinePrimitive)primitive NS_SWIFT_NAME(setPrimitive(_:));
	-(void)setPrimitive_: (TS_PipelinePrimitive)primitive NS_SWIFT_NAME(setPrimitive(primitive:));
	-(TS_PipelinePrimitive)getPrimitive NS_SWIFT_NAME(primitive());
	-(void)setFillMode: (TS_PipelineFillMode)mode NS_SWIFT_NAME(setFillMode(_:));
	-(void)setFillMode_: (TS_PipelineFillMode)mode NS_SWIFT_NAME(setFillMode(mode:));
	-(TS_PipelineFillMode)getFillMode NS_SWIFT_NAME(fillMode());
	-(void)setCullMode: (TS_PipelineCullMode)mode NS_SWIFT_NAME(setCullMode(_:));
	-(void)setCullMode_: (TS_PipelineCullMode)mode NS_SWIFT_NAME(setCullMode(mode:));
	-(TS_PipelineCullMode)getCullMode NS_SWIFT_NAME(cullMode());
	-(void)setFrontMode: (TS_PipelineFrontMode)mode NS_SWIFT_NAME(setFrontMode(_:));
	-(void)setFrontMode_: (TS_PipelineFrontMode)mode NS_SWIFT_NAME(setFrontMode(mode:));
	-(TS_PipelineFrontMode)getFrontMode NS_SWIFT_NAME(frontMode());
	-(void)setDepthBias: (float32_t)bias slope: (float32_t)slope NS_SWIFT_NAME(setDepthBias(_:_:));
	-(void)setDepthBias_: (float32_t)bias slope: (float32_t)slope NS_SWIFT_NAME(setDepthBias(bias:slope:));
	-(void)setDepthBias_1: (float32_t)bias slope: (float32_t)slope clamp: (float32_t)clamp NS_SWIFT_NAME(setDepthBias(_:_:_:));
	-(void)setDepthBias_1_: (float32_t)bias slope: (float32_t)slope clamp: (float32_t)clamp NS_SWIFT_NAME(setDepthBias(bias:slope:clamp:));
	-(float32_t)getDepthBias NS_SWIFT_NAME(depthBias());
	-(float32_t)getDepthSlope NS_SWIFT_NAME(depthSlope());
	-(float32_t)getDepthClamp NS_SWIFT_NAME(depthClamp());
	-(void)setMultisample: (uint32_t)multisample NS_SWIFT_NAME(setMultisample(_:));
	-(void)setMultisample_: (uint32_t)multisample NS_SWIFT_NAME(setMultisample(multisample:));
	-(uint32_t)getMultisample NS_SWIFT_NAME(multisample());
	-(void)setSampleMask: (uint32_t)sample_mask NS_SWIFT_NAME(setSampleMask(_:));
	-(void)setSampleMask_: (uint32_t)sample_mask NS_SWIFT_NAME(setSampleMask(sample_mask:));
	-(uint32_t)getSampleMask NS_SWIFT_NAME(sampleMask());
	-(void)setDepthClip: (BOOL)enabled NS_SWIFT_NAME(setDepthClip(_:));
	-(void)setDepthClip_: (BOOL)enabled NS_SWIFT_NAME(setDepthClip(enabled:));
	-(BOOL)getDepthClip NS_SWIFT_NAME(depthClip());
	-(void)setDepthReplace: (BOOL)enabled NS_SWIFT_NAME(setDepthReplace(_:));
	-(void)setDepthReplace_: (BOOL)enabled NS_SWIFT_NAME(setDepthReplace(enabled:));
	-(BOOL)getDepthReplace NS_SWIFT_NAME(depthReplace());
	-(void)setScissorTest: (BOOL)enabled NS_SWIFT_NAME(setScissorTest(_:));
	-(void)setScissorTest_: (BOOL)enabled NS_SWIFT_NAME(setScissorTest(enabled:));
	-(BOOL)getScissorTest NS_SWIFT_NAME(scissorTest());
	-(void)setRasterDiscard: (BOOL)enabled NS_SWIFT_NAME(setRasterDiscard(_:));
	-(void)setRasterDiscard_: (BOOL)enabled NS_SWIFT_NAME(setRasterDiscard(enabled:));
	-(BOOL)getRasterDiscard NS_SWIFT_NAME(rasterDiscard());
	-(void)setSampleShading: (BOOL)enabled NS_SWIFT_NAME(setSampleShading(_:));
	-(void)setSampleShading_: (BOOL)enabled NS_SWIFT_NAME(setSampleShading(enabled:));
	-(BOOL)getSampleShading NS_SWIFT_NAME(sampleShading());
	-(void)setAlphaToCoverage: (BOOL)enabled NS_SWIFT_NAME(setAlphaToCoverage(_:));
	-(void)setAlphaToCoverage_: (BOOL)enabled NS_SWIFT_NAME(setAlphaToCoverage(enabled:));
	-(BOOL)getAlphaToCoverage NS_SWIFT_NAME(alphaToCoverage());
	-(void)setMultisampleRaster: (BOOL)enabled NS_SWIFT_NAME(setMultisampleRaster(_:));
	-(void)setMultisampleRaster_: (BOOL)enabled NS_SWIFT_NAME(setMultisampleRaster(enabled:));
	-(BOOL)getMultisampleRaster NS_SWIFT_NAME(multisampleRaster());
	-(void)setConservativeRaster: (BOOL)enabled NS_SWIFT_NAME(setConservativeRaster(_:));
	-(void)setConservativeRaster_: (BOOL)enabled NS_SWIFT_NAME(setConservativeRaster(enabled:));
	-(BOOL)getConservativeRaster NS_SWIFT_NAME(conservativeRaster());
	-(void)setNumViewports: (uint32_t)num_viewports NS_SWIFT_NAME(setNumViewports(_:));
	-(void)setNumViewports_: (uint32_t)num_viewports NS_SWIFT_NAME(setNumViewports(num_viewports:));
	-(uint32_t)getNumTargets NS_SWIFT_NAME(numTargets());
	-(uint32_t)getNumViewports NS_SWIFT_NAME(numViewports());
	-(void)setNumClipDistances: (uint32_t)num_distances NS_SWIFT_NAME(setNumClipDistances(_:));
	-(void)setNumClipDistances_: (uint32_t)num_distances NS_SWIFT_NAME(setNumClipDistances(num_distances:));
	-(uint32_t)getNumClipDistances NS_SWIFT_NAME(numClipDistances());
	-(void)setBlend: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlend(_:_:_:));
	-(void)setBlend_: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlend(op:src:dest:));
	-(void)setBlendColor: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlendColor(_:_:_:));
	-(void)setBlendColor_: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlendColor(op:src:dest:));
	-(void)setBlendAlpha: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlendAlpha(_:_:_:));
	-(void)setBlendAlpha_: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlendAlpha(op:src:dest:));
	-(void)setBlend_1: (uint32_t)index op: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlend(_:_:_:_:));
	-(void)setBlend_1_: (uint32_t)index op: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlend(index:op:src:dest:));
	-(void)setBlendColor_1: (uint32_t)index op: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlendColor(_:_:_:_:));
	-(void)setBlendColor_1_: (uint32_t)index op: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlendColor(index:op:src:dest:));
	-(void)setBlendAlpha_1: (uint32_t)index op: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlendAlpha(_:_:_:_:));
	-(void)setBlendAlpha_1_: (uint32_t)index op: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlendAlpha(index:op:src:dest:));
	-(TS_PipelineBlendOp)getBlendColorOp: (uint32_t)index NS_SWIFT_NAME(blendColorOp(_:));
	-(TS_PipelineBlendOp)getBlendColorOp_: (uint32_t)index NS_SWIFT_NAME(blendColorOp(index:));
	-(TS_PipelineBlendOp)getBlendAlphaOp: (uint32_t)index NS_SWIFT_NAME(blendAlphaOp(_:));
	-(TS_PipelineBlendOp)getBlendAlphaOp_: (uint32_t)index NS_SWIFT_NAME(blendAlphaOp(index:));
	-(TS_PipelineBlendFunc)getBlendSrcColorFunc: (uint32_t)index NS_SWIFT_NAME(blendSrcColorFunc(_:));
	-(TS_PipelineBlendFunc)getBlendSrcColorFunc_: (uint32_t)index NS_SWIFT_NAME(blendSrcColorFunc(index:));
	-(TS_PipelineBlendFunc)getBlendSrcAlphaFunc: (uint32_t)index NS_SWIFT_NAME(blendSrcAlphaFunc(_:));
	-(TS_PipelineBlendFunc)getBlendSrcAlphaFunc_: (uint32_t)index NS_SWIFT_NAME(blendSrcAlphaFunc(index:));
	-(TS_PipelineBlendFunc)getBlendDestColorFunc: (uint32_t)index NS_SWIFT_NAME(blendDestColorFunc(_:));
	-(TS_PipelineBlendFunc)getBlendDestColorFunc_: (uint32_t)index NS_SWIFT_NAME(blendDestColorFunc(index:));
	-(TS_PipelineBlendFunc)getBlendDestAlphaFunc: (uint32_t)index NS_SWIFT_NAME(blendDestAlphaFunc(_:));
	-(TS_PipelineBlendFunc)getBlendDestAlphaFunc_: (uint32_t)index NS_SWIFT_NAME(blendDestAlphaFunc(index:));
	-(void)setColorMask: (TS_PipelineColorMask)mask NS_SWIFT_NAME(setColorMask(_:));
	-(void)setColorMask_: (TS_PipelineColorMask)mask NS_SWIFT_NAME(setColorMask(mask:));
	-(void)setColorMask_1: (uint32_t)index mask: (TS_PipelineColorMask)mask NS_SWIFT_NAME(setColorMask(_:_:));
	-(void)setColorMask_1_: (uint32_t)index mask: (TS_PipelineColorMask)mask NS_SWIFT_NAME(setColorMask(index:mask:));
	-(void)setColorFormat: (uint32_t)index format: (TS_Format)format NS_SWIFT_NAME(setColorFormat(_:_:));
	-(void)setColorFormat_: (uint32_t)index format: (TS_Format)format NS_SWIFT_NAME(setColorFormat(index:format:));
	-(void)setColorFormat_1: (TS_Format)format NS_SWIFT_NAME(setColorFormat(_:));
	-(void)setColorFormat_1_: (TS_Format)format NS_SWIFT_NAME(setColorFormat(format:));
	-(void)setColorFormat_2: (TS_Format)format num: (uint32_t)num NS_SWIFT_NAME(setColorFormat(_:_:));
	-(void)setColorFormat_2_: (TS_Format)format num: (uint32_t)num NS_SWIFT_NAME(setColorFormat(format:num:));
	-(TS_PipelineColorMask)getColorMask: (uint32_t)index NS_SWIFT_NAME(colorMask(_:));
	-(TS_PipelineColorMask)getColorMask_: (uint32_t)index NS_SWIFT_NAME(colorMask(index:));
	-(TS_Format)getColorFormat: (uint32_t)index NS_SWIFT_NAME(colorFormat(_:));
	-(TS_Format)getColorFormat_: (uint32_t)index NS_SWIFT_NAME(colorFormat(index:));
	-(void)setDepthMask: (TS_PipelineDepthMask)mask NS_SWIFT_NAME(setDepthMask(_:));
	-(void)setDepthMask_: (TS_PipelineDepthMask)mask NS_SWIFT_NAME(setDepthMask(mask:));
	-(void)setDepthFunc: (TS_PipelineDepthFunc)func NS_SWIFT_NAME(setDepthFunc(_:));
	-(void)setDepthFunc_: (TS_PipelineDepthFunc)func NS_SWIFT_NAME(setDepthFunc(func:));
	-(void)setDepthFormat: (TS_Format)format NS_SWIFT_NAME(setDepthFormat(_:));
	-(void)setDepthFormat_: (TS_Format)format NS_SWIFT_NAME(setDepthFormat(format:));
	-(TS_PipelineDepthMask)getDepthMask NS_SWIFT_NAME(depthMask());
	-(TS_PipelineDepthFunc)getDepthFunc NS_SWIFT_NAME(depthFunc());
	-(TS_Format)getDepthFormat NS_SWIFT_NAME(depthFormat());
	-(void)setStencilMask: (uint32_t)mask NS_SWIFT_NAME(setStencilMask(_:));
	-(void)setStencilMask_: (uint32_t)mask NS_SWIFT_NAME(setStencilMask(mask:));
	-(void)setStencilBackMask: (uint32_t)mask NS_SWIFT_NAME(setStencilBackMask(_:));
	-(void)setStencilBackMask_: (uint32_t)mask NS_SWIFT_NAME(setStencilBackMask(mask:));
	-(void)setStencilFrontMask: (uint32_t)mask NS_SWIFT_NAME(setStencilFrontMask(_:));
	-(void)setStencilFrontMask_: (uint32_t)mask NS_SWIFT_NAME(setStencilFrontMask(mask:));
	-(void)setStencilFunc: (TS_PipelineStencilFunc)func dpass_op: (TS_PipelineStencilOp)dpass_op NS_SWIFT_NAME(setStencilFunc(_:_:));
	-(void)setStencilFunc_: (TS_PipelineStencilFunc)func dpass_op: (TS_PipelineStencilOp)dpass_op NS_SWIFT_NAME(setStencilFunc(func:dpass_op:));
	-(void)setStencilBackFunc: (TS_PipelineStencilFunc)func dpass_op: (TS_PipelineStencilOp)dpass_op NS_SWIFT_NAME(setStencilBackFunc(_:_:));
	-(void)setStencilBackFunc_: (TS_PipelineStencilFunc)func dpass_op: (TS_PipelineStencilOp)dpass_op NS_SWIFT_NAME(setStencilBackFunc(func:dpass_op:));
	-(void)setStencilFrontFunc: (TS_PipelineStencilFunc)func dpass_op: (TS_PipelineStencilOp)dpass_op NS_SWIFT_NAME(setStencilFrontFunc(_:_:));
	-(void)setStencilFrontFunc_: (TS_PipelineStencilFunc)func dpass_op: (TS_PipelineStencilOp)dpass_op NS_SWIFT_NAME(setStencilFrontFunc(func:dpass_op:));
	-(void)setStencilFunc_1: (TS_PipelineStencilFunc)func fail_op: (TS_PipelineStencilOp)fail_op dfail_op: (TS_PipelineStencilOp)dfail_op dpass_op: (TS_PipelineStencilOp)dpass_op NS_SWIFT_NAME(setStencilFunc(_:_:_:_:));
	-(void)setStencilFunc_1_: (TS_PipelineStencilFunc)func fail_op: (TS_PipelineStencilOp)fail_op dfail_op: (TS_PipelineStencilOp)dfail_op dpass_op: (TS_PipelineStencilOp)dpass_op NS_SWIFT_NAME(setStencilFunc(func:fail_op:dfail_op:dpass_op:));
	-(void)setStencilBackFunc_1: (TS_PipelineStencilFunc)func fail_op: (TS_PipelineStencilOp)fail_op dfail_op: (TS_PipelineStencilOp)dfail_op dpass_op: (TS_PipelineStencilOp)dpass_op NS_SWIFT_NAME(setStencilBackFunc(_:_:_:_:));
	-(void)setStencilBackFunc_1_: (TS_PipelineStencilFunc)func fail_op: (TS_PipelineStencilOp)fail_op dfail_op: (TS_PipelineStencilOp)dfail_op dpass_op: (TS_PipelineStencilOp)dpass_op NS_SWIFT_NAME(setStencilBackFunc(func:fail_op:dfail_op:dpass_op:));
	-(void)setStencilFrontFunc_1: (TS_PipelineStencilFunc)func fail_op: (TS_PipelineStencilOp)fail_op dfail_op: (TS_PipelineStencilOp)dfail_op dpass_op: (TS_PipelineStencilOp)dpass_op NS_SWIFT_NAME(setStencilFrontFunc(_:_:_:_:));
	-(void)setStencilFrontFunc_1_: (TS_PipelineStencilFunc)func fail_op: (TS_PipelineStencilOp)fail_op dfail_op: (TS_PipelineStencilOp)dfail_op dpass_op: (TS_PipelineStencilOp)dpass_op NS_SWIFT_NAME(setStencilFrontFunc(func:fail_op:dfail_op:dpass_op:));
	-(uint32_t)getStencilBackMask NS_SWIFT_NAME(stencilBackMask());
	-(TS_PipelineStencilFunc)getStencilBackFunc NS_SWIFT_NAME(stencilBackFunc());
	-(TS_PipelineStencilOp)getStencilBackFailOp NS_SWIFT_NAME(stencilBackFailOp());
	-(TS_PipelineStencilOp)getStencilBackDepthFailOp NS_SWIFT_NAME(stencilBackDepthFailOp());
	-(TS_PipelineStencilOp)getStencilBackDepthPassOp NS_SWIFT_NAME(stencilBackDepthPassOp());
	-(uint32_t)getStencilFrontMask NS_SWIFT_NAME(stencilFrontMask());
	-(TS_PipelineStencilFunc)getStencilFrontFunc NS_SWIFT_NAME(stencilFrontFunc());
	-(TS_PipelineStencilOp)getStencilFrontFailOp NS_SWIFT_NAME(stencilFrontFailOp());
	-(TS_PipelineStencilOp)getStencilFrontDepthFailOp NS_SWIFT_NAME(stencilFrontDepthFailOp());
	-(TS_PipelineStencilOp)getStencilFrontDepthPassOp NS_SWIFT_NAME(stencilFrontDepthPassOp());
@end

/// Tellusim::D3D12Pipeline
NS_SWIFT_NAME(D3D12Pipeline)
TS_CAPI @interface TSD3D12Pipeline : TSPipeline
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D12Pipeline* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D12Pipeline&)p;
		-(Tellusim::D3D12Pipeline* _Nonnull)pointer;
		-(Tellusim::D3D12Pipeline&)ref;
	#endif
	-(id _Nonnull)initPipeline: (TSPipeline* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSPipeline* _Nonnull)getPipeline;
	-(BOOL)equalPtr: (const TSD3D12Pipeline* _Nonnull)p;
	-(TSD3D12Pipeline* _Nonnull)copyPtr;
	-(TSD3D12Pipeline* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D12Pipeline* _Nonnull)null;
	-(ID3D12RootSignature* _Nonnull)getRootSignature NS_SWIFT_NAME(rootSignature());
@end

/// Tellusim::MTLPipeline
NS_SWIFT_NAME(MTLPipeline)
TS_CAPI @interface TSMTLPipeline : TSPipeline
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MTLPipeline* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MTLPipeline&)p;
		-(Tellusim::MTLPipeline* _Nonnull)pointer;
		-(Tellusim::MTLPipeline&)ref;
	#endif
	-(id _Nonnull)initPipeline: (TSPipeline* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSPipeline* _Nonnull)getPipeline;
	-(BOOL)equalPtr: (const TSMTLPipeline* _Nonnull)p;
	-(TSMTLPipeline* _Nonnull)copyPtr;
	-(TSMTLPipeline* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMTLPipeline* _Nonnull)null;
	-(void)setIndirect: (BOOL)enabled NS_SWIFT_NAME(setIndirect(_:));
	-(void)setIndirect_: (BOOL)enabled NS_SWIFT_NAME(setIndirect(enabled:));
	-(BOOL)isIndirect;
	-(void* _Nonnull)getVertexFunction NS_SWIFT_NAME(vertexFunction());
	-(void* _Nonnull)getFragmentFunction NS_SWIFT_NAME(fragmentFunction());
@end

/// Tellusim::FUPipeline
NS_SWIFT_NAME(FUPipeline)
TS_CAPI @interface TSFUPipeline : TSPipeline
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSPipeline* _Nonnull * _Nullable)pipelines pipelines_size: (uint32_t)pipelines_size NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TSPipeline* _Nonnull * _Nullable)pipelines pipelines_size: (uint32_t)pipelines_size NS_SWIFT_NAME(init(pipelines:pipelines_size:));
	-(id _Nonnull)init_3: (TSPipeline* _Nonnull * _Nullable)pipelines pipelines_size: (uint32_t)pipelines_size owner: (BOOL)owner NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_3_: (TSPipeline* _Nonnull * _Nullable)pipelines pipelines_size: (uint32_t)pipelines_size owner: (BOOL)owner NS_SWIFT_NAME(init(pipelines:pipelines_size:owner:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::FUPipeline* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::FUPipeline&)p;
		-(Tellusim::FUPipeline* _Nonnull)pointer;
		-(Tellusim::FUPipeline&)ref;
	#endif
	-(id _Nonnull)initPipeline: (TSPipeline* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSPipeline* _Nonnull)getPipeline;
	-(BOOL)equalPtr: (const TSFUPipeline* _Nonnull)p;
	-(TSFUPipeline* _Nonnull)copyPtr;
	-(TSFUPipeline* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFUPipeline* _Nonnull)null;
	-(void)setMask: (uint32_t)mask NS_SWIFT_NAME(setMask(_:));
	-(void)setMask_: (uint32_t)mask NS_SWIFT_NAME(setMask(mask:));
	-(uint32_t)getMask NS_SWIFT_NAME(mask());
	-(uint32_t)getNumPipelines NS_SWIFT_NAME(numPipelines());
	-(const TSPipeline* _Nonnull)getPipeline: (uint32_t)index NS_SWIFT_NAME(pipeline(_:));
	-(const TSPipeline* _Nonnull)getPipeline_: (uint32_t)index NS_SWIFT_NAME(pipeline(index:));
@end

/// Tellusim::Traversal
NS_SWIFT_NAME(Traversal)
TS_CAPI @interface TSTraversal : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Traversal* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Traversal&)p;
		-(Tellusim::Traversal* _Nonnull)pointer;
		-(Tellusim::Traversal&)ref;
	#endif
	-(BOOL)equalPtr: (const TSTraversal* _Nonnull)p;
	-(TSTraversal* _Nonnull)copyPtr;
	-(TSTraversal* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSTraversal* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)clear;
	-(BOOL)isCreated;
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(BOOL)create;
	-(void)setParameters: (const TSTraversal* _Nonnull)traversal NS_SWIFT_NAME(setParameters(_:));
	-(void)setParameters_: (const TSTraversal* _Nonnull)traversal NS_SWIFT_NAME(setParameters(traversal:));
	-(BOOL)saveState: (TSStream* _Nonnull)stream NS_SWIFT_NAME(saveState(_:));
	-(BOOL)saveState_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(saveState(stream:));
	-(void)addShader: (TSShader* _Nonnull)shader NS_SWIFT_NAME(addShader(_:));
	-(void)addShader_: (TSShader* _Nonnull)shader NS_SWIFT_NAME(addShader(shader:));
	-(void)addShader_1: (TSShader* _Nonnull)shader owner: (BOOL)owner NS_SWIFT_NAME(addShader(_:_:));
	-(void)addShader_1_: (TSShader* _Nonnull)shader owner: (BOOL)owner NS_SWIFT_NAME(addShader(shader:owner:));
	-(TSShader* _Nonnull)getRayGenShader NS_SWIFT_NAME(rayGenShader());
	-(BOOL)loadShader: (TS_ShaderType)type name: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadShader(_:_:_:));
	-(BOOL)loadShader_: (TS_ShaderType)type name: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadShader(type:name:format:));
	-(BOOL)loadShaderGLSL: (TS_ShaderType)type name: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadShaderGLSL(_:_:_:));
	-(BOOL)loadShaderGLSL_: (TS_ShaderType)type name: (const char* _Nonnull)name format: (const char* _Nonnull)format NS_SWIFT_NAME(loadShaderGLSL(type:name:format:));
	-(BOOL)loadShader_1: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShader(_:_:));
	-(BOOL)loadShader_1_: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShader(type:name:));
	-(BOOL)loadShader_2: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadShader(_:_:_:));
	-(BOOL)loadShader_2_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadShader(type:name:macros:));
	-(BOOL)loadShader_3: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(loadShader(_:_:_:_:));
	-(BOOL)loadShader_3_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(loadShader(type:name:macros:includes:));
	-(BOOL)loadShader_4: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(loadShader(_:_:_:_:_:));
	-(BOOL)loadShader_4_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(loadShader(type:name:macros:includes:size:));
	-(BOOL)loadShaderGLSL_1: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShaderGLSL(_:_:));
	-(BOOL)loadShaderGLSL_1_: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShaderGLSL(type:name:));
	-(BOOL)loadShaderGLSL_2: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadShaderGLSL(_:_:_:));
	-(BOOL)loadShaderGLSL_2_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(loadShaderGLSL(type:name:macros:));
	-(BOOL)loadShaderGLSL_3: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(loadShaderGLSL(_:_:_:_:));
	-(BOOL)loadShaderGLSL_3_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(loadShaderGLSL(type:name:macros:includes:));
	-(BOOL)loadShaderGLSL_4: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(loadShaderGLSL(_:_:_:_:_:));
	-(BOOL)loadShaderGLSL_4_: (TS_ShaderType)type name: (const char* _Nonnull)name macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(loadShaderGLSL(type:name:macros:includes:size:));
	-(BOOL)loadShaderSPIRV: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShaderSPIRV(_:_:));
	-(BOOL)loadShaderSPIRV_: (TS_ShaderType)type name: (const char* _Nonnull)name NS_SWIFT_NAME(loadShaderSPIRV(type:name:));
	-(BOOL)createShader: (TS_ShaderType)type src: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createShader(_:_:_:));
	-(BOOL)createShader_: (TS_ShaderType)type src: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createShader(type:src:format:));
	-(BOOL)createShaderGLSL: (TS_ShaderType)type src: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createShaderGLSL(_:_:_:));
	-(BOOL)createShaderGLSL_: (TS_ShaderType)type src: (const char* _Nonnull)src format: (const char* _Nonnull)format NS_SWIFT_NAME(createShaderGLSL(type:src:format:));
	-(BOOL)createShader_1: (TS_ShaderType)type src: (const char* _Nonnull)src NS_SWIFT_NAME(createShader(_:_:));
	-(BOOL)createShader_1_: (TS_ShaderType)type src: (const char* _Nonnull)src NS_SWIFT_NAME(createShader(type:src:));
	-(BOOL)createShader_2: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createShader(_:_:_:));
	-(BOOL)createShader_2_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createShader(type:src:macros:));
	-(BOOL)createShader_3: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(createShader(_:_:_:_:));
	-(BOOL)createShader_3_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(createShader(type:src:macros:includes:));
	-(BOOL)createShader_4: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(createShader(_:_:_:_:_:));
	-(BOOL)createShader_4_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(createShader(type:src:macros:includes:size:));
	-(BOOL)createShaderGLSL_1: (TS_ShaderType)type src: (const char* _Nonnull)src NS_SWIFT_NAME(createShaderGLSL(_:_:));
	-(BOOL)createShaderGLSL_1_: (TS_ShaderType)type src: (const char* _Nonnull)src NS_SWIFT_NAME(createShaderGLSL(type:src:));
	-(BOOL)createShaderGLSL_2: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createShaderGLSL(_:_:_:));
	-(BOOL)createShaderGLSL_2_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros NS_SWIFT_NAME(createShaderGLSL(type:src:macros:));
	-(BOOL)createShaderGLSL_3: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(createShaderGLSL(_:_:_:_:));
	-(BOOL)createShaderGLSL_3_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes NS_SWIFT_NAME(createShaderGLSL(type:src:macros:includes:));
	-(BOOL)createShaderGLSL_4: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(createShaderGLSL(_:_:_:_:_:));
	-(BOOL)createShaderGLSL_4_: (TS_ShaderType)type src: (const char* _Nonnull)src macros: (const TSString* _Nonnull)macros includes: (const char* _Nonnull * _Nullable)includes size: (uint32_t)size NS_SWIFT_NAME(createShaderGLSL(type:src:macros:includes:size:));
	-(BOOL)createShaderSPIRV: (TS_ShaderType)type data: (uint32_t* _Nonnull)data data_size: (uint32_t)data_size NS_SWIFT_NAME(createShaderSPIRV(_:_:_:));
	-(BOOL)createShaderSPIRV_: (TS_ShaderType)type data: (uint32_t* _Nonnull)data data_size: (uint32_t)data_size NS_SWIFT_NAME(createShaderSPIRV(type:data:data_size:));
	-(uint32_t)addSampler: (TS_ShaderMask)mask NS_SWIFT_NAME(addSampler(_:));
	-(uint32_t)addSampler_: (TS_ShaderMask)mask NS_SWIFT_NAME(addSampler(mask:));
	-(uint32_t)getNumSamplers NS_SWIFT_NAME(numSamplers());
	-(TSTraversal* _Nonnull)setSamplerOffset: (uint32_t)offset NS_SWIFT_NAME(setSamplerOffset(_:));
	-(TSTraversal* _Nonnull)setSamplerOffset_: (uint32_t)offset NS_SWIFT_NAME(setSamplerOffset(offset:));
	-(uint32_t)getSamplerOffset NS_SWIFT_NAME(samplerOffset());
	-(TSTraversal* _Nonnull)setSamplerMask: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setSamplerMask(_:_:));
	-(TSTraversal* _Nonnull)setSamplerMask_: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setSamplerMask(index:mask:));
	-(TS_ShaderMask)getSamplerMask: (uint32_t)index NS_SWIFT_NAME(samplerMask(_:));
	-(TS_ShaderMask)getSamplerMask_: (uint32_t)index NS_SWIFT_NAME(samplerMask(index:));
	-(TSTraversal* _Nonnull)setSamplerMasks: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setSamplerMasks(_:_:_:));
	-(TSTraversal* _Nonnull)setSamplerMasks_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setSamplerMasks(index:num:mask:));
	-(TSTraversal* _Nonnull)setSamplerMasks_1: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask array: (BOOL)array NS_SWIFT_NAME(setSamplerMasks(_:_:_:_:));
	-(TSTraversal* _Nonnull)setSamplerMasks_1_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask array: (BOOL)array NS_SWIFT_NAME(setSamplerMasks(index:num:mask:array:));
	-(TS_ShaderMask)getSamplerMasks: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(samplerMasks(_:_:));
	-(TS_ShaderMask)getSamplerMasks_: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(samplerMasks(index:num:));
	-(TSTraversal* _Nonnull)setSamplerArray: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setSamplerArray(_:_:_:));
	-(TSTraversal* _Nonnull)setSamplerArray_: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setSamplerArray(index:num:array:));
	-(uint32_t)getSamplerArray: (uint32_t)index NS_SWIFT_NAME(samplerArray(_:));
	-(uint32_t)getSamplerArray_: (uint32_t)index NS_SWIFT_NAME(samplerArray(index:));
	-(uint32_t)addTexture: (TS_ShaderMask)mask NS_SWIFT_NAME(addTexture(_:));
	-(uint32_t)addTexture_: (TS_ShaderMask)mask NS_SWIFT_NAME(addTexture(mask:));
	-(uint32_t)getNumTextures NS_SWIFT_NAME(numTextures());
	-(TSTraversal* _Nonnull)setTextureOffset: (uint32_t)offset NS_SWIFT_NAME(setTextureOffset(_:));
	-(TSTraversal* _Nonnull)setTextureOffset_: (uint32_t)offset NS_SWIFT_NAME(setTextureOffset(offset:));
	-(uint32_t)getTextureOffset NS_SWIFT_NAME(textureOffset());
	-(TSTraversal* _Nonnull)setTextureMask: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTextureMask(_:_:));
	-(TSTraversal* _Nonnull)setTextureMask_: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTextureMask(index:mask:));
	-(TS_ShaderMask)getTextureMask: (uint32_t)index NS_SWIFT_NAME(textureMask(_:));
	-(TS_ShaderMask)getTextureMask_: (uint32_t)index NS_SWIFT_NAME(textureMask(index:));
	-(TSTraversal* _Nonnull)setTextureMasks: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTextureMasks(_:_:_:));
	-(TSTraversal* _Nonnull)setTextureMasks_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTextureMasks(index:num:mask:));
	-(TSTraversal* _Nonnull)setTextureMasks_1: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask array: (BOOL)array NS_SWIFT_NAME(setTextureMasks(_:_:_:_:));
	-(TSTraversal* _Nonnull)setTextureMasks_1_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask array: (BOOL)array NS_SWIFT_NAME(setTextureMasks(index:num:mask:array:));
	-(TS_ShaderMask)getTextureMasks: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(textureMasks(_:_:));
	-(TS_ShaderMask)getTextureMasks_: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(textureMasks(index:num:));
	-(TSTraversal* _Nonnull)setTextureArray: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setTextureArray(_:_:_:));
	-(TSTraversal* _Nonnull)setTextureArray_: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setTextureArray(index:num:array:));
	-(uint32_t)getTextureArray: (uint32_t)index NS_SWIFT_NAME(textureArray(_:));
	-(uint32_t)getTextureArray_: (uint32_t)index NS_SWIFT_NAME(textureArray(index:));
	-(uint32_t)addSurface: (TS_ShaderMask)mask NS_SWIFT_NAME(addSurface(_:));
	-(uint32_t)addSurface_: (TS_ShaderMask)mask NS_SWIFT_NAME(addSurface(mask:));
	-(uint32_t)getNumSurfaces NS_SWIFT_NAME(numSurfaces());
	-(TSTraversal* _Nonnull)setSurfaceOffset: (uint32_t)offset NS_SWIFT_NAME(setSurfaceOffset(_:));
	-(TSTraversal* _Nonnull)setSurfaceOffset_: (uint32_t)offset NS_SWIFT_NAME(setSurfaceOffset(offset:));
	-(uint32_t)getSurfaceOffset NS_SWIFT_NAME(surfaceOffset());
	-(TSTraversal* _Nonnull)setSurfaceMask: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setSurfaceMask(_:_:));
	-(TSTraversal* _Nonnull)setSurfaceMask_: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setSurfaceMask(index:mask:));
	-(TS_ShaderMask)getSurfaceMask: (uint32_t)index NS_SWIFT_NAME(surfaceMask(_:));
	-(TS_ShaderMask)getSurfaceMask_: (uint32_t)index NS_SWIFT_NAME(surfaceMask(index:));
	-(TSTraversal* _Nonnull)setSurfaceMasks: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setSurfaceMasks(_:_:_:));
	-(TSTraversal* _Nonnull)setSurfaceMasks_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setSurfaceMasks(index:num:mask:));
	-(TSTraversal* _Nonnull)setSurfaceMasks_1: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask array: (BOOL)array NS_SWIFT_NAME(setSurfaceMasks(_:_:_:_:));
	-(TSTraversal* _Nonnull)setSurfaceMasks_1_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask array: (BOOL)array NS_SWIFT_NAME(setSurfaceMasks(index:num:mask:array:));
	-(TS_ShaderMask)getSurfaceMasks: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(surfaceMasks(_:_:));
	-(TS_ShaderMask)getSurfaceMasks_: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(surfaceMasks(index:num:));
	-(TSTraversal* _Nonnull)setSurfaceArray: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setSurfaceArray(_:_:_:));
	-(TSTraversal* _Nonnull)setSurfaceArray_: (uint32_t)index num: (uint32_t)num array: (BOOL)array NS_SWIFT_NAME(setSurfaceArray(index:num:array:));
	-(uint32_t)getSurfaceArray: (uint32_t)index NS_SWIFT_NAME(surfaceArray(_:));
	-(uint32_t)getSurfaceArray_: (uint32_t)index NS_SWIFT_NAME(surfaceArray(index:));
	-(uint32_t)addUniform: (TS_ShaderMask)mask NS_SWIFT_NAME(addUniform(_:));
	-(uint32_t)addUniform_: (TS_ShaderMask)mask NS_SWIFT_NAME(addUniform(mask:));
	-(uint32_t)addUniform_1: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(addUniform(_:_:));
	-(uint32_t)addUniform_1_: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(addUniform(mask:flags:));
	-(uint32_t)getNumUniforms NS_SWIFT_NAME(numUniforms());
	-(TSTraversal* _Nonnull)setUniformOffset: (uint32_t)offset NS_SWIFT_NAME(setUniformOffset(_:));
	-(TSTraversal* _Nonnull)setUniformOffset_: (uint32_t)offset NS_SWIFT_NAME(setUniformOffset(offset:));
	-(uint32_t)getUniformOffset NS_SWIFT_NAME(uniformOffset());
	-(TSTraversal* _Nonnull)setUniformMask: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setUniformMask(_:_:));
	-(TSTraversal* _Nonnull)setUniformMask_: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setUniformMask(index:mask:));
	-(TSTraversal* _Nonnull)setUniformMask_1: (uint32_t)index mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setUniformMask(_:_:_:));
	-(TSTraversal* _Nonnull)setUniformMask_1_: (uint32_t)index mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setUniformMask(index:mask:flags:));
	-(TS_ShaderMask)getUniformMask: (uint32_t)index NS_SWIFT_NAME(uniformMask(_:));
	-(TS_ShaderMask)getUniformMask_: (uint32_t)index NS_SWIFT_NAME(uniformMask(index:));
	-(TSTraversal* _Nonnull)setUniformMasks: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setUniformMasks(_:_:_:));
	-(TSTraversal* _Nonnull)setUniformMasks_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setUniformMasks(index:num:mask:));
	-(TSTraversal* _Nonnull)setUniformMasks_1: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setUniformMasks(_:_:_:_:));
	-(TSTraversal* _Nonnull)setUniformMasks_1_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setUniformMasks(index:num:mask:flags:));
	-(TS_ShaderMask)getUniformMasks: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(uniformMasks(_:_:));
	-(TS_ShaderMask)getUniformMasks_: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(uniformMasks(index:num:));
	-(TSTraversal* _Nonnull)setUniformFlags: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setUniformFlags(_:_:));
	-(TSTraversal* _Nonnull)setUniformFlags_: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setUniformFlags(index:flags:));
	-(TS_BindFlags)getUniformFlags: (uint32_t)index NS_SWIFT_NAME(uniformFlags(_:));
	-(TS_BindFlags)getUniformFlags_: (uint32_t)index NS_SWIFT_NAME(uniformFlags(index:));
	-(uint32_t)addStorage: (TS_ShaderMask)mask NS_SWIFT_NAME(addStorage(_:));
	-(uint32_t)addStorage_: (TS_ShaderMask)mask NS_SWIFT_NAME(addStorage(mask:));
	-(uint32_t)addStorage_1: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(addStorage(_:_:));
	-(uint32_t)addStorage_1_: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(addStorage(mask:flags:));
	-(uint32_t)getNumStorages NS_SWIFT_NAME(numStorages());
	-(TSTraversal* _Nonnull)setStorageOffset: (uint32_t)offset NS_SWIFT_NAME(setStorageOffset(_:));
	-(TSTraversal* _Nonnull)setStorageOffset_: (uint32_t)offset NS_SWIFT_NAME(setStorageOffset(offset:));
	-(uint32_t)getStorageOffset NS_SWIFT_NAME(storageOffset());
	-(TSTraversal* _Nonnull)setStorageMask: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setStorageMask(_:_:));
	-(TSTraversal* _Nonnull)setStorageMask_: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setStorageMask(index:mask:));
	-(TSTraversal* _Nonnull)setStorageMask_1: (uint32_t)index mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setStorageMask(_:_:_:));
	-(TSTraversal* _Nonnull)setStorageMask_1_: (uint32_t)index mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setStorageMask(index:mask:flags:));
	-(TS_ShaderMask)getStorageMask: (uint32_t)index NS_SWIFT_NAME(storageMask(_:));
	-(TS_ShaderMask)getStorageMask_: (uint32_t)index NS_SWIFT_NAME(storageMask(index:));
	-(TSTraversal* _Nonnull)setStorageMasks: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setStorageMasks(_:_:_:));
	-(TSTraversal* _Nonnull)setStorageMasks_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setStorageMasks(index:num:mask:));
	-(TSTraversal* _Nonnull)setStorageMasks_1: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setStorageMasks(_:_:_:_:));
	-(TSTraversal* _Nonnull)setStorageMasks_1_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setStorageMasks(index:num:mask:flags:));
	-(TS_ShaderMask)getStorageMasks: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(storageMasks(_:_:));
	-(TS_ShaderMask)getStorageMasks_: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(storageMasks(index:num:));
	-(TSTraversal* _Nonnull)setStorageFlags: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setStorageFlags(_:_:));
	-(TSTraversal* _Nonnull)setStorageFlags_: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setStorageFlags(index:flags:));
	-(TS_BindFlags)getStorageFlags: (uint32_t)index NS_SWIFT_NAME(storageFlags(_:));
	-(TS_BindFlags)getStorageFlags_: (uint32_t)index NS_SWIFT_NAME(storageFlags(index:));
	-(uint32_t)addTracing: (TS_ShaderMask)mask NS_SWIFT_NAME(addTracing(_:));
	-(uint32_t)addTracing_: (TS_ShaderMask)mask NS_SWIFT_NAME(addTracing(mask:));
	-(uint32_t)getNumTracings NS_SWIFT_NAME(numTracings());
	-(TSTraversal* _Nonnull)setTracingOffset: (uint32_t)offset NS_SWIFT_NAME(setTracingOffset(_:));
	-(TSTraversal* _Nonnull)setTracingOffset_: (uint32_t)offset NS_SWIFT_NAME(setTracingOffset(offset:));
	-(uint32_t)getTracingOffset NS_SWIFT_NAME(tracingOffset());
	-(TSTraversal* _Nonnull)setTracingMask: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTracingMask(_:_:));
	-(TSTraversal* _Nonnull)setTracingMask_: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTracingMask(index:mask:));
	-(TS_ShaderMask)getTracingMask: (uint32_t)index NS_SWIFT_NAME(tracingMask(_:));
	-(TS_ShaderMask)getTracingMask_: (uint32_t)index NS_SWIFT_NAME(tracingMask(index:));
	-(TSTraversal* _Nonnull)setTracingMasks: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTracingMasks(_:_:_:));
	-(TSTraversal* _Nonnull)setTracingMasks_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTracingMasks(index:num:mask:));
	-(TS_ShaderMask)getTracingMasks: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(tracingMasks(_:_:));
	-(TS_ShaderMask)getTracingMasks_: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(tracingMasks(index:num:));
	-(uint32_t)addTexel: (TS_ShaderMask)mask NS_SWIFT_NAME(addTexel(_:));
	-(uint32_t)addTexel_: (TS_ShaderMask)mask NS_SWIFT_NAME(addTexel(mask:));
	-(uint32_t)getNumTexels NS_SWIFT_NAME(numTexels());
	-(TSTraversal* _Nonnull)setTexelOffset: (uint32_t)offset NS_SWIFT_NAME(setTexelOffset(_:));
	-(TSTraversal* _Nonnull)setTexelOffset_: (uint32_t)offset NS_SWIFT_NAME(setTexelOffset(offset:));
	-(uint32_t)getTexelOffset NS_SWIFT_NAME(texelOffset());
	-(TSTraversal* _Nonnull)setTexelMask: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTexelMask(_:_:));
	-(TSTraversal* _Nonnull)setTexelMask_: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTexelMask(index:mask:));
	-(TS_ShaderMask)getTexelMask: (uint32_t)index NS_SWIFT_NAME(texelMask(_:));
	-(TS_ShaderMask)getTexelMask_: (uint32_t)index NS_SWIFT_NAME(texelMask(index:));
	-(TSTraversal* _Nonnull)setTexelMasks: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTexelMasks(_:_:_:));
	-(TSTraversal* _Nonnull)setTexelMasks_: (uint32_t)index num: (uint32_t)num mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTexelMasks(index:num:mask:));
	-(TS_ShaderMask)getTexelMasks: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(texelMasks(_:_:));
	-(TS_ShaderMask)getTexelMasks_: (uint32_t)index num: (uint32_t)num NS_SWIFT_NAME(texelMasks(index:num:));
	-(uint32_t)addTable: (TS_TableType)type size: (uint32_t)size mask: (TS_ShaderMask)mask NS_SWIFT_NAME(addTable(_:_:_:));
	-(uint32_t)addTable_: (TS_TableType)type size: (uint32_t)size mask: (TS_ShaderMask)mask NS_SWIFT_NAME(addTable(type:size:mask:));
	-(uint32_t)addTable_1: (TS_TableType)type size: (uint32_t)size mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(addTable(_:_:_:_:));
	-(uint32_t)addTable_1_: (TS_TableType)type size: (uint32_t)size mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(addTable(type:size:mask:flags:));
	-(uint32_t)getNumTables NS_SWIFT_NAME(numTables());
	-(TSTraversal* _Nonnull)setTableOffset: (uint32_t)offset NS_SWIFT_NAME(setTableOffset(_:));
	-(TSTraversal* _Nonnull)setTableOffset_: (uint32_t)offset NS_SWIFT_NAME(setTableOffset(offset:));
	-(uint32_t)getTableOffset NS_SWIFT_NAME(tableOffset());
	-(TSTraversal* _Nonnull)setTableType: (uint32_t)index type: (TS_TableType)type size: (uint32_t)size mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTableType(_:_:_:_:));
	-(TSTraversal* _Nonnull)setTableType_: (uint32_t)index type: (TS_TableType)type size: (uint32_t)size mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTableType(index:type:size:mask:));
	-(TSTraversal* _Nonnull)setTableType_1: (uint32_t)index type: (TS_TableType)type size: (uint32_t)size mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setTableType(_:_:_:_:_:));
	-(TSTraversal* _Nonnull)setTableType_1_: (uint32_t)index type: (TS_TableType)type size: (uint32_t)size mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setTableType(index:type:size:mask:flags:));
	-(TS_TableType)getTableType: (uint32_t)index NS_SWIFT_NAME(tableType(_:));
	-(TS_TableType)getTableType_: (uint32_t)index NS_SWIFT_NAME(tableType(index:));
	-(uint32_t)getTableSize: (uint32_t)index NS_SWIFT_NAME(tableSize(_:));
	-(uint32_t)getTableSize_: (uint32_t)index NS_SWIFT_NAME(tableSize(index:));
	-(TSTraversal* _Nonnull)setTableMask: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTableMask(_:_:));
	-(TSTraversal* _Nonnull)setTableMask_: (uint32_t)index mask: (TS_ShaderMask)mask NS_SWIFT_NAME(setTableMask(index:mask:));
	-(TSTraversal* _Nonnull)setTableMask_1: (uint32_t)index mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setTableMask(_:_:_:));
	-(TSTraversal* _Nonnull)setTableMask_1_: (uint32_t)index mask: (TS_ShaderMask)mask flags: (TS_BindFlags)flags NS_SWIFT_NAME(setTableMask(index:mask:flags:));
	-(TS_ShaderMask)getTableMask: (uint32_t)index NS_SWIFT_NAME(tableMask(_:));
	-(TS_ShaderMask)getTableMask_: (uint32_t)index NS_SWIFT_NAME(tableMask(index:));
	-(TSTraversal* _Nonnull)setTableFlags: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setTableFlags(_:_:));
	-(TSTraversal* _Nonnull)setTableFlags_: (uint32_t)index flags: (TS_BindFlags)flags NS_SWIFT_NAME(setTableFlags(index:flags:));
	-(TS_BindFlags)getTableFlags: (uint32_t)index NS_SWIFT_NAME(tableFlags(_:));
	-(TS_BindFlags)getTableFlags_: (uint32_t)index NS_SWIFT_NAME(tableFlags(index:));
	-(void)setRecursionDepth: (uint32_t)depth NS_SWIFT_NAME(setRecursionDepth(_:));
	-(void)setRecursionDepth_: (uint32_t)depth NS_SWIFT_NAME(setRecursionDepth(depth:));
	-(uint32_t)getRecursionDepth NS_SWIFT_NAME(recursionDepth());
@end

/// Tellusim::D3D12Traversal
NS_SWIFT_NAME(D3D12Traversal)
TS_CAPI @interface TSD3D12Traversal : TSTraversal
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D12Traversal* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D12Traversal&)p;
		-(Tellusim::D3D12Traversal* _Nonnull)pointer;
		-(Tellusim::D3D12Traversal&)ref;
	#endif
	-(id _Nonnull)initTraversal: (TSTraversal* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTraversal* _Nonnull)getTraversal;
	-(BOOL)equalPtr: (const TSD3D12Traversal* _Nonnull)p;
	-(TSD3D12Traversal* _Nonnull)copyPtr;
	-(TSD3D12Traversal* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D12Traversal* _Nonnull)null;
	-(ID3D12RootSignature* _Nonnull)getRootSignature NS_SWIFT_NAME(rootSignature());
@end

/// Tellusim::FUTraversal
NS_SWIFT_NAME(FUTraversal)
TS_CAPI @interface TSFUTraversal : TSTraversal
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSTraversal* _Nonnull * _Nullable)traversals traversals_size: (uint32_t)traversals_size NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TSTraversal* _Nonnull * _Nullable)traversals traversals_size: (uint32_t)traversals_size NS_SWIFT_NAME(init(traversals:traversals_size:));
	-(id _Nonnull)init_3: (TSTraversal* _Nonnull * _Nullable)traversals traversals_size: (uint32_t)traversals_size owner: (BOOL)owner NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_3_: (TSTraversal* _Nonnull * _Nullable)traversals traversals_size: (uint32_t)traversals_size owner: (BOOL)owner NS_SWIFT_NAME(init(traversals:traversals_size:owner:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::FUTraversal* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::FUTraversal&)p;
		-(Tellusim::FUTraversal* _Nonnull)pointer;
		-(Tellusim::FUTraversal&)ref;
	#endif
	-(id _Nonnull)initTraversal: (TSTraversal* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSTraversal* _Nonnull)getTraversal;
	-(BOOL)equalPtr: (const TSFUTraversal* _Nonnull)p;
	-(TSFUTraversal* _Nonnull)copyPtr;
	-(TSFUTraversal* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFUTraversal* _Nonnull)null;
	-(void)setMask: (uint32_t)mask NS_SWIFT_NAME(setMask(_:));
	-(void)setMask_: (uint32_t)mask NS_SWIFT_NAME(setMask(mask:));
	-(uint32_t)getMask NS_SWIFT_NAME(mask());
	-(uint32_t)getNumTraversals NS_SWIFT_NAME(numTraversals());
	-(const TSTraversal* _Nonnull)getTraversal: (uint32_t)index NS_SWIFT_NAME(traversal(_:));
	-(const TSTraversal* _Nonnull)getTraversal_: (uint32_t)index NS_SWIFT_NAME(traversal(index:));
@end

/// Tellusim::Surface
NS_SWIFT_NAME(Surface)
TS_CAPI @interface TSSurface : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	-(id _Nonnull)init_1: (TSContext* _Nonnull)context NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (TSContext* _Nonnull)context NS_SWIFT_NAME(init(context:));
	-(id _Nonnull)init_2: (TS_Platform)platform NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (TS_Platform)platform NS_SWIFT_NAME(init(platform:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Surface* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Surface&)p;
		-(Tellusim::Surface* _Nonnull)pointer;
		-(Tellusim::Surface&)ref;
	#endif
	-(BOOL)equalPtr: (const TSSurface* _Nonnull)p;
	-(TSSurface* _Nonnull)copyPtr;
	-(TSSurface* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSSurface* _Nonnull)null;
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)setSize: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setSize(_:_:));
	-(void)setSize_: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setSize(width:height:));
	-(uint32_t)getWidth NS_SWIFT_NAME(width());
	-(uint32_t)getHeight NS_SWIFT_NAME(height());
	-(void)setMultisample: (uint32_t)multisample NS_SWIFT_NAME(setMultisample(_:));
	-(void)setMultisample_: (uint32_t)multisample NS_SWIFT_NAME(setMultisample(multisample:));
	-(uint32_t)getMultisample NS_SWIFT_NAME(multisample());
	-(BOOL)hasMultisample;
	-(void)setColorLayer: (uint32_t)layer layers: (uint32_t)layers NS_SWIFT_NAME(setColorLayer(_:_:));
	-(void)setColorLayer_: (uint32_t)layer layers: (uint32_t)layers NS_SWIFT_NAME(setColorLayer(layer:layers:));
	-(void)setDepthLayer: (uint32_t)layer layers: (uint32_t)layers NS_SWIFT_NAME(setDepthLayer(_:_:));
	-(void)setDepthLayer_: (uint32_t)layer layers: (uint32_t)layers NS_SWIFT_NAME(setDepthLayer(layer:layers:));
	-(uint32_t)getColorLayer NS_SWIFT_NAME(colorLayer());
	-(uint32_t)getDepthLayer NS_SWIFT_NAME(depthLayer());
	-(uint32_t)getColorLayers NS_SWIFT_NAME(colorLayers());
	-(uint32_t)getDepthLayers NS_SWIFT_NAME(depthLayers());
	-(BOOL)hasColorLayers;
	-(BOOL)hasDepthLayers;
	-(void)setColorFormat: (TS_Format)format NS_SWIFT_NAME(setColorFormat(_:));
	-(void)setColorFormat_: (TS_Format)format NS_SWIFT_NAME(setColorFormat(format:));
	-(void)setDepthFormat: (TS_Format)format NS_SWIFT_NAME(setDepthFormat(_:));
	-(void)setDepthFormat_: (TS_Format)format NS_SWIFT_NAME(setDepthFormat(format:));
	-(TS_Format)getColorFormat NS_SWIFT_NAME(colorFormat());
	-(TS_Format)getDepthFormat NS_SWIFT_NAME(depthFormat());
@end

/// Tellusim::D3D12Surface
NS_SWIFT_NAME(D3D12Surface)
TS_CAPI @interface TSD3D12Surface : TSSurface
	-(id _Nonnull)init_3 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_4: (TSD3D12Context* _Nonnull)context NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_4_: (TSD3D12Context* _Nonnull)context NS_SWIFT_NAME(init(context:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D12Surface* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D12Surface&)p;
		-(Tellusim::D3D12Surface* _Nonnull)pointer;
		-(Tellusim::D3D12Surface&)ref;
	#endif
	-(id _Nonnull)initSurface: (TSSurface* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSSurface* _Nonnull)getSurface;
	-(BOOL)equalPtr: (const TSD3D12Surface* _Nonnull)p;
	-(TSD3D12Surface* _Nonnull)copyPtr;
	-(TSD3D12Surface* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D12Surface* _Nonnull)null;
	-(IDXGIFactory4* _Nonnull)getFactory NS_SWIFT_NAME(factory());
	-(ID3D12Device* _Nonnull)getDevice NS_SWIFT_NAME(device());
	-(ID3D12CommandQueue* _Nonnull)getQueue NS_SWIFT_NAME(queue());
	-(ID3D12GraphicsCommandList* _Nonnull)getCommand NS_SWIFT_NAME(command());
	-(void)setSwapChain: (IDXGISwapChain* _Nonnull)swap_chain NS_SWIFT_NAME(setSwapChain(_:));
	-(void)setSwapChain_: (IDXGISwapChain* _Nonnull)swap_chain NS_SWIFT_NAME(setSwapChain(swap_chain:));
	-(IDXGISwapChain* _Nonnull)getSwapChain NS_SWIFT_NAME(swapChain());
	-(void)setRenderTarget: (ID3D12Resource* _Nonnull)render_target NS_SWIFT_NAME(setRenderTarget(_:));
	-(void)setRenderTarget_: (ID3D12Resource* _Nonnull)render_target NS_SWIFT_NAME(setRenderTarget(render_target:));
	-(void)setDepthStencil: (ID3D12Resource* _Nonnull)depth_stencil NS_SWIFT_NAME(setDepthStencil(_:));
	-(void)setDepthStencil_: (ID3D12Resource* _Nonnull)depth_stencil NS_SWIFT_NAME(setDepthStencil(depth_stencil:));
	-(ID3D12Resource* _Nonnull)getRenderTarget NS_SWIFT_NAME(renderTarget());
	-(ID3D12Resource* _Nonnull)getDepthStencil NS_SWIFT_NAME(depthStencil());
	-(void)setRenderTargetView: (size_t)render_target_view NS_SWIFT_NAME(setRenderTargetView(_:));
	-(void)setRenderTargetView_: (size_t)render_target_view NS_SWIFT_NAME(setRenderTargetView(render_target_view:));
	-(void)setDepthStencilView: (size_t)depth_stencil_view NS_SWIFT_NAME(setDepthStencilView(_:));
	-(void)setDepthStencilView_: (size_t)depth_stencil_view NS_SWIFT_NAME(setDepthStencilView(depth_stencil_view:));
	-(size_t)getRenderTargetView NS_SWIFT_NAME(renderTargetView());
	-(size_t)getDepthStencilView NS_SWIFT_NAME(depthStencilView());
	-(uint32_t)getColorDXGIFormat NS_SWIFT_NAME(colorDXGIFormat());
	-(uint32_t)getDepthDXGIFormat NS_SWIFT_NAME(depthDXGIFormat());
@end

/// Tellusim::D3D11Surface
NS_SWIFT_NAME(D3D11Surface)
TS_CAPI @interface TSD3D11Surface : TSSurface
	-(id _Nonnull)init_3 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_4: (TSD3D11Context* _Nonnull)context NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_4_: (TSD3D11Context* _Nonnull)context NS_SWIFT_NAME(init(context:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::D3D11Surface* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::D3D11Surface&)p;
		-(Tellusim::D3D11Surface* _Nonnull)pointer;
		-(Tellusim::D3D11Surface&)ref;
	#endif
	-(id _Nonnull)initSurface: (TSSurface* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSSurface* _Nonnull)getSurface;
	-(BOOL)equalPtr: (const TSD3D11Surface* _Nonnull)p;
	-(TSD3D11Surface* _Nonnull)copyPtr;
	-(TSD3D11Surface* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSD3D11Surface* _Nonnull)null;
	-(IDXGIFactory* _Nonnull)getFactory NS_SWIFT_NAME(factory());
	-(ID3D11Device* _Nonnull)getDevice NS_SWIFT_NAME(device());
	-(ID3D11DeviceContext* _Nonnull)getContext NS_SWIFT_NAME(context());
	-(void)setSwapChain: (IDXGISwapChain* _Nonnull)swap_chain NS_SWIFT_NAME(setSwapChain(_:));
	-(void)setSwapChain_: (IDXGISwapChain* _Nonnull)swap_chain NS_SWIFT_NAME(setSwapChain(swap_chain:));
	-(IDXGISwapChain* _Nonnull)getSwapChain NS_SWIFT_NAME(swapChain());
	-(void)setRenderTarget: (ID3D11Texture2D* _Nonnull)render_target NS_SWIFT_NAME(setRenderTarget(_:));
	-(void)setRenderTarget_: (ID3D11Texture2D* _Nonnull)render_target NS_SWIFT_NAME(setRenderTarget(render_target:));
	-(void)setDepthStencil: (ID3D11Texture2D* _Nonnull)depth_stencil NS_SWIFT_NAME(setDepthStencil(_:));
	-(void)setDepthStencil_: (ID3D11Texture2D* _Nonnull)depth_stencil NS_SWIFT_NAME(setDepthStencil(depth_stencil:));
	-(ID3D11Texture2D* _Nonnull)getRenderTarget NS_SWIFT_NAME(renderTarget());
	-(ID3D11Texture2D* _Nonnull)getDepthStencil NS_SWIFT_NAME(depthStencil());
	-(void)setRenderTargetView: (ID3D11RenderTargetView* _Nonnull)render_target_view NS_SWIFT_NAME(setRenderTargetView(_:));
	-(void)setRenderTargetView_: (ID3D11RenderTargetView* _Nonnull)render_target_view NS_SWIFT_NAME(setRenderTargetView(render_target_view:));
	-(void)setDepthStencilView: (ID3D11DepthStencilView* _Nonnull)depth_stencil_view NS_SWIFT_NAME(setDepthStencilView(_:));
	-(void)setDepthStencilView_: (ID3D11DepthStencilView* _Nonnull)depth_stencil_view NS_SWIFT_NAME(setDepthStencilView(depth_stencil_view:));
	-(ID3D11RenderTargetView* _Nonnull)getRenderTargetView NS_SWIFT_NAME(renderTargetView());
	-(ID3D11DepthStencilView* _Nonnull)getDepthStencilView NS_SWIFT_NAME(depthStencilView());
	-(uint32_t)getColorDXGIFormat NS_SWIFT_NAME(colorDXGIFormat());
	-(uint32_t)getDepthDXGIFormat NS_SWIFT_NAME(depthDXGIFormat());
@end

/// Tellusim::MTLSurface
NS_SWIFT_NAME(MTLSurface)
TS_CAPI @interface TSMTLSurface : TSSurface
	-(id _Nonnull)init_3 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_4: (TSMTLContext* _Nonnull)context NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_4_: (TSMTLContext* _Nonnull)context NS_SWIFT_NAME(init(context:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MTLSurface* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::MTLSurface&)p;
		-(Tellusim::MTLSurface* _Nonnull)pointer;
		-(Tellusim::MTLSurface&)ref;
	#endif
	-(id _Nonnull)initSurface: (TSSurface* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSSurface* _Nonnull)getSurface;
	-(BOOL)equalPtr: (const TSMTLSurface* _Nonnull)p;
	-(TSMTLSurface* _Nonnull)copyPtr;
	-(TSMTLSurface* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSMTLSurface* _Nonnull)null;
	-(void* _Nonnull)getDevice NS_SWIFT_NAME(device());
	-(void* _Nonnull)getQueue NS_SWIFT_NAME(queue());
	-(void* _Nonnull)getCommand NS_SWIFT_NAME(command());
	-(void)setDescriptor: (void* _Nonnull)descriptor NS_SWIFT_NAME(setDescriptor(_:));
	-(void)setDescriptor_: (void* _Nonnull)descriptor NS_SWIFT_NAME(setDescriptor(descriptor:));
	-(void* _Nonnull)getDescriptor NS_SWIFT_NAME(descriptor());
	-(uint32_t)getColorPixelFormat NS_SWIFT_NAME(colorPixelFormat());
	-(uint32_t)getDepthPixelFormat NS_SWIFT_NAME(depthPixelFormat());
@end

/// Tellusim::VKSurface
NS_SWIFT_NAME(VKSurface)
TS_CAPI @interface TSVKSurface : TSSurface
	-(id _Nonnull)init_3 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_4: (TSVKContext* _Nonnull)context NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_4_: (TSVKContext* _Nonnull)context NS_SWIFT_NAME(init(context:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::VKSurface* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::VKSurface&)p;
		-(Tellusim::VKSurface* _Nonnull)pointer;
		-(Tellusim::VKSurface&)ref;
	#endif
	-(id _Nonnull)initSurface: (TSSurface* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSSurface* _Nonnull)getSurface;
	-(BOOL)equalPtr: (const TSVKSurface* _Nonnull)p;
	-(TSVKSurface* _Nonnull)copyPtr;
	-(TSVKSurface* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSVKSurface* _Nonnull)null;
	-(VkInstance _Nullable)getInstance NS_SWIFT_NAME(instance());
	-(VkPhysicalDevice _Nullable)getAdapter NS_SWIFT_NAME(adapter());
	-(VkDevice _Nullable)getDevice NS_SWIFT_NAME(device());
	-(VkQueue _Nullable)getQueue NS_SWIFT_NAME(queue());
	-(VkCommandBuffer _Nullable)getCommand NS_SWIFT_NAME(command());
	-(uint32_t)getFamily NS_SWIFT_NAME(family());
	-(void)setColorImage: (VkImage _Nullable)image NS_SWIFT_NAME(setColorImage(_:));
	-(void)setColorImage_: (VkImage _Nullable)image NS_SWIFT_NAME(setColorImage(image:));
	-(void)setDepthImage: (VkImage _Nullable)image NS_SWIFT_NAME(setDepthImage(_:));
	-(void)setDepthImage_: (VkImage _Nullable)image NS_SWIFT_NAME(setDepthImage(image:));
	-(VkImage _Nullable)getColorImage NS_SWIFT_NAME(colorImage());
	-(VkImage _Nullable)getDepthImage NS_SWIFT_NAME(depthImage());
	-(void)setColorImageView: (VkImageView _Nullable)image_view NS_SWIFT_NAME(setColorImageView(_:));
	-(void)setColorImageView_: (VkImageView _Nullable)image_view NS_SWIFT_NAME(setColorImageView(image_view:));
	-(void)setDepthImageView: (VkImageView _Nullable)image_view NS_SWIFT_NAME(setDepthImageView(_:));
	-(void)setDepthImageView_: (VkImageView _Nullable)image_view NS_SWIFT_NAME(setDepthImageView(image_view:));
	-(VkImageView _Nullable)getColorImageView NS_SWIFT_NAME(colorImageView());
	-(VkImageView _Nullable)getDepthImageView NS_SWIFT_NAME(depthImageView());
	-(void)setRenderPass: (VkRenderPass _Nullable)render_pass NS_SWIFT_NAME(setRenderPass(_:));
	-(void)setRenderPass_: (VkRenderPass _Nullable)render_pass NS_SWIFT_NAME(setRenderPass(render_pass:));
	-(void)setFramebuffer: (VkFramebuffer _Nullable)framebuffer NS_SWIFT_NAME(setFramebuffer(_:));
	-(void)setFramebuffer_: (VkFramebuffer _Nullable)framebuffer NS_SWIFT_NAME(setFramebuffer(framebuffer:));
	-(VkRenderPass _Nullable)getRenderPass NS_SWIFT_NAME(renderPass());
	-(VkFramebuffer _Nullable)getFramebuffer NS_SWIFT_NAME(framebuffer());
	-(uint32_t)getColorPixelFormat NS_SWIFT_NAME(colorPixelFormat());
	-(uint32_t)getDepthPixelFormat NS_SWIFT_NAME(depthPixelFormat());
@end

/// Tellusim::GLSurface
NS_SWIFT_NAME(GLSurface)
TS_CAPI @interface TSGLSurface : TSSurface
	-(id _Nonnull)init_3 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_4: (TSGLContext* _Nonnull)context NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_4_: (TSGLContext* _Nonnull)context NS_SWIFT_NAME(init(context:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::GLSurface* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::GLSurface&)p;
		-(Tellusim::GLSurface* _Nonnull)pointer;
		-(Tellusim::GLSurface&)ref;
	#endif
	-(id _Nonnull)initSurface: (TSSurface* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSSurface* _Nonnull)getSurface;
	-(BOOL)equalPtr: (const TSGLSurface* _Nonnull)p;
	-(TSGLSurface* _Nonnull)copyPtr;
	-(TSGLSurface* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSGLSurface* _Nonnull)null;
	-(void* _Nonnull)getContext NS_SWIFT_NAME(context());
	-(void)setColorTextureID: (uint32_t)texture_id NS_SWIFT_NAME(setColorTextureID(_:));
	-(void)setColorTextureID_: (uint32_t)texture_id NS_SWIFT_NAME(setColorTextureID(texture_id:));
	-(void)setDepthTextureID: (uint32_t)texture_id NS_SWIFT_NAME(setDepthTextureID(_:));
	-(void)setDepthTextureID_: (uint32_t)texture_id NS_SWIFT_NAME(setDepthTextureID(texture_id:));
	-(uint32_t)getColorTextureID NS_SWIFT_NAME(colorTextureID());
	-(uint32_t)getDepthTextureID NS_SWIFT_NAME(depthTextureID());
	-(void)setFramebufferID: (uint32_t)framebuffer_id NS_SWIFT_NAME(setFramebufferID(_:));
	-(void)setFramebufferID_: (uint32_t)framebuffer_id NS_SWIFT_NAME(setFramebufferID(framebuffer_id:));
	-(uint32_t)getFramebufferID NS_SWIFT_NAME(framebufferID());
	-(uint32_t)getColorInternalFormat NS_SWIFT_NAME(colorInternalFormat());
	-(uint32_t)getDepthInternalFormat NS_SWIFT_NAME(depthInternalFormat());
@end

/// Tellusim::GLESSurface
NS_SWIFT_NAME(GLESSurface)
TS_CAPI @interface TSGLESSurface : TSSurface
	-(id _Nonnull)init_3 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_4: (TSGLESContext* _Nonnull)context NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_4_: (TSGLESContext* _Nonnull)context NS_SWIFT_NAME(init(context:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::GLESSurface* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::GLESSurface&)p;
		-(Tellusim::GLESSurface* _Nonnull)pointer;
		-(Tellusim::GLESSurface&)ref;
	#endif
	-(id _Nonnull)initSurface: (TSSurface* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSSurface* _Nonnull)getSurface;
	-(BOOL)equalPtr: (const TSGLESSurface* _Nonnull)p;
	-(TSGLESSurface* _Nonnull)copyPtr;
	-(TSGLESSurface* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSGLESSurface* _Nonnull)null;
	-(void* _Nonnull)getContext NS_SWIFT_NAME(context());
	-(void)setColorTextureID: (uint32_t)texture_id NS_SWIFT_NAME(setColorTextureID(_:));
	-(void)setColorTextureID_: (uint32_t)texture_id NS_SWIFT_NAME(setColorTextureID(texture_id:));
	-(void)setDepthTextureID: (uint32_t)texture_id NS_SWIFT_NAME(setDepthTextureID(_:));
	-(void)setDepthTextureID_: (uint32_t)texture_id NS_SWIFT_NAME(setDepthTextureID(texture_id:));
	-(uint32_t)getColorTextureID NS_SWIFT_NAME(colorTextureID());
	-(uint32_t)getDepthTextureID NS_SWIFT_NAME(depthTextureID());
	-(void)setFramebufferID: (uint32_t)framebuffer_id NS_SWIFT_NAME(setFramebufferID(_:));
	-(void)setFramebufferID_: (uint32_t)framebuffer_id NS_SWIFT_NAME(setFramebufferID(framebuffer_id:));
	-(uint32_t)getFramebufferID NS_SWIFT_NAME(framebufferID());
	-(uint32_t)getColorInternalFormat NS_SWIFT_NAME(colorInternalFormat());
	-(uint32_t)getDepthInternalFormat NS_SWIFT_NAME(depthInternalFormat());
@end

/// Tellusim::Window::MousePressedCallback
NS_SWIFT_NAME(Window.MousePressedCallback)
@protocol TSWindowMousePressedCallback <NSObject>
	-(void)run: (TS_WindowButton)button NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::Window::MouseReleasedCallback
NS_SWIFT_NAME(Window.MouseReleasedCallback)
@protocol TSWindowMouseReleasedCallback <NSObject>
	-(void)run: (TS_WindowButton)button NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::Window::MouseChangedCallback
NS_SWIFT_NAME(Window.MouseChangedCallback)
@protocol TSWindowMouseChangedCallback <NSObject>
	-(void)run: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(run(_:_:));
@end

/// Tellusim::Window::MouseRotatedCallback
NS_SWIFT_NAME(Window.MouseRotatedCallback)
@protocol TSWindowMouseRotatedCallback <NSObject>
	-(void)run: (TS_WindowAxis)axis delta: (float32_t)delta NS_SWIFT_NAME(run(_:_:));
@end

/// Tellusim::Window::TouchChangedCallback
NS_SWIFT_NAME(Window.TouchChangedCallback)
@protocol TSWindowTouchChangedCallback <NSObject>
	-(void)run;
@end

/// Tellusim::Window::KeyboardPressedCallback
NS_SWIFT_NAME(Window.KeyboardPressedCallback)
@protocol TSWindowKeyboardPressedCallback <NSObject>
	-(void)run: (uint32_t)key code: (uint32_t)code NS_SWIFT_NAME(run(_:_:));
@end

/// Tellusim::Window::KeyboardReleasedCallback
NS_SWIFT_NAME(Window.KeyboardReleasedCallback)
@protocol TSWindowKeyboardReleasedCallback <NSObject>
	-(void)run: (uint32_t)key NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::Window::SizeChangedCallback
NS_SWIFT_NAME(Window.SizeChangedCallback)
@protocol TSWindowSizeChangedCallback <NSObject>
	-(void)run: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(run(_:_:));
@end

/// Tellusim::Window::FocusChangedCallback
NS_SWIFT_NAME(Window.FocusChangedCallback)
@protocol TSWindowFocusChangedCallback <NSObject>
	-(void)run: (BOOL)changed NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::Window::CloseClickedCallback
NS_SWIFT_NAME(Window.CloseClickedCallback)
@protocol TSWindowCloseClickedCallback <NSObject>
	-(void)run;
@end

/// Tellusim::Window::PauseChangedCallback
NS_SWIFT_NAME(Window.PauseChangedCallback)
@protocol TSWindowPauseChangedCallback <NSObject>
	-(void)run: (BOOL)paused NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::Window::FileDroppedCallback
NS_SWIFT_NAME(Window.FileDroppedCallback)
@protocol TSWindowFileDroppedCallback <NSObject>
	-(void)run: (NSString* _Nonnull)name remain: (uint32_t)remain NS_SWIFT_NAME(run(_:_:));
@end

/// Tellusim::Window::UpdateCallback
NS_SWIFT_NAME(Window.UpdateCallback)
@protocol TSWindowUpdateCallback <NSObject>
	-(void)run;
@end

/// Tellusim::Window::PresentCallback
NS_SWIFT_NAME(Window.PresentCallback)
@protocol TSWindowPresentCallback <NSObject>
	-(void)run;
@end

/// Tellusim::Window::MainLoopCallback
NS_SWIFT_NAME(Window.MainLoopCallback)
@protocol TSWindowMainLoopCallback <NSObject>
	-(BOOL)run;
@end

/// Tellusim::Window
NS_SWIFT_NAME(Window)
TS_CAPI @interface TSWindow : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	-(id _Nonnull)init_1: (TS_Platform)platform NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (TS_Platform)platform NS_SWIFT_NAME(init(platform:));
	-(id _Nonnull)init_2: (TS_Platform)platform index: (uint32_t)index NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TS_Platform)platform index: (uint32_t)index NS_SWIFT_NAME(init(platform:index:));
	-(id _Nonnull)init_3: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_3_: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(init(surface:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Window* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Window&)p;
		-(Tellusim::Window* _Nonnull)pointer;
		-(Tellusim::Window&)ref;
	#endif
	-(BOOL)equalPtr: (const TSWindow* _Nonnull)p;
	-(TSWindow* _Nonnull)copyPtr;
	-(TSWindow* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSWindow* _Nonnull)null;
	+(uint32_t)getNumWindows NS_SWIFT_NAME(numWindows());
	+(TSWindow* _Nonnull)getWindow: (uint32_t)index NS_SWIFT_NAME(window(_:));
	+(TSWindow* _Nonnull)getWindow_: (uint32_t)index NS_SWIFT_NAME(window(index:));
	+(void)update NS_SWIFT_NAME(update());
	+(void)update_1: (BOOL)wait NS_SWIFT_NAME(update(_:));
	+(void)update_1_: (BOOL)wait NS_SWIFT_NAME(update(wait:));
	-(TS_Platform)getPlatform NS_SWIFT_NAME(platform());
	-(NSString* _Nonnull)getPlatformName NS_SWIFT_NAME(platformName());
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)setSurface: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(setSurface(_:));
	-(void)setSurface_: (TSSurface* _Nonnull)surface NS_SWIFT_NAME(setSurface(surface:));
	-(TSSurface* _Nonnull)getSurface NS_SWIFT_NAME(surface());
	-(void* _Nonnull)getHandle NS_SWIFT_NAME(handle());
	-(BOOL)isCreated;
	-(BOOL)create: (const char* _Nonnull)title NS_SWIFT_NAME(create(_:));
	-(BOOL)create_: (const char* _Nonnull)title NS_SWIFT_NAME(create(title:));
	-(BOOL)create_1: (const char* _Nonnull)title flags: (TS_WindowFlags)flags NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_1_: (const char* _Nonnull)title flags: (TS_WindowFlags)flags NS_SWIFT_NAME(create(title:flags:));
	-(BOOL)create_2: (const TSString* _Nonnull)title NS_SWIFT_NAME(create(_:));
	-(BOOL)create_2_: (const TSString* _Nonnull)title NS_SWIFT_NAME(create(title:));
	-(BOOL)create_3: (const TSString* _Nonnull)title flags: (TS_WindowFlags)flags NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_3_: (const TSString* _Nonnull)title flags: (TS_WindowFlags)flags NS_SWIFT_NAME(create(title:flags:));
	-(BOOL)create_4 NS_SWIFT_NAME(create());
	-(BOOL)create_5: (TS_WindowFlags)flags NS_SWIFT_NAME(create(_:));
	-(BOOL)create_5_: (TS_WindowFlags)flags NS_SWIFT_NAME(create(flags:));
	-(void)release_ NS_SWIFT_NAME(release());
	-(BOOL)clear: (TSColor)color NS_SWIFT_NAME(clear(_:));
	-(BOOL)clear_: (TSColor)color NS_SWIFT_NAME(clear(color:));
	-(BOOL)grab: (TSImage* _Nonnull)image NS_SWIFT_NAME(grab(_:));
	-(BOOL)grab_: (TSImage* _Nonnull)image NS_SWIFT_NAME(grab(image:));
	-(BOOL)render;
	-(BOOL)present;
	-(BOOL)finish;
	-(TS_Format)getColorFormat NS_SWIFT_NAME(colorFormat());
	-(TS_Format)getDepthFormat NS_SWIFT_NAME(depthFormat());
	-(uint32_t)getMultisample NS_SWIFT_NAME(multisample());
	-(BOOL)hasMultisample;
	-(void)setFlags: (TS_WindowFlags)flags NS_SWIFT_NAME(setFlags(_:));
	-(void)setFlags_: (TS_WindowFlags)flags NS_SWIFT_NAME(setFlags(flags:));
	-(TS_WindowFlags)getFlags NS_SWIFT_NAME(flags());
	-(BOOL)hasFlag: (TS_WindowFlags)flags NS_SWIFT_NAME(hasFlag(_:));
	-(BOOL)hasFlag_: (TS_WindowFlags)flags NS_SWIFT_NAME(hasFlag(flags:));
	-(BOOL)hasFlags: (TS_WindowFlags)flags NS_SWIFT_NAME(hasFlags(_:));
	-(BOOL)hasFlags_: (TS_WindowFlags)flags NS_SWIFT_NAME(hasFlags(flags:));
	-(void)setRefreshRate: (uint32_t)rate NS_SWIFT_NAME(setRefreshRate(_:));
	-(void)setRefreshRate_: (uint32_t)rate NS_SWIFT_NAME(setRefreshRate(rate:));
	-(uint32_t)getRefreshRate NS_SWIFT_NAME(refreshRate());
	-(BOOL)setHidden: (BOOL)hidden NS_SWIFT_NAME(setHidden(_:));
	-(BOOL)setHidden_: (BOOL)hidden NS_SWIFT_NAME(setHidden(hidden:));
	-(BOOL)isHidden;
	-(BOOL)setFocused: (BOOL)focused NS_SWIFT_NAME(setFocused(_:));
	-(BOOL)setFocused_: (BOOL)focused NS_SWIFT_NAME(setFocused(focused:));
	-(BOOL)isFocused;
	-(BOOL)setMinimized: (BOOL)minimized NS_SWIFT_NAME(setMinimized(_:));
	-(BOOL)setMinimized_: (BOOL)minimized NS_SWIFT_NAME(setMinimized(minimized:));
	-(BOOL)isMinimized;
	-(BOOL)setFullscreen: (BOOL)fullscreen NS_SWIFT_NAME(setFullscreen(_:));
	-(BOOL)setFullscreen_: (BOOL)fullscreen NS_SWIFT_NAME(setFullscreen(fullscreen:));
	-(BOOL)isFullscreen;
	-(BOOL)isOccluded;
	-(BOOL)setTitle: (const char* _Nonnull)title NS_SWIFT_NAME(setTitle(_:));
	-(BOOL)setTitle_: (const char* _Nonnull)title NS_SWIFT_NAME(setTitle(title:));
	-(BOOL)setTitle_1: (const TSString* _Nonnull)title NS_SWIFT_NAME(setTitle(_:));
	-(BOOL)setTitle_1_: (const TSString* _Nonnull)title NS_SWIFT_NAME(setTitle(title:));
	-(NSString* _Nonnull)getTitle NS_SWIFT_NAME(title());
	-(BOOL)setIcon: (const TSImage* _Nonnull)image NS_SWIFT_NAME(setIcon(_:));
	-(BOOL)setIcon_: (const TSImage* _Nonnull)image NS_SWIFT_NAME(setIcon(image:));
	-(TSImage* _Nonnull)getIcon NS_SWIFT_NAME(icon());
	-(BOOL)setGeometry: (int32_t)x y: (int32_t)y width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setGeometry(_:_:_:_:));
	-(BOOL)setGeometry_: (int32_t)x y: (int32_t)y width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setGeometry(x:y:width:height:));
	-(BOOL)setGeometry_1: (int32_t)x y: (int32_t)y width: (uint32_t)width height: (uint32_t)height force: (BOOL)force NS_SWIFT_NAME(setGeometry(_:_:_:_:_:));
	-(BOOL)setGeometry_1_: (int32_t)x y: (int32_t)y width: (uint32_t)width height: (uint32_t)height force: (BOOL)force NS_SWIFT_NAME(setGeometry(x:y:width:height:force:));
	-(BOOL)setPosition: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setPosition(_:_:));
	-(BOOL)setPosition_: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setPosition(x:y:));
	-(BOOL)setPosition_1: (int32_t)x y: (int32_t)y force: (BOOL)force NS_SWIFT_NAME(setPosition(_:_:_:));
	-(BOOL)setPosition_1_: (int32_t)x y: (int32_t)y force: (BOOL)force NS_SWIFT_NAME(setPosition(x:y:force:));
	-(int32_t)getPositionX NS_SWIFT_NAME(positionX());
	-(int32_t)getPositionX_1: (BOOL)title NS_SWIFT_NAME(positionX(_:));
	-(int32_t)getPositionX_1_: (BOOL)title NS_SWIFT_NAME(positionX(title:));
	-(int32_t)getPositionY NS_SWIFT_NAME(positionY());
	-(int32_t)getPositionY_1: (BOOL)title NS_SWIFT_NAME(positionY(_:));
	-(int32_t)getPositionY_1_: (BOOL)title NS_SWIFT_NAME(positionY(title:));
	-(BOOL)setSize: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setSize(_:_:));
	-(BOOL)setSize_: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setSize(width:height:));
	-(BOOL)setSize_1: (uint32_t)width height: (uint32_t)height force: (BOOL)force NS_SWIFT_NAME(setSize(_:_:_:));
	-(BOOL)setSize_1_: (uint32_t)width height: (uint32_t)height force: (BOOL)force NS_SWIFT_NAME(setSize(width:height:force:));
	-(uint32_t)getWidth NS_SWIFT_NAME(width());
	-(uint32_t)getHeight NS_SWIFT_NAME(height());
	-(float32_t)getScale NS_SWIFT_NAME(scale());
	-(uint32_t)getDpiX NS_SWIFT_NAME(dpiX());
	-(uint32_t)getDpiY NS_SWIFT_NAME(dpiY());
	-(BOOL)setMinSize: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setMinSize(_:_:));
	-(BOOL)setMinSize_: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setMinSize(width:height:));
	-(BOOL)setMinSize_1: (uint32_t)width height: (uint32_t)height force: (BOOL)force NS_SWIFT_NAME(setMinSize(_:_:_:));
	-(BOOL)setMinSize_1_: (uint32_t)width height: (uint32_t)height force: (BOOL)force NS_SWIFT_NAME(setMinSize(width:height:force:));
	-(uint32_t)getMinWidth NS_SWIFT_NAME(minWidth());
	-(uint32_t)getMinHeight NS_SWIFT_NAME(minHeight());
	-(BOOL)setMaxSize: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setMaxSize(_:_:));
	-(BOOL)setMaxSize_: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setMaxSize(width:height:));
	-(BOOL)setMaxSize_1: (uint32_t)width height: (uint32_t)height force: (BOOL)force NS_SWIFT_NAME(setMaxSize(_:_:_:));
	-(BOOL)setMaxSize_1_: (uint32_t)width height: (uint32_t)height force: (BOOL)force NS_SWIFT_NAME(setMaxSize(width:height:force:));
	-(uint32_t)getMaxWidth NS_SWIFT_NAME(maxWidth());
	-(uint32_t)getMaxHeight NS_SWIFT_NAME(maxHeight());
	-(BOOL)setMouse: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setMouse(_:_:));
	-(BOOL)setMouse_: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setMouse(x:y:));
	-(BOOL)setMouse_1: (int32_t)x y: (int32_t)y force: (BOOL)force NS_SWIFT_NAME(setMouse(_:_:_:));
	-(BOOL)setMouse_1_: (int32_t)x y: (int32_t)y force: (BOOL)force NS_SWIFT_NAME(setMouse(x:y:force:));
	-(int32_t)getMouseX NS_SWIFT_NAME(mouseX());
	-(int32_t)getMouseY NS_SWIFT_NAME(mouseY());
	-(BOOL)setMouseDelta: (int32_t)dx dy: (int32_t)dy NS_SWIFT_NAME(setMouseDelta(_:_:));
	-(BOOL)setMouseDelta_: (int32_t)dx dy: (int32_t)dy NS_SWIFT_NAME(setMouseDelta(dx:dy:));
	-(int32_t)getMouseDX NS_SWIFT_NAME(mouseDX());
	-(int32_t)getMouseDY NS_SWIFT_NAME(mouseDY());
	-(BOOL)setMouseHidden: (BOOL)hidden NS_SWIFT_NAME(setMouseHidden(_:));
	-(BOOL)setMouseHidden_: (BOOL)hidden NS_SWIFT_NAME(setMouseHidden(hidden:));
	-(BOOL)setMouseHidden_1: (BOOL)hidden force: (BOOL)force NS_SWIFT_NAME(setMouseHidden(_:_:));
	-(BOOL)setMouseHidden_1_: (BOOL)hidden force: (BOOL)force NS_SWIFT_NAME(setMouseHidden(hidden:force:));
	-(BOOL)isMouseHidden;
	-(BOOL)setMouseClipped: (BOOL)clipped NS_SWIFT_NAME(setMouseClipped(_:));
	-(BOOL)setMouseClipped_: (BOOL)clipped NS_SWIFT_NAME(setMouseClipped(clipped:));
	-(BOOL)setMouseClipped_1: (BOOL)clipped force: (BOOL)force NS_SWIFT_NAME(setMouseClipped(_:_:));
	-(BOOL)setMouseClipped_1_: (BOOL)clipped force: (BOOL)force NS_SWIFT_NAME(setMouseClipped(clipped:force:));
	-(BOOL)isMouseClipped;
	-(BOOL)isMouseInside;
	-(BOOL)setMouseCursor: (TS_WindowCursor)cursor NS_SWIFT_NAME(setMouseCursor(_:));
	-(BOOL)setMouseCursor_: (TS_WindowCursor)cursor NS_SWIFT_NAME(setMouseCursor(cursor:));
	-(BOOL)setMouseCursor_1: (TS_WindowCursor)cursor force: (BOOL)force NS_SWIFT_NAME(setMouseCursor(_:_:));
	-(BOOL)setMouseCursor_1_: (TS_WindowCursor)cursor force: (BOOL)force NS_SWIFT_NAME(setMouseCursor(cursor:force:));
	-(TS_WindowCursor)getMouseCursor NS_SWIFT_NAME(mouseCursor());
	-(BOOL)setMouseButtons: (TS_WindowButton)buttons NS_SWIFT_NAME(setMouseButtons(_:));
	-(BOOL)setMouseButtons_: (TS_WindowButton)buttons NS_SWIFT_NAME(setMouseButtons(buttons:));
	-(TS_WindowButton)getMouseButtons NS_SWIFT_NAME(mouseButtons());
	-(BOOL)setMouseButton: (TS_WindowButton)button value: (BOOL)value NS_SWIFT_NAME(setMouseButton(_:_:));
	-(BOOL)setMouseButton_: (TS_WindowButton)button value: (BOOL)value NS_SWIFT_NAME(setMouseButton(button:value:));
	-(BOOL)getMouseButton: (TS_WindowButton)button NS_SWIFT_NAME(mouseButton(_:));
	-(BOOL)getMouseButton_: (TS_WindowButton)button NS_SWIFT_NAME(mouseButton(button:));
	-(BOOL)getMouseButton_1: (TS_WindowButton)button clear: (BOOL)clear NS_SWIFT_NAME(mouseButton(_:_:));
	-(BOOL)getMouseButton_1_: (TS_WindowButton)button clear: (BOOL)clear NS_SWIFT_NAME(mouseButton(button:clear:));
	-(void)releaseMouseButtons: (TS_WindowButton)buttons NS_SWIFT_NAME(releaseMouseButtons(_:));
	-(void)releaseMouseButtons_: (TS_WindowButton)buttons NS_SWIFT_NAME(releaseMouseButtons(buttons:));
	-(TS_WindowButton)clearMouseButtons;
	-(BOOL)setMouseAxis: (TS_WindowAxis)axis value: (float32_t)value NS_SWIFT_NAME(setMouseAxis(_:_:));
	-(BOOL)setMouseAxis_: (TS_WindowAxis)axis value: (float32_t)value NS_SWIFT_NAME(setMouseAxis(axis:value:));
	-(float32_t)getMouseAxis: (TS_WindowAxis)axis NS_SWIFT_NAME(mouseAxis(_:));
	-(float32_t)getMouseAxis_: (TS_WindowAxis)axis NS_SWIFT_NAME(mouseAxis(axis:));
	-(float32_t)clearMouseAxis: (TS_WindowAxis)axis NS_SWIFT_NAME(clearMouseAxis(_:));
	-(float32_t)clearMouseAxis_: (TS_WindowAxis)axis NS_SWIFT_NAME(clearMouseAxis(axis:));
	-(void)setMousePressedCallback: (id<TSWindowMousePressedCallback> _Nullable)func NS_SWIFT_NAME(setMousePressedCallback(_:));
	-(void)setMousePressedCallback_: (id<TSWindowMousePressedCallback> _Nullable)func NS_SWIFT_NAME(setMousePressedCallback(func:));
	-(void)setMouseReleasedCallback: (id<TSWindowMouseReleasedCallback> _Nullable)func NS_SWIFT_NAME(setMouseReleasedCallback(_:));
	-(void)setMouseReleasedCallback_: (id<TSWindowMouseReleasedCallback> _Nullable)func NS_SWIFT_NAME(setMouseReleasedCallback(func:));
	-(void)setMouseChangedCallback: (id<TSWindowMouseChangedCallback> _Nullable)func NS_SWIFT_NAME(setMouseChangedCallback(_:));
	-(void)setMouseChangedCallback_: (id<TSWindowMouseChangedCallback> _Nullable)func NS_SWIFT_NAME(setMouseChangedCallback(func:));
	-(void)setMouseRotatedCallback: (id<TSWindowMouseRotatedCallback> _Nullable)func NS_SWIFT_NAME(setMouseRotatedCallback(_:));
	-(void)setMouseRotatedCallback_: (id<TSWindowMouseRotatedCallback> _Nullable)func NS_SWIFT_NAME(setMouseRotatedCallback(func:));
	-(uint32_t)getNumTouches NS_SWIFT_NAME(numTouches());
	-(uint32_t)addTouch: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(addTouch(_:_:));
	-(uint32_t)addTouch_: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(addTouch(x:y:));
	-(int32_t)getTouchX: (uint32_t)touch NS_SWIFT_NAME(touchX(_:));
	-(int32_t)getTouchX_: (uint32_t)touch NS_SWIFT_NAME(touchX(touch:));
	-(int32_t)getTouchY: (uint32_t)touch NS_SWIFT_NAME(touchY(_:));
	-(int32_t)getTouchY_: (uint32_t)touch NS_SWIFT_NAME(touchY(touch:));
	-(uint32_t)findTouch: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(findTouch(_:_:));
	-(uint32_t)findTouch_: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(findTouch(x:y:));
	-(void)clearTouches;
	-(void)setTouchChangedCallback: (id<TSWindowTouchChangedCallback> _Nullable)func NS_SWIFT_NAME(setTouchChangedCallback(_:));
	-(void)setTouchChangedCallback_: (id<TSWindowTouchChangedCallback> _Nullable)func NS_SWIFT_NAME(setTouchChangedCallback(func:));
	-(void)setKeyboardKey: (uint32_t)key value: (BOOL)value NS_SWIFT_NAME(setKeyboardKey(_:_:));
	-(void)setKeyboardKey_: (uint32_t)key value: (BOOL)value NS_SWIFT_NAME(setKeyboardKey(key:value:));
	-(BOOL)getKeyboardKey: (uint32_t)key NS_SWIFT_NAME(keyboardKey(_:));
	-(BOOL)getKeyboardKey_: (uint32_t)key NS_SWIFT_NAME(keyboardKey(key:));
	-(BOOL)getKeyboardKey_1: (uint32_t)key clear: (BOOL)clear NS_SWIFT_NAME(keyboardKey(_:_:));
	-(BOOL)getKeyboardKey_1_: (uint32_t)key clear: (BOOL)clear NS_SWIFT_NAME(keyboardKey(key:clear:));
	-(void)setKeyboardPressedCallback: (id<TSWindowKeyboardPressedCallback> _Nullable)func NS_SWIFT_NAME(setKeyboardPressedCallback(_:));
	-(void)setKeyboardPressedCallback_: (id<TSWindowKeyboardPressedCallback> _Nullable)func NS_SWIFT_NAME(setKeyboardPressedCallback(func:));
	-(void)setKeyboardReleasedCallback: (id<TSWindowKeyboardReleasedCallback> _Nullable)func NS_SWIFT_NAME(setKeyboardReleasedCallback(_:));
	-(void)setKeyboardReleasedCallback_: (id<TSWindowKeyboardReleasedCallback> _Nullable)func NS_SWIFT_NAME(setKeyboardReleasedCallback(func:));
	-(void)setSizeChangedCallback: (id<TSWindowSizeChangedCallback> _Nullable)func NS_SWIFT_NAME(setSizeChangedCallback(_:));
	-(void)setSizeChangedCallback_: (id<TSWindowSizeChangedCallback> _Nullable)func NS_SWIFT_NAME(setSizeChangedCallback(func:));
	-(void)setFocusChangedCallback: (id<TSWindowFocusChangedCallback> _Nullable)func NS_SWIFT_NAME(setFocusChangedCallback(_:));
	-(void)setFocusChangedCallback_: (id<TSWindowFocusChangedCallback> _Nullable)func NS_SWIFT_NAME(setFocusChangedCallback(func:));
	-(void)setCloseClickedCallback: (id<TSWindowCloseClickedCallback> _Nullable)func NS_SWIFT_NAME(setCloseClickedCallback(_:));
	-(void)setCloseClickedCallback_: (id<TSWindowCloseClickedCallback> _Nullable)func NS_SWIFT_NAME(setCloseClickedCallback(func:));
	-(void)setPauseChangedCallback: (id<TSWindowPauseChangedCallback> _Nullable)func NS_SWIFT_NAME(setPauseChangedCallback(_:));
	-(void)setPauseChangedCallback_: (id<TSWindowPauseChangedCallback> _Nullable)func NS_SWIFT_NAME(setPauseChangedCallback(func:));
	-(void)setFileDroppedCallback: (id<TSWindowFileDroppedCallback> _Nullable)func NS_SWIFT_NAME(setFileDroppedCallback(_:));
	-(void)setFileDroppedCallback_: (id<TSWindowFileDroppedCallback> _Nullable)func NS_SWIFT_NAME(setFileDroppedCallback(func:));
	-(void)setUpdateCallback: (id<TSWindowUpdateCallback> _Nullable)func NS_SWIFT_NAME(setUpdateCallback(_:));
	-(void)setUpdateCallback_: (id<TSWindowUpdateCallback> _Nullable)func NS_SWIFT_NAME(setUpdateCallback(func:));
	-(void)setPresentCallback: (id<TSWindowPresentCallback> _Nullable)func NS_SWIFT_NAME(setPresentCallback(_:));
	-(void)setPresentCallback_: (id<TSWindowPresentCallback> _Nullable)func NS_SWIFT_NAME(setPresentCallback(func:));
	-(BOOL)run: (id<TSWindowMainLoopCallback> _Nullable)func NS_SWIFT_NAME(run(_:));
	-(BOOL)run_: (id<TSWindowMainLoopCallback> _Nullable)func NS_SWIFT_NAME(run(func:));
	-(BOOL)isRunning;
	-(void)stop;
	-(BOOL)setCopyText: (const char* _Nonnull)text NS_SWIFT_NAME(setCopyText(_:));
	-(BOOL)setCopyText_: (const char* _Nonnull)text NS_SWIFT_NAME(setCopyText(text:));
	-(BOOL)setCopyText_1: (const TSString* _Nonnull)text NS_SWIFT_NAME(setCopyText(_:));
	-(BOOL)setCopyText_1_: (const TSString* _Nonnull)text NS_SWIFT_NAME(setCopyText(text:));
	-(NSString* _Nonnull)getPasteText NS_SWIFT_NAME(pasteText());
@end

/// Tellusim::Font
NS_SWIFT_NAME(Font)
TS_CAPI @interface TSFont : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Font* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Font&)p;
		-(Tellusim::Font* _Nonnull)pointer;
		-(Tellusim::Font&)ref;
	#endif
	-(BOOL)equalPtr: (const TSFont* _Nonnull)p;
	-(TSFont* _Nonnull)copyPtr;
	-(TSFont* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFont* _Nonnull)null;
	-(void)clear;
	-(BOOL)isLoaded;
	-(BOOL)load: (const char* _Nonnull)name NS_SWIFT_NAME(load(_:));
	-(BOOL)load_: (const char* _Nonnull)name NS_SWIFT_NAME(load(name:));
	-(BOOL)load_1: (TSStream* _Nonnull)stream NS_SWIFT_NAME(load(_:));
	-(BOOL)load_1_: (TSStream* _Nonnull)stream NS_SWIFT_NAME(load(stream:));
	-(float32_t)getAdvance: (TSFontStyle)style code: (uint32_t)code NS_SWIFT_NAME(advance(_:_:));
	-(float32_t)getAdvance_: (TSFontStyle)style code: (uint32_t)code NS_SWIFT_NAME(advance(style:code:));
	-(TSRect)getRect: (TSVector3f)position style: (TSFontStyle)style str: (const char* _Nonnull)str NS_SWIFT_NAME(rect(_:_:_:));
	-(TSRect)getRect_: (TSVector3f)position style: (TSFontStyle)style str: (const char* _Nonnull)str NS_SWIFT_NAME(rect(position:style:str:));
	-(TSRect)getRect_1: (TSVector3f)position style: (TSFontStyle)style str: (const uint32_t* _Nonnull)str NS_SWIFT_NAME(rect(_:_:_:));
	-(TSRect)getRect_1_: (TSVector3f)position style: (TSFontStyle)style str: (const uint32_t* _Nonnull)str NS_SWIFT_NAME(rect(position:style:str:));
	-(TSRect)getRect_2: (const TSFontBatch* _Nonnull)batches num_batches: (uint32_t)num_batches NS_SWIFT_NAME(rect(_:_:));
	-(TSRect)getRect_2_: (const TSFontBatch* _Nonnull)batches num_batches: (uint32_t)num_batches NS_SWIFT_NAME(rect(batches:num_batches:));
	-(TSRect)getRect_3: (const TSFontBatch32* _Nonnull)batches num_batches: (uint32_t)num_batches NS_SWIFT_NAME(rect(_:_:));
	-(TSRect)getRect_3_: (const TSFontBatch32* _Nonnull)batches num_batches: (uint32_t)num_batches NS_SWIFT_NAME(rect(batches:num_batches:));
	-(void)create: (const TSDevice* _Nonnull)device style: (TSFontStyle)style str: (const char* _Nonnull)str NS_SWIFT_NAME(create(_:_:_:));
	-(void)create_: (const TSDevice* _Nonnull)device style: (TSFontStyle)style str: (const char* _Nonnull)str NS_SWIFT_NAME(create(device:style:str:));
	-(void)create_1: (const TSDevice* _Nonnull)device style: (TSFontStyle)style str: (const uint32_t* _Nonnull)str NS_SWIFT_NAME(create(_:_:_:));
	-(void)create_1_: (const TSDevice* _Nonnull)device style: (TSFontStyle)style str: (const uint32_t* _Nonnull)str NS_SWIFT_NAME(create(device:style:str:));
	-(void)create_2: (const TSDevice* _Nonnull)device batches: (const TSFontBatch* _Nonnull)batches num_batches: (uint32_t)num_batches NS_SWIFT_NAME(create(_:_:_:));
	-(void)create_2_: (const TSDevice* _Nonnull)device batches: (const TSFontBatch* _Nonnull)batches num_batches: (uint32_t)num_batches NS_SWIFT_NAME(create(device:batches:num_batches:));
	-(void)create_3: (const TSDevice* _Nonnull)device batches: (const TSFontBatch32* _Nonnull)batches num_batches: (uint32_t)num_batches NS_SWIFT_NAME(create(_:_:_:));
	-(void)create_3_: (const TSDevice* _Nonnull)device batches: (const TSFontBatch32* _Nonnull)batches num_batches: (uint32_t)num_batches NS_SWIFT_NAME(create(device:batches:num_batches:));
	-(void)draw: (TSCommand* _Nonnull)command position: (TSVector3f)position style: (TSFontStyle)style str: (const char* _Nonnull)str NS_SWIFT_NAME(draw(_:_:_:_:));
	-(void)draw_: (TSCommand* _Nonnull)command position: (TSVector3f)position style: (TSFontStyle)style str: (const char* _Nonnull)str NS_SWIFT_NAME(draw(command:position:style:str:));
	-(void)draw_1: (TSCommand* _Nonnull)command position: (TSVector3f)position style: (TSFontStyle)style str: (const uint32_t* _Nonnull)str NS_SWIFT_NAME(draw(_:_:_:_:));
	-(void)draw_1_: (TSCommand* _Nonnull)command position: (TSVector3f)position style: (TSFontStyle)style str: (const uint32_t* _Nonnull)str NS_SWIFT_NAME(draw(command:position:style:str:));
	-(void)draw_2: (TSCommand* _Nonnull)command batches: (const TSFontBatch* _Nonnull)batches num_batches: (uint32_t)num_batches NS_SWIFT_NAME(draw(_:_:_:));
	-(void)draw_2_: (TSCommand* _Nonnull)command batches: (const TSFontBatch* _Nonnull)batches num_batches: (uint32_t)num_batches NS_SWIFT_NAME(draw(command:batches:num_batches:));
	-(void)draw_3: (TSCommand* _Nonnull)command batches: (const TSFontBatch32* _Nonnull)batches num_batches: (uint32_t)num_batches NS_SWIFT_NAME(draw(_:_:_:));
	-(void)draw_3_: (TSCommand* _Nonnull)command batches: (const TSFontBatch32* _Nonnull)batches num_batches: (uint32_t)num_batches NS_SWIFT_NAME(draw(command:batches:num_batches:));
	-(BOOL)flush: (const TSDevice* _Nonnull)device NS_SWIFT_NAME(flush(_:));
	-(BOOL)flush_: (const TSDevice* _Nonnull)device NS_SWIFT_NAME(flush(device:));
@end

/// Tellusim::CanvasElement::DrawCallback
NS_SWIFT_NAME(CanvasElement.DrawCallback)
@protocol TSCanvasElementDrawCallback <NSObject>
	-(BOOL)run: (TSCommand* _Nonnull)command element: (TSCanvasElement* _Nonnull)element NS_SWIFT_NAME(run(_:_:));
@end

/// Tellusim::CanvasElement
NS_SWIFT_NAME(CanvasElement)
TS_CAPI @interface TSCanvasElement : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::CanvasElement* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::CanvasElement&)p;
		-(Tellusim::CanvasElement* _Nonnull)pointer;
		-(Tellusim::CanvasElement&)ref;
	#endif
	-(BOOL)equalPtr: (const TSCanvasElement* _Nonnull)p;
	-(TSCanvasElement* _Nonnull)copyPtr;
	-(TSCanvasElement* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSCanvasElement* _Nonnull)null;
	-(TS_CanvasElementType)getType NS_SWIFT_NAME(type());
	+(NSString* _Nonnull)getTypeName: (TS_CanvasElementType)type NS_SWIFT_NAME(typeName(_:));
	+(NSString* _Nonnull)getTypeName_: (TS_CanvasElementType)type NS_SWIFT_NAME(typeName(type:));
	-(NSString* _Nonnull)getTypeName_1 NS_SWIFT_NAME(typeName());
	-(BOOL)isText;
	-(BOOL)isMesh;
	-(BOOL)isRect;
	-(BOOL)isTriangle;
	-(BOOL)isEllipse;
	-(BOOL)isShape;
	-(BOOL)isStrip;
	-(void)setCanvas: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(setCanvas(_:));
	-(void)setCanvas_: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(setCanvas(canvas:));
	-(const TSCanvas* _Nonnull)getCanvas NS_SWIFT_NAME(canvas());
	-(void)setMode: (TS_CanvasElementMode)mode NS_SWIFT_NAME(setMode(_:));
	-(void)setMode_: (TS_CanvasElementMode)mode NS_SWIFT_NAME(setMode(mode:));
	-(TS_CanvasElementMode)getMode NS_SWIFT_NAME(mode());
	-(void)setAlign: (TS_CanvasElementAlign)align NS_SWIFT_NAME(setAlign(_:));
	-(void)setAlign_: (TS_CanvasElementAlign)align NS_SWIFT_NAME(setAlign(align:));
	-(TS_CanvasElementAlign)getAlign NS_SWIFT_NAME(align());
	-(BOOL)hasAlign: (TS_CanvasElementAlign)align NS_SWIFT_NAME(hasAlign(_:));
	-(BOOL)hasAlign_: (TS_CanvasElementAlign)align NS_SWIFT_NAME(hasAlign(align:));
	-(BOOL)hasAligns: (TS_CanvasElementAlign)aligns NS_SWIFT_NAME(hasAligns(_:));
	-(BOOL)hasAligns_: (TS_CanvasElementAlign)aligns NS_SWIFT_NAME(hasAligns(aligns:));
	-(void)setOrder: (int32_t)order NS_SWIFT_NAME(setOrder(_:));
	-(void)setOrder_: (int32_t)order NS_SWIFT_NAME(setOrder(order:));
	-(int32_t)getOrder NS_SWIFT_NAME(order());
	-(void)setEnabled: (BOOL)enabled NS_SWIFT_NAME(setEnabled(_:));
	-(void)setEnabled_: (BOOL)enabled NS_SWIFT_NAME(setEnabled(enabled:));
	-(BOOL)isEnabled;
	-(void)clearColor;
	-(void)setColor: (TS_CanvasElementStack)op NS_SWIFT_NAME(setColor(_:));
	-(void)setColor_: (TS_CanvasElementStack)op NS_SWIFT_NAME(setColor(op:));
	-(void)setColor_1: (TSColor)color NS_SWIFT_NAME(setColor(_:));
	-(void)setColor_1_: (TSColor)color NS_SWIFT_NAME(setColor(color:));
	-(void)setColor_2: (TSColor)color op: (TS_CanvasElementStack)op NS_SWIFT_NAME(setColor(_:_:));
	-(void)setColor_2_: (TSColor)color op: (TS_CanvasElementStack)op NS_SWIFT_NAME(setColor(color:op:));
	-(void)setColor_3: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a NS_SWIFT_NAME(setColor(_:_:_:_:));
	-(void)setColor_3_: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a NS_SWIFT_NAME(setColor(r:g:b:a:));
	-(void)setColor_4: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a op: (TS_CanvasElementStack)op NS_SWIFT_NAME(setColor(_:_:_:_:_:));
	-(void)setColor_4_: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a op: (TS_CanvasElementStack)op NS_SWIFT_NAME(setColor(r:g:b:a:op:));
	-(TSColor)getColor NS_SWIFT_NAME(color());
	-(TS_CanvasElementStack)getColorOp NS_SWIFT_NAME(colorOp());
	-(void)clearTransform;
	-(void)setTransform: (TS_CanvasElementStack)op NS_SWIFT_NAME(setTransform(_:));
	-(void)setTransform_: (TS_CanvasElementStack)op NS_SWIFT_NAME(setTransform(op:));
	-(void)setTransform_1: (TSMatrix4x4f)transform NS_SWIFT_NAME(setTransform(_:));
	-(void)setTransform_1_: (TSMatrix4x4f)transform NS_SWIFT_NAME(setTransform(transform:));
	-(void)setTransform_2: (TSMatrix4x4f)transform op: (TS_CanvasElementStack)op NS_SWIFT_NAME(setTransform(_:_:));
	-(void)setTransform_2_: (TSMatrix4x4f)transform op: (TS_CanvasElementStack)op NS_SWIFT_NAME(setTransform(transform:op:));
	-(TSMatrix4x4f)getTransform NS_SWIFT_NAME(transform());
	-(TS_CanvasElementStack)getTransformOp NS_SWIFT_NAME(transformOp());
	-(void)clearScissor;
	-(void)setScissor: (TS_CanvasElementStack)op NS_SWIFT_NAME(setScissor(_:));
	-(void)setScissor_: (TS_CanvasElementStack)op NS_SWIFT_NAME(setScissor(op:));
	-(void)setScissor_1: (TSRect)scissor NS_SWIFT_NAME(setScissor(_:));
	-(void)setScissor_1_: (TSRect)scissor NS_SWIFT_NAME(setScissor(scissor:));
	-(void)setScissor_2: (TSRect)scissor op: (TS_CanvasElementStack)op NS_SWIFT_NAME(setScissor(_:_:));
	-(void)setScissor_2_: (TSRect)scissor op: (TS_CanvasElementStack)op NS_SWIFT_NAME(setScissor(scissor:op:));
	-(TSRect)getScissor NS_SWIFT_NAME(scissor());
	-(TS_CanvasElementStack)getScissorOp NS_SWIFT_NAME(scissorOp());
	-(void)setMipmap: (float32_t)mipmap NS_SWIFT_NAME(setMipmap(_:));
	-(void)setMipmap_: (float32_t)mipmap NS_SWIFT_NAME(setMipmap(mipmap:));
	-(float32_t)getMipmap NS_SWIFT_NAME(mipmap());
	-(void)setSampler: (TSSampler* _Nonnull)sampler NS_SWIFT_NAME(setSampler(_:));
	-(void)setSampler_: (TSSampler* _Nonnull)sampler NS_SWIFT_NAME(setSampler(sampler:));
	-(TSSampler* _Nonnull)getSampler NS_SWIFT_NAME(sampler());
	-(void)setFilter: (TS_SamplerFilter)filter NS_SWIFT_NAME(setFilter(_:));
	-(void)setFilter_: (TS_SamplerFilter)filter NS_SWIFT_NAME(setFilter(filter:));
	-(TS_SamplerFilter)getFilter NS_SWIFT_NAME(filter());
	-(void)setAnisotropy: (uint32_t)anisotropy NS_SWIFT_NAME(setAnisotropy(_:));
	-(void)setAnisotropy_: (uint32_t)anisotropy NS_SWIFT_NAME(setAnisotropy(anisotropy:));
	-(uint32_t)getAnisotropy NS_SWIFT_NAME(anisotropy());
	-(void)setWrapMode: (TS_SamplerWrapMode)mode NS_SWIFT_NAME(setWrapMode(_:));
	-(void)setWrapMode_: (TS_SamplerWrapMode)mode NS_SWIFT_NAME(setWrapMode(mode:));
	-(TS_SamplerWrapMode)getWrapMode NS_SWIFT_NAME(wrapMode());
	-(void)setTexture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setTexture(_:));
	-(void)setTexture_: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setTexture(texture:));
	-(void)setTexture_1: (TSTexture* _Nonnull)texture linear: (BOOL)linear NS_SWIFT_NAME(setTexture(_:_:));
	-(void)setTexture_1_: (TSTexture* _Nonnull)texture linear: (BOOL)linear NS_SWIFT_NAME(setTexture(texture:linear:));
	-(TSTexture* _Nonnull)getTexture NS_SWIFT_NAME(texture());
	-(BOOL)getTextureLinear NS_SWIFT_NAME(textureLinear());
	-(void)setPipeline: (TSPipeline* _Nonnull)pipeline NS_SWIFT_NAME(setPipeline(_:));
	-(void)setPipeline_: (TSPipeline* _Nonnull)pipeline NS_SWIFT_NAME(setPipeline(pipeline:));
	-(TSPipeline* _Nonnull)getPipeline NS_SWIFT_NAME(pipeline());
	-(void)setPrimitive: (TS_PipelinePrimitive)primitive NS_SWIFT_NAME(setPrimitive(_:));
	-(void)setPrimitive_: (TS_PipelinePrimitive)primitive NS_SWIFT_NAME(setPrimitive(primitive:));
	-(TS_PipelinePrimitive)getPrimitive NS_SWIFT_NAME(primitive());
	-(void)setCullMode: (TS_PipelineCullMode)mode NS_SWIFT_NAME(setCullMode(_:));
	-(void)setCullMode_: (TS_PipelineCullMode)mode NS_SWIFT_NAME(setCullMode(mode:));
	-(TS_PipelineCullMode)getCullMode NS_SWIFT_NAME(cullMode());
	-(void)setFrontMode: (TS_PipelineFrontMode)mode NS_SWIFT_NAME(setFrontMode(_:));
	-(void)setFrontMode_: (TS_PipelineFrontMode)mode NS_SWIFT_NAME(setFrontMode(mode:));
	-(TS_PipelineFrontMode)getFrontMode NS_SWIFT_NAME(frontMode());
	-(void)setBlend: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlend(_:_:_:));
	-(void)setBlend_: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlend(op:src:dest:));
	-(TS_PipelineBlendOp)getBlendOp NS_SWIFT_NAME(blendOp());
	-(TS_PipelineBlendFunc)getBlendSrcFunc NS_SWIFT_NAME(blendSrcFunc());
	-(TS_PipelineBlendFunc)getBlendDestFunc NS_SWIFT_NAME(blendDestFunc());
	-(void)setColorMask: (TS_PipelineColorMask)mask NS_SWIFT_NAME(setColorMask(_:));
	-(void)setColorMask_: (TS_PipelineColorMask)mask NS_SWIFT_NAME(setColorMask(mask:));
	-(TS_PipelineColorMask)getColorMask NS_SWIFT_NAME(colorMask());
	-(void)setDepthMask: (TS_PipelineDepthMask)mask NS_SWIFT_NAME(setDepthMask(_:));
	-(void)setDepthMask_: (TS_PipelineDepthMask)mask NS_SWIFT_NAME(setDepthMask(mask:));
	-(TS_PipelineDepthMask)getDepthMask NS_SWIFT_NAME(depthMask());
	-(void)setDepthFunc: (TS_PipelineDepthFunc)func NS_SWIFT_NAME(setDepthFunc(_:));
	-(void)setDepthFunc_: (TS_PipelineDepthFunc)func NS_SWIFT_NAME(setDepthFunc(func:));
	-(TS_PipelineDepthFunc)getDepthFunc NS_SWIFT_NAME(depthFunc());
	-(void)setStencilRef: (uint32_t)ref NS_SWIFT_NAME(setStencilRef(_:));
	-(void)setStencilRef_: (uint32_t)ref NS_SWIFT_NAME(setStencilRef(ref:));
	-(void)setStencilFunc: (TS_PipelineStencilFunc)func fail_op: (TS_PipelineStencilOp)fail_op dfail_op: (TS_PipelineStencilOp)dfail_op dpass_op: (TS_PipelineStencilOp)dpass_op NS_SWIFT_NAME(setStencilFunc(_:_:_:_:));
	-(void)setStencilFunc_: (TS_PipelineStencilFunc)func fail_op: (TS_PipelineStencilOp)fail_op dfail_op: (TS_PipelineStencilOp)dfail_op dpass_op: (TS_PipelineStencilOp)dpass_op NS_SWIFT_NAME(setStencilFunc(func:fail_op:dfail_op:dpass_op:));
	-(uint32_t)getStencilRef NS_SWIFT_NAME(stencilRef());
	-(TS_PipelineStencilFunc)getStencilFunc NS_SWIFT_NAME(stencilFunc());
	-(TS_PipelineStencilOp)getStencilFailOp NS_SWIFT_NAME(stencilFailOp());
	-(TS_PipelineStencilOp)getStencilDepthFailOp NS_SWIFT_NAME(stencilDepthFailOp());
	-(TS_PipelineStencilOp)getStencilDepthPassOp NS_SWIFT_NAME(stencilDepthPassOp());
	-(void)setDrawCallback: (id<TSCanvasElementDrawCallback> _Nullable)func NS_SWIFT_NAME(setDrawCallback(_:));
	-(void)setDrawCallback_: (id<TSCanvasElementDrawCallback> _Nullable)func NS_SWIFT_NAME(setDrawCallback(func:));
	-(TSRect)getRect NS_SWIFT_NAME(rect());
@end

/// Tellusim::CanvasText
NS_SWIFT_NAME(CanvasText)
TS_CAPI @interface TSCanvasText : TSCanvasElement
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(init(canvas:));
	-(id _Nonnull)init_3: (TSCanvas* _Nonnull)canvas text: (const char* _Nonnull)text NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_3_: (TSCanvas* _Nonnull)canvas text: (const char* _Nonnull)text NS_SWIFT_NAME(init(canvas:text:));
	-(id _Nonnull)init_4: (TSCanvas* _Nonnull)canvas text: (const TSString* _Nonnull)text NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_4_: (TSCanvas* _Nonnull)canvas text: (const TSString* _Nonnull)text NS_SWIFT_NAME(init(canvas:text:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::CanvasText* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::CanvasText&)p;
		-(Tellusim::CanvasText* _Nonnull)pointer;
		-(Tellusim::CanvasText&)ref;
	#endif
	-(id _Nonnull)initCanvasElement: (TSCanvasElement* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSCanvasElement* _Nonnull)getCanvasElement;
	-(BOOL)equalPtr: (const TSCanvasText* _Nonnull)p;
	-(TSCanvasText* _Nonnull)copyPtr;
	-(TSCanvasText* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSCanvasText* _Nonnull)null;
	-(void)setFontName: (const char* _Nonnull)name NS_SWIFT_NAME(setFontName(_:));
	-(void)setFontName_: (const char* _Nonnull)name NS_SWIFT_NAME(setFontName(name:));
	-(void)setFontName_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(setFontName(_:));
	-(void)setFontName_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(setFontName(name:));
	-(NSString* _Nonnull)getFontName NS_SWIFT_NAME(fontName());
	-(void)setFontColor: (TSColor)color NS_SWIFT_NAME(setFontColor(_:));
	-(void)setFontColor_: (TSColor)color NS_SWIFT_NAME(setFontColor(color:));
	-(TSColor)getFontColor NS_SWIFT_NAME(fontColor());
	-(BOOL)setFontSize: (uint32_t)scale NS_SWIFT_NAME(setFontSize(_:));
	-(BOOL)setFontSize_: (uint32_t)scale NS_SWIFT_NAME(setFontSize(scale:));
	-(uint32_t)getFontSize NS_SWIFT_NAME(fontSize());
	-(BOOL)setFontScale: (uint32_t)scale NS_SWIFT_NAME(setFontScale(_:));
	-(BOOL)setFontScale_: (uint32_t)scale NS_SWIFT_NAME(setFontScale(scale:));
	-(uint32_t)getFontScale NS_SWIFT_NAME(fontScale());
	-(BOOL)setFontStyle: (TSFontStyle)style NS_SWIFT_NAME(setFontStyle(_:));
	-(BOOL)setFontStyle_: (TSFontStyle)style NS_SWIFT_NAME(setFontStyle(style:));
	-(TSFontStyle)getFontStyleConst NS_SWIFT_NAME(fontStyleConst());
	-(TSFontStyle)getFontStyle NS_SWIFT_NAME(fontStyle());
	-(void)setPosition: (TSVector3f)position NS_SWIFT_NAME(setPosition(_:));
	-(void)setPosition_: (TSVector3f)position NS_SWIFT_NAME(setPosition(position:));
	-(void)setPosition_1: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition(_:_:));
	-(void)setPosition_1_: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition(x:y:));
	-(void)setPosition_2: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition(_:_:_:));
	-(void)setPosition_2_: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition(x:y:z:));
	-(TSVector3f)getPosition NS_SWIFT_NAME(position());
	-(void)setText: (const char* _Nonnull)text NS_SWIFT_NAME(setText(_:));
	-(void)setText_: (const char* _Nonnull)text NS_SWIFT_NAME(setText(text:));
	-(void)setText_1: (const TSString* _Nonnull)text NS_SWIFT_NAME(setText(_:));
	-(void)setText_1_: (const TSString* _Nonnull)text NS_SWIFT_NAME(setText(text:));
	-(NSString* _Nonnull)getText NS_SWIFT_NAME(text());
	-(void)clearBatches;
	-(void)setBatches: (TSFontBatch* _Nonnull)batches batches_size: (uint32_t)batches_size NS_SWIFT_NAME(setBatches(_:_:));
	-(void)setBatches_: (TSFontBatch* _Nonnull)batches batches_size: (uint32_t)batches_size NS_SWIFT_NAME(setBatches(batches:batches_size:));
	-(void)setBatches_1: (const TSFontBatch* _Nonnull)batches num_batches: (uint32_t)num_batches NS_SWIFT_NAME(setBatches(_:_:));
	-(void)setBatches_1_: (const TSFontBatch* _Nonnull)batches num_batches: (uint32_t)num_batches NS_SWIFT_NAME(setBatches(batches:num_batches:));
@end

/// Tellusim::CanvasMesh
NS_SWIFT_NAME(CanvasMesh)
TS_CAPI @interface TSCanvasMesh : TSCanvasElement
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(init(canvas:));
	-(id _Nonnull)init_3: (TSCanvas* _Nonnull)canvas mode: (TS_CanvasElementMode)mode NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_3_: (TSCanvas* _Nonnull)canvas mode: (TS_CanvasElementMode)mode NS_SWIFT_NAME(init(canvas:mode:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::CanvasMesh* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::CanvasMesh&)p;
		-(Tellusim::CanvasMesh* _Nonnull)pointer;
		-(Tellusim::CanvasMesh&)ref;
	#endif
	-(id _Nonnull)initCanvasElement: (TSCanvasElement* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSCanvasElement* _Nonnull)getCanvasElement;
	-(BOOL)equalPtr: (const TSCanvasMesh* _Nonnull)p;
	-(TSCanvasMesh* _Nonnull)copyPtr;
	-(TSCanvasMesh* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSCanvasMesh* _Nonnull)null;
	-(void)setTextureName: (const char* _Nonnull)name NS_SWIFT_NAME(setTextureName(_:));
	-(void)setTextureName_: (const char* _Nonnull)name NS_SWIFT_NAME(setTextureName(name:));
	-(void)setTextureName_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(setTextureName(_:));
	-(void)setTextureName_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(setTextureName(name:));
	-(NSString* _Nonnull)getTextureName NS_SWIFT_NAME(textureName());
	-(void)setGradientStyle: (TSGradientStyle)style NS_SWIFT_NAME(setGradientStyle(_:));
	-(void)setGradientStyle_: (TSGradientStyle)style NS_SWIFT_NAME(setGradientStyle(style:));
	-(TSGradientStyle)getGradientStyleConst NS_SWIFT_NAME(gradientStyleConst());
	-(TSGradientStyle)getGradientStyle NS_SWIFT_NAME(gradientStyle());
	-(void)clearVertices;
	-(void)setNumVertices: (uint32_t)num_vertices NS_SWIFT_NAME(setNumVertices(_:));
	-(void)setNumVertices_: (uint32_t)num_vertices NS_SWIFT_NAME(setNumVertices(num_vertices:));
	-(void)reserveVertices: (uint32_t)num_vertices NS_SWIFT_NAME(reserveVertices(_:));
	-(void)reserveVertices_: (uint32_t)num_vertices NS_SWIFT_NAME(reserveVertices(num_vertices:));
	-(uint32_t)getNumVertices NS_SWIFT_NAME(numVertices());
	-(void)setVertices: (const TSCanvasVertex* _Nonnull)vertices num_vertices: (uint32_t)num_vertices NS_SWIFT_NAME(setVertices(_:_:));
	-(void)setVertices_: (const TSCanvasVertex* _Nonnull)vertices num_vertices: (uint32_t)num_vertices NS_SWIFT_NAME(setVertices(vertices:num_vertices:));
	-(void)addVertices: (const TSCanvasVertex* _Nonnull)vertices num_vertices: (uint32_t)num_vertices NS_SWIFT_NAME(addVertices(_:_:));
	-(void)addVertices_: (const TSCanvasVertex* _Nonnull)vertices num_vertices: (uint32_t)num_vertices NS_SWIFT_NAME(addVertices(vertices:num_vertices:));
	-(const TSCanvasVertex* _Nonnull)getVertices NS_SWIFT_NAME(vertices());
	-(void)setVertex: (uint32_t)index vertex: (TSCanvasVertex)vertex NS_SWIFT_NAME(setVertex(_:_:));
	-(void)setVertex_: (uint32_t)index vertex: (TSCanvasVertex)vertex NS_SWIFT_NAME(setVertex(index:vertex:));
	-(TSCanvasVertex)getVertex: (uint32_t)index NS_SWIFT_NAME(vertex(_:));
	-(TSCanvasVertex)getVertex_: (uint32_t)index NS_SWIFT_NAME(vertex(index:));
	-(void)setVertexPosition: (uint32_t)index position: (TSVector3f)position NS_SWIFT_NAME(setVertexPosition(_:_:));
	-(void)setVertexPosition_: (uint32_t)index position: (TSVector3f)position NS_SWIFT_NAME(setVertexPosition(index:position:));
	-(void)setVertexPosition_1: (uint32_t)index x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setVertexPosition(_:_:_:));
	-(void)setVertexPosition_1_: (uint32_t)index x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setVertexPosition(index:x:y:));
	-(void)setVertexPosition_2: (uint32_t)index x: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setVertexPosition(_:_:_:_:));
	-(void)setVertexPosition_2_: (uint32_t)index x: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setVertexPosition(index:x:y:z:));
	-(TSVector3f)getVertexPosition: (uint32_t)index NS_SWIFT_NAME(vertexPosition(_:));
	-(TSVector3f)getVertexPosition_: (uint32_t)index NS_SWIFT_NAME(vertexPosition(index:));
	-(void)setVertexTexCoord: (uint32_t)index texcoord: (TSVector2f)texcoord NS_SWIFT_NAME(setVertexTexCoord(_:_:));
	-(void)setVertexTexCoord_: (uint32_t)index texcoord: (TSVector2f)texcoord NS_SWIFT_NAME(setVertexTexCoord(index:texcoord:));
	-(void)setVertexTexCoord_1: (uint32_t)index s: (float32_t)s t: (float32_t)t NS_SWIFT_NAME(setVertexTexCoord(_:_:_:));
	-(void)setVertexTexCoord_1_: (uint32_t)index s: (float32_t)s t: (float32_t)t NS_SWIFT_NAME(setVertexTexCoord(index:s:t:));
	-(TSVector2f)getVertexTexCoord: (uint32_t)index NS_SWIFT_NAME(vertexTexCoord(_:));
	-(TSVector2f)getVertexTexCoord_: (uint32_t)index NS_SWIFT_NAME(vertexTexCoord(index:));
	-(void)setVertexColor: (uint32_t)index color: (TSColor)color NS_SWIFT_NAME(setVertexColor(_:_:));
	-(void)setVertexColor_: (uint32_t)index color: (TSColor)color NS_SWIFT_NAME(setVertexColor(index:color:));
	-(void)setVertexColor_1: (uint32_t)index color: (uint32_t)color NS_SWIFT_NAME(setVertexColor(_:_:));
	-(void)setVertexColor_1_: (uint32_t)index color: (uint32_t)color NS_SWIFT_NAME(setVertexColor(index:color:));
	-(uint32_t)getVertexColor: (uint32_t)index NS_SWIFT_NAME(vertexColor(_:));
	-(uint32_t)getVertexColor_: (uint32_t)index NS_SWIFT_NAME(vertexColor(index:));
	-(uint32_t)addVertex: (TSVector3f)position NS_SWIFT_NAME(addVertex(_:));
	-(uint32_t)addVertex_: (TSVector3f)position NS_SWIFT_NAME(addVertex(position:));
	-(uint32_t)addVertex_1: (TSVector3f)position color: (uint32_t)color NS_SWIFT_NAME(addVertex(_:_:));
	-(uint32_t)addVertex_1_: (TSVector3f)position color: (uint32_t)color NS_SWIFT_NAME(addVertex(position:color:));
	-(uint32_t)addVertex_2: (TSVector3f)position texcoord: (TSVector2f)texcoord NS_SWIFT_NAME(addVertex(_:_:));
	-(uint32_t)addVertex_2_: (TSVector3f)position texcoord: (TSVector2f)texcoord NS_SWIFT_NAME(addVertex(position:texcoord:));
	-(uint32_t)addVertex_3: (TSVector3f)position texcoord: (TSVector2f)texcoord color: (uint32_t)color NS_SWIFT_NAME(addVertex(_:_:_:));
	-(uint32_t)addVertex_3_: (TSVector3f)position texcoord: (TSVector2f)texcoord color: (uint32_t)color NS_SWIFT_NAME(addVertex(position:texcoord:color:));
	-(uint32_t)addVertex_4: (float32_t)x y: (float32_t)y z: (float32_t)z s: (float32_t)s t: (float32_t)t NS_SWIFT_NAME(addVertex(_:_:_:_:_:));
	-(uint32_t)addVertex_4_: (float32_t)x y: (float32_t)y z: (float32_t)z s: (float32_t)s t: (float32_t)t NS_SWIFT_NAME(addVertex(x:y:z:s:t:));
	-(uint32_t)addVertex_5: (float32_t)x y: (float32_t)y z: (float32_t)z s: (float32_t)s t: (float32_t)t color: (uint32_t)color NS_SWIFT_NAME(addVertex(_:_:_:_:_:_:));
	-(uint32_t)addVertex_5_: (float32_t)x y: (float32_t)y z: (float32_t)z s: (float32_t)s t: (float32_t)t color: (uint32_t)color NS_SWIFT_NAME(addVertex(x:y:z:s:t:color:));
	-(uint32_t)addVertex_6: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(addVertex(_:_:_:));
	-(uint32_t)addVertex_6_: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(addVertex(x:y:z:));
	-(uint32_t)addVertex_7: (float32_t)x y: (float32_t)y z: (float32_t)z color: (uint32_t)color NS_SWIFT_NAME(addVertex(_:_:_:_:));
	-(uint32_t)addVertex_7_: (float32_t)x y: (float32_t)y z: (float32_t)z color: (uint32_t)color NS_SWIFT_NAME(addVertex(x:y:z:color:));
	-(uint32_t)addVertex_8: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(addVertex(_:_:));
	-(uint32_t)addVertex_8_: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(addVertex(x:y:));
	-(uint32_t)addVertex_9: (float32_t)x y: (float32_t)y color: (uint32_t)color NS_SWIFT_NAME(addVertex(_:_:_:));
	-(uint32_t)addVertex_9_: (float32_t)x y: (float32_t)y color: (uint32_t)color NS_SWIFT_NAME(addVertex(x:y:color:));
	-(void)clearIndices;
	-(void)setNumIndices: (uint32_t)num_indices NS_SWIFT_NAME(setNumIndices(_:));
	-(void)setNumIndices_: (uint32_t)num_indices NS_SWIFT_NAME(setNumIndices(num_indices:));
	-(void)reserveIndices: (uint32_t)num_indices NS_SWIFT_NAME(reserveIndices(_:));
	-(void)reserveIndices_: (uint32_t)num_indices NS_SWIFT_NAME(reserveIndices(num_indices:));
	-(uint32_t)getNumIndices NS_SWIFT_NAME(numIndices());
	-(void)setIndices: (const uint32_t* _Nonnull)indices num_indices: (uint32_t)num_indices NS_SWIFT_NAME(setIndices(_:_:));
	-(void)setIndices_: (const uint32_t* _Nonnull)indices num_indices: (uint32_t)num_indices NS_SWIFT_NAME(setIndices(indices:num_indices:));
	-(void)addIndices: (const uint32_t* _Nonnull)indices num_indices: (uint32_t)num_indices NS_SWIFT_NAME(addIndices(_:_:));
	-(void)addIndices_: (const uint32_t* _Nonnull)indices num_indices: (uint32_t)num_indices NS_SWIFT_NAME(addIndices(indices:num_indices:));
	-(const uint32_t* _Nonnull)getIndices NS_SWIFT_NAME(indices());
	-(uint32_t* _Nonnull)getIndices_1 NS_SWIFT_NAME(indices());
	-(void)setIndex: (uint32_t)index value: (uint32_t)value NS_SWIFT_NAME(setIndex(_:_:));
	-(void)setIndex_: (uint32_t)index value: (uint32_t)value NS_SWIFT_NAME(setIndex(index:value:));
	-(uint32_t)getIndex: (uint32_t)index NS_SWIFT_NAME(index(_:));
	-(uint32_t)getIndex_: (uint32_t)index NS_SWIFT_NAME(index(index:));
	-(void)addIndex: (uint32_t)i0 NS_SWIFT_NAME(addIndex(_:));
	-(void)addIndex_: (uint32_t)i0 NS_SWIFT_NAME(addIndex(i0:));
	-(void)addIndices_1: (uint32_t)i0 i1: (uint32_t)i1 NS_SWIFT_NAME(addIndices(_:_:));
	-(void)addIndices_1_: (uint32_t)i0 i1: (uint32_t)i1 NS_SWIFT_NAME(addIndices(i0:i1:));
	-(void)addIndices_2: (uint32_t)i0 i1: (uint32_t)i1 i2: (uint32_t)i2 NS_SWIFT_NAME(addIndices(_:_:_:));
	-(void)addIndices_2_: (uint32_t)i0 i1: (uint32_t)i1 i2: (uint32_t)i2 NS_SWIFT_NAME(addIndices(i0:i1:i2:));
	-(void)addIndices_3: (uint32_t)i0 i1: (uint32_t)i1 i2: (uint32_t)i2 i3: (uint32_t)i3 NS_SWIFT_NAME(addIndices(_:_:_:_:));
	-(void)addIndices_3_: (uint32_t)i0 i1: (uint32_t)i1 i2: (uint32_t)i2 i3: (uint32_t)i3 NS_SWIFT_NAME(addIndices(i0:i1:i2:i3:));
	-(void)setRect: (TSRect)rect NS_SWIFT_NAME(setRect(_:));
	-(void)setRect_: (TSRect)rect NS_SWIFT_NAME(setRect(rect:));
@end

/// Tellusim::CanvasRect
NS_SWIFT_NAME(CanvasRect)
TS_CAPI @interface TSCanvasRect : TSCanvasElement
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(init(canvas:));
	-(id _Nonnull)init_3: (TSCanvas* _Nonnull)canvas radius: (float32_t)radius NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_3_: (TSCanvas* _Nonnull)canvas radius: (float32_t)radius NS_SWIFT_NAME(init(canvas:radius:));
	-(id _Nonnull)init_4: (TSCanvas* _Nonnull)canvas radius: (float32_t)radius size: (TSVector2f)size NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_4_: (TSCanvas* _Nonnull)canvas radius: (float32_t)radius size: (TSVector2f)size NS_SWIFT_NAME(init(canvas:radius:size:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::CanvasRect* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::CanvasRect&)p;
		-(Tellusim::CanvasRect* _Nonnull)pointer;
		-(Tellusim::CanvasRect&)ref;
	#endif
	-(id _Nonnull)initCanvasElement: (TSCanvasElement* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSCanvasElement* _Nonnull)getCanvasElement;
	-(BOOL)equalPtr: (const TSCanvasRect* _Nonnull)p;
	-(TSCanvasRect* _Nonnull)copyPtr;
	-(TSCanvasRect* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSCanvasRect* _Nonnull)null;
	-(void)setRadius: (float32_t)radius NS_SWIFT_NAME(setRadius(_:));
	-(void)setRadius_: (float32_t)radius NS_SWIFT_NAME(setRadius(radius:));
	-(float32_t)getRadius NS_SWIFT_NAME(radius());
	-(void)setTextureName: (const char* _Nonnull)name NS_SWIFT_NAME(setTextureName(_:));
	-(void)setTextureName_: (const char* _Nonnull)name NS_SWIFT_NAME(setTextureName(name:));
	-(void)setTextureName_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(setTextureName(_:));
	-(void)setTextureName_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(setTextureName(name:));
	-(NSString* _Nonnull)getTextureName NS_SWIFT_NAME(textureName());
	-(void)setStrokeColor: (TSColor)color NS_SWIFT_NAME(setStrokeColor(_:));
	-(void)setStrokeColor_: (TSColor)color NS_SWIFT_NAME(setStrokeColor(color:));
	-(TSColor)getStrokeColor NS_SWIFT_NAME(strokeColor());
	-(void)setStrokeStyle: (TSStrokeStyle)style NS_SWIFT_NAME(setStrokeStyle(_:));
	-(void)setStrokeStyle_: (TSStrokeStyle)style NS_SWIFT_NAME(setStrokeStyle(style:));
	-(TSStrokeStyle)getStrokeStyleConst NS_SWIFT_NAME(strokeStyleConst());
	-(TSStrokeStyle)getStrokeStyle NS_SWIFT_NAME(strokeStyle());
	-(void)setGradientStyle: (TSGradientStyle)style NS_SWIFT_NAME(setGradientStyle(_:));
	-(void)setGradientStyle_: (TSGradientStyle)style NS_SWIFT_NAME(setGradientStyle(style:));
	-(TSGradientStyle)getGradientStyleConst NS_SWIFT_NAME(gradientStyleConst());
	-(TSGradientStyle)getGradientStyle NS_SWIFT_NAME(gradientStyle());
	-(void)setSize: (TSVector2f)size NS_SWIFT_NAME(setSize(_:));
	-(void)setSize_: (TSVector2f)size NS_SWIFT_NAME(setSize(size:));
	-(void)setSize_1: (float32_t)width height: (float32_t)height NS_SWIFT_NAME(setSize(_:_:));
	-(void)setSize_1_: (float32_t)width height: (float32_t)height NS_SWIFT_NAME(setSize(width:height:));
	-(TSVector2f)getSize NS_SWIFT_NAME(size());
	-(float32_t)getWidth NS_SWIFT_NAME(width());
	-(float32_t)getHeight NS_SWIFT_NAME(height());
	-(void)setPosition: (TSVector3f)position NS_SWIFT_NAME(setPosition(_:));
	-(void)setPosition_: (TSVector3f)position NS_SWIFT_NAME(setPosition(position:));
	-(void)setPosition_1: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition(_:_:));
	-(void)setPosition_1_: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition(x:y:));
	-(void)setPosition_2: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition(_:_:_:));
	-(void)setPosition_2_: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition(x:y:z:));
	-(TSVector3f)getPosition NS_SWIFT_NAME(position());
	-(void)setTexCoord: (TSRect)texcoord NS_SWIFT_NAME(setTexCoord(_:));
	-(void)setTexCoord_: (TSRect)texcoord NS_SWIFT_NAME(setTexCoord(texcoord:));
	-(void)setTexCoord_1: (float32_t)left right: (float32_t)right bottom: (float32_t)bottom top: (float32_t)top NS_SWIFT_NAME(setTexCoord(_:_:_:_:));
	-(void)setTexCoord_1_: (float32_t)left right: (float32_t)right bottom: (float32_t)bottom top: (float32_t)top NS_SWIFT_NAME(setTexCoord(left:right:bottom:top:));
	-(TSRect)getTexCoord NS_SWIFT_NAME(texCoord());
@end

/// Tellusim::CanvasTriangle
NS_SWIFT_NAME(CanvasTriangle)
TS_CAPI @interface TSCanvasTriangle : TSCanvasElement
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(init(canvas:));
	-(id _Nonnull)init_3: (TSCanvas* _Nonnull)canvas radius: (float32_t)radius NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_3_: (TSCanvas* _Nonnull)canvas radius: (float32_t)radius NS_SWIFT_NAME(init(canvas:radius:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::CanvasTriangle* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::CanvasTriangle&)p;
		-(Tellusim::CanvasTriangle* _Nonnull)pointer;
		-(Tellusim::CanvasTriangle&)ref;
	#endif
	-(id _Nonnull)initCanvasElement: (TSCanvasElement* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSCanvasElement* _Nonnull)getCanvasElement;
	-(BOOL)equalPtr: (const TSCanvasTriangle* _Nonnull)p;
	-(TSCanvasTriangle* _Nonnull)copyPtr;
	-(TSCanvasTriangle* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSCanvasTriangle* _Nonnull)null;
	-(void)setRadius: (float32_t)radius NS_SWIFT_NAME(setRadius(_:));
	-(void)setRadius_: (float32_t)radius NS_SWIFT_NAME(setRadius(radius:));
	-(float32_t)getRadius NS_SWIFT_NAME(radius());
	-(void)setStrokeColor: (TSColor)color NS_SWIFT_NAME(setStrokeColor(_:));
	-(void)setStrokeColor_: (TSColor)color NS_SWIFT_NAME(setStrokeColor(color:));
	-(TSColor)getStrokeColor NS_SWIFT_NAME(strokeColor());
	-(void)setStrokeStyle: (TSStrokeStyle)style NS_SWIFT_NAME(setStrokeStyle(_:));
	-(void)setStrokeStyle_: (TSStrokeStyle)style NS_SWIFT_NAME(setStrokeStyle(style:));
	-(TSStrokeStyle)getStrokeStyleConst NS_SWIFT_NAME(strokeStyleConst());
	-(TSStrokeStyle)getStrokeStyle NS_SWIFT_NAME(strokeStyle());
	-(void)setGradientStyle: (TSGradientStyle)style NS_SWIFT_NAME(setGradientStyle(_:));
	-(void)setGradientStyle_: (TSGradientStyle)style NS_SWIFT_NAME(setGradientStyle(style:));
	-(TSGradientStyle)getGradientStyleConst NS_SWIFT_NAME(gradientStyleConst());
	-(TSGradientStyle)getGradientStyle NS_SWIFT_NAME(gradientStyle());
	-(void)setPosition0: (TSVector3f)position NS_SWIFT_NAME(setPosition0(_:));
	-(void)setPosition0_: (TSVector3f)position NS_SWIFT_NAME(setPosition0(position:));
	-(void)setPosition1: (TSVector3f)position NS_SWIFT_NAME(setPosition1(_:));
	-(void)setPosition1_: (TSVector3f)position NS_SWIFT_NAME(setPosition1(position:));
	-(void)setPosition2: (TSVector3f)position NS_SWIFT_NAME(setPosition2(_:));
	-(void)setPosition2_: (TSVector3f)position NS_SWIFT_NAME(setPosition2(position:));
	-(void)setPosition0_1: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition0(_:_:));
	-(void)setPosition0_1_: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition0(x:y:));
	-(void)setPosition0_2: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition0(_:_:_:));
	-(void)setPosition0_2_: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition0(x:y:z:));
	-(void)setPosition1_1: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition1(_:_:));
	-(void)setPosition1_1_: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition1(x:y:));
	-(void)setPosition1_2: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition1(_:_:_:));
	-(void)setPosition1_2_: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition1(x:y:z:));
	-(void)setPosition2_1: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition2(_:_:));
	-(void)setPosition2_1_: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition2(x:y:));
	-(void)setPosition2_2: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition2(_:_:_:));
	-(void)setPosition2_2_: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition2(x:y:z:));
	-(void)setPosition: (TSVector3f)position_0 position_1: (TSVector3f)position_1 position_2: (TSVector3f)position_2 NS_SWIFT_NAME(setPosition(_:_:_:));
	-(void)setPosition_: (TSVector3f)position_0 position_1: (TSVector3f)position_1 position_2: (TSVector3f)position_2 NS_SWIFT_NAME(setPosition(position_0:position_1:position_2:));
	-(TSVector3f)getPosition0 NS_SWIFT_NAME(position0());
	-(TSVector3f)getPosition1 NS_SWIFT_NAME(position1());
	-(TSVector3f)getPosition2 NS_SWIFT_NAME(position2());
@end

/// Tellusim::CanvasEllipse
NS_SWIFT_NAME(CanvasEllipse)
TS_CAPI @interface TSCanvasEllipse : TSCanvasElement
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(init(canvas:));
	-(id _Nonnull)init_3: (TSCanvas* _Nonnull)canvas radius: (float32_t)radius NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_3_: (TSCanvas* _Nonnull)canvas radius: (float32_t)radius NS_SWIFT_NAME(init(canvas:radius:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::CanvasEllipse* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::CanvasEllipse&)p;
		-(Tellusim::CanvasEllipse* _Nonnull)pointer;
		-(Tellusim::CanvasEllipse&)ref;
	#endif
	-(id _Nonnull)initCanvasElement: (TSCanvasElement* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSCanvasElement* _Nonnull)getCanvasElement;
	-(BOOL)equalPtr: (const TSCanvasEllipse* _Nonnull)p;
	-(TSCanvasEllipse* _Nonnull)copyPtr;
	-(TSCanvasEllipse* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSCanvasEllipse* _Nonnull)null;
	-(void)setRadius: (float32_t)radius NS_SWIFT_NAME(setRadius(_:));
	-(void)setRadius_: (float32_t)radius NS_SWIFT_NAME(setRadius(radius:));
	-(float32_t)getRadius NS_SWIFT_NAME(radius());
	-(void)setTextureName: (const char* _Nonnull)name NS_SWIFT_NAME(setTextureName(_:));
	-(void)setTextureName_: (const char* _Nonnull)name NS_SWIFT_NAME(setTextureName(name:));
	-(void)setTextureName_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(setTextureName(_:));
	-(void)setTextureName_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(setTextureName(name:));
	-(NSString* _Nonnull)getTextureName NS_SWIFT_NAME(textureName());
	-(void)setStrokeColor: (TSColor)color NS_SWIFT_NAME(setStrokeColor(_:));
	-(void)setStrokeColor_: (TSColor)color NS_SWIFT_NAME(setStrokeColor(color:));
	-(TSColor)getStrokeColor NS_SWIFT_NAME(strokeColor());
	-(void)setStrokeStyle: (TSStrokeStyle)style NS_SWIFT_NAME(setStrokeStyle(_:));
	-(void)setStrokeStyle_: (TSStrokeStyle)style NS_SWIFT_NAME(setStrokeStyle(style:));
	-(TSStrokeStyle)getStrokeStyleConst NS_SWIFT_NAME(strokeStyleConst());
	-(TSStrokeStyle)getStrokeStyle NS_SWIFT_NAME(strokeStyle());
	-(void)setGradientStyle: (TSGradientStyle)style NS_SWIFT_NAME(setGradientStyle(_:));
	-(void)setGradientStyle_: (TSGradientStyle)style NS_SWIFT_NAME(setGradientStyle(style:));
	-(TSGradientStyle)getGradientStyleConst NS_SWIFT_NAME(gradientStyleConst());
	-(TSGradientStyle)getGradientStyle NS_SWIFT_NAME(gradientStyle());
	-(void)setPosition: (TSVector3f)position NS_SWIFT_NAME(setPosition(_:));
	-(void)setPosition_: (TSVector3f)position NS_SWIFT_NAME(setPosition(position:));
	-(void)setPosition0: (TSVector3f)position NS_SWIFT_NAME(setPosition0(_:));
	-(void)setPosition0_: (TSVector3f)position NS_SWIFT_NAME(setPosition0(position:));
	-(void)setPosition1: (TSVector3f)position NS_SWIFT_NAME(setPosition1(_:));
	-(void)setPosition1_: (TSVector3f)position NS_SWIFT_NAME(setPosition1(position:));
	-(void)setPosition_1: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition(_:_:));
	-(void)setPosition_1_: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition(x:y:));
	-(void)setPosition_2: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition(_:_:_:));
	-(void)setPosition_2_: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition(x:y:z:));
	-(void)setPosition0_1: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition0(_:_:));
	-(void)setPosition0_1_: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition0(x:y:));
	-(void)setPosition0_2: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition0(_:_:_:));
	-(void)setPosition0_2_: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition0(x:y:z:));
	-(void)setPosition1_1: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition1(_:_:));
	-(void)setPosition1_1_: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition1(x:y:));
	-(void)setPosition1_2: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition1(_:_:_:));
	-(void)setPosition1_2_: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition1(x:y:z:));
	-(void)setPosition_3: (TSVector3f)position_0 position_1: (TSVector3f)position_1 NS_SWIFT_NAME(setPosition(_:_:));
	-(void)setPosition_3_: (TSVector3f)position_0 position_1: (TSVector3f)position_1 NS_SWIFT_NAME(setPosition(position_0:position_1:));
	-(TSVector3f)getPosition0 NS_SWIFT_NAME(position0());
	-(TSVector3f)getPosition1 NS_SWIFT_NAME(position1());
	-(void)setTexCoord: (TSRect)texcoord NS_SWIFT_NAME(setTexCoord(_:));
	-(void)setTexCoord_: (TSRect)texcoord NS_SWIFT_NAME(setTexCoord(texcoord:));
	-(void)setTexCoord_1: (float32_t)left right: (float32_t)right bottom: (float32_t)bottom top: (float32_t)top NS_SWIFT_NAME(setTexCoord(_:_:_:_:));
	-(void)setTexCoord_1_: (float32_t)left right: (float32_t)right bottom: (float32_t)bottom top: (float32_t)top NS_SWIFT_NAME(setTexCoord(left:right:bottom:top:));
	-(TSRect)getTexCoord NS_SWIFT_NAME(texCoord());
@end

/// Tellusim::CanvasShape
NS_SWIFT_NAME(CanvasShape)
TS_CAPI @interface TSCanvasShape : TSCanvasElement
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(init(canvas:));
	-(id _Nonnull)init_3: (TSCanvas* _Nonnull)canvas cubic: (BOOL)cubic NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_3_: (TSCanvas* _Nonnull)canvas cubic: (BOOL)cubic NS_SWIFT_NAME(init(canvas:cubic:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::CanvasShape* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::CanvasShape&)p;
		-(Tellusim::CanvasShape* _Nonnull)pointer;
		-(Tellusim::CanvasShape&)ref;
	#endif
	-(id _Nonnull)initCanvasElement: (TSCanvasElement* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSCanvasElement* _Nonnull)getCanvasElement;
	-(BOOL)equalPtr: (const TSCanvasShape* _Nonnull)p;
	-(TSCanvasShape* _Nonnull)copyPtr;
	-(TSCanvasShape* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSCanvasShape* _Nonnull)null;
	-(void)setCubic: (BOOL)cubic NS_SWIFT_NAME(setCubic(_:));
	-(void)setCubic_: (BOOL)cubic NS_SWIFT_NAME(setCubic(cubic:));
	-(BOOL)isCubic;
	-(void)setThreshold: (float32_t)threshold NS_SWIFT_NAME(setThreshold(_:));
	-(void)setThreshold_: (float32_t)threshold NS_SWIFT_NAME(setThreshold(threshold:));
	-(float32_t)getThreshold NS_SWIFT_NAME(threshold());
	-(void)setStrokeColor: (TSColor)color NS_SWIFT_NAME(setStrokeColor(_:));
	-(void)setStrokeColor_: (TSColor)color NS_SWIFT_NAME(setStrokeColor(color:));
	-(TSColor)getStrokeColor NS_SWIFT_NAME(strokeColor());
	-(void)setStrokeStyle: (TSStrokeStyle)style NS_SWIFT_NAME(setStrokeStyle(_:));
	-(void)setStrokeStyle_: (TSStrokeStyle)style NS_SWIFT_NAME(setStrokeStyle(style:));
	-(TSStrokeStyle)getStrokeStyleConst NS_SWIFT_NAME(strokeStyleConst());
	-(TSStrokeStyle)getStrokeStyle NS_SWIFT_NAME(strokeStyle());
	-(void)setGradientStyle: (TSGradientStyle)style NS_SWIFT_NAME(setGradientStyle(_:));
	-(void)setGradientStyle_: (TSGradientStyle)style NS_SWIFT_NAME(setGradientStyle(style:));
	-(TSGradientStyle)getGradientStyleConst NS_SWIFT_NAME(gradientStyleConst());
	-(TSGradientStyle)getGradientStyle NS_SWIFT_NAME(gradientStyle());
	-(BOOL)createSVG: (const char* _Nonnull)src NS_SWIFT_NAME(createSVG(_:));
	-(BOOL)createSVG_: (const char* _Nonnull)src NS_SWIFT_NAME(createSVG(src:));
	-(BOOL)createSVG_1: (const char* _Nonnull)src scale: (float32_t)scale NS_SWIFT_NAME(createSVG(_:_:));
	-(BOOL)createSVG_1_: (const char* _Nonnull)src scale: (float32_t)scale NS_SWIFT_NAME(createSVG(src:scale:));
	-(void)clearPositions;
	-(void)setNumPositions: (uint32_t)num_positions NS_SWIFT_NAME(setNumPositions(_:));
	-(void)setNumPositions_: (uint32_t)num_positions NS_SWIFT_NAME(setNumPositions(num_positions:));
	-(void)reservePositions: (uint32_t)num_positions NS_SWIFT_NAME(reservePositions(_:));
	-(void)reservePositions_: (uint32_t)num_positions NS_SWIFT_NAME(reservePositions(num_positions:));
	-(uint32_t)getNumPositions NS_SWIFT_NAME(numPositions());
	-(void)setPositions: (const TSVector3f* _Nonnull)positions num_positions: (uint32_t)num_positions NS_SWIFT_NAME(setPositions(_:_:));
	-(void)setPositions_: (const TSVector3f* _Nonnull)positions num_positions: (uint32_t)num_positions NS_SWIFT_NAME(setPositions(positions:num_positions:));
	-(void)addPositions: (const TSVector3f* _Nonnull)positions num_positions: (uint32_t)num_positions NS_SWIFT_NAME(addPositions(_:_:));
	-(void)addPositions_: (const TSVector3f* _Nonnull)positions num_positions: (uint32_t)num_positions NS_SWIFT_NAME(addPositions(positions:num_positions:));
	-(const TSVector3f* _Nonnull)getPositions NS_SWIFT_NAME(positions());
	-(void)setPosition: (uint32_t)index position: (TSVector3f)position NS_SWIFT_NAME(setPosition(_:_:));
	-(void)setPosition_: (uint32_t)index position: (TSVector3f)position NS_SWIFT_NAME(setPosition(index:position:));
	-(void)setPosition_1: (uint32_t)index x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition(_:_:_:));
	-(void)setPosition_1_: (uint32_t)index x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition(index:x:y:));
	-(void)setPosition_2: (uint32_t)index x: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition(_:_:_:_:));
	-(void)setPosition_2_: (uint32_t)index x: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition(index:x:y:z:));
	-(TSVector3f)getPosition: (uint32_t)index NS_SWIFT_NAME(position(_:));
	-(TSVector3f)getPosition_: (uint32_t)index NS_SWIFT_NAME(position(index:));
	-(uint32_t)addPosition: (TSVector2f)position NS_SWIFT_NAME(addPosition(_:));
	-(uint32_t)addPosition_: (TSVector2f)position NS_SWIFT_NAME(addPosition(position:));
	-(uint32_t)addPosition_1: (TSVector3f)position NS_SWIFT_NAME(addPosition(_:));
	-(uint32_t)addPosition_1_: (TSVector3f)position NS_SWIFT_NAME(addPosition(position:));
	-(uint32_t)addPosition_2: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(addPosition(_:_:));
	-(uint32_t)addPosition_2_: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(addPosition(x:y:));
	-(uint32_t)addPosition_3: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(addPosition(_:_:_:));
	-(uint32_t)addPosition_3_: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(addPosition(x:y:z:));
	-(void)setTexCoord: (TSRect)texcoord NS_SWIFT_NAME(setTexCoord(_:));
	-(void)setTexCoord_: (TSRect)texcoord NS_SWIFT_NAME(setTexCoord(texcoord:));
	-(void)setTexCoord_1: (float32_t)left right: (float32_t)right bottom: (float32_t)bottom top: (float32_t)top NS_SWIFT_NAME(setTexCoord(_:_:_:_:));
	-(void)setTexCoord_1_: (float32_t)left right: (float32_t)right bottom: (float32_t)bottom top: (float32_t)top NS_SWIFT_NAME(setTexCoord(left:right:bottom:top:));
	-(TSRect)getTexCoord NS_SWIFT_NAME(texCoord());
@end

/// Tellusim::CanvasStrip
NS_SWIFT_NAME(CanvasStrip)
TS_CAPI @interface TSCanvasStrip : TSCanvasElement
	-(id _Nonnull)init_1 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_2: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(init(canvas:));
	-(id _Nonnull)init_3: (TSCanvas* _Nonnull)canvas width: (float32_t)width NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_3_: (TSCanvas* _Nonnull)canvas width: (float32_t)width NS_SWIFT_NAME(init(canvas:width:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::CanvasStrip* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::CanvasStrip&)p;
		-(Tellusim::CanvasStrip* _Nonnull)pointer;
		-(Tellusim::CanvasStrip&)ref;
	#endif
	-(id _Nonnull)initCanvasElement: (TSCanvasElement* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSCanvasElement* _Nonnull)getCanvasElement;
	-(BOOL)equalPtr: (const TSCanvasStrip* _Nonnull)p;
	-(TSCanvasStrip* _Nonnull)copyPtr;
	-(TSCanvasStrip* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSCanvasStrip* _Nonnull)null;
	-(void)setWidth: (float32_t)width NS_SWIFT_NAME(setWidth(_:));
	-(void)setWidth_: (float32_t)width NS_SWIFT_NAME(setWidth(width:));
	-(float32_t)getWidth NS_SWIFT_NAME(width());
	-(void)setOffset: (float32_t)offset NS_SWIFT_NAME(setOffset(_:));
	-(void)setOffset_: (float32_t)offset NS_SWIFT_NAME(setOffset(offset:));
	-(float32_t)getOffset NS_SWIFT_NAME(offset());
	-(void)setStrokeColor: (TSColor)color NS_SWIFT_NAME(setStrokeColor(_:));
	-(void)setStrokeColor_: (TSColor)color NS_SWIFT_NAME(setStrokeColor(color:));
	-(TSColor)getStrokeColor NS_SWIFT_NAME(strokeColor());
	-(void)setStrokeStyle: (TSStrokeStyle)style NS_SWIFT_NAME(setStrokeStyle(_:));
	-(void)setStrokeStyle_: (TSStrokeStyle)style NS_SWIFT_NAME(setStrokeStyle(style:));
	-(TSStrokeStyle)getStrokeStyleConst NS_SWIFT_NAME(strokeStyleConst());
	-(TSStrokeStyle)getStrokeStyle NS_SWIFT_NAME(strokeStyle());
	-(void)createQuadratic: (TSVector2f)p0 p1: (TSVector2f)p1 p2: (TSVector2f)p2 NS_SWIFT_NAME(createQuadratic(_:_:_:));
	-(void)createQuadratic_: (TSVector2f)p0 p1: (TSVector2f)p1 p2: (TSVector2f)p2 NS_SWIFT_NAME(createQuadratic(p0:p1:p2:));
	-(void)createQuadratic_1: (TSVector2f)p0 p1: (TSVector2f)p1 p2: (TSVector2f)p2 threshold: (float32_t)threshold NS_SWIFT_NAME(createQuadratic(_:_:_:_:));
	-(void)createQuadratic_1_: (TSVector2f)p0 p1: (TSVector2f)p1 p2: (TSVector2f)p2 threshold: (float32_t)threshold NS_SWIFT_NAME(createQuadratic(p0:p1:p2:threshold:));
	-(void)createQuadratic_2: (TSVector3f)p0 p1: (TSVector3f)p1 p2: (TSVector3f)p2 NS_SWIFT_NAME(createQuadratic(_:_:_:));
	-(void)createQuadratic_2_: (TSVector3f)p0 p1: (TSVector3f)p1 p2: (TSVector3f)p2 NS_SWIFT_NAME(createQuadratic(p0:p1:p2:));
	-(void)createQuadratic_3: (TSVector3f)p0 p1: (TSVector3f)p1 p2: (TSVector3f)p2 threshold: (float32_t)threshold NS_SWIFT_NAME(createQuadratic(_:_:_:_:));
	-(void)createQuadratic_3_: (TSVector3f)p0 p1: (TSVector3f)p1 p2: (TSVector3f)p2 threshold: (float32_t)threshold NS_SWIFT_NAME(createQuadratic(p0:p1:p2:threshold:));
	-(void)createCubic: (TSVector2f)p0 p1: (TSVector2f)p1 p2: (TSVector2f)p2 p3: (TSVector2f)p3 NS_SWIFT_NAME(createCubic(_:_:_:_:));
	-(void)createCubic_: (TSVector2f)p0 p1: (TSVector2f)p1 p2: (TSVector2f)p2 p3: (TSVector2f)p3 NS_SWIFT_NAME(createCubic(p0:p1:p2:p3:));
	-(void)createCubic_1: (TSVector2f)p0 p1: (TSVector2f)p1 p2: (TSVector2f)p2 p3: (TSVector2f)p3 threshold: (float32_t)threshold NS_SWIFT_NAME(createCubic(_:_:_:_:_:));
	-(void)createCubic_1_: (TSVector2f)p0 p1: (TSVector2f)p1 p2: (TSVector2f)p2 p3: (TSVector2f)p3 threshold: (float32_t)threshold NS_SWIFT_NAME(createCubic(p0:p1:p2:p3:threshold:));
	-(void)createCubic_2: (TSVector3f)p0 p1: (TSVector3f)p1 p2: (TSVector3f)p2 p3: (TSVector3f)p3 NS_SWIFT_NAME(createCubic(_:_:_:_:));
	-(void)createCubic_2_: (TSVector3f)p0 p1: (TSVector3f)p1 p2: (TSVector3f)p2 p3: (TSVector3f)p3 NS_SWIFT_NAME(createCubic(p0:p1:p2:p3:));
	-(void)createCubic_3: (TSVector3f)p0 p1: (TSVector3f)p1 p2: (TSVector3f)p2 p3: (TSVector3f)p3 threshold: (float32_t)threshold NS_SWIFT_NAME(createCubic(_:_:_:_:_:));
	-(void)createCubic_3_: (TSVector3f)p0 p1: (TSVector3f)p1 p2: (TSVector3f)p2 p3: (TSVector3f)p3 threshold: (float32_t)threshold NS_SWIFT_NAME(createCubic(p0:p1:p2:p3:threshold:));
	-(void)clearPositions;
	-(void)setNumPositions: (uint32_t)num_positions NS_SWIFT_NAME(setNumPositions(_:));
	-(void)setNumPositions_: (uint32_t)num_positions NS_SWIFT_NAME(setNumPositions(num_positions:));
	-(void)reservePositions: (uint32_t)num_positions NS_SWIFT_NAME(reservePositions(_:));
	-(void)reservePositions_: (uint32_t)num_positions NS_SWIFT_NAME(reservePositions(num_positions:));
	-(uint32_t)getNumPositions NS_SWIFT_NAME(numPositions());
	-(void)setPositions: (const TSVector3f* _Nonnull)positions num_positions: (uint32_t)num_positions NS_SWIFT_NAME(setPositions(_:_:));
	-(void)setPositions_: (const TSVector3f* _Nonnull)positions num_positions: (uint32_t)num_positions NS_SWIFT_NAME(setPositions(positions:num_positions:));
	-(void)addPositions: (const TSVector3f* _Nonnull)positions num_positions: (uint32_t)num_positions NS_SWIFT_NAME(addPositions(_:_:));
	-(void)addPositions_: (const TSVector3f* _Nonnull)positions num_positions: (uint32_t)num_positions NS_SWIFT_NAME(addPositions(positions:num_positions:));
	-(const TSVector3f* _Nonnull)getPositions NS_SWIFT_NAME(positions());
	-(void)setPosition: (uint32_t)index position: (TSVector3f)position NS_SWIFT_NAME(setPosition(_:_:));
	-(void)setPosition_: (uint32_t)index position: (TSVector3f)position NS_SWIFT_NAME(setPosition(index:position:));
	-(void)setPosition_1: (uint32_t)index x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition(_:_:_:));
	-(void)setPosition_1_: (uint32_t)index x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition(index:x:y:));
	-(void)setPosition_2: (uint32_t)index x: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition(_:_:_:_:));
	-(void)setPosition_2_: (uint32_t)index x: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition(index:x:y:z:));
	-(TSVector3f)getPosition: (uint32_t)index NS_SWIFT_NAME(position(_:));
	-(TSVector3f)getPosition_: (uint32_t)index NS_SWIFT_NAME(position(index:));
	-(uint32_t)addPosition: (TSVector2f)position NS_SWIFT_NAME(addPosition(_:));
	-(uint32_t)addPosition_: (TSVector2f)position NS_SWIFT_NAME(addPosition(position:));
	-(uint32_t)addPosition_1: (TSVector3f)position NS_SWIFT_NAME(addPosition(_:));
	-(uint32_t)addPosition_1_: (TSVector3f)position NS_SWIFT_NAME(addPosition(position:));
	-(uint32_t)addPosition_2: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(addPosition(_:_:));
	-(uint32_t)addPosition_2_: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(addPosition(x:y:));
	-(uint32_t)addPosition_3: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(addPosition(_:_:_:));
	-(uint32_t)addPosition_3_: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(addPosition(x:y:z:));
@end

/// Tellusim::Canvas::CreateCallback
NS_SWIFT_NAME(Canvas.CreateCallback)
@protocol TSCanvasCreateCallback <NSObject>
	-(BOOL)run: (const TSDevice* _Nonnull)device canvas: (TSCanvas* _Nonnull)canvas scale: (uint32_t)scale NS_SWIFT_NAME(run(_:_:_:));
@end

/// Tellusim::Canvas::PipelineCallback
NS_SWIFT_NAME(Canvas.PipelineCallback)
@protocol TSCanvasPipelineCallback <NSObject>
	-(BOOL)run: (TSPipeline* _Nonnull)pipeline canvas: (TSCanvas* _Nonnull)canvas element: (TSCanvasElement* _Nonnull)element NS_SWIFT_NAME(run(_:_:_:));
@end

/// Tellusim::Canvas::BeginCallback
NS_SWIFT_NAME(Canvas.BeginCallback)
@protocol TSCanvasBeginCallback <NSObject>
	-(BOOL)run: (TSCommand* _Nonnull)command canvas: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(run(_:_:));
@end

/// Tellusim::Canvas::DrawCallback
NS_SWIFT_NAME(Canvas.DrawCallback)
@protocol TSCanvasDrawCallback <NSObject>
	-(BOOL)run: (TSCommand* _Nonnull)command canvas: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(run(_:_:));
@end

/// Tellusim::Canvas
NS_SWIFT_NAME(Canvas)
TS_CAPI @interface TSCanvas : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	-(id _Nonnull)init_1: (TSCanvas* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (TSCanvas* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Canvas* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Canvas&)p;
		-(Tellusim::Canvas* _Nonnull)pointer;
		-(Tellusim::Canvas&)ref;
	#endif
	-(BOOL)equalPtr: (const TSCanvas* _Nonnull)p;
	-(TSCanvas* _Nonnull)copyPtr;
	-(TSCanvas* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSCanvas* _Nonnull)null;
	-(void)clear;
	-(BOOL)isCreated;
	-(uint32_t)getScale: (const TSTarget* _Nonnull)target NS_SWIFT_NAME(scale(_:));
	-(uint32_t)getScale_: (const TSTarget* _Nonnull)target NS_SWIFT_NAME(scale(target:));
	-(uint32_t)getScale_1: (const TSTarget* _Nonnull)target scale: (uint32_t)scale NS_SWIFT_NAME(scale(_:_:));
	-(uint32_t)getScale_1_: (const TSTarget* _Nonnull)target scale: (uint32_t)scale NS_SWIFT_NAME(scale(target:scale:));
	-(BOOL)create: (const TSDevice* _Nonnull)device color: (TS_Format)color depth: (TS_Format)depth NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_: (const TSDevice* _Nonnull)device color: (TS_Format)color depth: (TS_Format)depth NS_SWIFT_NAME(create(device:color:depth:));
	-(BOOL)create_1: (const TSDevice* _Nonnull)device color: (TS_Format)color depth: (TS_Format)depth multisample: (uint32_t)multisample NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_1_: (const TSDevice* _Nonnull)device color: (TS_Format)color depth: (TS_Format)depth multisample: (uint32_t)multisample NS_SWIFT_NAME(create(device:color:depth:multisample:));
	-(BOOL)create_2: (const TSDevice* _Nonnull)device color: (TS_Format)color depth: (TS_Format)depth multisample: (uint32_t)multisample scale: (uint32_t)scale NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_2_: (const TSDevice* _Nonnull)device color: (TS_Format)color depth: (TS_Format)depth multisample: (uint32_t)multisample scale: (uint32_t)scale NS_SWIFT_NAME(create(device:color:depth:multisample:scale:));
	-(BOOL)create_3: (const TSDevice* _Nonnull)device target: (const TSTarget* _Nonnull)target NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_3_: (const TSDevice* _Nonnull)device target: (const TSTarget* _Nonnull)target NS_SWIFT_NAME(create(device:target:));
	-(BOOL)create_4: (const TSDevice* _Nonnull)device target: (const TSTarget* _Nonnull)target scale: (uint32_t)scale NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_4_: (const TSDevice* _Nonnull)device target: (const TSTarget* _Nonnull)target scale: (uint32_t)scale NS_SWIFT_NAME(create(device:target:scale:));
	-(void)setPipelineHash: (uint32_t)hash NS_SWIFT_NAME(setPipelineHash(_:));
	-(void)setPipelineHash_: (uint32_t)hash NS_SWIFT_NAME(setPipelineHash(hash:));
	-(uint32_t)getPipelineHash NS_SWIFT_NAME(pipelineHash());
	-(TS_Format)getColorFormat NS_SWIFT_NAME(colorFormat());
	-(TS_Format)getDepthFormat NS_SWIFT_NAME(depthFormat());
	-(uint32_t)getMultisample NS_SWIFT_NAME(multisample());
	-(void)setOrder: (int32_t)order NS_SWIFT_NAME(setOrder(_:));
	-(void)setOrder_: (int32_t)order NS_SWIFT_NAME(setOrder(order:));
	-(int32_t)getOrder NS_SWIFT_NAME(order());
	-(void)setEnabled: (BOOL)enabled NS_SWIFT_NAME(setEnabled(_:));
	-(void)setEnabled_: (BOOL)enabled NS_SWIFT_NAME(setEnabled(enabled:));
	-(BOOL)isEnabled;
	-(void)setViewport: (TSViewport)viewport NS_SWIFT_NAME(setViewport(_:));
	-(void)setViewport_: (TSViewport)viewport NS_SWIFT_NAME(setViewport(viewport:));
	-(void)setViewport_1: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setViewport(_:_:));
	-(void)setViewport_1_: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setViewport(width:height:));
	-(void)setViewport_2: (float32_t)width height: (float32_t)height NS_SWIFT_NAME(setViewport(_:_:));
	-(void)setViewport_2_: (float32_t)width height: (float32_t)height NS_SWIFT_NAME(setViewport(width:height:));
	-(TSViewport)getViewport NS_SWIFT_NAME(viewport());
	-(float32_t)getWidth NS_SWIFT_NAME(width());
	-(float32_t)getHeight NS_SWIFT_NAME(height());
	-(void)clearColor;
	-(void)setColor: (TSColor)color NS_SWIFT_NAME(setColor(_:));
	-(void)setColor_: (TSColor)color NS_SWIFT_NAME(setColor(color:));
	-(void)setColor_1: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a NS_SWIFT_NAME(setColor(_:_:_:_:));
	-(void)setColor_1_: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a NS_SWIFT_NAME(setColor(r:g:b:a:));
	-(TSColor)getColor NS_SWIFT_NAME(color());
	-(void)clearScissor;
	-(void)setScissor: (TSRect)scissor NS_SWIFT_NAME(setScissor(_:));
	-(void)setScissor_: (TSRect)scissor NS_SWIFT_NAME(setScissor(scissor:));
	-(TSRect)getScissor NS_SWIFT_NAME(scissor());
	-(void)clearTransform;
	-(void)setTransform: (TSMatrix4x4f)transform NS_SWIFT_NAME(setTransform(_:));
	-(void)setTransform_: (TSMatrix4x4f)transform NS_SWIFT_NAME(setTransform(transform:));
	-(TSMatrix4x4f)getTransform NS_SWIFT_NAME(transform());
	-(uint32_t)setParent: (TSCanvas* _Nonnull)parent NS_SWIFT_NAME(setParent(_:));
	-(uint32_t)setParent_: (TSCanvas* _Nonnull)parent NS_SWIFT_NAME(setParent(parent:));
	-(const TSCanvas* _Nonnull)getParent NS_SWIFT_NAME(parent());
	-(uint32_t)addChild: (TSCanvas* _Nonnull)child NS_SWIFT_NAME(addChild(_:));
	-(uint32_t)addChild_: (TSCanvas* _Nonnull)child NS_SWIFT_NAME(addChild(child:));
	-(BOOL)removeChild: (TSCanvas* _Nonnull)child NS_SWIFT_NAME(removeChild(_:));
	-(BOOL)removeChild_: (TSCanvas* _Nonnull)child NS_SWIFT_NAME(removeChild(child:));
	-(BOOL)raiseChild: (TSCanvas* _Nonnull)child NS_SWIFT_NAME(raiseChild(_:));
	-(BOOL)raiseChild_: (TSCanvas* _Nonnull)child NS_SWIFT_NAME(raiseChild(child:));
	-(BOOL)lowerChild: (TSCanvas* _Nonnull)child NS_SWIFT_NAME(lowerChild(_:));
	-(BOOL)lowerChild_: (TSCanvas* _Nonnull)child NS_SWIFT_NAME(lowerChild(child:));
	-(void)releaseChildren;
	-(uint32_t)findChild: (const TSCanvas* _Nonnull)child NS_SWIFT_NAME(findChild(_:));
	-(uint32_t)findChild_: (const TSCanvas* _Nonnull)child NS_SWIFT_NAME(findChild(child:));
	-(BOOL)isChild: (const TSCanvas* _Nonnull)child NS_SWIFT_NAME(isChild(_:));
	-(BOOL)isChild_: (const TSCanvas* _Nonnull)child NS_SWIFT_NAME(isChild(child:));
	-(uint32_t)getNumChildren NS_SWIFT_NAME(numChildren());
	-(NSArray<TSCanvas*>* _Nonnull)getChildren NS_SWIFT_NAME(children());
	-(const TSCanvas* _Nonnull)getChild: (uint32_t)index NS_SWIFT_NAME(child(_:));
	-(const TSCanvas* _Nonnull)getChild_: (uint32_t)index NS_SWIFT_NAME(child(index:));
	-(uint32_t)addElement: (TSCanvasElement* _Nonnull)element NS_SWIFT_NAME(addElement(_:));
	-(uint32_t)addElement_: (TSCanvasElement* _Nonnull)element NS_SWIFT_NAME(addElement(element:));
	-(BOOL)removeElement: (TSCanvasElement* _Nonnull)element NS_SWIFT_NAME(removeElement(_:));
	-(BOOL)removeElement_: (TSCanvasElement* _Nonnull)element NS_SWIFT_NAME(removeElement(element:));
	-(BOOL)raiseElement: (TSCanvasElement* _Nonnull)element NS_SWIFT_NAME(raiseElement(_:));
	-(BOOL)raiseElement_: (TSCanvasElement* _Nonnull)element NS_SWIFT_NAME(raiseElement(element:));
	-(BOOL)lowerElement: (TSCanvasElement* _Nonnull)element NS_SWIFT_NAME(lowerElement(_:));
	-(BOOL)lowerElement_: (TSCanvasElement* _Nonnull)element NS_SWIFT_NAME(lowerElement(element:));
	-(uint32_t)findElement: (const TSCanvasElement* _Nonnull)element NS_SWIFT_NAME(findElement(_:));
	-(uint32_t)findElement_: (const TSCanvasElement* _Nonnull)element NS_SWIFT_NAME(findElement(element:));
	-(BOOL)isElement: (const TSCanvasElement* _Nonnull)element NS_SWIFT_NAME(isElement(_:));
	-(BOOL)isElement_: (const TSCanvasElement* _Nonnull)element NS_SWIFT_NAME(isElement(element:));
	-(uint32_t)getNumElements NS_SWIFT_NAME(numElements());
	-(NSArray<TSCanvasElement*>* _Nonnull)getElements NS_SWIFT_NAME(elements());
	-(const TSCanvasElement* _Nonnull)getElement: (uint32_t)index NS_SWIFT_NAME(element(_:));
	-(const TSCanvasElement* _Nonnull)getElement_: (uint32_t)index NS_SWIFT_NAME(element(index:));
	-(BOOL)isFont: (const char* _Nonnull)name NS_SWIFT_NAME(isFont(_:));
	-(BOOL)isFont_: (const char* _Nonnull)name NS_SWIFT_NAME(isFont(name:));
	-(BOOL)addFont: (const char* _Nonnull)name stream: (TSStream* _Nonnull)stream NS_SWIFT_NAME(addFont(_:_:));
	-(BOOL)addFont_: (const char* _Nonnull)name stream: (TSStream* _Nonnull)stream NS_SWIFT_NAME(addFont(name:stream:));
	-(BOOL)addFont_1: (const char* _Nonnull)name blob: (const uint8_t(* _Nonnull)[256])blob NS_SWIFT_NAME(addFont(_:_:));
	-(BOOL)addFont_1_: (const char* _Nonnull)name blob: (const uint8_t(* _Nonnull)[256])blob NS_SWIFT_NAME(addFont(name:blob:));
	-(void)removeFont: (const char* _Nonnull)name NS_SWIFT_NAME(removeFont(_:));
	-(void)removeFont_: (const char* _Nonnull)name NS_SWIFT_NAME(removeFont(name:));
	-(TSFont* _Nonnull)getFont: (const char* _Nonnull)name NS_SWIFT_NAME(font(_:));
	-(TSFont* _Nonnull)getFont_: (const char* _Nonnull)name NS_SWIFT_NAME(font(name:));
	-(BOOL)isTexture: (const char* _Nonnull)name NS_SWIFT_NAME(isTexture(_:));
	-(BOOL)isTexture_: (const char* _Nonnull)name NS_SWIFT_NAME(isTexture(name:));
	-(BOOL)addTexture: (const char* _Nonnull)name stream: (TSStream* _Nonnull)stream NS_SWIFT_NAME(addTexture(_:_:));
	-(BOOL)addTexture_: (const char* _Nonnull)name stream: (TSStream* _Nonnull)stream NS_SWIFT_NAME(addTexture(name:stream:));
	-(BOOL)addTexture_1: (const char* _Nonnull)name texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(addTexture(_:_:));
	-(BOOL)addTexture_1_: (const char* _Nonnull)name texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(addTexture(name:texture:));
	-(BOOL)addTexture_2: (const char* _Nonnull)name blob: (const uint8_t(* _Nonnull)[256])blob NS_SWIFT_NAME(addTexture(_:_:));
	-(BOOL)addTexture_2_: (const char* _Nonnull)name blob: (const uint8_t(* _Nonnull)[256])blob NS_SWIFT_NAME(addTexture(name:blob:));
	-(void)removeTexture: (const char* _Nonnull)name NS_SWIFT_NAME(removeTexture(_:));
	-(void)removeTexture_: (const char* _Nonnull)name NS_SWIFT_NAME(removeTexture(name:));
	-(TSTexture* _Nonnull)getTexture: (const char* _Nonnull)name NS_SWIFT_NAME(texture(_:));
	-(TSTexture* _Nonnull)getTexture_: (const char* _Nonnull)name NS_SWIFT_NAME(texture(name:));
	-(void)setDepthMask: (TS_PipelineDepthMask)mask NS_SWIFT_NAME(setDepthMask(_:));
	-(void)setDepthMask_: (TS_PipelineDepthMask)mask NS_SWIFT_NAME(setDepthMask(mask:));
	-(TS_PipelineDepthMask)getDepthMask NS_SWIFT_NAME(depthMask());
	-(void)setDepthFunc: (TS_PipelineDepthFunc)func NS_SWIFT_NAME(setDepthFunc(_:));
	-(void)setDepthFunc_: (TS_PipelineDepthFunc)func NS_SWIFT_NAME(setDepthFunc(func:));
	-(TS_PipelineDepthFunc)getDepthFunc NS_SWIFT_NAME(depthFunc());
	-(void)draw: (TSCommand* _Nonnull)command target: (const TSTarget* _Nonnull)target NS_SWIFT_NAME(draw(_:_:));
	-(void)draw_: (TSCommand* _Nonnull)command target: (const TSTarget* _Nonnull)target NS_SWIFT_NAME(draw(command:target:));
	-(void)draw_1: (TSCommand* _Nonnull)command NS_SWIFT_NAME(draw(_:));
	-(void)draw_1_: (TSCommand* _Nonnull)command NS_SWIFT_NAME(draw(command:));
	-(void)setCreateCallback: (id<TSCanvasCreateCallback> _Nullable)func NS_SWIFT_NAME(setCreateCallback(_:));
	-(void)setCreateCallback_: (id<TSCanvasCreateCallback> _Nullable)func NS_SWIFT_NAME(setCreateCallback(func:));
	-(void)setPipelineCallback: (id<TSCanvasPipelineCallback> _Nullable)func NS_SWIFT_NAME(setPipelineCallback(_:));
	-(void)setPipelineCallback_: (id<TSCanvasPipelineCallback> _Nullable)func NS_SWIFT_NAME(setPipelineCallback(func:));
	-(void)setBeginCallback: (id<TSCanvasBeginCallback> _Nullable)func NS_SWIFT_NAME(setBeginCallback(_:));
	-(void)setBeginCallback_: (id<TSCanvasBeginCallback> _Nullable)func NS_SWIFT_NAME(setBeginCallback(func:));
	-(void)setDrawCallback: (id<TSCanvasDrawCallback> _Nullable)func NS_SWIFT_NAME(setDrawCallback(_:));
	-(void)setDrawCallback_: (id<TSCanvasDrawCallback> _Nullable)func NS_SWIFT_NAME(setDrawCallback(func:));
	-(uint32_t)getNumDrawPipelines NS_SWIFT_NAME(numDrawPipelines());
	-(uint32_t)getNumDrawElements NS_SWIFT_NAME(numDrawElements());
	-(uint32_t)getNumDrawCommands NS_SWIFT_NAME(numDrawCommands());
	-(TSRect)getRect NS_SWIFT_NAME(rect());
@end

/// Tellusim::Control
NS_SWIFT_NAME(Control)
TS_CAPI @interface TSControl : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	-(id _Nonnull)init_1: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	-(id _Nonnull)init_2: (TSControl* _Nonnull)parent width: (float32_t)width NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (TSControl* _Nonnull)parent width: (float32_t)width NS_SWIFT_NAME(init(parent:width:));
	-(id _Nonnull)init_3: (TSControl* _Nonnull)parent width: (float32_t)width height: (float32_t)height NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_3_: (TSControl* _Nonnull)parent width: (float32_t)width height: (float32_t)height NS_SWIFT_NAME(init(parent:width:height:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Control* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Control&)p;
		-(Tellusim::Control* _Nonnull)pointer;
		-(Tellusim::Control&)ref;
	#endif
	-(BOOL)equalPtr: (const TSControl* _Nonnull)p;
	-(TSControl* _Nonnull)copyPtr;
	-(TSControl* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControl* _Nonnull)null;
	-(TS_ControlType)getType NS_SWIFT_NAME(type());
	+(NSString* _Nonnull)getTypeName: (TS_ControlType)type NS_SWIFT_NAME(typeName(_:));
	+(NSString* _Nonnull)getTypeName_: (TS_ControlType)type NS_SWIFT_NAME(typeName(type:));
	-(NSString* _Nonnull)getTypeName_1 NS_SWIFT_NAME(typeName());
	-(BOOL)isUnknown;
	-(BOOL)isRoot;
	-(BOOL)isText;
	-(BOOL)isRect;
	-(BOOL)isGrid;
	-(BOOL)isGroup;
	-(BOOL)isPanel;
	-(BOOL)isDialog;
	-(BOOL)isWindow;
	-(BOOL)isCheck;
	-(BOOL)isCombo;
	-(BOOL)isButton;
	-(BOOL)isSlider;
	-(BOOL)isScroll;
	-(BOOL)isSplit;
	-(BOOL)isArea;
	-(BOOL)isTree;
	-(BOOL)isEdit;
	-(void)setAlign: (TS_ControlAlign)align NS_SWIFT_NAME(setAlign(_:));
	-(void)setAlign_: (TS_ControlAlign)align NS_SWIFT_NAME(setAlign(align:));
	-(TS_ControlAlign)getAlign NS_SWIFT_NAME(align());
	-(BOOL)hasAlign: (TS_ControlAlign)align NS_SWIFT_NAME(hasAlign(_:));
	-(BOOL)hasAlign_: (TS_ControlAlign)align NS_SWIFT_NAME(hasAlign(align:));
	-(BOOL)hasAligns: (TS_ControlAlign)aligns NS_SWIFT_NAME(hasAligns(_:));
	-(BOOL)hasAligns_: (TS_ControlAlign)aligns NS_SWIFT_NAME(hasAligns(aligns:));
	-(BOOL)isSpacer;
	-(void)setCreated: (BOOL)created NS_SWIFT_NAME(setCreated(_:));
	-(void)setCreated_: (BOOL)created NS_SWIFT_NAME(setCreated(created:));
	-(BOOL)isCreated;
	-(void)setEnabled: (BOOL)enabled NS_SWIFT_NAME(setEnabled(_:));
	-(void)setEnabled_: (BOOL)enabled NS_SWIFT_NAME(setEnabled(enabled:));
	-(BOOL)isEnabled;
	-(BOOL)wasEnabled;
	-(BOOL)wasUpdated;
	-(void)setDisabled: (BOOL)disabled NS_SWIFT_NAME(setDisabled(_:));
	-(void)setDisabled_: (BOOL)disabled NS_SWIFT_NAME(setDisabled(disabled:));
	-(BOOL)isDisabled;
	-(TSCanvas* _Nonnull)getCanvas NS_SWIFT_NAME(canvas());
	-(const TSControlRoot* _Nonnull)getRoot NS_SWIFT_NAME(root());
	-(TSControlRoot* _Nonnull)getRoot_1 NS_SWIFT_NAME(root());
	-(const TSControlPanel* _Nonnull)getPanel NS_SWIFT_NAME(panel());
	-(TSControlPanel* _Nonnull)getPanel_1 NS_SWIFT_NAME(panel());
	-(uint32_t)setParent: (TSControl* _Nonnull)parent NS_SWIFT_NAME(setParent(_:));
	-(uint32_t)setParent_: (TSControl* _Nonnull)parent NS_SWIFT_NAME(setParent(parent:));
	-(const TSControl* _Nonnull)getParent NS_SWIFT_NAME(parent());
	-(BOOL)isParentEnabled;
	-(BOOL)isParentDisabled;
	-(uint32_t)addChild: (TSControl* _Nonnull)child NS_SWIFT_NAME(addChild(_:));
	-(uint32_t)addChild_: (TSControl* _Nonnull)child NS_SWIFT_NAME(addChild(child:));
	-(TSControl* _Nonnull)setChild: (uint32_t)index child: (TSControl* _Nonnull)child NS_SWIFT_NAME(setChild(_:_:));
	-(TSControl* _Nonnull)setChild_: (uint32_t)index child: (TSControl* _Nonnull)child NS_SWIFT_NAME(setChild(index:child:));
	-(BOOL)raiseChild: (TSControl* _Nonnull)child NS_SWIFT_NAME(raiseChild(_:));
	-(BOOL)raiseChild_: (TSControl* _Nonnull)child NS_SWIFT_NAME(raiseChild(child:));
	-(BOOL)lowerChild: (TSControl* _Nonnull)child NS_SWIFT_NAME(lowerChild(_:));
	-(BOOL)lowerChild_: (TSControl* _Nonnull)child NS_SWIFT_NAME(lowerChild(child:));
	-(BOOL)removeChild: (TSControl* _Nonnull)child NS_SWIFT_NAME(removeChild(_:));
	-(BOOL)removeChild_: (TSControl* _Nonnull)child NS_SWIFT_NAME(removeChild(child:));
	-(void)releaseChildren;
	-(uint32_t)findChild: (const TSControl* _Nonnull)child NS_SWIFT_NAME(findChild(_:));
	-(uint32_t)findChild_: (const TSControl* _Nonnull)child NS_SWIFT_NAME(findChild(child:));
	-(BOOL)isChild: (const TSControl* _Nonnull)child NS_SWIFT_NAME(isChild(_:));
	-(BOOL)isChild_: (const TSControl* _Nonnull)child NS_SWIFT_NAME(isChild(child:));
	-(BOOL)isChild_1: (const TSControl* _Nonnull)child hierarchy: (BOOL)hierarchy NS_SWIFT_NAME(isChild(_:_:));
	-(BOOL)isChild_1_: (const TSControl* _Nonnull)child hierarchy: (BOOL)hierarchy NS_SWIFT_NAME(isChild(child:hierarchy:));
	-(uint32_t)getNumChildren NS_SWIFT_NAME(numChildren());
	-(NSArray<TSControl*>* _Nonnull)getChildren NS_SWIFT_NAME(children());
	-(const TSControl* _Nonnull)getChild: (uint32_t)index NS_SWIFT_NAME(child(_:));
	-(const TSControl* _Nonnull)getChild_: (uint32_t)index NS_SWIFT_NAME(child(index:));
	-(void)setSize: (TSVector2f)size NS_SWIFT_NAME(setSize(_:));
	-(void)setSize_: (TSVector2f)size NS_SWIFT_NAME(setSize(size:));
	-(void)setSize_1: (float32_t)width height: (float32_t)height NS_SWIFT_NAME(setSize(_:_:));
	-(void)setSize_1_: (float32_t)width height: (float32_t)height NS_SWIFT_NAME(setSize(width:height:));
	-(TSVector2f)getSize NS_SWIFT_NAME(size());
	-(float32_t)getWidth NS_SWIFT_NAME(width());
	-(float32_t)getHeight NS_SWIFT_NAME(height());
	-(void)setPosition: (TSVector3f)position NS_SWIFT_NAME(setPosition(_:));
	-(void)setPosition_: (TSVector3f)position NS_SWIFT_NAME(setPosition(position:));
	-(void)setPosition_1: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition(_:_:));
	-(void)setPosition_1_: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setPosition(x:y:));
	-(void)setPosition_2: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition(_:_:_:));
	-(void)setPosition_2_: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setPosition(x:y:z:));
	-(TSVector3f)getPosition NS_SWIFT_NAME(position());
	-(float32_t)getPositionX NS_SWIFT_NAME(positionX());
	-(float32_t)getPositionY NS_SWIFT_NAME(positionY());
	-(void)setOffset: (TSVector3f)offset NS_SWIFT_NAME(setOffset(_:));
	-(void)setOffset_: (TSVector3f)offset NS_SWIFT_NAME(setOffset(offset:));
	-(void)setOffset_1: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setOffset(_:_:));
	-(void)setOffset_1_: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setOffset(x:y:));
	-(void)setOffset_2: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setOffset(_:_:_:));
	-(void)setOffset_2_: (float32_t)x y: (float32_t)y z: (float32_t)z NS_SWIFT_NAME(setOffset(x:y:z:));
	-(TSVector3f)getOffset NS_SWIFT_NAME(offset());
	-(float32_t)getOffsetX NS_SWIFT_NAME(offsetX());
	-(float32_t)getOffsetY NS_SWIFT_NAME(offsetY());
	-(void)setMargin: (float32_t)value NS_SWIFT_NAME(setMargin(_:));
	-(void)setMargin_: (float32_t)value NS_SWIFT_NAME(setMargin(value:));
	-(void)setMargin_1: (float32_t)horizontal vertical: (float32_t)vertical NS_SWIFT_NAME(setMargin(_:_:));
	-(void)setMargin_1_: (float32_t)horizontal vertical: (float32_t)vertical NS_SWIFT_NAME(setMargin(horizontal:vertical:));
	-(void)setMargin_2: (float32_t)left right: (float32_t)right bottom: (float32_t)bottom top: (float32_t)top NS_SWIFT_NAME(setMargin(_:_:_:_:));
	-(void)setMargin_2_: (float32_t)left right: (float32_t)right bottom: (float32_t)bottom top: (float32_t)top NS_SWIFT_NAME(setMargin(left:right:bottom:top:));
	-(void)setMargin_3: (TSRect)margin NS_SWIFT_NAME(setMargin(_:));
	-(void)setMargin_3_: (TSRect)margin NS_SWIFT_NAME(setMargin(margin:));
	-(TSRect)getMargin NS_SWIFT_NAME(margin());
	-(TSRect)getRect NS_SWIFT_NAME(rect());
	-(TS_ControlState)getState NS_SWIFT_NAME(state());
@end

/// Tellusim::ControlRoot::CopyCallback
NS_SWIFT_NAME(ControlRoot.CopyCallback)
@protocol TSControlRootCopyCallback <NSObject>
	-(void)run: (TSControlRoot* _Nonnull)a0 text: (NSString* _Nonnull)text NS_SWIFT_NAME(run(_:_:));
@end

/// Tellusim::ControlRoot::PasteCallback
NS_SWIFT_NAME(ControlRoot.PasteCallback)
@protocol TSControlRootPasteCallback <NSObject>
	-(NSString* _Nonnull)run: (TSControlRoot* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlRoot
NS_SWIFT_NAME(ControlRoot)
TS_CAPI @interface TSControlRoot : TSControl
	-(id _Nonnull)init_4 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_5: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_5_: (TSCanvas* _Nonnull)canvas NS_SWIFT_NAME(init(canvas:));
	-(id _Nonnull)init_6: (TSCanvas* _Nonnull)canvas blob: (BOOL)blob NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_6_: (TSCanvas* _Nonnull)canvas blob: (BOOL)blob NS_SWIFT_NAME(init(canvas:blob:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ControlRoot* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ControlRoot&)p;
		-(Tellusim::ControlRoot* _Nonnull)pointer;
		-(Tellusim::ControlRoot&)ref;
	#endif
	-(id _Nonnull)initControl: (TSControl* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControl* _Nonnull)getControl;
	-(BOOL)equalPtr: (const TSControlRoot* _Nonnull)p;
	-(TSControlRoot* _Nonnull)copyPtr;
	-(TSControlRoot* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControlRoot* _Nonnull)null;
	-(void)setViewport: (TSViewport)viewport NS_SWIFT_NAME(setViewport(_:));
	-(void)setViewport_: (TSViewport)viewport NS_SWIFT_NAME(setViewport(viewport:));
	-(void)setViewport_1: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setViewport(_:_:));
	-(void)setViewport_1_: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setViewport(width:height:));
	-(void)setViewport_2: (float32_t)width height: (float32_t)height NS_SWIFT_NAME(setViewport(_:_:));
	-(void)setViewport_2_: (float32_t)width height: (float32_t)height NS_SWIFT_NAME(setViewport(width:height:));
	-(TSViewport)getViewport NS_SWIFT_NAME(viewport());
	-(NSString* _Nonnull)getFontName NS_SWIFT_NAME(fontName());
	-(void)setFontName: (const char* _Nonnull)name NS_SWIFT_NAME(setFontName(_:));
	-(void)setFontName_: (const char* _Nonnull)name NS_SWIFT_NAME(setFontName(name:));
	-(void)setFontName_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(setFontName(_:));
	-(void)setFontName_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(setFontName(name:));
	-(BOOL)setFontBlob: (const uint8_t(* _Nonnull)[256])blob NS_SWIFT_NAME(setFontBlob(_:));
	-(BOOL)setFontBlob_: (const uint8_t(* _Nonnull)[256])blob NS_SWIFT_NAME(setFontBlob(blob:));
	-(BOOL)setFontBlob_1: (const uint8_t(* _Nonnull)[256])blob name: (const char* _Nullable)name NS_SWIFT_NAME(setFontBlob(_:_:));
	-(BOOL)setFontBlob_1_: (const uint8_t(* _Nonnull)[256])blob name: (const char* _Nullable)name NS_SWIFT_NAME(setFontBlob(blob:name:));
	-(BOOL)setFontSize: (uint32_t)size NS_SWIFT_NAME(setFontSize(_:));
	-(BOOL)setFontSize_: (uint32_t)size NS_SWIFT_NAME(setFontSize(size:));
	-(BOOL)setFontSize_1: (uint32_t)size update: (BOOL)update NS_SWIFT_NAME(setFontSize(_:_:));
	-(BOOL)setFontSize_1_: (uint32_t)size update: (BOOL)update NS_SWIFT_NAME(setFontSize(size:update:));
	-(uint32_t)getFontSize NS_SWIFT_NAME(fontSize());
	-(BOOL)setFontScale: (uint32_t)scale NS_SWIFT_NAME(setFontScale(_:));
	-(BOOL)setFontScale_: (uint32_t)scale NS_SWIFT_NAME(setFontScale(scale:));
	-(BOOL)setFontScale_1: (uint32_t)scale update: (BOOL)update NS_SWIFT_NAME(setFontScale(_:_:));
	-(BOOL)setFontScale_1_: (uint32_t)scale update: (BOOL)update NS_SWIFT_NAME(setFontScale(scale:update:));
	-(uint32_t)getFontScale NS_SWIFT_NAME(fontScale());
	-(BOOL)setFontStyle: (TSFontStyle)style NS_SWIFT_NAME(setFontStyle(_:));
	-(BOOL)setFontStyle_: (TSFontStyle)style NS_SWIFT_NAME(setFontStyle(style:));
	-(BOOL)setFontStyle_1: (TSFontStyle)style update: (BOOL)update NS_SWIFT_NAME(setFontStyle(_:_:));
	-(BOOL)setFontStyle_1_: (TSFontStyle)style update: (BOOL)update NS_SWIFT_NAME(setFontStyle(style:update:));
	-(TSFontStyle)getFontStyle NS_SWIFT_NAME(fontStyle());
	-(NSString* _Nonnull)getTextureName NS_SWIFT_NAME(textureName());
	-(BOOL)setTextureName: (const char* _Nonnull)name NS_SWIFT_NAME(setTextureName(_:));
	-(BOOL)setTextureName_: (const char* _Nonnull)name NS_SWIFT_NAME(setTextureName(name:));
	-(BOOL)setTextureName_1: (const char* _Nonnull)name width: (uint32_t)width NS_SWIFT_NAME(setTextureName(_:_:));
	-(BOOL)setTextureName_1_: (const char* _Nonnull)name width: (uint32_t)width NS_SWIFT_NAME(setTextureName(name:width:));
	-(BOOL)setTextureName_2: (const char* _Nonnull)name width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setTextureName(_:_:_:));
	-(BOOL)setTextureName_2_: (const char* _Nonnull)name width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setTextureName(name:width:height:));
	-(BOOL)setTextureName_3: (const char* _Nonnull)name width: (uint32_t)width height: (uint32_t)height border: (float32_t)border NS_SWIFT_NAME(setTextureName(_:_:_:_:));
	-(BOOL)setTextureName_3_: (const char* _Nonnull)name width: (uint32_t)width height: (uint32_t)height border: (float32_t)border NS_SWIFT_NAME(setTextureName(name:width:height:border:));
	-(BOOL)setTextureName_4: (const TSString* _Nonnull)name NS_SWIFT_NAME(setTextureName(_:));
	-(BOOL)setTextureName_4_: (const TSString* _Nonnull)name NS_SWIFT_NAME(setTextureName(name:));
	-(BOOL)setTextureName_5: (const TSString* _Nonnull)name width: (uint32_t)width NS_SWIFT_NAME(setTextureName(_:_:));
	-(BOOL)setTextureName_5_: (const TSString* _Nonnull)name width: (uint32_t)width NS_SWIFT_NAME(setTextureName(name:width:));
	-(BOOL)setTextureName_6: (const TSString* _Nonnull)name width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setTextureName(_:_:_:));
	-(BOOL)setTextureName_6_: (const TSString* _Nonnull)name width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setTextureName(name:width:height:));
	-(BOOL)setTextureName_7: (const TSString* _Nonnull)name width: (uint32_t)width height: (uint32_t)height border: (float32_t)border NS_SWIFT_NAME(setTextureName(_:_:_:_:));
	-(BOOL)setTextureName_7_: (const TSString* _Nonnull)name width: (uint32_t)width height: (uint32_t)height border: (float32_t)border NS_SWIFT_NAME(setTextureName(name:width:height:border:));
	-(BOOL)setTextureBlob: (const uint8_t(* _Nonnull)[256])blob NS_SWIFT_NAME(setTextureBlob(_:));
	-(BOOL)setTextureBlob_: (const uint8_t(* _Nonnull)[256])blob NS_SWIFT_NAME(setTextureBlob(blob:));
	-(BOOL)setTextureBlob_1: (const uint8_t(* _Nonnull)[256])blob name: (const char* _Nullable)name NS_SWIFT_NAME(setTextureBlob(_:_:));
	-(BOOL)setTextureBlob_1_: (const uint8_t(* _Nonnull)[256])blob name: (const char* _Nullable)name NS_SWIFT_NAME(setTextureBlob(blob:name:));
	-(BOOL)setTextureBlob_2: (const uint8_t(* _Nonnull)[256])blob name: (const char* _Nullable)name width: (uint32_t)width NS_SWIFT_NAME(setTextureBlob(_:_:_:));
	-(BOOL)setTextureBlob_2_: (const uint8_t(* _Nonnull)[256])blob name: (const char* _Nullable)name width: (uint32_t)width NS_SWIFT_NAME(setTextureBlob(blob:name:width:));
	-(BOOL)setTextureBlob_3: (const uint8_t(* _Nonnull)[256])blob name: (const char* _Nullable)name width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setTextureBlob(_:_:_:_:));
	-(BOOL)setTextureBlob_3_: (const uint8_t(* _Nonnull)[256])blob name: (const char* _Nullable)name width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setTextureBlob(blob:name:width:height:));
	-(BOOL)setTextureBlob_4: (const uint8_t(* _Nonnull)[256])blob name: (const char* _Nullable)name width: (uint32_t)width height: (uint32_t)height border: (float32_t)border NS_SWIFT_NAME(setTextureBlob(_:_:_:_:_:));
	-(BOOL)setTextureBlob_4_: (const uint8_t(* _Nonnull)[256])blob name: (const char* _Nullable)name width: (uint32_t)width height: (uint32_t)height border: (float32_t)border NS_SWIFT_NAME(setTextureBlob(blob:name:width:height:border:));
	-(float32_t)getTextureWidth NS_SWIFT_NAME(textureWidth());
	-(float32_t)getTextureHeight NS_SWIFT_NAME(textureHeight());
	-(void)setTextColor: (TS_ControlType)type state: (TS_ControlState)state color: (TSColor)color NS_SWIFT_NAME(setTextColor(_:_:_:));
	-(void)setTextColor_: (TS_ControlType)type state: (TS_ControlState)state color: (TSColor)color NS_SWIFT_NAME(setTextColor(type:state:color:));
	-(void)setTextOffset: (TS_ControlType)type state: (TS_ControlState)state offset: (TSVector3f)offset NS_SWIFT_NAME(setTextOffset(_:_:_:));
	-(void)setTextOffset_: (TS_ControlType)type state: (TS_ControlState)state offset: (TSVector3f)offset NS_SWIFT_NAME(setTextOffset(type:state:offset:));
	-(TSColor)getTextColor: (TS_ControlType)type state: (TS_ControlState)state NS_SWIFT_NAME(textColor(_:_:));
	-(TSColor)getTextColor_: (TS_ControlType)type state: (TS_ControlState)state NS_SWIFT_NAME(textColor(type:state:));
	-(TSVector3f)getTextOffset: (TS_ControlType)type state: (TS_ControlState)state NS_SWIFT_NAME(textOffset(_:_:));
	-(TSVector3f)getTextOffset_: (TS_ControlType)type state: (TS_ControlState)state NS_SWIFT_NAME(textOffset(type:state:));
	-(void)setMeshColor: (TS_ControlMesh)mesh state: (TS_ControlState)state color: (TSColor)color NS_SWIFT_NAME(setMeshColor(_:_:_:));
	-(void)setMeshColor_: (TS_ControlMesh)mesh state: (TS_ControlState)state color: (TSColor)color NS_SWIFT_NAME(setMeshColor(mesh:state:color:));
	-(void)setMeshRegion: (TS_ControlMesh)mesh grid: (TSRect)grid region: (TSRect)region border: (TSVector2f)border NS_SWIFT_NAME(setMeshRegion(_:_:_:_:));
	-(void)setMeshRegion_: (TS_ControlMesh)mesh grid: (TSRect)grid region: (TSRect)region border: (TSVector2f)border NS_SWIFT_NAME(setMeshRegion(mesh:grid:region:border:));
	-(void)setMeshRegions: (TS_ControlMesh)mesh grid: (TSRect)grid regions: (TSRect)regions border: (TSVector2f)border NS_SWIFT_NAME(setMeshRegions(_:_:_:_:));
	-(void)setMeshRegions_: (TS_ControlMesh)mesh grid: (TSRect)grid regions: (TSRect)regions border: (TSVector2f)border NS_SWIFT_NAME(setMeshRegions(mesh:grid:regions:border:));
	-(uint32_t)getMeshColor: (TS_ControlMesh)mesh state: (TS_ControlState)state NS_SWIFT_NAME(meshColor(_:_:));
	-(uint32_t)getMeshColor_: (TS_ControlMesh)mesh state: (TS_ControlState)state NS_SWIFT_NAME(meshColor(mesh:state:));
	-(TSRect)getMeshGrid: (TS_ControlMesh)mesh NS_SWIFT_NAME(meshGrid(_:));
	-(TSRect)getMeshGrid_: (TS_ControlMesh)mesh NS_SWIFT_NAME(meshGrid(mesh:));
	-(TSRect)getMeshMargin: (TS_ControlMesh)mesh NS_SWIFT_NAME(meshMargin(_:));
	-(TSRect)getMeshMargin_: (TS_ControlMesh)mesh NS_SWIFT_NAME(meshMargin(mesh:));
	-(TSRect)getMeshRegion: (TS_ControlMesh)mesh state: (TS_ControlState)state NS_SWIFT_NAME(meshRegion(_:_:));
	-(TSRect)getMeshRegion_: (TS_ControlMesh)mesh state: (TS_ControlState)state NS_SWIFT_NAME(meshRegion(mesh:state:));
	-(void)setGroupRadius: (float32_t)radius NS_SWIFT_NAME(setGroupRadius(_:));
	-(void)setGroupRadius_: (float32_t)radius NS_SWIFT_NAME(setGroupRadius(radius:));
	-(void)setGroupColor: (TSColor)color NS_SWIFT_NAME(setGroupColor(_:));
	-(void)setGroupColor_: (TSColor)color NS_SWIFT_NAME(setGroupColor(color:));
	-(float32_t)getGroupRadius NS_SWIFT_NAME(groupRadius());
	-(TSColor)getGroupColor NS_SWIFT_NAME(groupColor());
	-(void)setPanelRadius: (float32_t)radius NS_SWIFT_NAME(setPanelRadius(_:));
	-(void)setPanelRadius_: (float32_t)radius NS_SWIFT_NAME(setPanelRadius(radius:));
	-(void)setPanelColor: (TSColor)color NS_SWIFT_NAME(setPanelColor(_:));
	-(void)setPanelColor_: (TSColor)color NS_SWIFT_NAME(setPanelColor(color:));
	-(float32_t)getPanelRadius NS_SWIFT_NAME(panelRadius());
	-(TSColor)getPanelColor NS_SWIFT_NAME(panelColor());
	-(void)setCheckedColor: (TSColor)color NS_SWIFT_NAME(setCheckedColor(_:));
	-(void)setCheckedColor_: (TSColor)color NS_SWIFT_NAME(setCheckedColor(color:));
	-(TSColor)getCheckedColor NS_SWIFT_NAME(checkedColor());
	-(void)setSplitSize: (float32_t)size NS_SWIFT_NAME(setSplitSize(_:));
	-(void)setSplitSize_: (float32_t)size NS_SWIFT_NAME(setSplitSize(size:));
	-(float32_t)getSplitSize NS_SWIFT_NAME(splitSize());
	-(void)setMouse: (int32_t)x y: (int32_t)y buttons: (TS_ControlButton)buttons NS_SWIFT_NAME(setMouse(_:_:_:));
	-(void)setMouse_: (int32_t)x y: (int32_t)y buttons: (TS_ControlButton)buttons NS_SWIFT_NAME(setMouse(x:y:buttons:));
	-(void)setMouse_1: (float32_t)x y: (float32_t)y buttons: (TS_ControlButton)buttons NS_SWIFT_NAME(setMouse(_:_:_:));
	-(void)setMouse_1_: (float32_t)x y: (float32_t)y buttons: (TS_ControlButton)buttons NS_SWIFT_NAME(setMouse(x:y:buttons:));
	-(TSVector2f)getMouse NS_SWIFT_NAME(mouse());
	-(TS_ControlButton)getMouseButtons NS_SWIFT_NAME(mouseButtons());
	-(float32_t)getMouseX NS_SWIFT_NAME(mouseX());
	-(float32_t)getMouseY NS_SWIFT_NAME(mouseY());
	-(void)setMouseOffset: (TSVector2f)offset NS_SWIFT_NAME(setMouseOffset(_:));
	-(void)setMouseOffset_: (TSVector2f)offset NS_SWIFT_NAME(setMouseOffset(offset:));
	-(TSVector2f)getMouseOffset NS_SWIFT_NAME(mouseOffset());
	-(void)setMouseAxis: (TS_ControlAxis)axis delta: (float32_t)delta NS_SWIFT_NAME(setMouseAxis(_:_:));
	-(void)setMouseAxis_: (TS_ControlAxis)axis delta: (float32_t)delta NS_SWIFT_NAME(setMouseAxis(axis:delta:));
	-(void)setMouseAlign: (TS_ControlAlign)align NS_SWIFT_NAME(setMouseAlign(_:));
	-(void)setMouseAlign_: (TS_ControlAlign)align NS_SWIFT_NAME(setMouseAlign(align:));
	-(void)setMouseAlign_1: (TS_ControlAlign)align clear: (BOOL)clear NS_SWIFT_NAME(setMouseAlign(_:_:));
	-(void)setMouseAlign_1_: (TS_ControlAlign)align clear: (BOOL)clear NS_SWIFT_NAME(setMouseAlign(align:clear:));
	-(TS_ControlAlign)getMouseAlign NS_SWIFT_NAME(mouseAlign());
	-(BOOL)hasMouseAlign: (TS_ControlAlign)align NS_SWIFT_NAME(hasMouseAlign(_:));
	-(BOOL)hasMouseAlign_: (TS_ControlAlign)align NS_SWIFT_NAME(hasMouseAlign(align:));
	-(BOOL)hasMouseAligns: (TS_ControlAlign)aligns NS_SWIFT_NAME(hasMouseAligns(_:));
	-(BOOL)hasMouseAligns_: (TS_ControlAlign)aligns NS_SWIFT_NAME(hasMouseAligns(aligns:));
	-(BOOL)setKeyboardKey: (uint32_t)key code: (uint32_t)code value: (BOOL)value NS_SWIFT_NAME(setKeyboardKey(_:_:_:));
	-(BOOL)setKeyboardKey_: (uint32_t)key code: (uint32_t)code value: (BOOL)value NS_SWIFT_NAME(setKeyboardKey(key:code:value:));
	-(BOOL)getKeyboardKey: (uint32_t)key NS_SWIFT_NAME(keyboardKey(_:));
	-(BOOL)getKeyboardKey_: (uint32_t)key NS_SWIFT_NAME(keyboardKey(key:));
	-(BOOL)getKeyboardKey_1: (uint32_t)key clear: (BOOL)clear NS_SWIFT_NAME(keyboardKey(_:_:));
	-(BOOL)getKeyboardKey_1_: (uint32_t)key clear: (BOOL)clear NS_SWIFT_NAME(keyboardKey(key:clear:));
	-(void)clearCurrentControl;
	-(void)setCurrentControl: (TSControl* _Nonnull)control NS_SWIFT_NAME(setCurrentControl(_:));
	-(void)setCurrentControl_: (TSControl* _Nonnull)control NS_SWIFT_NAME(setCurrentControl(control:));
	-(void)setCurrentControl_1: (TSControl* _Nonnull)control grab: (BOOL)grab NS_SWIFT_NAME(setCurrentControl(_:_:));
	-(void)setCurrentControl_1_: (TSControl* _Nonnull)control grab: (BOOL)grab NS_SWIFT_NAME(setCurrentControl(control:grab:));
	-(TSControl* _Nonnull)getCurrentControl NS_SWIFT_NAME(currentControl());
	-(BOOL)isCurrentControl;
	-(BOOL)getControlGrab NS_SWIFT_NAME(controlGrab());
	-(void)clearFocusedControl;
	-(void)setFocusedControl: (TSControl* _Nonnull)control NS_SWIFT_NAME(setFocusedControl(_:));
	-(void)setFocusedControl_: (TSControl* _Nonnull)control NS_SWIFT_NAME(setFocusedControl(control:));
	-(TSControl* _Nonnull)getFocusedControl NS_SWIFT_NAME(focusedControl());
	-(BOOL)isFocusedControl;
	-(void)clearMouseControl;
	-(void)setMouseControl: (TSControl* _Nonnull)control NS_SWIFT_NAME(setMouseControl(_:));
	-(void)setMouseControl_: (TSControl* _Nonnull)control NS_SWIFT_NAME(setMouseControl(control:));
	-(TSControl* _Nonnull)getMouseControl NS_SWIFT_NAME(mouseControl());
	-(BOOL)isMouseControl;
	-(void)clearInputControl;
	-(void)setInputControl: (TSControl* _Nonnull)control NS_SWIFT_NAME(setInputControl(_:));
	-(void)setInputControl_: (TSControl* _Nonnull)control NS_SWIFT_NAME(setInputControl(control:));
	-(TSControl* _Nonnull)getInputControl NS_SWIFT_NAME(inputControl());
	-(BOOL)isInputControl;
	-(void)clearModalControl;
	-(void)setModalControl: (TSControl* _Nonnull)control NS_SWIFT_NAME(setModalControl(_:));
	-(void)setModalControl_: (TSControl* _Nonnull)control NS_SWIFT_NAME(setModalControl(control:));
	-(void)setModalControl_1: (TSControl* _Nonnull)control disabled: (BOOL)disabled NS_SWIFT_NAME(setModalControl(_:_:));
	-(void)setModalControl_1_: (TSControl* _Nonnull)control disabled: (BOOL)disabled NS_SWIFT_NAME(setModalControl(control:disabled:));
	-(TSControl* _Nonnull)getModalControl NS_SWIFT_NAME(modalControl());
	-(BOOL)isModalDisabled;
	-(BOOL)isModalControl;
	-(void)setOverlayOrder: (int32_t)order NS_SWIFT_NAME(setOverlayOrder(_:));
	-(void)setOverlayOrder_: (int32_t)order NS_SWIFT_NAME(setOverlayOrder(order:));
	-(int32_t)getOverlayOrder NS_SWIFT_NAME(overlayOrder());
	-(BOOL)update NS_SWIFT_NAME(update());
	-(BOOL)update_1: (uint32_t)scale NS_SWIFT_NAME(update(_:));
	-(BOOL)update_1_: (uint32_t)scale NS_SWIFT_NAME(update(scale:));
	-(BOOL)update_2: (uint32_t)scale order: (int32_t)order NS_SWIFT_NAME(update(_:_:));
	-(BOOL)update_2_: (uint32_t)scale order: (int32_t)order NS_SWIFT_NAME(update(scale:order:));
	-(void)setCopyText: (const char* _Nonnull)text NS_SWIFT_NAME(setCopyText(_:));
	-(void)setCopyText_: (const char* _Nonnull)text NS_SWIFT_NAME(setCopyText(text:));
	-(void)setCopyText_1: (const TSString* _Nonnull)text NS_SWIFT_NAME(setCopyText(_:));
	-(void)setCopyText_1_: (const TSString* _Nonnull)text NS_SWIFT_NAME(setCopyText(text:));
	-(NSString* _Nonnull)getPasteText NS_SWIFT_NAME(pasteText());
	-(void)setCopyCallback: (id<TSControlRootCopyCallback> _Nullable)func NS_SWIFT_NAME(setCopyCallback(_:));
	-(void)setCopyCallback_: (id<TSControlRootCopyCallback> _Nullable)func NS_SWIFT_NAME(setCopyCallback(func:));
	-(void)setPasteCallback: (id<TSControlRootPasteCallback> _Nullable)func NS_SWIFT_NAME(setPasteCallback(_:));
	-(void)setPasteCallback_: (id<TSControlRootPasteCallback> _Nullable)func NS_SWIFT_NAME(setPasteCallback(func:));
@end

/// Tellusim::ControlText
NS_SWIFT_NAME(ControlText)
TS_CAPI @interface TSControlText : TSControl
	-(id _Nonnull)init_4 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_5: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_5_: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	-(id _Nonnull)init_6: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_6_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text NS_SWIFT_NAME(init(parent:text:));
	-(id _Nonnull)init_7: (TSControl* _Nonnull)parent text: (const TSString* _Nonnull)text NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_7_: (TSControl* _Nonnull)parent text: (const TSString* _Nonnull)text NS_SWIFT_NAME(init(parent:text:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ControlText* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ControlText&)p;
		-(Tellusim::ControlText* _Nonnull)pointer;
		-(Tellusim::ControlText&)ref;
	#endif
	-(id _Nonnull)initControl: (TSControl* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControl* _Nonnull)getControl;
	-(BOOL)equalPtr: (const TSControlText* _Nonnull)p;
	-(TSControlText* _Nonnull)copyPtr;
	-(TSControlText* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControlText* _Nonnull)null;
	-(void)setMode: (TS_CanvasElementMode)mode NS_SWIFT_NAME(setMode(_:));
	-(void)setMode_: (TS_CanvasElementMode)mode NS_SWIFT_NAME(setMode(mode:));
	-(TS_CanvasElementMode)getMode NS_SWIFT_NAME(mode());
	-(void)setPipeline: (TSPipeline* _Nonnull)pipeline NS_SWIFT_NAME(setPipeline(_:));
	-(void)setPipeline_: (TSPipeline* _Nonnull)pipeline NS_SWIFT_NAME(setPipeline(pipeline:));
	-(void)setPipeline_1: (TSPipeline* _Nonnull)pipeline func: (id<TSCanvasElementDrawCallback> _Nullable)func NS_SWIFT_NAME(setPipeline(_:_:));
	-(void)setPipeline_1_: (TSPipeline* _Nonnull)pipeline func: (id<TSCanvasElementDrawCallback> _Nullable)func NS_SWIFT_NAME(setPipeline(pipeline:func:));
	-(TSPipeline* _Nonnull)getPipeline NS_SWIFT_NAME(pipeline());
	-(void)setColor: (TSColor)color NS_SWIFT_NAME(setColor(_:));
	-(void)setColor_: (TSColor)color NS_SWIFT_NAME(setColor(color:));
	-(void)setColor_1: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a NS_SWIFT_NAME(setColor(_:_:_:_:));
	-(void)setColor_1_: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a NS_SWIFT_NAME(setColor(r:g:b:a:));
	-(TSColor)getColor NS_SWIFT_NAME(color());
	-(void)setFilter: (TS_SamplerFilter)filter NS_SWIFT_NAME(setFilter(_:));
	-(void)setFilter_: (TS_SamplerFilter)filter NS_SWIFT_NAME(setFilter(filter:));
	-(TS_SamplerFilter)getFilter NS_SWIFT_NAME(filter());
	-(void)setAnisotropy: (uint32_t)anisotropy NS_SWIFT_NAME(setAnisotropy(_:));
	-(void)setAnisotropy_: (uint32_t)anisotropy NS_SWIFT_NAME(setAnisotropy(anisotropy:));
	-(uint32_t)getAnisotropy NS_SWIFT_NAME(anisotropy());
	-(void)setBlend: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlend(_:_:_:));
	-(void)setBlend_: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlend(op:src:dest:));
	-(TS_PipelineBlendOp)getBlendOp NS_SWIFT_NAME(blendOp());
	-(TS_PipelineBlendFunc)getBlendSrcFunc NS_SWIFT_NAME(blendSrcFunc());
	-(TS_PipelineBlendFunc)getBlendDestFunc NS_SWIFT_NAME(blendDestFunc());
	-(void)setFontName: (const char* _Nonnull)name NS_SWIFT_NAME(setFontName(_:));
	-(void)setFontName_: (const char* _Nonnull)name NS_SWIFT_NAME(setFontName(name:));
	-(void)setFontName_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(setFontName(_:));
	-(void)setFontName_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(setFontName(name:));
	-(NSString* _Nonnull)getFontName NS_SWIFT_NAME(fontName());
	-(void)setFontColor: (TSColor)color NS_SWIFT_NAME(setFontColor(_:));
	-(void)setFontColor_: (TSColor)color NS_SWIFT_NAME(setFontColor(color:));
	-(TSColor)getFontColor NS_SWIFT_NAME(fontColor());
	-(BOOL)setFontSize: (uint32_t)size NS_SWIFT_NAME(setFontSize(_:));
	-(BOOL)setFontSize_: (uint32_t)size NS_SWIFT_NAME(setFontSize(size:));
	-(uint32_t)getFontSize NS_SWIFT_NAME(fontSize());
	-(BOOL)setFontStyle: (TSFontStyle)style NS_SWIFT_NAME(setFontStyle(_:));
	-(BOOL)setFontStyle_: (TSFontStyle)style NS_SWIFT_NAME(setFontStyle(style:));
	-(TSFontStyle)getFontStyleConst NS_SWIFT_NAME(fontStyleConst());
	-(TSFontStyle)getFontStyle NS_SWIFT_NAME(fontStyle());
	-(void)setFontAlign: (TS_ControlAlign)align NS_SWIFT_NAME(setFontAlign(_:));
	-(void)setFontAlign_: (TS_ControlAlign)align NS_SWIFT_NAME(setFontAlign(align:));
	-(TS_ControlAlign)getFontAlign NS_SWIFT_NAME(fontAlign());
	-(BOOL)hasFontAlign: (TS_ControlAlign)align NS_SWIFT_NAME(hasFontAlign(_:));
	-(BOOL)hasFontAlign_: (TS_ControlAlign)align NS_SWIFT_NAME(hasFontAlign(align:));
	-(BOOL)hasFontAligns: (TS_ControlAlign)aligns NS_SWIFT_NAME(hasFontAligns(_:));
	-(BOOL)hasFontAligns_: (TS_ControlAlign)aligns NS_SWIFT_NAME(hasFontAligns(aligns:));
	-(void)setText: (const char* _Nonnull)text NS_SWIFT_NAME(setText(_:));
	-(void)setText_: (const char* _Nonnull)text NS_SWIFT_NAME(setText(text:));
	-(void)setText_1: (const TSString* _Nonnull)text NS_SWIFT_NAME(setText(_:));
	-(void)setText_1_: (const TSString* _Nonnull)text NS_SWIFT_NAME(setText(text:));
	-(NSString* _Nonnull)getText NS_SWIFT_NAME(text());
	-(TSCanvasText* _Nonnull)getCanvasText NS_SWIFT_NAME(canvasText());
@end

/// Tellusim::ControlRect::InsideCallback
NS_SWIFT_NAME(ControlRect.InsideCallback)
@protocol TSControlRectInsideCallback <NSObject>
	-(BOOL)run: (TSControlRect* _Nonnull)a0 x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(run(_:_:_:));
@end

/// Tellusim::ControlRect::PressedCallback
NS_SWIFT_NAME(ControlRect.PressedCallback)
@protocol TSControlRectPressedCallback <NSObject>
	-(void)run: (TSControlRect* _Nonnull)a0 x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(run(_:_:_:));
@end

/// Tellusim::ControlRect::ReleasedCallback
NS_SWIFT_NAME(ControlRect.ReleasedCallback)
@protocol TSControlRectReleasedCallback <NSObject>
	-(void)run: (TSControlRect* _Nonnull)a0 x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(run(_:_:_:));
@end

/// Tellusim::ControlRect::ClickedCallback
NS_SWIFT_NAME(ControlRect.ClickedCallback)
@protocol TSControlRectClickedCallback <NSObject>
	-(void)run: (TSControlRect* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlRect
NS_SWIFT_NAME(ControlRect)
TS_CAPI @interface TSControlRect : TSControl
	-(id _Nonnull)init_4 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_5: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_5_: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	-(id _Nonnull)init_6: (TSControl* _Nonnull)parent texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_6_: (TSControl* _Nonnull)parent texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(init(parent:texture:));
	-(id _Nonnull)init_7: (TSControl* _Nonnull)parent name: (const char* _Nonnull)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_7_: (TSControl* _Nonnull)parent name: (const char* _Nonnull)name NS_SWIFT_NAME(init(parent:name:));
	-(id _Nonnull)init_8: (TSControl* _Nonnull)parent mode: (TS_CanvasElementMode)mode NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_8_: (TSControl* _Nonnull)parent mode: (TS_CanvasElementMode)mode NS_SWIFT_NAME(init(parent:mode:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ControlRect* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ControlRect&)p;
		-(Tellusim::ControlRect* _Nonnull)pointer;
		-(Tellusim::ControlRect&)ref;
	#endif
	-(id _Nonnull)initControl: (TSControl* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControl* _Nonnull)getControl;
	-(BOOL)equalPtr: (const TSControlRect* _Nonnull)p;
	-(TSControlRect* _Nonnull)copyPtr;
	-(TSControlRect* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControlRect* _Nonnull)null;
	-(void)setCallback: (BOOL)callback NS_SWIFT_NAME(setCallback(_:));
	-(void)setCallback_: (BOOL)callback NS_SWIFT_NAME(setCallback(callback:));
	-(BOOL)getCallback NS_SWIFT_NAME(callback());
	-(void)setFullscreen: (BOOL)fullscreen NS_SWIFT_NAME(setFullscreen(_:));
	-(void)setFullscreen_: (BOOL)fullscreen NS_SWIFT_NAME(setFullscreen(fullscreen:));
	-(BOOL)isFullscreen;
	-(void)setMode: (TS_CanvasElementMode)mode NS_SWIFT_NAME(setMode(_:));
	-(void)setMode_: (TS_CanvasElementMode)mode NS_SWIFT_NAME(setMode(mode:));
	-(TS_CanvasElementMode)getMode NS_SWIFT_NAME(mode());
	-(void)setPipeline: (TSPipeline* _Nonnull)pipeline NS_SWIFT_NAME(setPipeline(_:));
	-(void)setPipeline_: (TSPipeline* _Nonnull)pipeline NS_SWIFT_NAME(setPipeline(pipeline:));
	-(void)setPipeline_1: (TSPipeline* _Nonnull)pipeline func: (id<TSCanvasElementDrawCallback> _Nullable)func NS_SWIFT_NAME(setPipeline(_:_:));
	-(void)setPipeline_1_: (TSPipeline* _Nonnull)pipeline func: (id<TSCanvasElementDrawCallback> _Nullable)func NS_SWIFT_NAME(setPipeline(pipeline:func:));
	-(TSPipeline* _Nonnull)getPipeline NS_SWIFT_NAME(pipeline());
	-(void)setRadius: (float32_t)radius NS_SWIFT_NAME(setRadius(_:));
	-(void)setRadius_: (float32_t)radius NS_SWIFT_NAME(setRadius(radius:));
	-(float32_t)getRadius NS_SWIFT_NAME(radius());
	-(void)setColor: (TSColor)color NS_SWIFT_NAME(setColor(_:));
	-(void)setColor_: (TSColor)color NS_SWIFT_NAME(setColor(color:));
	-(void)setColor_1: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a NS_SWIFT_NAME(setColor(_:_:_:_:));
	-(void)setColor_1_: (float32_t)r g: (float32_t)g b: (float32_t)b a: (float32_t)a NS_SWIFT_NAME(setColor(r:g:b:a:));
	-(TSColor)getColor NS_SWIFT_NAME(color());
	-(void)setStrokeStyle: (TSStrokeStyle)style NS_SWIFT_NAME(setStrokeStyle(_:));
	-(void)setStrokeStyle_: (TSStrokeStyle)style NS_SWIFT_NAME(setStrokeStyle(style:));
	-(TSStrokeStyle)getStrokeStyleConst NS_SWIFT_NAME(strokeStyleConst());
	-(TSStrokeStyle)getStrokeStyle NS_SWIFT_NAME(strokeStyle());
	-(void)setGradientStyle: (TSGradientStyle)style NS_SWIFT_NAME(setGradientStyle(_:));
	-(void)setGradientStyle_: (TSGradientStyle)style NS_SWIFT_NAME(setGradientStyle(style:));
	-(TSGradientStyle)getGradientStyleConst NS_SWIFT_NAME(gradientStyleConst());
	-(TSGradientStyle)getGradientStyle NS_SWIFT_NAME(gradientStyle());
	-(void)setMipmap: (float32_t)mipmap NS_SWIFT_NAME(setMipmap(_:));
	-(void)setMipmap_: (float32_t)mipmap NS_SWIFT_NAME(setMipmap(mipmap:));
	-(float32_t)getMipmap NS_SWIFT_NAME(mipmap());
	-(void)setFilter: (TS_SamplerFilter)filter NS_SWIFT_NAME(setFilter(_:));
	-(void)setFilter_: (TS_SamplerFilter)filter NS_SWIFT_NAME(setFilter(filter:));
	-(TS_SamplerFilter)getFilter NS_SWIFT_NAME(filter());
	-(void)setAnisotropy: (uint32_t)anisotropy NS_SWIFT_NAME(setAnisotropy(_:));
	-(void)setAnisotropy_: (uint32_t)anisotropy NS_SWIFT_NAME(setAnisotropy(anisotropy:));
	-(uint32_t)getAnisotropy NS_SWIFT_NAME(anisotropy());
	-(void)setWrapMode: (TS_SamplerWrapMode)mode NS_SWIFT_NAME(setWrapMode(_:));
	-(void)setWrapMode_: (TS_SamplerWrapMode)mode NS_SWIFT_NAME(setWrapMode(mode:));
	-(TS_SamplerWrapMode)getWrapMode NS_SWIFT_NAME(wrapMode());
	-(void)setBlend: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlend(_:_:_:));
	-(void)setBlend_: (TS_PipelineBlendOp)op src: (TS_PipelineBlendFunc)src dest: (TS_PipelineBlendFunc)dest NS_SWIFT_NAME(setBlend(op:src:dest:));
	-(TS_PipelineBlendOp)getBlendOp NS_SWIFT_NAME(blendOp());
	-(TS_PipelineBlendFunc)getBlendSrcFunc NS_SWIFT_NAME(blendSrcFunc());
	-(TS_PipelineBlendFunc)getBlendDestFunc NS_SWIFT_NAME(blendDestFunc());
	-(void)setTexture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setTexture(_:));
	-(void)setTexture_: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setTexture(texture:));
	-(void)setTexture_1: (TSTexture* _Nonnull)texture linear: (BOOL)linear NS_SWIFT_NAME(setTexture(_:_:));
	-(void)setTexture_1_: (TSTexture* _Nonnull)texture linear: (BOOL)linear NS_SWIFT_NAME(setTexture(texture:linear:));
	-(TSTexture* _Nonnull)getTexture NS_SWIFT_NAME(texture());
	-(BOOL)getTextureLinear NS_SWIFT_NAME(textureLinear());
	-(void)setTextureName: (const char* _Nonnull)name NS_SWIFT_NAME(setTextureName(_:));
	-(void)setTextureName_: (const char* _Nonnull)name NS_SWIFT_NAME(setTextureName(name:));
	-(void)setTextureName_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(setTextureName(_:));
	-(void)setTextureName_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(setTextureName(name:));
	-(NSString* _Nonnull)getTextureName NS_SWIFT_NAME(textureName());
	-(void)setTextureScale: (float32_t)scale_x scale_y: (float32_t)scale_y NS_SWIFT_NAME(setTextureScale(_:_:));
	-(void)setTextureScale_: (float32_t)scale_x scale_y: (float32_t)scale_y NS_SWIFT_NAME(setTextureScale(scale_x:scale_y:));
	-(float32_t)getTextureScaleX NS_SWIFT_NAME(textureScaleX());
	-(float32_t)getTextureScaleY NS_SWIFT_NAME(textureScaleY());
	-(void)setTextureFlip: (BOOL)flip_x flip_y: (BOOL)flip_y NS_SWIFT_NAME(setTextureFlip(_:_:));
	-(void)setTextureFlip_: (BOOL)flip_x flip_y: (BOOL)flip_y NS_SWIFT_NAME(setTextureFlip(flip_x:flip_y:));
	-(BOOL)getTextureFlipX NS_SWIFT_NAME(textureFlipX());
	-(BOOL)getTextureFlipY NS_SWIFT_NAME(textureFlipY());
	-(void)setTextureProj: (BOOL)projection NS_SWIFT_NAME(setTextureProj(_:));
	-(void)setTextureProj_: (BOOL)projection NS_SWIFT_NAME(setTextureProj(projection:));
	-(BOOL)getTextureProj NS_SWIFT_NAME(textureProj());
	-(void)setTexCoord: (TSRect)texcoord NS_SWIFT_NAME(setTexCoord(_:));
	-(void)setTexCoord_: (TSRect)texcoord NS_SWIFT_NAME(setTexCoord(texcoord:));
	-(void)setTexCoord_1: (float32_t)left right: (float32_t)right bottom: (float32_t)bottom top: (float32_t)top NS_SWIFT_NAME(setTexCoord(_:_:_:_:));
	-(void)setTexCoord_1_: (float32_t)left right: (float32_t)right bottom: (float32_t)bottom top: (float32_t)top NS_SWIFT_NAME(setTexCoord(left:right:bottom:top:));
	-(TSRect)getTexCoord NS_SWIFT_NAME(texCoord());
	-(void)setInsideCallback: (id<TSControlRectInsideCallback> _Nullable)func NS_SWIFT_NAME(setInsideCallback(_:));
	-(void)setInsideCallback_: (id<TSControlRectInsideCallback> _Nullable)func NS_SWIFT_NAME(setInsideCallback(func:));
	-(void)setPressedCallback: (id<TSControlRectPressedCallback> _Nullable)func NS_SWIFT_NAME(setPressedCallback(_:));
	-(void)setPressedCallback_: (id<TSControlRectPressedCallback> _Nullable)func NS_SWIFT_NAME(setPressedCallback(func:));
	-(void)setReleasedCallback: (id<TSControlRectReleasedCallback> _Nullable)func NS_SWIFT_NAME(setReleasedCallback(_:));
	-(void)setReleasedCallback_: (id<TSControlRectReleasedCallback> _Nullable)func NS_SWIFT_NAME(setReleasedCallback(func:));
	-(void)setClickedCallback: (id<TSControlRectClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(_:));
	-(void)setClickedCallback_: (id<TSControlRectClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(func:));
	-(void)setClicked2Callback: (id<TSControlRectClickedCallback> _Nullable)func NS_SWIFT_NAME(setClicked2Callback(_:));
	-(void)setClicked2Callback_: (id<TSControlRectClickedCallback> _Nullable)func NS_SWIFT_NAME(setClicked2Callback(func:));
	-(void)setClickedRightCallback: (id<TSControlRectClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedRightCallback(_:));
	-(void)setClickedRightCallback_: (id<TSControlRectClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedRightCallback(func:));
	-(TSCanvasRect* _Nonnull)getCanvasRect NS_SWIFT_NAME(canvasRect());
	-(TSCanvasMesh* _Nonnull)getCanvasMesh NS_SWIFT_NAME(canvasMesh());
@end

/// Tellusim::ControlGrid
NS_SWIFT_NAME(ControlGrid)
TS_CAPI @interface TSControlGrid : TSControl
	-(id _Nonnull)init_4 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_5: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_5_: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	-(id _Nonnull)init_6: (TSControl* _Nonnull)parent columns: (uint32_t)columns NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_6_: (TSControl* _Nonnull)parent columns: (uint32_t)columns NS_SWIFT_NAME(init(parent:columns:));
	-(id _Nonnull)init_7: (TSControl* _Nonnull)parent columns: (uint32_t)columns x: (float32_t)x NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_7_: (TSControl* _Nonnull)parent columns: (uint32_t)columns x: (float32_t)x NS_SWIFT_NAME(init(parent:columns:x:));
	-(id _Nonnull)init_8: (TSControl* _Nonnull)parent columns: (uint32_t)columns x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(init(_:_:_:_:));
	-(id _Nonnull)init_8_: (TSControl* _Nonnull)parent columns: (uint32_t)columns x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(init(parent:columns:x:y:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ControlGrid* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ControlGrid&)p;
		-(Tellusim::ControlGrid* _Nonnull)pointer;
		-(Tellusim::ControlGrid&)ref;
	#endif
	-(id _Nonnull)initControl: (TSControl* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControl* _Nonnull)getControl;
	-(BOOL)equalPtr: (const TSControlGrid* _Nonnull)p;
	-(TSControlGrid* _Nonnull)copyPtr;
	-(TSControlGrid* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControlGrid* _Nonnull)null;
	-(void)setColumns: (uint32_t)columns NS_SWIFT_NAME(setColumns(_:));
	-(void)setColumns_: (uint32_t)columns NS_SWIFT_NAME(setColumns(columns:));
	-(uint32_t)getColumns NS_SWIFT_NAME(columns());
	-(void)setSpacing: (TSVector2f)spacing NS_SWIFT_NAME(setSpacing(_:));
	-(void)setSpacing_: (TSVector2f)spacing NS_SWIFT_NAME(setSpacing(spacing:));
	-(void)setSpacing_1: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setSpacing(_:_:));
	-(void)setSpacing_1_: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setSpacing(x:y:));
	-(TSVector2f)getSpacing NS_SWIFT_NAME(spacing());
	-(void)setColumnRatio: (uint32_t)index ratio: (float32_t)ratio NS_SWIFT_NAME(setColumnRatio(_:_:));
	-(void)setColumnRatio_: (uint32_t)index ratio: (float32_t)ratio NS_SWIFT_NAME(setColumnRatio(index:ratio:));
	-(float32_t)getColumnRatio: (uint32_t)index NS_SWIFT_NAME(columnRatio(_:));
	-(float32_t)getColumnRatio_: (uint32_t)index NS_SWIFT_NAME(columnRatio(index:));
	-(TSVector2f)getControlsSize NS_SWIFT_NAME(controlsSize());
@end

/// Tellusim::ControlGroup::ClickedCallback
NS_SWIFT_NAME(ControlGroup.ClickedCallback)
@protocol TSControlGroupClickedCallback <NSObject>
	-(void)run: (TSControlGroup* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlGroup
NS_SWIFT_NAME(ControlGroup)
TS_CAPI @interface TSControlGroup : TSControlText
	-(id _Nonnull)init_8 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_9: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_9_: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	-(id _Nonnull)init_10: (TSControl* _Nonnull)parent above: (BOOL)above NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_10_: (TSControl* _Nonnull)parent above: (BOOL)above NS_SWIFT_NAME(init(parent:above:));
	-(id _Nonnull)init_11: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_11_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text NS_SWIFT_NAME(init(parent:text:));
	-(id _Nonnull)init_12: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text above: (BOOL)above NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_12_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text above: (BOOL)above NS_SWIFT_NAME(init(parent:text:above:));
	-(id _Nonnull)init_13: (TSControl* _Nonnull)parent text: (const TSString* _Nonnull)text NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_13_: (TSControl* _Nonnull)parent text: (const TSString* _Nonnull)text NS_SWIFT_NAME(init(parent:text:));
	-(id _Nonnull)init_14: (TSControl* _Nonnull)parent text: (const TSString* _Nonnull)text above: (BOOL)above NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_14_: (TSControl* _Nonnull)parent text: (const TSString* _Nonnull)text above: (BOOL)above NS_SWIFT_NAME(init(parent:text:above:));
	-(id _Nonnull)init_15: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text columns: (uint32_t)columns NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_15_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text columns: (uint32_t)columns NS_SWIFT_NAME(init(parent:text:columns:));
	-(id _Nonnull)init_16: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text columns: (uint32_t)columns above: (BOOL)above NS_SWIFT_NAME(init(_:_:_:_:));
	-(id _Nonnull)init_16_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text columns: (uint32_t)columns above: (BOOL)above NS_SWIFT_NAME(init(parent:text:columns:above:));
	-(id _Nonnull)init_17: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text columns: (uint32_t)columns x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(init(_:_:_:_:_:));
	-(id _Nonnull)init_17_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text columns: (uint32_t)columns x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(init(parent:text:columns:x:y:));
	-(id _Nonnull)init_18: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text columns: (uint32_t)columns x: (float32_t)x y: (float32_t)y above: (BOOL)above NS_SWIFT_NAME(init(_:_:_:_:_:_:));
	-(id _Nonnull)init_18_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text columns: (uint32_t)columns x: (float32_t)x y: (float32_t)y above: (BOOL)above NS_SWIFT_NAME(init(parent:text:columns:x:y:above:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ControlGroup* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ControlGroup&)p;
		-(Tellusim::ControlGroup* _Nonnull)pointer;
		-(Tellusim::ControlGroup&)ref;
	#endif
	-(id _Nonnull)initControlText: (TSControlText* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControlText* _Nonnull)getControlText;
	-(id _Nonnull)initControl: (TSControl* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControl* _Nonnull)getControl;
	-(BOOL)equalPtr: (const TSControlGroup* _Nonnull)p;
	-(TSControlGroup* _Nonnull)copyPtr;
	-(TSControlGroup* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControlGroup* _Nonnull)null;
	-(void)setAbove: (BOOL)above NS_SWIFT_NAME(setAbove(_:));
	-(void)setAbove_: (BOOL)above NS_SWIFT_NAME(setAbove(above:));
	-(void)setAbove_1: (BOOL)above text: (BOOL)text NS_SWIFT_NAME(setAbove(_:_:));
	-(void)setAbove_1_: (BOOL)above text: (BOOL)text NS_SWIFT_NAME(setAbove(above:text:));
	-(BOOL)isAbove;
	-(BOOL)isBelow;
	-(void)setFoldable: (BOOL)foldable NS_SWIFT_NAME(setFoldable(_:));
	-(void)setFoldable_: (BOOL)foldable NS_SWIFT_NAME(setFoldable(foldable:));
	-(BOOL)isFoldable;
	-(void)setExpanded: (BOOL)expanded NS_SWIFT_NAME(setExpanded(_:));
	-(void)setExpanded_: (BOOL)expanded NS_SWIFT_NAME(setExpanded(expanded:));
	-(BOOL)isExpanded;
	-(void)setBackground: (BOOL)background NS_SWIFT_NAME(setBackground(_:));
	-(void)setBackground_: (BOOL)background NS_SWIFT_NAME(setBackground(background:));
	-(BOOL)getBackground NS_SWIFT_NAME(background());
	-(void)setGroupRadius: (float32_t)radius NS_SWIFT_NAME(setGroupRadius(_:));
	-(void)setGroupRadius_: (float32_t)radius NS_SWIFT_NAME(setGroupRadius(radius:));
	-(float32_t)getGroupRadius NS_SWIFT_NAME(groupRadius());
	-(void)setGroupColor: (TSColor)color NS_SWIFT_NAME(setGroupColor(_:));
	-(void)setGroupColor_: (TSColor)color NS_SWIFT_NAME(setGroupColor(color:));
	-(TSColor)getGroupColor NS_SWIFT_NAME(groupColor());
	-(void)setStrokeStyle: (TSStrokeStyle)style NS_SWIFT_NAME(setStrokeStyle(_:));
	-(void)setStrokeStyle_: (TSStrokeStyle)style NS_SWIFT_NAME(setStrokeStyle(style:));
	-(TSStrokeStyle)getStrokeStyleConst NS_SWIFT_NAME(strokeStyleConst());
	-(TSStrokeStyle)getStrokeStyle NS_SWIFT_NAME(strokeStyle());
	-(void)setGradientStyle: (TSGradientStyle)style NS_SWIFT_NAME(setGradientStyle(_:));
	-(void)setGradientStyle_: (TSGradientStyle)style NS_SWIFT_NAME(setGradientStyle(style:));
	-(TSGradientStyle)getGradientStyleConst NS_SWIFT_NAME(gradientStyleConst());
	-(TSGradientStyle)getGradientStyle NS_SWIFT_NAME(gradientStyle());
	-(void)setFoldedText: (const char* _Nonnull)text NS_SWIFT_NAME(setFoldedText(_:));
	-(void)setFoldedText_: (const char* _Nonnull)text NS_SWIFT_NAME(setFoldedText(text:));
	-(void)setFoldedText_1: (const TSString* _Nonnull)text NS_SWIFT_NAME(setFoldedText(_:));
	-(void)setFoldedText_1_: (const TSString* _Nonnull)text NS_SWIFT_NAME(setFoldedText(text:));
	-(NSString* _Nonnull)getFoldedText NS_SWIFT_NAME(foldedText());
	-(void)setExpandedText: (const char* _Nonnull)text NS_SWIFT_NAME(setExpandedText(_:));
	-(void)setExpandedText_: (const char* _Nonnull)text NS_SWIFT_NAME(setExpandedText(text:));
	-(void)setExpandedText_1: (const TSString* _Nonnull)text NS_SWIFT_NAME(setExpandedText(_:));
	-(void)setExpandedText_1_: (const TSString* _Nonnull)text NS_SWIFT_NAME(setExpandedText(text:));
	-(NSString* _Nonnull)getExpandedText NS_SWIFT_NAME(expandedText());
	-(void)setColumns: (uint32_t)columns NS_SWIFT_NAME(setColumns(_:));
	-(void)setColumns_: (uint32_t)columns NS_SWIFT_NAME(setColumns(columns:));
	-(uint32_t)getColumns NS_SWIFT_NAME(columns());
	-(void)setSpacing: (TSVector2f)spacing NS_SWIFT_NAME(setSpacing(_:));
	-(void)setSpacing_: (TSVector2f)spacing NS_SWIFT_NAME(setSpacing(spacing:));
	-(void)setSpacing_1: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setSpacing(_:_:));
	-(void)setSpacing_1_: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setSpacing(x:y:));
	-(TSVector2f)getSpacing NS_SWIFT_NAME(spacing());
	-(void)setColumnRatio: (uint32_t)index ratio: (float32_t)ratio NS_SWIFT_NAME(setColumnRatio(_:_:));
	-(void)setColumnRatio_: (uint32_t)index ratio: (float32_t)ratio NS_SWIFT_NAME(setColumnRatio(index:ratio:));
	-(float32_t)getColumnRatio: (uint32_t)index NS_SWIFT_NAME(columnRatio(_:));
	-(float32_t)getColumnRatio_: (uint32_t)index NS_SWIFT_NAME(columnRatio(index:));
	-(TSVector2f)getControlsSize NS_SWIFT_NAME(controlsSize());
	-(void)setClickedCallback: (id<TSControlGroupClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(_:));
	-(void)setClickedCallback_: (id<TSControlGroupClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(func:));
	-(BOOL)isClicked;
	-(TSCanvasRect* _Nonnull)getCanvasRect NS_SWIFT_NAME(canvasRect());
@end

/// Tellusim::ControlPanel
NS_SWIFT_NAME(ControlPanel)
TS_CAPI @interface TSControlPanel : TSControlRect
	-(id _Nonnull)init_9 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_10: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_10_: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	-(id _Nonnull)init_11: (TSControl* _Nonnull)parent columns: (uint32_t)columns NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_11_: (TSControl* _Nonnull)parent columns: (uint32_t)columns NS_SWIFT_NAME(init(parent:columns:));
	-(id _Nonnull)init_12: (TSControl* _Nonnull)parent columns: (uint32_t)columns x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(init(_:_:_:_:));
	-(id _Nonnull)init_12_: (TSControl* _Nonnull)parent columns: (uint32_t)columns x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(init(parent:columns:x:y:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ControlPanel* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ControlPanel&)p;
		-(Tellusim::ControlPanel* _Nonnull)pointer;
		-(Tellusim::ControlPanel&)ref;
	#endif
	-(id _Nonnull)initControlRect: (TSControlRect* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControlRect* _Nonnull)getControlRect;
	-(id _Nonnull)initControl: (TSControl* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControl* _Nonnull)getControl;
	-(BOOL)equalPtr: (const TSControlPanel* _Nonnull)p;
	-(TSControlPanel* _Nonnull)copyPtr;
	-(TSControlPanel* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControlPanel* _Nonnull)null;
	-(void)setColumns: (uint32_t)columns NS_SWIFT_NAME(setColumns(_:));
	-(void)setColumns_: (uint32_t)columns NS_SWIFT_NAME(setColumns(columns:));
	-(uint32_t)getColumns NS_SWIFT_NAME(columns());
	-(void)setSpacing: (TSVector2f)spacing NS_SWIFT_NAME(setSpacing(_:));
	-(void)setSpacing_: (TSVector2f)spacing NS_SWIFT_NAME(setSpacing(spacing:));
	-(void)setSpacing_1: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setSpacing(_:_:));
	-(void)setSpacing_1_: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setSpacing(x:y:));
	-(TSVector2f)getSpacing NS_SWIFT_NAME(spacing());
	-(void)setColumnRatio: (uint32_t)index ratio: (float32_t)ratio NS_SWIFT_NAME(setColumnRatio(_:_:));
	-(void)setColumnRatio_: (uint32_t)index ratio: (float32_t)ratio NS_SWIFT_NAME(setColumnRatio(index:ratio:));
	-(float32_t)getColumnRatio: (uint32_t)index NS_SWIFT_NAME(columnRatio(_:));
	-(float32_t)getColumnRatio_: (uint32_t)index NS_SWIFT_NAME(columnRatio(index:));
	-(TSVector2f)getControlsSize NS_SWIFT_NAME(controlsSize());
@end

/// Tellusim::ControlDialog::UpdatedCallback
NS_SWIFT_NAME(ControlDialog.UpdatedCallback)
@protocol TSControlDialogUpdatedCallback <NSObject>
	-(void)run: (TSControlDialog* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlDialog
NS_SWIFT_NAME(ControlDialog)
TS_CAPI @interface TSControlDialog : TSControlPanel
	-(id _Nonnull)init_13 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_14: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_14_: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	-(id _Nonnull)init_15: (TSControl* _Nonnull)parent columns: (uint32_t)columns NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_15_: (TSControl* _Nonnull)parent columns: (uint32_t)columns NS_SWIFT_NAME(init(parent:columns:));
	-(id _Nonnull)init_16: (TSControl* _Nonnull)parent columns: (uint32_t)columns x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(init(_:_:_:_:));
	-(id _Nonnull)init_16_: (TSControl* _Nonnull)parent columns: (uint32_t)columns x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(init(parent:columns:x:y:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ControlDialog* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ControlDialog&)p;
		-(Tellusim::ControlDialog* _Nonnull)pointer;
		-(Tellusim::ControlDialog&)ref;
	#endif
	-(id _Nonnull)initControlPanel: (TSControlPanel* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControlPanel* _Nonnull)getControlPanel;
	-(id _Nonnull)initControlRect: (TSControlRect* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControlRect* _Nonnull)getControlRect;
	-(id _Nonnull)initControl: (TSControl* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControl* _Nonnull)getControl;
	-(BOOL)equalPtr: (const TSControlDialog* _Nonnull)p;
	-(TSControlDialog* _Nonnull)copyPtr;
	-(TSControlDialog* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControlDialog* _Nonnull)null;
	-(void)setConstrained: (BOOL)constrained NS_SWIFT_NAME(setConstrained(_:));
	-(void)setConstrained_: (BOOL)constrained NS_SWIFT_NAME(setConstrained(constrained:));
	-(BOOL)isConstrained;
	-(void)setResizable: (BOOL)resizable NS_SWIFT_NAME(setResizable(_:));
	-(void)setResizable_: (BOOL)resizable NS_SWIFT_NAME(setResizable(resizable:));
	-(BOOL)isResizable;
	-(void)setMoveable: (BOOL)moveable NS_SWIFT_NAME(setMoveable(_:));
	-(void)setMoveable_: (BOOL)moveable NS_SWIFT_NAME(setMoveable(moveable:));
	-(BOOL)isMoveable;
	-(void)setResizeArea: (float32_t)area NS_SWIFT_NAME(setResizeArea(_:));
	-(void)setResizeArea_: (float32_t)area NS_SWIFT_NAME(setResizeArea(area:));
	-(float32_t)getResizeArea NS_SWIFT_NAME(resizeArea());
	-(TS_ControlAlign)getResizeAlign NS_SWIFT_NAME(resizeAlign());
	-(BOOL)hasResizeAlign: (TS_ControlAlign)align NS_SWIFT_NAME(hasResizeAlign(_:));
	-(BOOL)hasResizeAlign_: (TS_ControlAlign)align NS_SWIFT_NAME(hasResizeAlign(align:));
	-(BOOL)hasResizeAligns: (TS_ControlAlign)aligns NS_SWIFT_NAME(hasResizeAligns(_:));
	-(BOOL)hasResizeAligns_: (TS_ControlAlign)aligns NS_SWIFT_NAME(hasResizeAligns(aligns:));
	-(void)setMousePosition: (TSVector2f)position NS_SWIFT_NAME(setMousePosition(_:));
	-(void)setMousePosition_: (TSVector2f)position NS_SWIFT_NAME(setMousePosition(position:));
	-(TSVector2f)getMousePosition NS_SWIFT_NAME(mousePosition());
	-(void)setUpdatedCallback: (id<TSControlDialogUpdatedCallback> _Nullable)func NS_SWIFT_NAME(setUpdatedCallback(_:));
	-(void)setUpdatedCallback_: (id<TSControlDialogUpdatedCallback> _Nullable)func NS_SWIFT_NAME(setUpdatedCallback(func:));
	-(BOOL)isUpdated;
@end

/// Tellusim::ControlWindow
NS_SWIFT_NAME(ControlWindow)
TS_CAPI @interface TSControlWindow : TSControlDialog
	-(id _Nonnull)init_17 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_18: (TSControlRoot* _Nonnull * _Nullable)root parent: (TSWindow* _Nonnull)parent window: (TSWindow* _Nonnull)window NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_18_: (TSControlRoot* _Nonnull * _Nullable)root parent: (TSWindow* _Nonnull)parent window: (TSWindow* _Nonnull)window NS_SWIFT_NAME(init(root:parent:window:));
	-(id _Nonnull)init_19: (TSControlRoot* _Nonnull * _Nullable)root parent: (TSWindow* _Nonnull)parent window: (TSWindow* _Nonnull)window columns: (uint32_t)columns NS_SWIFT_NAME(init(_:_:_:_:));
	-(id _Nonnull)init_19_: (TSControlRoot* _Nonnull * _Nullable)root parent: (TSWindow* _Nonnull)parent window: (TSWindow* _Nonnull)window columns: (uint32_t)columns NS_SWIFT_NAME(init(root:parent:window:columns:));
	-(id _Nonnull)init_20: (TSControlRoot* _Nonnull * _Nullable)root parent: (TSWindow* _Nonnull)parent window: (TSWindow* _Nonnull)window columns: (uint32_t)columns x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(init(_:_:_:_:_:_:));
	-(id _Nonnull)init_20_: (TSControlRoot* _Nonnull * _Nullable)root parent: (TSWindow* _Nonnull)parent window: (TSWindow* _Nonnull)window columns: (uint32_t)columns x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(init(root:parent:window:columns:x:y:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ControlWindow* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ControlWindow&)p;
		-(Tellusim::ControlWindow* _Nonnull)pointer;
		-(Tellusim::ControlWindow&)ref;
	#endif
	-(id _Nonnull)initControlDialog: (TSControlDialog* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControlDialog* _Nonnull)getControlDialog;
	-(id _Nonnull)initControlPanel: (TSControlPanel* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControlPanel* _Nonnull)getControlPanel;
	-(id _Nonnull)initControlRect: (TSControlRect* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControlRect* _Nonnull)getControlRect;
	-(id _Nonnull)initControl: (TSControl* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControl* _Nonnull)getControl;
	-(BOOL)equalPtr: (const TSControlWindow* _Nonnull)p;
	-(TSControlWindow* _Nonnull)copyPtr;
	-(TSControlWindow* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControlWindow* _Nonnull)null;
	-(TSWindow* _Nonnull)getParentWindow NS_SWIFT_NAME(parentWindow());
	-(TSWindow* _Nonnull)getDialogWindow NS_SWIFT_NAME(dialogWindow());
@end

/// Tellusim::ControlCheck::ClickedCallback
NS_SWIFT_NAME(ControlCheck.ClickedCallback)
@protocol TSControlCheckClickedCallback <NSObject>
	-(void)run: (TSControlCheck* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlCheck
NS_SWIFT_NAME(ControlCheck)
TS_CAPI @interface TSControlCheck : TSControlText
	-(id _Nonnull)init_8 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_9: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_9_: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	-(id _Nonnull)init_10: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_10_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text NS_SWIFT_NAME(init(parent:text:));
	-(id _Nonnull)init_11: (TSControl* _Nonnull)parent text: (const TSString* _Nonnull)text NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_11_: (TSControl* _Nonnull)parent text: (const TSString* _Nonnull)text NS_SWIFT_NAME(init(parent:text:));
	-(id _Nonnull)init_12: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text checked: (BOOL)checked NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_12_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text checked: (BOOL)checked NS_SWIFT_NAME(init(parent:text:checked:));
	-(id _Nonnull)init_13: (TSControl* _Nonnull)parent text: (const TSString* _Nonnull)text checked: (BOOL)checked NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_13_: (TSControl* _Nonnull)parent text: (const TSString* _Nonnull)text checked: (BOOL)checked NS_SWIFT_NAME(init(parent:text:checked:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ControlCheck* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ControlCheck&)p;
		-(Tellusim::ControlCheck* _Nonnull)pointer;
		-(Tellusim::ControlCheck&)ref;
	#endif
	-(id _Nonnull)initControlText: (TSControlText* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControlText* _Nonnull)getControlText;
	-(id _Nonnull)initControl: (TSControl* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControl* _Nonnull)getControl;
	-(BOOL)equalPtr: (const TSControlCheck* _Nonnull)p;
	-(TSControlCheck* _Nonnull)copyPtr;
	-(TSControlCheck* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControlCheck* _Nonnull)null;
	-(void)setCheckText: (const char* _Nonnull)text NS_SWIFT_NAME(setCheckText(_:));
	-(void)setCheckText_: (const char* _Nonnull)text NS_SWIFT_NAME(setCheckText(text:));
	-(void)setCheckText_1: (const TSString* _Nonnull)text NS_SWIFT_NAME(setCheckText(_:));
	-(void)setCheckText_1_: (const TSString* _Nonnull)text NS_SWIFT_NAME(setCheckText(text:));
	-(NSString* _Nonnull)getCheckText NS_SWIFT_NAME(checkText());
	-(void)setCheckColor: (TSColor)color NS_SWIFT_NAME(setCheckColor(_:));
	-(void)setCheckColor_: (TSColor)color NS_SWIFT_NAME(setCheckColor(color:));
	-(TSColor)getCheckColor NS_SWIFT_NAME(checkColor());
	-(void)setCheckedColor: (TSColor)color NS_SWIFT_NAME(setCheckedColor(_:));
	-(void)setCheckedColor_: (TSColor)color NS_SWIFT_NAME(setCheckedColor(color:));
	-(TSColor)getCheckedColor NS_SWIFT_NAME(checkedColor());
	-(BOOL)switchChecked NS_SWIFT_NAME(switchChecked());
	-(BOOL)switchChecked_1: (BOOL)callback NS_SWIFT_NAME(switchChecked(_:));
	-(BOOL)switchChecked_1_: (BOOL)callback NS_SWIFT_NAME(switchChecked(callback:));
	-(void)setChecked: (BOOL)checked NS_SWIFT_NAME(setChecked(_:));
	-(void)setChecked_: (BOOL)checked NS_SWIFT_NAME(setChecked(checked:));
	-(void)setChecked_1: (BOOL)checked callback: (BOOL)callback NS_SWIFT_NAME(setChecked(_:_:));
	-(void)setChecked_1_: (BOOL)checked callback: (BOOL)callback NS_SWIFT_NAME(setChecked(checked:callback:));
	-(BOOL)isChecked;
	-(void)setClickedCallback: (id<TSControlCheckClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(_:));
	-(void)setClickedCallback_: (id<TSControlCheckClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(func:));
	-(BOOL)isClicked;
	-(TSCanvasMesh* _Nonnull)getCanvasMesh NS_SWIFT_NAME(canvasMesh());
@end

/// Tellusim::ControlCombo::ClickedCallback
NS_SWIFT_NAME(ControlCombo.ClickedCallback)
@protocol TSControlComboClickedCallback <NSObject>
	-(void)run: (TSControlCombo* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlCombo::ChangedCallback
NS_SWIFT_NAME(ControlCombo.ChangedCallback)
@protocol TSControlComboChangedCallback <NSObject>
	-(void)run: (TSControlCombo* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlCombo
NS_SWIFT_NAME(ControlCombo)
TS_CAPI @interface TSControlCombo : TSControlText
	-(id _Nonnull)init_8 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_9: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_9_: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ControlCombo* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ControlCombo&)p;
		-(Tellusim::ControlCombo* _Nonnull)pointer;
		-(Tellusim::ControlCombo&)ref;
	#endif
	-(id _Nonnull)initControlText: (TSControlText* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControlText* _Nonnull)getControlText;
	-(id _Nonnull)initControl: (TSControl* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControl* _Nonnull)getControl;
	-(BOOL)equalPtr: (const TSControlCombo* _Nonnull)p;
	-(TSControlCombo* _Nonnull)copyPtr;
	-(TSControlCombo* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControlCombo* _Nonnull)null;
	-(void)setTextEnabled: (BOOL)enabled NS_SWIFT_NAME(setTextEnabled(_:));
	-(void)setTextEnabled_: (BOOL)enabled NS_SWIFT_NAME(setTextEnabled(enabled:));
	-(BOOL)isTextEnabled;
	-(void)setMultiSelection: (BOOL)multi_selection NS_SWIFT_NAME(setMultiSelection(_:));
	-(void)setMultiSelection_: (BOOL)multi_selection NS_SWIFT_NAME(setMultiSelection(multi_selection:));
	-(BOOL)isMultiSelection;
	-(void)setComboText: (const char* _Nonnull)text NS_SWIFT_NAME(setComboText(_:));
	-(void)setComboText_: (const char* _Nonnull)text NS_SWIFT_NAME(setComboText(text:));
	-(void)setComboText_1: (const TSString* _Nonnull)text NS_SWIFT_NAME(setComboText(_:));
	-(void)setComboText_1_: (const TSString* _Nonnull)text NS_SWIFT_NAME(setComboText(text:));
	-(NSString* _Nonnull)getComboText NS_SWIFT_NAME(comboText());
	-(void)setComboColor: (TSColor)color NS_SWIFT_NAME(setComboColor(_:));
	-(void)setComboColor_: (TSColor)color NS_SWIFT_NAME(setComboColor(color:));
	-(TSColor)getComboColor NS_SWIFT_NAME(comboColor());
	-(void)setItemsSpacing: (float32_t)spacing NS_SWIFT_NAME(setItemsSpacing(_:));
	-(void)setItemsSpacing_: (float32_t)spacing NS_SWIFT_NAME(setItemsSpacing(spacing:));
	-(float32_t)getItemsSpacing NS_SWIFT_NAME(itemsSpacing());
	-(void)clearItems;
	-(uint32_t)addItem: (const char* _Nonnull)text NS_SWIFT_NAME(addItem(_:));
	-(uint32_t)addItem_: (const char* _Nonnull)text NS_SWIFT_NAME(addItem(text:));
	-(uint32_t)addItem_1: (const TSString* _Nonnull)text NS_SWIFT_NAME(addItem(_:));
	-(uint32_t)addItem_1_: (const TSString* _Nonnull)text NS_SWIFT_NAME(addItem(text:));
	-(void)addItem_2: (uint32_t)index text: (const char* _Nonnull)text NS_SWIFT_NAME(addItem(_:_:));
	-(void)addItem_2_: (uint32_t)index text: (const char* _Nonnull)text NS_SWIFT_NAME(addItem(index:text:));
	-(void)addItem_3: (uint32_t)index text: (const TSString* _Nonnull)text NS_SWIFT_NAME(addItem(_:_:));
	-(void)addItem_3_: (uint32_t)index text: (const TSString* _Nonnull)text NS_SWIFT_NAME(addItem(index:text:));
	-(void)removeItem: (uint32_t)index NS_SWIFT_NAME(removeItem(_:));
	-(void)removeItem_: (uint32_t)index NS_SWIFT_NAME(removeItem(index:));
	-(uint32_t)getNumItems NS_SWIFT_NAME(numItems());
	-(BOOL)switchItemSelected: (uint32_t)index NS_SWIFT_NAME(switchItemSelected(_:));
	-(BOOL)switchItemSelected_: (uint32_t)index NS_SWIFT_NAME(switchItemSelected(index:));
	-(void)setItemSelected: (uint32_t)index selected: (BOOL)selected NS_SWIFT_NAME(setItemSelected(_:_:));
	-(void)setItemSelected_: (uint32_t)index selected: (BOOL)selected NS_SWIFT_NAME(setItemSelected(index:selected:));
	-(BOOL)isItemSelected: (uint32_t)index NS_SWIFT_NAME(isItemSelected(_:));
	-(BOOL)isItemSelected_: (uint32_t)index NS_SWIFT_NAME(isItemSelected(index:));
	-(void)setItemText: (uint32_t)index text: (const char* _Nonnull)text NS_SWIFT_NAME(setItemText(_:_:));
	-(void)setItemText_: (uint32_t)index text: (const char* _Nonnull)text NS_SWIFT_NAME(setItemText(index:text:));
	-(void)setItemText_1: (uint32_t)index text: (const TSString* _Nonnull)text NS_SWIFT_NAME(setItemText(_:_:));
	-(void)setItemText_1_: (uint32_t)index text: (const TSString* _Nonnull)text NS_SWIFT_NAME(setItemText(index:text:));
	-(NSString* _Nonnull)getItemText: (uint32_t)index NS_SWIFT_NAME(itemText(_:));
	-(NSString* _Nonnull)getItemText_: (uint32_t)index NS_SWIFT_NAME(itemText(index:));
	-(uint32_t)findItemText: (const char* _Nonnull)text NS_SWIFT_NAME(findItemText(_:));
	-(uint32_t)findItemText_: (const char* _Nonnull)text NS_SWIFT_NAME(findItemText(text:));
	-(uint32_t)findItemText_1: (const TSString* _Nonnull)text NS_SWIFT_NAME(findItemText(_:));
	-(uint32_t)findItemText_1_: (const TSString* _Nonnull)text NS_SWIFT_NAME(findItemText(text:));
	-(void)setItemColor: (uint32_t)index color: (TSColor)color NS_SWIFT_NAME(setItemColor(_:_:));
	-(void)setItemColor_: (uint32_t)index color: (TSColor)color NS_SWIFT_NAME(setItemColor(index:color:));
	-(TSColor)getItemColor: (uint32_t)index NS_SWIFT_NAME(itemColor(_:));
	-(TSColor)getItemColor_: (uint32_t)index NS_SWIFT_NAME(itemColor(index:));
	-(void)setCurrentIndex: (uint32_t)index NS_SWIFT_NAME(setCurrentIndex(_:));
	-(void)setCurrentIndex_: (uint32_t)index NS_SWIFT_NAME(setCurrentIndex(index:));
	-(void)setCurrentIndex_1: (uint32_t)index callback: (BOOL)callback NS_SWIFT_NAME(setCurrentIndex(_:_:));
	-(void)setCurrentIndex_1_: (uint32_t)index callback: (BOOL)callback NS_SWIFT_NAME(setCurrentIndex(index:callback:));
	-(BOOL)setCurrentText: (const char* _Nonnull)text NS_SWIFT_NAME(setCurrentText(_:));
	-(BOOL)setCurrentText_: (const char* _Nonnull)text NS_SWIFT_NAME(setCurrentText(text:));
	-(BOOL)setCurrentText_1: (const char* _Nonnull)text callback: (BOOL)callback NS_SWIFT_NAME(setCurrentText(_:_:));
	-(BOOL)setCurrentText_1_: (const char* _Nonnull)text callback: (BOOL)callback NS_SWIFT_NAME(setCurrentText(text:callback:));
	-(BOOL)setCurrentText_2: (const TSString* _Nonnull)text NS_SWIFT_NAME(setCurrentText(_:));
	-(BOOL)setCurrentText_2_: (const TSString* _Nonnull)text NS_SWIFT_NAME(setCurrentText(text:));
	-(BOOL)setCurrentText_3: (const TSString* _Nonnull)text callback: (BOOL)callback NS_SWIFT_NAME(setCurrentText(_:_:));
	-(BOOL)setCurrentText_3_: (const TSString* _Nonnull)text callback: (BOOL)callback NS_SWIFT_NAME(setCurrentText(text:callback:));
	-(uint32_t)getCurrentIndex NS_SWIFT_NAME(currentIndex());
	-(NSString* _Nonnull)getCurrentText NS_SWIFT_NAME(currentText());
	-(void)setClickedCallback: (id<TSControlComboClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(_:));
	-(void)setClickedCallback_: (id<TSControlComboClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(func:));
	-(BOOL)isClicked;
	-(void)setChangedCallback: (id<TSControlComboChangedCallback> _Nullable)func NS_SWIFT_NAME(setChangedCallback(_:));
	-(void)setChangedCallback_: (id<TSControlComboChangedCallback> _Nullable)func NS_SWIFT_NAME(setChangedCallback(func:));
	-(BOOL)isChanged;
	-(TSCanvasMesh* _Nonnull)getCanvasMesh NS_SWIFT_NAME(canvasMesh());
@end

/// Tellusim::ControlButton::PressedCallback
NS_SWIFT_NAME(ControlButton.PressedCallback)
@protocol TSControlButtonPressedCallback <NSObject>
	-(void)run: (TSControlButton* _Nonnull)a0 x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(run(_:_:_:));
@end

/// Tellusim::ControlButton::ReleasedCallback
NS_SWIFT_NAME(ControlButton.ReleasedCallback)
@protocol TSControlButtonReleasedCallback <NSObject>
	-(void)run: (TSControlButton* _Nonnull)a0 x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(run(_:_:_:));
@end

/// Tellusim::ControlButton::ClickedCallback
NS_SWIFT_NAME(ControlButton.ClickedCallback)
@protocol TSControlButtonClickedCallback <NSObject>
	-(void)run: (TSControlButton* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlButton
NS_SWIFT_NAME(ControlButton)
TS_CAPI @interface TSControlButton : TSControlText
	-(id _Nonnull)init_8 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_9: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_9_: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	-(id _Nonnull)init_10: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_10_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text NS_SWIFT_NAME(init(parent:text:));
	-(id _Nonnull)init_11: (TSControl* _Nonnull)parent text: (const TSString* _Nonnull)text NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_11_: (TSControl* _Nonnull)parent text: (const TSString* _Nonnull)text NS_SWIFT_NAME(init(parent:text:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ControlButton* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ControlButton&)p;
		-(Tellusim::ControlButton* _Nonnull)pointer;
		-(Tellusim::ControlButton&)ref;
	#endif
	-(id _Nonnull)initControlText: (TSControlText* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControlText* _Nonnull)getControlText;
	-(id _Nonnull)initControl: (TSControl* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControl* _Nonnull)getControl;
	-(BOOL)equalPtr: (const TSControlButton* _Nonnull)p;
	-(TSControlButton* _Nonnull)copyPtr;
	-(TSControlButton* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControlButton* _Nonnull)null;
	-(void)setBackground: (BOOL)background NS_SWIFT_NAME(setBackground(_:));
	-(void)setBackground_: (BOOL)background NS_SWIFT_NAME(setBackground(background:));
	-(BOOL)getBackground NS_SWIFT_NAME(background());
	-(void)setButtonMode: (TS_CanvasElementMode)mode NS_SWIFT_NAME(setButtonMode(_:));
	-(void)setButtonMode_: (TS_CanvasElementMode)mode NS_SWIFT_NAME(setButtonMode(mode:));
	-(TS_CanvasElementMode)getButtonMode NS_SWIFT_NAME(buttonMode());
	-(void)setButtonRadius: (float32_t)radius NS_SWIFT_NAME(setButtonRadius(_:));
	-(void)setButtonRadius_: (float32_t)radius NS_SWIFT_NAME(setButtonRadius(radius:));
	-(float32_t)getButtonRadius NS_SWIFT_NAME(buttonRadius());
	-(void)setButtonColor: (TSColor)color NS_SWIFT_NAME(setButtonColor(_:));
	-(void)setButtonColor_: (TSColor)color NS_SWIFT_NAME(setButtonColor(color:));
	-(TSColor)getButtonColor NS_SWIFT_NAME(buttonColor());
	-(void)setStrokeStyle: (TSStrokeStyle)style NS_SWIFT_NAME(setStrokeStyle(_:));
	-(void)setStrokeStyle_: (TSStrokeStyle)style NS_SWIFT_NAME(setStrokeStyle(style:));
	-(TSStrokeStyle)getStrokeStyleConst NS_SWIFT_NAME(strokeStyleConst());
	-(TSStrokeStyle)getStrokeStyle NS_SWIFT_NAME(strokeStyle());
	-(void)setGradientStyle: (TSGradientStyle)style NS_SWIFT_NAME(setGradientStyle(_:));
	-(void)setGradientStyle_: (TSGradientStyle)style NS_SWIFT_NAME(setGradientStyle(style:));
	-(TSGradientStyle)getGradientStyleConst NS_SWIFT_NAME(gradientStyleConst());
	-(TSGradientStyle)getGradientStyle NS_SWIFT_NAME(gradientStyle());
	-(void)setPressedCallback: (id<TSControlButtonPressedCallback> _Nullable)func NS_SWIFT_NAME(setPressedCallback(_:));
	-(void)setPressedCallback_: (id<TSControlButtonPressedCallback> _Nullable)func NS_SWIFT_NAME(setPressedCallback(func:));
	-(BOOL)isPressed;
	-(void)setReleasedCallback: (id<TSControlButtonReleasedCallback> _Nullable)func NS_SWIFT_NAME(setReleasedCallback(_:));
	-(void)setReleasedCallback_: (id<TSControlButtonReleasedCallback> _Nullable)func NS_SWIFT_NAME(setReleasedCallback(func:));
	-(BOOL)isReleased;
	-(void)setClickedCallback: (id<TSControlButtonClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(_:));
	-(void)setClickedCallback_: (id<TSControlButtonClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(func:));
	-(BOOL)isClicked;
	-(TSCanvasRect* _Nonnull)getCanvasRect NS_SWIFT_NAME(canvasRect());
	-(TSCanvasMesh* _Nonnull)getCanvasMesh NS_SWIFT_NAME(canvasMesh());
@end

/// Tellusim::ControlSlider::FormatCallback
NS_SWIFT_NAME(ControlSlider.FormatCallback)
@protocol TSControlSliderFormatCallback <NSObject>
	-(NSString* _Nonnull)run: (TSControlSlider* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlSlider::PressedCallback
NS_SWIFT_NAME(ControlSlider.PressedCallback)
@protocol TSControlSliderPressedCallback <NSObject>
	-(void)run: (TSControlSlider* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlSlider::ReleasedCallback
NS_SWIFT_NAME(ControlSlider.ReleasedCallback)
@protocol TSControlSliderReleasedCallback <NSObject>
	-(void)run: (TSControlSlider* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlSlider::ClickedCallback
NS_SWIFT_NAME(ControlSlider.ClickedCallback)
@protocol TSControlSliderClickedCallback <NSObject>
	-(void)run: (TSControlSlider* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlSlider::ChangedCallback
NS_SWIFT_NAME(ControlSlider.ChangedCallback)
@protocol TSControlSliderChangedCallback <NSObject>
	-(void)run: (TSControlSlider* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlSlider
NS_SWIFT_NAME(ControlSlider)
TS_CAPI @interface TSControlSlider : TSControlText
	-(id _Nonnull)init_8 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_9: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_9_: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	-(id _Nonnull)init_10: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_10_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text NS_SWIFT_NAME(init(parent:text:));
	-(id _Nonnull)init_11: (TSControl* _Nonnull)parent text: (const TSString* _Nonnull)text NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_11_: (TSControl* _Nonnull)parent text: (const TSString* _Nonnull)text NS_SWIFT_NAME(init(parent:text:));
	-(id _Nonnull)init_12: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text digits: (uint32_t)digits NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_12_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text digits: (uint32_t)digits NS_SWIFT_NAME(init(parent:text:digits:));
	-(id _Nonnull)init_13: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text digits: (uint32_t)digits value: (float64_t)value NS_SWIFT_NAME(init(_:_:_:_:));
	-(id _Nonnull)init_13_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text digits: (uint32_t)digits value: (float64_t)value NS_SWIFT_NAME(init(parent:text:digits:value:));
	-(id _Nonnull)init_14: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text digits: (uint32_t)digits value: (float64_t)value min: (float64_t)min max: (float64_t)max NS_SWIFT_NAME(init(_:_:_:_:_:_:));
	-(id _Nonnull)init_14_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text digits: (uint32_t)digits value: (float64_t)value min: (float64_t)min max: (float64_t)max NS_SWIFT_NAME(init(parent:text:digits:value:min:max:));
	-(id _Nonnull)init_15: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text value: (float64_t)value min: (float64_t)min max: (float64_t)max NS_SWIFT_NAME(init(_:_:_:_:_:));
	-(id _Nonnull)init_15_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text value: (float64_t)value min: (float64_t)min max: (float64_t)max NS_SWIFT_NAME(init(parent:text:value:min:max:));
	-(id _Nonnull)init_16: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text value: (uint32_t)value min: (uint32_t)min max: (uint32_t)max NS_SWIFT_NAME(init(_:_:_:_:_:));
	-(id _Nonnull)init_16_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text value: (uint32_t)value min: (uint32_t)min max: (uint32_t)max NS_SWIFT_NAME(init(parent:text:value:min:max:));
	-(id _Nonnull)init_17: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text value: (int32_t)value min: (int32_t)min max: (int32_t)max NS_SWIFT_NAME(init(_:_:_:_:_:));
	-(id _Nonnull)init_17_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text value: (int32_t)value min: (int32_t)min max: (int32_t)max NS_SWIFT_NAME(init(parent:text:value:min:max:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ControlSlider* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ControlSlider&)p;
		-(Tellusim::ControlSlider* _Nonnull)pointer;
		-(Tellusim::ControlSlider&)ref;
	#endif
	-(id _Nonnull)initControlText: (TSControlText* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControlText* _Nonnull)getControlText;
	-(id _Nonnull)initControl: (TSControl* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControl* _Nonnull)getControl;
	-(BOOL)equalPtr: (const TSControlSlider* _Nonnull)p;
	-(TSControlSlider* _Nonnull)copyPtr;
	-(TSControlSlider* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControlSlider* _Nonnull)null;
	-(void)setConstrained: (BOOL)constrained NS_SWIFT_NAME(setConstrained(_:));
	-(void)setConstrained_: (BOOL)constrained NS_SWIFT_NAME(setConstrained(constrained:));
	-(BOOL)isConstrained;
	-(void)setTextEnabled: (BOOL)enabled NS_SWIFT_NAME(setTextEnabled(_:));
	-(void)setTextEnabled_: (BOOL)enabled NS_SWIFT_NAME(setTextEnabled(enabled:));
	-(BOOL)isTextEnabled;
	-(void)setSliderColor: (TSColor)color NS_SWIFT_NAME(setSliderColor(_:));
	-(void)setSliderColor_: (TSColor)color NS_SWIFT_NAME(setSliderColor(color:));
	-(TSColor)getSliderColor NS_SWIFT_NAME(sliderColor());
	-(void)setDigits: (uint32_t)digits NS_SWIFT_NAME(setDigits(_:));
	-(void)setDigits_: (uint32_t)digits NS_SWIFT_NAME(setDigits(digits:));
	-(uint32_t)getDigits NS_SWIFT_NAME(digits());
	-(void)setStep: (float64_t)step NS_SWIFT_NAME(setStep(_:));
	-(void)setStep_: (float64_t)step NS_SWIFT_NAME(setStep(step:));
	-(float64_t)getStep NS_SWIFT_NAME(step());
	-(void)setBase: (float64_t)base NS_SWIFT_NAME(setBase(_:));
	-(void)setBase_: (float64_t)base NS_SWIFT_NAME(setBase(base:));
	-(float64_t)getBase NS_SWIFT_NAME(base());
	-(void)setFormat: (const char* _Nonnull)format NS_SWIFT_NAME(setFormat(_:));
	-(void)setFormat_: (const char* _Nonnull)format NS_SWIFT_NAME(setFormat(format:));
	-(void)setFormat_1: (const TSString* _Nonnull)format NS_SWIFT_NAME(setFormat(_:));
	-(void)setFormat_1_: (const TSString* _Nonnull)format NS_SWIFT_NAME(setFormat(format:));
	-(NSString* _Nonnull)getFormat NS_SWIFT_NAME(format());
	-(void)setValue: (float64_t)value NS_SWIFT_NAME(setValue(_:));
	-(void)setValue_: (float64_t)value NS_SWIFT_NAME(setValue(value:));
	-(void)setValue_1: (float64_t)value callback: (BOOL)callback NS_SWIFT_NAME(setValue(_:_:));
	-(void)setValue_1_: (float64_t)value callback: (BOOL)callback NS_SWIFT_NAME(setValue(value:callback:));
	-(void)setValue_2: (float64_t)value callback: (BOOL)callback exponent: (BOOL)exponent NS_SWIFT_NAME(setValue(_:_:_:));
	-(void)setValue_2_: (float64_t)value callback: (BOOL)callback exponent: (BOOL)exponent NS_SWIFT_NAME(setValue(value:callback:exponent:));
	-(float64_t)getValue NS_SWIFT_NAME(value());
	-(float64_t)getValue_1: (BOOL)exponent NS_SWIFT_NAME(value(_:));
	-(float64_t)getValue_1_: (BOOL)exponent NS_SWIFT_NAME(value(exponent:));
	-(float32_t)getValuef32 NS_SWIFT_NAME(valuef32());
	-(float32_t)getValuef32_1: (BOOL)exponent NS_SWIFT_NAME(valuef32(_:));
	-(float32_t)getValuef32_1_: (BOOL)exponent NS_SWIFT_NAME(valuef32(exponent:));
	-(uint32_t)getValueu32 NS_SWIFT_NAME(valueu32());
	-(uint32_t)getValueu32_1: (BOOL)exponent NS_SWIFT_NAME(valueu32(_:));
	-(uint32_t)getValueu32_1_: (BOOL)exponent NS_SWIFT_NAME(valueu32(exponent:));
	-(int32_t)getValuei32 NS_SWIFT_NAME(valuei32());
	-(int32_t)getValuei32_1: (BOOL)exponent NS_SWIFT_NAME(valuei32(_:));
	-(int32_t)getValuei32_1_: (BOOL)exponent NS_SWIFT_NAME(valuei32(exponent:));
	-(void)setRange: (float64_t)min max: (float64_t)max NS_SWIFT_NAME(setRange(_:_:));
	-(void)setRange_: (float64_t)min max: (float64_t)max NS_SWIFT_NAME(setRange(min:max:));
	-(void)setRange_1: (float64_t)min max: (float64_t)max exponent: (BOOL)exponent NS_SWIFT_NAME(setRange(_:_:_:));
	-(void)setRange_1_: (float64_t)min max: (float64_t)max exponent: (BOOL)exponent NS_SWIFT_NAME(setRange(min:max:exponent:));
	-(float64_t)getMinRange NS_SWIFT_NAME(minRange());
	-(float64_t)getMinRange_1: (BOOL)exponent NS_SWIFT_NAME(minRange(_:));
	-(float64_t)getMinRange_1_: (BOOL)exponent NS_SWIFT_NAME(minRange(exponent:));
	-(float64_t)getMaxRange NS_SWIFT_NAME(maxRange());
	-(float64_t)getMaxRange_1: (BOOL)exponent NS_SWIFT_NAME(maxRange(_:));
	-(float64_t)getMaxRange_1_: (BOOL)exponent NS_SWIFT_NAME(maxRange(exponent:));
	-(void)setHandleSize: (float32_t)size NS_SWIFT_NAME(setHandleSize(_:));
	-(void)setHandleSize_: (float32_t)size NS_SWIFT_NAME(setHandleSize(size:));
	-(float32_t)getHandleSize NS_SWIFT_NAME(handleSize());
	-(void)setFormatCallback: (id<TSControlSliderFormatCallback> _Nullable)func NS_SWIFT_NAME(setFormatCallback(_:));
	-(void)setFormatCallback_: (id<TSControlSliderFormatCallback> _Nullable)func NS_SWIFT_NAME(setFormatCallback(func:));
	-(void)setPressedCallback: (id<TSControlSliderPressedCallback> _Nullable)func NS_SWIFT_NAME(setPressedCallback(_:));
	-(void)setPressedCallback_: (id<TSControlSliderPressedCallback> _Nullable)func NS_SWIFT_NAME(setPressedCallback(func:));
	-(BOOL)isPressed;
	-(void)setReleasedCallback: (id<TSControlSliderReleasedCallback> _Nullable)func NS_SWIFT_NAME(setReleasedCallback(_:));
	-(void)setReleasedCallback_: (id<TSControlSliderReleasedCallback> _Nullable)func NS_SWIFT_NAME(setReleasedCallback(func:));
	-(BOOL)isReleased;
	-(void)setClickedCallback: (id<TSControlSliderClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(_:));
	-(void)setClickedCallback_: (id<TSControlSliderClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(func:));
	-(void)setClicked2Callback: (id<TSControlSliderClickedCallback> _Nullable)func NS_SWIFT_NAME(setClicked2Callback(_:));
	-(void)setClicked2Callback_: (id<TSControlSliderClickedCallback> _Nullable)func NS_SWIFT_NAME(setClicked2Callback(func:));
	-(void)setClickedRightCallback: (id<TSControlSliderClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedRightCallback(_:));
	-(void)setClickedRightCallback_: (id<TSControlSliderClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedRightCallback(func:));
	-(BOOL)isClicked;
	-(void)setChangedCallback: (id<TSControlSliderChangedCallback> _Nullable)func NS_SWIFT_NAME(setChangedCallback(_:));
	-(void)setChangedCallback_: (id<TSControlSliderChangedCallback> _Nullable)func NS_SWIFT_NAME(setChangedCallback(func:));
	-(BOOL)isChanged NS_SWIFT_NAME(isChanged());
	-(BOOL)isChanged_1: (BOOL)clear NS_SWIFT_NAME(isChanged(_:));
	-(BOOL)isChanged_1_: (BOOL)clear NS_SWIFT_NAME(isChanged(clear:));
	-(TSCanvasMesh* _Nonnull)getCanvasMesh NS_SWIFT_NAME(canvasMesh());
@end

/// Tellusim::ControlScroll::ClickedCallback
NS_SWIFT_NAME(ControlScroll.ClickedCallback)
@protocol TSControlScrollClickedCallback <NSObject>
	-(void)run: (TSControlScroll* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlScroll::ChangedCallback
NS_SWIFT_NAME(ControlScroll.ChangedCallback)
@protocol TSControlScrollChangedCallback <NSObject>
	-(void)run: (TSControlScroll* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlScroll
NS_SWIFT_NAME(ControlScroll)
TS_CAPI @interface TSControlScroll : TSControlText
	-(id _Nonnull)init_8 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_9: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_9_: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	-(id _Nonnull)init_10: (TSControl* _Nonnull)parent vertical: (BOOL)vertical NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_10_: (TSControl* _Nonnull)parent vertical: (BOOL)vertical NS_SWIFT_NAME(init(parent:vertical:));
	-(id _Nonnull)init_11: (TSControl* _Nonnull)parent value: (float64_t)value NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_11_: (TSControl* _Nonnull)parent value: (float64_t)value NS_SWIFT_NAME(init(parent:value:));
	-(id _Nonnull)init_12: (TSControl* _Nonnull)parent value: (float64_t)value vertical: (BOOL)vertical NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_12_: (TSControl* _Nonnull)parent value: (float64_t)value vertical: (BOOL)vertical NS_SWIFT_NAME(init(parent:value:vertical:));
	-(id _Nonnull)init_13: (TSControl* _Nonnull)parent value: (float64_t)value frame: (float64_t)frame range: (float64_t)range NS_SWIFT_NAME(init(_:_:_:_:));
	-(id _Nonnull)init_13_: (TSControl* _Nonnull)parent value: (float64_t)value frame: (float64_t)frame range: (float64_t)range NS_SWIFT_NAME(init(parent:value:frame:range:));
	-(id _Nonnull)init_14: (TSControl* _Nonnull)parent value: (float64_t)value frame: (float64_t)frame range: (float64_t)range vertical: (BOOL)vertical NS_SWIFT_NAME(init(_:_:_:_:_:));
	-(id _Nonnull)init_14_: (TSControl* _Nonnull)parent value: (float64_t)value frame: (float64_t)frame range: (float64_t)range vertical: (BOOL)vertical NS_SWIFT_NAME(init(parent:value:frame:range:vertical:));
	-(id _Nonnull)init_15: (TSControl* _Nonnull)parent value: (uint32_t)value frame: (uint32_t)frame range: (uint32_t)range NS_SWIFT_NAME(init(_:_:_:_:));
	-(id _Nonnull)init_15_: (TSControl* _Nonnull)parent value: (uint32_t)value frame: (uint32_t)frame range: (uint32_t)range NS_SWIFT_NAME(init(parent:value:frame:range:));
	-(id _Nonnull)init_16: (TSControl* _Nonnull)parent value: (uint32_t)value frame: (uint32_t)frame range: (uint32_t)range vertical: (BOOL)vertical NS_SWIFT_NAME(init(_:_:_:_:_:));
	-(id _Nonnull)init_16_: (TSControl* _Nonnull)parent value: (uint32_t)value frame: (uint32_t)frame range: (uint32_t)range vertical: (BOOL)vertical NS_SWIFT_NAME(init(parent:value:frame:range:vertical:));
	-(id _Nonnull)init_17: (TSControl* _Nonnull)parent value: (int32_t)value frame: (int32_t)frame range: (int32_t)range NS_SWIFT_NAME(init(_:_:_:_:));
	-(id _Nonnull)init_17_: (TSControl* _Nonnull)parent value: (int32_t)value frame: (int32_t)frame range: (int32_t)range NS_SWIFT_NAME(init(parent:value:frame:range:));
	-(id _Nonnull)init_18: (TSControl* _Nonnull)parent value: (int32_t)value frame: (int32_t)frame range: (int32_t)range vertical: (BOOL)vertical NS_SWIFT_NAME(init(_:_:_:_:_:));
	-(id _Nonnull)init_18_: (TSControl* _Nonnull)parent value: (int32_t)value frame: (int32_t)frame range: (int32_t)range vertical: (BOOL)vertical NS_SWIFT_NAME(init(parent:value:frame:range:vertical:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ControlScroll* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ControlScroll&)p;
		-(Tellusim::ControlScroll* _Nonnull)pointer;
		-(Tellusim::ControlScroll&)ref;
	#endif
	-(id _Nonnull)initControlText: (TSControlText* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControlText* _Nonnull)getControlText;
	-(id _Nonnull)initControl: (TSControl* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControl* _Nonnull)getControl;
	-(BOOL)equalPtr: (const TSControlScroll* _Nonnull)p;
	-(TSControlScroll* _Nonnull)copyPtr;
	-(TSControlScroll* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControlScroll* _Nonnull)null;
	-(void)setVertical: (BOOL)vertical NS_SWIFT_NAME(setVertical(_:));
	-(void)setVertical_: (BOOL)vertical NS_SWIFT_NAME(setVertical(vertical:));
	-(void)setVertical_1: (BOOL)vertical text: (BOOL)text NS_SWIFT_NAME(setVertical(_:_:));
	-(void)setVertical_1_: (BOOL)vertical text: (BOOL)text NS_SWIFT_NAME(setVertical(vertical:text:));
	-(BOOL)isHorizontal;
	-(BOOL)isVertical;
	-(void)setPrevText: (const char* _Nonnull)text NS_SWIFT_NAME(setPrevText(_:));
	-(void)setPrevText_: (const char* _Nonnull)text NS_SWIFT_NAME(setPrevText(text:));
	-(void)setPrevText_1: (const TSString* _Nonnull)text NS_SWIFT_NAME(setPrevText(_:));
	-(void)setPrevText_1_: (const TSString* _Nonnull)text NS_SWIFT_NAME(setPrevText(text:));
	-(NSString* _Nonnull)getPrevText NS_SWIFT_NAME(prevText());
	-(void)setNextText: (const char* _Nonnull)text NS_SWIFT_NAME(setNextText(_:));
	-(void)setNextText_: (const char* _Nonnull)text NS_SWIFT_NAME(setNextText(text:));
	-(void)setNextText_1: (const TSString* _Nonnull)text NS_SWIFT_NAME(setNextText(_:));
	-(void)setNextText_1_: (const TSString* _Nonnull)text NS_SWIFT_NAME(setNextText(text:));
	-(NSString* _Nonnull)getNextText NS_SWIFT_NAME(nextText());
	-(void)setScrollColor: (TSColor)color NS_SWIFT_NAME(setScrollColor(_:));
	-(void)setScrollColor_: (TSColor)color NS_SWIFT_NAME(setScrollColor(color:));
	-(TSColor)getScrollColor NS_SWIFT_NAME(scrollColor());
	-(void)setStep: (float64_t)step NS_SWIFT_NAME(setStep(_:));
	-(void)setStep_: (float64_t)step NS_SWIFT_NAME(setStep(step:));
	-(float64_t)getStep NS_SWIFT_NAME(step());
	-(void)setValue: (float64_t)value NS_SWIFT_NAME(setValue(_:));
	-(void)setValue_: (float64_t)value NS_SWIFT_NAME(setValue(value:));
	-(void)setValue_1: (float64_t)value callback: (BOOL)callback NS_SWIFT_NAME(setValue(_:_:));
	-(void)setValue_1_: (float64_t)value callback: (BOOL)callback NS_SWIFT_NAME(setValue(value:callback:));
	-(float64_t)getValue NS_SWIFT_NAME(value());
	-(void)setFrame: (float64_t)frame NS_SWIFT_NAME(setFrame(_:));
	-(void)setFrame_: (float64_t)frame NS_SWIFT_NAME(setFrame(frame:));
	-(float64_t)getFrame NS_SWIFT_NAME(frame());
	-(void)setRange: (float64_t)range NS_SWIFT_NAME(setRange(_:));
	-(void)setRange_: (float64_t)range NS_SWIFT_NAME(setRange(range:));
	-(float64_t)getRange NS_SWIFT_NAME(range());
	-(void)setFrameAlign: (TS_ControlAlign)align NS_SWIFT_NAME(setFrameAlign(_:));
	-(void)setFrameAlign_: (TS_ControlAlign)align NS_SWIFT_NAME(setFrameAlign(align:));
	-(TS_ControlAlign)getFrameAlign NS_SWIFT_NAME(frameAlign());
	-(BOOL)hasFrameAlign: (TS_ControlAlign)align NS_SWIFT_NAME(hasFrameAlign(_:));
	-(BOOL)hasFrameAlign_: (TS_ControlAlign)align NS_SWIFT_NAME(hasFrameAlign(align:));
	-(BOOL)hasFrameAligns: (TS_ControlAlign)aligns NS_SWIFT_NAME(hasFrameAligns(_:));
	-(BOOL)hasFrameAligns_: (TS_ControlAlign)aligns NS_SWIFT_NAME(hasFrameAligns(aligns:));
	-(void)setClickedCallback: (id<TSControlScrollClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(_:));
	-(void)setClickedCallback_: (id<TSControlScrollClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(func:));
	-(BOOL)isClicked;
	-(void)setChangedCallback: (id<TSControlScrollChangedCallback> _Nullable)func NS_SWIFT_NAME(setChangedCallback(_:));
	-(void)setChangedCallback_: (id<TSControlScrollChangedCallback> _Nullable)func NS_SWIFT_NAME(setChangedCallback(func:));
	-(BOOL)isChanged NS_SWIFT_NAME(isChanged());
	-(BOOL)isChanged_1: (BOOL)clear NS_SWIFT_NAME(isChanged(_:));
	-(BOOL)isChanged_1_: (BOOL)clear NS_SWIFT_NAME(isChanged(clear:));
	-(TSCanvasMesh* _Nonnull)getCanvasMesh NS_SWIFT_NAME(canvasMesh());
@end

/// Tellusim::ControlSplit
NS_SWIFT_NAME(ControlSplit)
TS_CAPI @interface TSControlSplit : TSControl
	-(id _Nonnull)init_4 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_5: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_5_: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	-(id _Nonnull)init_6: (TSControl* _Nonnull)parent vertical: (BOOL)vertical NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_6_: (TSControl* _Nonnull)parent vertical: (BOOL)vertical NS_SWIFT_NAME(init(parent:vertical:));
	-(id _Nonnull)init_7: (TSControl* _Nonnull)parent value: (float32_t)value NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_7_: (TSControl* _Nonnull)parent value: (float32_t)value NS_SWIFT_NAME(init(parent:value:));
	-(id _Nonnull)init_8: (TSControl* _Nonnull)parent value: (float32_t)value vertical: (BOOL)vertical NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_8_: (TSControl* _Nonnull)parent value: (float32_t)value vertical: (BOOL)vertical NS_SWIFT_NAME(init(parent:value:vertical:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ControlSplit* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ControlSplit&)p;
		-(Tellusim::ControlSplit* _Nonnull)pointer;
		-(Tellusim::ControlSplit&)ref;
	#endif
	-(id _Nonnull)initControl: (TSControl* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControl* _Nonnull)getControl;
	-(BOOL)equalPtr: (const TSControlSplit* _Nonnull)p;
	-(TSControlSplit* _Nonnull)copyPtr;
	-(TSControlSplit* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControlSplit* _Nonnull)null;
	-(void)setAbsolute: (BOOL)absolute NS_SWIFT_NAME(setAbsolute(_:));
	-(void)setAbsolute_: (BOOL)absolute NS_SWIFT_NAME(setAbsolute(absolute:));
	-(BOOL)isAbsolute;
	-(void)setVertical: (BOOL)vertical NS_SWIFT_NAME(setVertical(_:));
	-(void)setVertical_: (BOOL)vertical NS_SWIFT_NAME(setVertical(vertical:));
	-(BOOL)isHorizontal;
	-(BOOL)isVertical;
	-(void)setValue: (float32_t)value NS_SWIFT_NAME(setValue(_:));
	-(void)setValue_: (float32_t)value NS_SWIFT_NAME(setValue(value:));
	-(float32_t)getValue NS_SWIFT_NAME(value());
	-(void)setHandleSize: (float32_t)size NS_SWIFT_NAME(setHandleSize(_:));
	-(void)setHandleSize_: (float32_t)size NS_SWIFT_NAME(setHandleSize(size:));
	-(float32_t)getHandleSize NS_SWIFT_NAME(handleSize());
	-(TSVector2f)getControlsSize NS_SWIFT_NAME(controlsSize());
@end

/// Tellusim::ControlArea
NS_SWIFT_NAME(ControlArea)
TS_CAPI @interface TSControlArea : TSControl
	-(id _Nonnull)init_4 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_5: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_5_: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	-(id _Nonnull)init_6: (TSControl* _Nonnull)parent columns: (uint32_t)columns NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_6_: (TSControl* _Nonnull)parent columns: (uint32_t)columns NS_SWIFT_NAME(init(parent:columns:));
	-(id _Nonnull)init_7: (TSControl* _Nonnull)parent horizontal: (BOOL)horizontal vertical: (BOOL)vertical NS_SWIFT_NAME(init(_:_:_:));
	-(id _Nonnull)init_7_: (TSControl* _Nonnull)parent horizontal: (BOOL)horizontal vertical: (BOOL)vertical NS_SWIFT_NAME(init(parent:horizontal:vertical:));
	-(id _Nonnull)init_8: (TSControl* _Nonnull)parent columns: (uint32_t)columns x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(init(_:_:_:_:));
	-(id _Nonnull)init_8_: (TSControl* _Nonnull)parent columns: (uint32_t)columns x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(init(parent:columns:x:y:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ControlArea* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ControlArea&)p;
		-(Tellusim::ControlArea* _Nonnull)pointer;
		-(Tellusim::ControlArea&)ref;
	#endif
	-(id _Nonnull)initControl: (TSControl* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControl* _Nonnull)getControl;
	-(BOOL)equalPtr: (const TSControlArea* _Nonnull)p;
	-(TSControlArea* _Nonnull)copyPtr;
	-(TSControlArea* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControlArea* _Nonnull)null;
	-(void)setAbsolute: (BOOL)absolute NS_SWIFT_NAME(setAbsolute(_:));
	-(void)setAbsolute_: (BOOL)absolute NS_SWIFT_NAME(setAbsolute(absolute:));
	-(BOOL)isAbsolute;
	-(void)setScalable: (BOOL)scalable NS_SWIFT_NAME(setScalable(_:));
	-(void)setScalable_: (BOOL)scalable NS_SWIFT_NAME(setScalable(scalable:));
	-(BOOL)isScalable;
	-(void)setScrollable: (BOOL)scrollable NS_SWIFT_NAME(setScrollable(_:));
	-(void)setScrollable_: (BOOL)scrollable NS_SWIFT_NAME(setScrollable(scrollable:));
	-(BOOL)isScrollable;
	-(void)setScale: (float32_t)scale NS_SWIFT_NAME(setScale(_:));
	-(void)setScale_: (float32_t)scale NS_SWIFT_NAME(setScale(scale:));
	-(float32_t)getScale NS_SWIFT_NAME(scale());
	-(void)setScaleRange: (float32_t)min max: (float32_t)max NS_SWIFT_NAME(setScaleRange(_:_:));
	-(void)setScaleRange_: (float32_t)min max: (float32_t)max NS_SWIFT_NAME(setScaleRange(min:max:));
	-(float32_t)getMinScale NS_SWIFT_NAME(minScale());
	-(float32_t)getMaxScale NS_SWIFT_NAME(maxScale());
	-(void)setHorizontalStep: (float64_t)step NS_SWIFT_NAME(setHorizontalStep(_:));
	-(void)setHorizontalStep_: (float64_t)step NS_SWIFT_NAME(setHorizontalStep(step:));
	-(void)setVerticalStep: (float64_t)step NS_SWIFT_NAME(setVerticalStep(_:));
	-(void)setVerticalStep_: (float64_t)step NS_SWIFT_NAME(setVerticalStep(step:));
	-(void)setStep: (float64_t)horizontal vertical: (float64_t)vertical NS_SWIFT_NAME(setStep(_:_:));
	-(void)setStep_: (float64_t)horizontal vertical: (float64_t)vertical NS_SWIFT_NAME(setStep(horizontal:vertical:));
	-(float64_t)getHorizontalStep NS_SWIFT_NAME(horizontalStep());
	-(float64_t)getVerticalStep NS_SWIFT_NAME(verticalStep());
	-(void)setHorizontalValue: (float64_t)value NS_SWIFT_NAME(setHorizontalValue(_:));
	-(void)setHorizontalValue_: (float64_t)value NS_SWIFT_NAME(setHorizontalValue(value:));
	-(void)setVerticalValue: (float64_t)value NS_SWIFT_NAME(setVerticalValue(_:));
	-(void)setVerticalValue_: (float64_t)value NS_SWIFT_NAME(setVerticalValue(value:));
	-(void)setValue: (float64_t)horizontal vertical: (float64_t)vertical NS_SWIFT_NAME(setValue(_:_:));
	-(void)setValue_: (float64_t)horizontal vertical: (float64_t)vertical NS_SWIFT_NAME(setValue(horizontal:vertical:));
	-(float64_t)getHorizontalValue NS_SWIFT_NAME(horizontalValue());
	-(float64_t)getVerticalValue NS_SWIFT_NAME(verticalValue());
	-(void)setFrameAlign: (TS_ControlAlign)align NS_SWIFT_NAME(setFrameAlign(_:));
	-(void)setFrameAlign_: (TS_ControlAlign)align NS_SWIFT_NAME(setFrameAlign(align:));
	-(TS_ControlAlign)getFrameAlign NS_SWIFT_NAME(frameAlign());
	-(float64_t)getHorizontalFrame NS_SWIFT_NAME(horizontalFrame());
	-(float64_t)getVerticalFrame NS_SWIFT_NAME(verticalFrame());
	-(float64_t)getHorizontalRange NS_SWIFT_NAME(horizontalRange());
	-(float64_t)getVerticalRange NS_SWIFT_NAME(verticalRange());
	-(void)setHorizontalEnabled: (BOOL)enabled NS_SWIFT_NAME(setHorizontalEnabled(_:));
	-(void)setHorizontalEnabled_: (BOOL)enabled NS_SWIFT_NAME(setHorizontalEnabled(enabled:));
	-(void)setHorizontalEnabled_1: (BOOL)enabled dynamic: (BOOL)dynamic NS_SWIFT_NAME(setHorizontalEnabled(_:_:));
	-(void)setHorizontalEnabled_1_: (BOOL)enabled dynamic: (BOOL)dynamic NS_SWIFT_NAME(setHorizontalEnabled(enabled:dynamic:));
	-(BOOL)isHorizontalEnabled;
	-(BOOL)isHorizontalDynamic;
	-(BOOL)isHorizontalHidden;
	-(const TSControlScroll* _Nonnull)getHorizontalScroll NS_SWIFT_NAME(horizontalScroll());
	-(void)setVerticalEnabled: (BOOL)enabled NS_SWIFT_NAME(setVerticalEnabled(_:));
	-(void)setVerticalEnabled_: (BOOL)enabled NS_SWIFT_NAME(setVerticalEnabled(enabled:));
	-(void)setVerticalEnabled_1: (BOOL)enabled dynamic: (BOOL)dynamic NS_SWIFT_NAME(setVerticalEnabled(_:_:));
	-(void)setVerticalEnabled_1_: (BOOL)enabled dynamic: (BOOL)dynamic NS_SWIFT_NAME(setVerticalEnabled(enabled:dynamic:));
	-(BOOL)isVerticalEnabled;
	-(BOOL)isVerticalDynamic;
	-(BOOL)isVerticalHidden;
	-(const TSControlScroll* _Nonnull)getVerticalScroll NS_SWIFT_NAME(verticalScroll());
	-(BOOL)setFontSize: (uint32_t)size NS_SWIFT_NAME(setFontSize(_:));
	-(BOOL)setFontSize_: (uint32_t)size NS_SWIFT_NAME(setFontSize(size:));
	-(uint32_t)getFontSize NS_SWIFT_NAME(fontSize());
	-(BOOL)setFontStyle: (TSFontStyle)style NS_SWIFT_NAME(setFontStyle(_:));
	-(BOOL)setFontStyle_: (TSFontStyle)style NS_SWIFT_NAME(setFontStyle(style:));
	-(TSFontStyle)getFontStyleConst NS_SWIFT_NAME(fontStyleConst());
	-(TSFontStyle)getFontStyle NS_SWIFT_NAME(fontStyle());
	-(void)setColumns: (uint32_t)columns NS_SWIFT_NAME(setColumns(_:));
	-(void)setColumns_: (uint32_t)columns NS_SWIFT_NAME(setColumns(columns:));
	-(uint32_t)getColumns NS_SWIFT_NAME(columns());
	-(void)setSpacing: (TSVector2f)spacing NS_SWIFT_NAME(setSpacing(_:));
	-(void)setSpacing_: (TSVector2f)spacing NS_SWIFT_NAME(setSpacing(spacing:));
	-(void)setSpacing_1: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setSpacing(_:_:));
	-(void)setSpacing_1_: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setSpacing(x:y:));
	-(TSVector2f)getSpacing NS_SWIFT_NAME(spacing());
	-(void)setColumnRatio: (uint32_t)index ratio: (float32_t)ratio NS_SWIFT_NAME(setColumnRatio(_:_:));
	-(void)setColumnRatio_: (uint32_t)index ratio: (float32_t)ratio NS_SWIFT_NAME(setColumnRatio(index:ratio:));
	-(float32_t)getColumnRatio: (uint32_t)index NS_SWIFT_NAME(columnRatio(_:));
	-(float32_t)getColumnRatio_: (uint32_t)index NS_SWIFT_NAME(columnRatio(index:));
	-(TSVector2f)getControlsSize NS_SWIFT_NAME(controlsSize());
	-(TSVector2f)getControlsOffset NS_SWIFT_NAME(controlsOffset());
	-(TSRect)getViewRect NS_SWIFT_NAME(viewRect());
@end

/// Tellusim::ControlTree::ChangedCallback
NS_SWIFT_NAME(ControlTree.ChangedCallback)
@protocol TSControlTreeChangedCallback <NSObject>
	-(void)run: (TSControlTree* _Nonnull)a0 item: (uint32_t)item NS_SWIFT_NAME(run(_:_:));
@end

/// Tellusim::ControlTree::DraggedCallback
NS_SWIFT_NAME(ControlTree.DraggedCallback)
@protocol TSControlTreeDraggedCallback <NSObject>
	-(BOOL)run: (TSControlTree* _Nonnull)a0 item: (uint32_t)item NS_SWIFT_NAME(run(_:_:));
@end

/// Tellusim::ControlTree::DroppedCallback
NS_SWIFT_NAME(ControlTree.DroppedCallback)
@protocol TSControlTreeDroppedCallback <NSObject>
	-(void)run: (TSControlTree* _Nonnull)a0 item: (uint32_t)item NS_SWIFT_NAME(run(_:_:));
@end

/// Tellusim::ControlTree::ClickedCallback
NS_SWIFT_NAME(ControlTree.ClickedCallback)
@protocol TSControlTreeClickedCallback <NSObject>
	-(void)run: (TSControlTree* _Nonnull)a0 item: (uint32_t)item NS_SWIFT_NAME(run(_:_:));
@end

/// Tellusim::ControlTree::ExpandedCallback
NS_SWIFT_NAME(ControlTree.ExpandedCallback)
@protocol TSControlTreeExpandedCallback <NSObject>
	-(void)run: (TSControlTree* _Nonnull)a0 item: (uint32_t)item NS_SWIFT_NAME(run(_:_:));
@end

/// Tellusim::ControlTree::SelectedCallback
NS_SWIFT_NAME(ControlTree.SelectedCallback)
@protocol TSControlTreeSelectedCallback <NSObject>
	-(void)run: (TSControlTree* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlTree
NS_SWIFT_NAME(ControlTree)
TS_CAPI @interface TSControlTree : TSControlText
	-(id _Nonnull)init_8 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_9: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_9_: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ControlTree* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ControlTree&)p;
		-(Tellusim::ControlTree* _Nonnull)pointer;
		-(Tellusim::ControlTree&)ref;
	#endif
	-(id _Nonnull)initControlText: (TSControlText* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControlText* _Nonnull)getControlText;
	-(id _Nonnull)initControl: (TSControl* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControl* _Nonnull)getControl;
	-(BOOL)equalPtr: (const TSControlTree* _Nonnull)p;
	-(TSControlTree* _Nonnull)copyPtr;
	-(TSControlTree* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControlTree* _Nonnull)null;
	-(void)setSelectable: (BOOL)selectable NS_SWIFT_NAME(setSelectable(_:));
	-(void)setSelectable_: (BOOL)selectable NS_SWIFT_NAME(setSelectable(selectable:));
	-(BOOL)isSelectable;
	-(void)setMultiSelection: (BOOL)multi_selection NS_SWIFT_NAME(setMultiSelection(_:));
	-(void)setMultiSelection_: (BOOL)multi_selection NS_SWIFT_NAME(setMultiSelection(multi_selection:));
	-(BOOL)isMultiSelection;
	-(void)setFoldedText: (const char* _Nonnull)text NS_SWIFT_NAME(setFoldedText(_:));
	-(void)setFoldedText_: (const char* _Nonnull)text NS_SWIFT_NAME(setFoldedText(text:));
	-(void)setFoldedText_1: (const TSString* _Nonnull)text NS_SWIFT_NAME(setFoldedText(_:));
	-(void)setFoldedText_1_: (const TSString* _Nonnull)text NS_SWIFT_NAME(setFoldedText(text:));
	-(NSString* _Nonnull)getFoldedText NS_SWIFT_NAME(foldedText());
	-(void)setExpandedText: (const char* _Nonnull)text NS_SWIFT_NAME(setExpandedText(_:));
	-(void)setExpandedText_: (const char* _Nonnull)text NS_SWIFT_NAME(setExpandedText(text:));
	-(void)setExpandedText_1: (const TSString* _Nonnull)text NS_SWIFT_NAME(setExpandedText(_:));
	-(void)setExpandedText_1_: (const TSString* _Nonnull)text NS_SWIFT_NAME(setExpandedText(text:));
	-(NSString* _Nonnull)getExpandedText NS_SWIFT_NAME(expandedText());
	-(void)setTexture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setTexture(_:));
	-(void)setTexture_: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(setTexture(texture:));
	-(void)setTexture_1: (TSTexture* _Nonnull)texture rows: (uint32_t)rows NS_SWIFT_NAME(setTexture(_:_:));
	-(void)setTexture_1_: (TSTexture* _Nonnull)texture rows: (uint32_t)rows NS_SWIFT_NAME(setTexture(texture:rows:));
	-(void)setTexture_2: (TSTexture* _Nonnull)texture rows: (uint32_t)rows columns: (uint32_t)columns NS_SWIFT_NAME(setTexture(_:_:_:));
	-(void)setTexture_2_: (TSTexture* _Nonnull)texture rows: (uint32_t)rows columns: (uint32_t)columns NS_SWIFT_NAME(setTexture(texture:rows:columns:));
	-(TSTexture* _Nonnull)getTexture NS_SWIFT_NAME(texture());
	-(void)setTextureName: (const char* _Nonnull)name NS_SWIFT_NAME(setTextureName(_:));
	-(void)setTextureName_: (const char* _Nonnull)name NS_SWIFT_NAME(setTextureName(name:));
	-(void)setTextureName_1: (const char* _Nonnull)name rows: (uint32_t)rows NS_SWIFT_NAME(setTextureName(_:_:));
	-(void)setTextureName_1_: (const char* _Nonnull)name rows: (uint32_t)rows NS_SWIFT_NAME(setTextureName(name:rows:));
	-(void)setTextureName_2: (const char* _Nonnull)name rows: (uint32_t)rows columns: (uint32_t)columns NS_SWIFT_NAME(setTextureName(_:_:_:));
	-(void)setTextureName_2_: (const char* _Nonnull)name rows: (uint32_t)rows columns: (uint32_t)columns NS_SWIFT_NAME(setTextureName(name:rows:columns:));
	-(void)setTextureName_3: (const TSString* _Nonnull)name NS_SWIFT_NAME(setTextureName(_:));
	-(void)setTextureName_3_: (const TSString* _Nonnull)name NS_SWIFT_NAME(setTextureName(name:));
	-(void)setTextureName_4: (const TSString* _Nonnull)name rows: (uint32_t)rows NS_SWIFT_NAME(setTextureName(_:_:));
	-(void)setTextureName_4_: (const TSString* _Nonnull)name rows: (uint32_t)rows NS_SWIFT_NAME(setTextureName(name:rows:));
	-(void)setTextureName_5: (const TSString* _Nonnull)name rows: (uint32_t)rows columns: (uint32_t)columns NS_SWIFT_NAME(setTextureName(_:_:_:));
	-(void)setTextureName_5_: (const TSString* _Nonnull)name rows: (uint32_t)rows columns: (uint32_t)columns NS_SWIFT_NAME(setTextureName(name:rows:columns:));
	-(NSString* _Nonnull)getTextureName NS_SWIFT_NAME(textureName());
	-(void)setTextureGrid: (uint32_t)rows columns: (uint32_t)columns NS_SWIFT_NAME(setTextureGrid(_:_:));
	-(void)setTextureGrid_: (uint32_t)rows columns: (uint32_t)columns NS_SWIFT_NAME(setTextureGrid(rows:columns:));
	-(uint32_t)getTextureRows NS_SWIFT_NAME(textureRows());
	-(uint32_t)getTextureColumns NS_SWIFT_NAME(textureColumns());
	-(void)clearItems;
	-(uint32_t)addItem: (const char* _Nonnull)text NS_SWIFT_NAME(addItem(_:));
	-(uint32_t)addItem_: (const char* _Nonnull)text NS_SWIFT_NAME(addItem(text:));
	-(uint32_t)addItem_1: (const char* _Nonnull)text parent: (uint32_t)parent NS_SWIFT_NAME(addItem(_:_:));
	-(uint32_t)addItem_1_: (const char* _Nonnull)text parent: (uint32_t)parent NS_SWIFT_NAME(addItem(text:parent:));
	-(uint32_t)addItem_2: (const char* _Nonnull)text parent: (uint32_t)parent expanded: (BOOL)expanded NS_SWIFT_NAME(addItem(_:_:_:));
	-(uint32_t)addItem_2_: (const char* _Nonnull)text parent: (uint32_t)parent expanded: (BOOL)expanded NS_SWIFT_NAME(addItem(text:parent:expanded:));
	-(uint32_t)addItem_3: (const TSString* _Nonnull)text NS_SWIFT_NAME(addItem(_:));
	-(uint32_t)addItem_3_: (const TSString* _Nonnull)text NS_SWIFT_NAME(addItem(text:));
	-(uint32_t)addItem_4: (const TSString* _Nonnull)text parent: (uint32_t)parent NS_SWIFT_NAME(addItem(_:_:));
	-(uint32_t)addItem_4_: (const TSString* _Nonnull)text parent: (uint32_t)parent NS_SWIFT_NAME(addItem(text:parent:));
	-(uint32_t)addItem_5: (const TSString* _Nonnull)text parent: (uint32_t)parent expanded: (BOOL)expanded NS_SWIFT_NAME(addItem(_:_:_:));
	-(uint32_t)addItem_5_: (const TSString* _Nonnull)text parent: (uint32_t)parent expanded: (BOOL)expanded NS_SWIFT_NAME(addItem(text:parent:expanded:));
	-(void)removeItem: (uint32_t)item NS_SWIFT_NAME(removeItem(_:));
	-(void)removeItem_: (uint32_t)item NS_SWIFT_NAME(removeItem(item:));
	-(void)removeItem_1: (uint32_t)item children: (BOOL)children NS_SWIFT_NAME(removeItem(_:_:));
	-(void)removeItem_1_: (uint32_t)item children: (BOOL)children NS_SWIFT_NAME(removeItem(item:children:));
	-(void)viewItem: (uint32_t)item NS_SWIFT_NAME(viewItem(_:));
	-(void)viewItem_: (uint32_t)item NS_SWIFT_NAME(viewItem(item:));
	-(uint32_t)getNumItems NS_SWIFT_NAME(numItems());
	-(uint32_t)getItem: (uint32_t)index NS_SWIFT_NAME(item(_:));
	-(uint32_t)getItem_: (uint32_t)index NS_SWIFT_NAME(item(index:));
	-(BOOL)switchItemHidden: (uint32_t)item NS_SWIFT_NAME(switchItemHidden(_:));
	-(BOOL)switchItemHidden_: (uint32_t)item NS_SWIFT_NAME(switchItemHidden(item:));
	-(BOOL)switchItemHidden_1: (uint32_t)item children: (BOOL)children NS_SWIFT_NAME(switchItemHidden(_:_:));
	-(BOOL)switchItemHidden_1_: (uint32_t)item children: (BOOL)children NS_SWIFT_NAME(switchItemHidden(item:children:));
	-(void)setItemHidden: (uint32_t)item hidden: (BOOL)hidden NS_SWIFT_NAME(setItemHidden(_:_:));
	-(void)setItemHidden_: (uint32_t)item hidden: (BOOL)hidden NS_SWIFT_NAME(setItemHidden(item:hidden:));
	-(void)setItemHidden_1: (uint32_t)item hidden: (BOOL)hidden children: (BOOL)children NS_SWIFT_NAME(setItemHidden(_:_:_:));
	-(void)setItemHidden_1_: (uint32_t)item hidden: (BOOL)hidden children: (BOOL)children NS_SWIFT_NAME(setItemHidden(item:hidden:children:));
	-(BOOL)isItemHidden: (uint32_t)item NS_SWIFT_NAME(isItemHidden(_:));
	-(BOOL)isItemHidden_: (uint32_t)item NS_SWIFT_NAME(isItemHidden(item:));
	-(BOOL)switchItemExpanded: (uint32_t)item NS_SWIFT_NAME(switchItemExpanded(_:));
	-(BOOL)switchItemExpanded_: (uint32_t)item NS_SWIFT_NAME(switchItemExpanded(item:));
	-(BOOL)switchItemExpanded_1: (uint32_t)item children: (BOOL)children NS_SWIFT_NAME(switchItemExpanded(_:_:));
	-(BOOL)switchItemExpanded_1_: (uint32_t)item children: (BOOL)children NS_SWIFT_NAME(switchItemExpanded(item:children:));
	-(void)setItemExpanded: (uint32_t)item expanded: (BOOL)expanded NS_SWIFT_NAME(setItemExpanded(_:_:));
	-(void)setItemExpanded_: (uint32_t)item expanded: (BOOL)expanded NS_SWIFT_NAME(setItemExpanded(item:expanded:));
	-(void)setItemExpanded_1: (uint32_t)item expanded: (BOOL)expanded children: (BOOL)children NS_SWIFT_NAME(setItemExpanded(_:_:_:));
	-(void)setItemExpanded_1_: (uint32_t)item expanded: (BOOL)expanded children: (BOOL)children NS_SWIFT_NAME(setItemExpanded(item:expanded:children:));
	-(BOOL)isItemExpanded: (uint32_t)item NS_SWIFT_NAME(isItemExpanded(_:));
	-(BOOL)isItemExpanded_: (uint32_t)item NS_SWIFT_NAME(isItemExpanded(item:));
	-(BOOL)switchItemSelected: (uint32_t)item NS_SWIFT_NAME(switchItemSelected(_:));
	-(BOOL)switchItemSelected_: (uint32_t)item NS_SWIFT_NAME(switchItemSelected(item:));
	-(BOOL)switchItemSelected_1: (uint32_t)item children: (BOOL)children NS_SWIFT_NAME(switchItemSelected(_:_:));
	-(BOOL)switchItemSelected_1_: (uint32_t)item children: (BOOL)children NS_SWIFT_NAME(switchItemSelected(item:children:));
	-(void)setItemSelected: (uint32_t)item selected: (BOOL)selected NS_SWIFT_NAME(setItemSelected(_:_:));
	-(void)setItemSelected_: (uint32_t)item selected: (BOOL)selected NS_SWIFT_NAME(setItemSelected(item:selected:));
	-(void)setItemSelected_1: (uint32_t)item selected: (BOOL)selected children: (BOOL)children NS_SWIFT_NAME(setItemSelected(_:_:_:));
	-(void)setItemSelected_1_: (uint32_t)item selected: (BOOL)selected children: (BOOL)children NS_SWIFT_NAME(setItemSelected(item:selected:children:));
	-(BOOL)isItemSelected: (uint32_t)item NS_SWIFT_NAME(isItemSelected(_:));
	-(BOOL)isItemSelected_: (uint32_t)item NS_SWIFT_NAME(isItemSelected(item:));
	-(void)setItemParent: (uint32_t)item parent: (uint32_t)parent NS_SWIFT_NAME(setItemParent(_:_:));
	-(void)setItemParent_: (uint32_t)item parent: (uint32_t)parent NS_SWIFT_NAME(setItemParent(item:parent:));
	-(uint32_t)getItemParent: (uint32_t)item NS_SWIFT_NAME(itemParent(_:));
	-(uint32_t)getItemParent_: (uint32_t)item NS_SWIFT_NAME(itemParent(item:));
	-(BOOL)isItemParent: (uint32_t)item parent: (uint32_t)parent NS_SWIFT_NAME(isItemParent(_:_:));
	-(BOOL)isItemParent_: (uint32_t)item parent: (uint32_t)parent NS_SWIFT_NAME(isItemParent(item:parent:));
	-(BOOL)isItemParent_1: (uint32_t)item parent: (uint32_t)parent hierarchy: (BOOL)hierarchy NS_SWIFT_NAME(isItemParent(_:_:_:));
	-(BOOL)isItemParent_1_: (uint32_t)item parent: (uint32_t)parent hierarchy: (BOOL)hierarchy NS_SWIFT_NAME(isItemParent(item:parent:hierarchy:));
	-(void)addItemChild: (uint32_t)item child: (uint32_t)child NS_SWIFT_NAME(addItemChild(_:_:));
	-(void)addItemChild_: (uint32_t)item child: (uint32_t)child NS_SWIFT_NAME(addItemChild(item:child:));
	-(void)removeItemChild: (uint32_t)item child: (uint32_t)child NS_SWIFT_NAME(removeItemChild(_:_:));
	-(void)removeItemChild_: (uint32_t)item child: (uint32_t)child NS_SWIFT_NAME(removeItemChild(item:child:));
	-(void)addItemChildren: (uint32_t)item children: (uint32_t* _Nonnull)children children_size: (uint32_t)children_size NS_SWIFT_NAME(addItemChildren(_:_:_:));
	-(void)addItemChildren_: (uint32_t)item children: (uint32_t* _Nonnull)children children_size: (uint32_t)children_size NS_SWIFT_NAME(addItemChildren(item:children:children_size:));
	-(void)removeItemChildren: (uint32_t)item children: (uint32_t* _Nonnull)children children_size: (uint32_t)children_size NS_SWIFT_NAME(removeItemChildren(_:_:_:));
	-(void)removeItemChildren_: (uint32_t)item children: (uint32_t* _Nonnull)children children_size: (uint32_t)children_size NS_SWIFT_NAME(removeItemChildren(item:children:children_size:));
	-(uint32_t)findItemChild: (uint32_t)item child: (uint32_t)child NS_SWIFT_NAME(findItemChild(_:_:));
	-(uint32_t)findItemChild_: (uint32_t)item child: (uint32_t)child NS_SWIFT_NAME(findItemChild(item:child:));
	-(BOOL)isItemChild: (uint32_t)item child: (uint32_t)child NS_SWIFT_NAME(isItemChild(_:_:));
	-(BOOL)isItemChild_: (uint32_t)item child: (uint32_t)child NS_SWIFT_NAME(isItemChild(item:child:));
	-(uint32_t)getNumItemChildren: (uint32_t)item NS_SWIFT_NAME(numItemChildren(_:));
	-(uint32_t)getNumItemChildren_: (uint32_t)item NS_SWIFT_NAME(numItemChildren(item:));
	-(uint32_t)getItemChild: (uint32_t)item index: (uint32_t)index NS_SWIFT_NAME(itemChild(_:_:));
	-(uint32_t)getItemChild_: (uint32_t)item index: (uint32_t)index NS_SWIFT_NAME(itemChild(item:index:));
	-(NSArray<NSNumber*>* _Nonnull)getItemChildren: (uint32_t)item NS_SWIFT_NAME(itemChildren(_:));
	-(NSArray<NSNumber*>* _Nonnull)getItemChildren_: (uint32_t)item NS_SWIFT_NAME(itemChildren(item:));
	-(void)setItemText: (uint32_t)item text: (const char* _Nonnull)text NS_SWIFT_NAME(setItemText(_:_:));
	-(void)setItemText_: (uint32_t)item text: (const char* _Nonnull)text NS_SWIFT_NAME(setItemText(item:text:));
	-(void)setItemText_1: (uint32_t)item text: (const TSString* _Nonnull)text NS_SWIFT_NAME(setItemText(_:_:));
	-(void)setItemText_1_: (uint32_t)item text: (const TSString* _Nonnull)text NS_SWIFT_NAME(setItemText(item:text:));
	-(NSString* _Nonnull)getItemText: (uint32_t)item NS_SWIFT_NAME(itemText(_:));
	-(NSString* _Nonnull)getItemText_: (uint32_t)item NS_SWIFT_NAME(itemText(item:));
	-(uint32_t)findItemText: (const char* _Nonnull)text NS_SWIFT_NAME(findItemText(_:));
	-(uint32_t)findItemText_: (const char* _Nonnull)text NS_SWIFT_NAME(findItemText(text:));
	-(uint32_t)findItemText_1: (const TSString* _Nonnull)text NS_SWIFT_NAME(findItemText(_:));
	-(uint32_t)findItemText_1_: (const TSString* _Nonnull)text NS_SWIFT_NAME(findItemText(text:));
	-(void)setItemColor: (uint32_t)item color: (TSColor)color NS_SWIFT_NAME(setItemColor(_:_:));
	-(void)setItemColor_: (uint32_t)item color: (TSColor)color NS_SWIFT_NAME(setItemColor(item:color:));
	-(TSColor)getItemColor: (uint32_t)item NS_SWIFT_NAME(itemColor(_:));
	-(TSColor)getItemColor_: (uint32_t)item NS_SWIFT_NAME(itemColor(item:));
	-(void)setItemTexture: (uint32_t)item row: (uint32_t)row NS_SWIFT_NAME(setItemTexture(_:_:));
	-(void)setItemTexture_: (uint32_t)item row: (uint32_t)row NS_SWIFT_NAME(setItemTexture(item:row:));
	-(void)setItemTexture_1: (uint32_t)item row: (uint32_t)row column: (uint32_t)column NS_SWIFT_NAME(setItemTexture(_:_:_:));
	-(void)setItemTexture_1_: (uint32_t)item row: (uint32_t)row column: (uint32_t)column NS_SWIFT_NAME(setItemTexture(item:row:column:));
	-(uint32_t)getItemTextureRow: (uint32_t)item NS_SWIFT_NAME(itemTextureRow(_:));
	-(uint32_t)getItemTextureRow_: (uint32_t)item NS_SWIFT_NAME(itemTextureRow(item:));
	-(uint32_t)getItemTextureColumn: (uint32_t)item NS_SWIFT_NAME(itemTextureColumn(_:));
	-(uint32_t)getItemTextureColumn_: (uint32_t)item NS_SWIFT_NAME(itemTextureColumn(item:));
	-(void)setItemData: (uint32_t)item data: (void* _Nonnull)data NS_SWIFT_NAME(setItemData(_:_:));
	-(void)setItemData_: (uint32_t)item data: (void* _Nonnull)data NS_SWIFT_NAME(setItemData(item:data:));
	-(void* _Nonnull)getItemData: (uint32_t)item NS_SWIFT_NAME(itemData(_:));
	-(void* _Nonnull)getItemData_: (uint32_t)item NS_SWIFT_NAME(itemData(item:));
	-(uint32_t)getFocusedItem NS_SWIFT_NAME(focusedItem());
	-(void)setCurrentItem: (uint32_t)item NS_SWIFT_NAME(setCurrentItem(_:));
	-(void)setCurrentItem_: (uint32_t)item NS_SWIFT_NAME(setCurrentItem(item:));
	-(void)setCurrentItem_1: (uint32_t)item select: (BOOL)select NS_SWIFT_NAME(setCurrentItem(_:_:));
	-(void)setCurrentItem_1_: (uint32_t)item select: (BOOL)select NS_SWIFT_NAME(setCurrentItem(item:select:));
	-(void)setCurrentItem_2: (uint32_t)item select: (BOOL)select view: (BOOL)view NS_SWIFT_NAME(setCurrentItem(_:_:_:));
	-(void)setCurrentItem_2_: (uint32_t)item select: (BOOL)select view: (BOOL)view NS_SWIFT_NAME(setCurrentItem(item:select:view:));
	-(void)setCurrentItem_3: (uint32_t)item select: (BOOL)select view: (BOOL)view callback: (BOOL)callback NS_SWIFT_NAME(setCurrentItem(_:_:_:_:));
	-(void)setCurrentItem_3_: (uint32_t)item select: (BOOL)select view: (BOOL)view callback: (BOOL)callback NS_SWIFT_NAME(setCurrentItem(item:select:view:callback:));
	-(uint32_t)getCurrentItem NS_SWIFT_NAME(currentItem());
	-(NSString* _Nonnull)getCurrentText NS_SWIFT_NAME(currentText());
	-(void)setSelection;
	-(void)clearSelection;
	-(void)inverseSelection;
	-(uint32_t)getNumSelectedItems NS_SWIFT_NAME(numSelectedItems());
	-(uint32_t)getSelectedItem: (uint32_t)index NS_SWIFT_NAME(selectedItem(_:));
	-(uint32_t)getSelectedItem_: (uint32_t)index NS_SWIFT_NAME(selectedItem(index:));
	-(NSArray<NSNumber*>* _Nonnull)getSelectedItems NS_SWIFT_NAME(selectedItems());
	-(void)setChangedCallback: (id<TSControlTreeChangedCallback> _Nullable)func NS_SWIFT_NAME(setChangedCallback(_:));
	-(void)setChangedCallback_: (id<TSControlTreeChangedCallback> _Nullable)func NS_SWIFT_NAME(setChangedCallback(func:));
	-(void)setDraggedCallback: (id<TSControlTreeDraggedCallback> _Nullable)func NS_SWIFT_NAME(setDraggedCallback(_:));
	-(void)setDraggedCallback_: (id<TSControlTreeDraggedCallback> _Nullable)func NS_SWIFT_NAME(setDraggedCallback(func:));
	-(void)setDroppedCallback: (id<TSControlTreeDroppedCallback> _Nullable)func NS_SWIFT_NAME(setDroppedCallback(_:));
	-(void)setDroppedCallback_: (id<TSControlTreeDroppedCallback> _Nullable)func NS_SWIFT_NAME(setDroppedCallback(func:));
	-(void)setClickedCallback: (id<TSControlTreeClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(_:));
	-(void)setClickedCallback_: (id<TSControlTreeClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(func:));
	-(void)setClicked2Callback: (id<TSControlTreeClickedCallback> _Nullable)func NS_SWIFT_NAME(setClicked2Callback(_:));
	-(void)setClicked2Callback_: (id<TSControlTreeClickedCallback> _Nullable)func NS_SWIFT_NAME(setClicked2Callback(func:));
	-(void)setClickedRightCallback: (id<TSControlTreeClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedRightCallback(_:));
	-(void)setClickedRightCallback_: (id<TSControlTreeClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedRightCallback(func:));
	-(void)setExpandedCallback: (id<TSControlTreeExpandedCallback> _Nullable)func NS_SWIFT_NAME(setExpandedCallback(_:));
	-(void)setExpandedCallback_: (id<TSControlTreeExpandedCallback> _Nullable)func NS_SWIFT_NAME(setExpandedCallback(func:));
	-(void)setSelectedCallback: (id<TSControlTreeSelectedCallback> _Nullable)func NS_SWIFT_NAME(setSelectedCallback(_:));
	-(void)setSelectedCallback_: (id<TSControlTreeSelectedCallback> _Nullable)func NS_SWIFT_NAME(setSelectedCallback(func:));
@end

/// Tellusim::ControlEdit::ClickedCallback
NS_SWIFT_NAME(ControlEdit.ClickedCallback)
@protocol TSControlEditClickedCallback <NSObject>
	-(void)run: (TSControlEdit* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlEdit::ChangedCallback
NS_SWIFT_NAME(ControlEdit.ChangedCallback)
@protocol TSControlEditChangedCallback <NSObject>
	-(void)run: (TSControlEdit* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlEdit::ReturnedCallback
NS_SWIFT_NAME(ControlEdit.ReturnedCallback)
@protocol TSControlEditReturnedCallback <NSObject>
	-(void)run: (TSControlEdit* _Nonnull)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::ControlEdit
NS_SWIFT_NAME(ControlEdit)
TS_CAPI @interface TSControlEdit : TSControlText
	-(id _Nonnull)init_8 NS_SWIFT_NAME(init());
	-(id _Nonnull)init_9: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_9_: (TSControl* _Nonnull)parent NS_SWIFT_NAME(init(parent:));
	-(id _Nonnull)init_10: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_10_: (TSControl* _Nonnull)parent text: (const char* _Nonnull)text NS_SWIFT_NAME(init(parent:text:));
	-(id _Nonnull)init_11: (TSControl* _Nonnull)parent text: (const TSString* _Nonnull)text NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_11_: (TSControl* _Nonnull)parent text: (const TSString* _Nonnull)text NS_SWIFT_NAME(init(parent:text:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::ControlEdit* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::ControlEdit&)p;
		-(Tellusim::ControlEdit* _Nonnull)pointer;
		-(Tellusim::ControlEdit&)ref;
	#endif
	-(id _Nonnull)initControlText: (TSControlText* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControlText* _Nonnull)getControlText;
	-(id _Nonnull)initControl: (TSControl* _Nonnull)base NS_SWIFT_NAME(init(base:));
	-(TSControl* _Nonnull)getControl;
	-(BOOL)equalPtr: (const TSControlEdit* _Nonnull)p;
	-(TSControlEdit* _Nonnull)copyPtr;
	-(TSControlEdit* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSControlEdit* _Nonnull)null;
	-(void)setFrame: (BOOL)frame NS_SWIFT_NAME(setFrame(_:));
	-(void)setFrame_: (BOOL)frame NS_SWIFT_NAME(setFrame(frame:));
	-(BOOL)getFrame NS_SWIFT_NAME(frame());
	-(void)setBackground: (BOOL)background NS_SWIFT_NAME(setBackground(_:));
	-(void)setBackground_: (BOOL)background NS_SWIFT_NAME(setBackground(background:));
	-(BOOL)getBackground NS_SWIFT_NAME(background());
	-(void)setEditColor: (TSColor)color NS_SWIFT_NAME(setEditColor(_:));
	-(void)setEditColor_: (TSColor)color NS_SWIFT_NAME(setEditColor(color:));
	-(TSColor)getEditColor NS_SWIFT_NAME(editColor());
	-(void)setEditMode: (TS_ControlEditEditMode)mode NS_SWIFT_NAME(setEditMode(_:));
	-(void)setEditMode_: (TS_ControlEditEditMode)mode NS_SWIFT_NAME(setEditMode(mode:));
	-(TS_ControlEditEditMode)getEditMode NS_SWIFT_NAME(editMode());
	-(void)setPasswordCode: (uint32_t)code NS_SWIFT_NAME(setPasswordCode(_:));
	-(void)setPasswordCode_: (uint32_t)code NS_SWIFT_NAME(setPasswordCode(code:));
	-(uint32_t)getPasswordCode NS_SWIFT_NAME(passwordCode());
	-(uint32_t)getNumCodes NS_SWIFT_NAME(numCodes());
	-(const uint32_t* _Nonnull)getCodes NS_SWIFT_NAME(codes());
	-(void)setCurrentIndex: (uint32_t)index NS_SWIFT_NAME(setCurrentIndex(_:));
	-(void)setCurrentIndex_: (uint32_t)index NS_SWIFT_NAME(setCurrentIndex(index:));
	-(void)setCurrentIndex_1: (uint32_t)index selection_index: (uint32_t)selection_index NS_SWIFT_NAME(setCurrentIndex(_:_:));
	-(void)setCurrentIndex_1_: (uint32_t)index selection_index: (uint32_t)selection_index NS_SWIFT_NAME(setCurrentIndex(index:selection_index:));
	-(uint32_t)getCurrentIndex NS_SWIFT_NAME(currentIndex());
	-(uint32_t)getSelectionIndex NS_SWIFT_NAME(selectionIndex());
	-(void)setSelection NS_SWIFT_NAME(setSelection());
	-(void)setSelection_1: (BOOL)current NS_SWIFT_NAME(setSelection(_:));
	-(void)setSelection_1_: (BOOL)current NS_SWIFT_NAME(setSelection(current:));
	-(void)setSelection_2: (BOOL)current changed: (BOOL)changed NS_SWIFT_NAME(setSelection(_:_:));
	-(void)setSelection_2_: (BOOL)current changed: (BOOL)changed NS_SWIFT_NAME(setSelection(current:changed:));
	-(void)clearSelection;
	-(NSString* _Nonnull)getSelectedText NS_SWIFT_NAME(selectedText());
	-(BOOL)updateKeyboard: (TSControlRoot* _Nonnull)root key: (uint32_t)key code: (uint32_t)code NS_SWIFT_NAME(updateKeyboard(_:_:_:));
	-(BOOL)updateKeyboard_: (TSControlRoot* _Nonnull)root key: (uint32_t)key code: (uint32_t)code NS_SWIFT_NAME(updateKeyboard(root:key:code:));
	-(void)setClickedCallback: (id<TSControlEditClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(_:));
	-(void)setClickedCallback_: (id<TSControlEditClickedCallback> _Nullable)func NS_SWIFT_NAME(setClickedCallback(func:));
	-(BOOL)isClicked;
	-(void)setChangedCallback: (id<TSControlEditChangedCallback> _Nullable)func NS_SWIFT_NAME(setChangedCallback(_:));
	-(void)setChangedCallback_: (id<TSControlEditChangedCallback> _Nullable)func NS_SWIFT_NAME(setChangedCallback(func:));
	-(BOOL)isChanged;
	-(void)setReturnedCallback: (id<TSControlEditReturnedCallback> _Nullable)func NS_SWIFT_NAME(setReturnedCallback(_:));
	-(void)setReturnedCallback_: (id<TSControlEditReturnedCallback> _Nullable)func NS_SWIFT_NAME(setReturnedCallback(func:));
	-(BOOL)isReturned;
	-(TSCanvasMesh* _Nonnull)getCanvasMesh NS_SWIFT_NAME(canvasMesh());
@end

/// Tellusim::DialogMessage::UpdateCallback
NS_SWIFT_NAME(DialogMessage.UpdateCallback)
@protocol TSDialogMessageUpdateCallback <NSObject>
	-(BOOL)run;
@end

/// Tellusim::DialogMessage
NS_SWIFT_NAME(DialogMessage)
TS_CAPI @interface TSDialogMessage : NSObject {
		void *impl;
	}
	-(id _Nonnull)init NS_SWIFT_NAME(init());
	-(id _Nonnull)init_1: (const char* _Nullable)title NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (const char* _Nullable)title NS_SWIFT_NAME(init(title:));
	-(id _Nonnull)init_2: (const char* _Nullable)title message: (const char* _Nullable)message NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (const char* _Nullable)title message: (const char* _Nullable)message NS_SWIFT_NAME(init(title:message:));
	-(id _Nonnull)init_3: (const TSString* _Nonnull)title NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_3_: (const TSString* _Nonnull)title NS_SWIFT_NAME(init(title:));
	-(id _Nonnull)init_4: (const TSString* _Nonnull)title message: (const char* _Nullable)message NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_4_: (const TSString* _Nonnull)title message: (const char* _Nullable)message NS_SWIFT_NAME(init(title:message:));
	-(id _Nonnull)init_5: (const char* _Nonnull)title message: (const TSString* _Nonnull)message NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_5_: (const char* _Nonnull)title message: (const TSString* _Nonnull)message NS_SWIFT_NAME(init(title:message:));
	-(id _Nonnull)init_6: (const TSString* _Nonnull)title message: (const TSString* _Nonnull)message NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_6_: (const TSString* _Nonnull)title message: (const TSString* _Nonnull)message NS_SWIFT_NAME(init(title:message:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::DialogMessage* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::DialogMessage&)p;
		-(Tellusim::DialogMessage* _Nonnull)pointer;
		-(Tellusim::DialogMessage&)ref;
	#endif
	-(BOOL)equalPtr: (const TSDialogMessage* _Nonnull)p;
	-(TSDialogMessage* _Nonnull)copyPtr;
	-(TSDialogMessage* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSDialogMessage* _Nonnull)null;
	-(void)setPosition: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setPosition(_:_:));
	-(void)setPosition_: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setPosition(x:y:));
	-(int32_t)getPositionX NS_SWIFT_NAME(positionX());
	-(int32_t)getPositionY NS_SWIFT_NAME(positionY());
	-(void)setTitle: (const char* _Nonnull)title NS_SWIFT_NAME(setTitle(_:));
	-(void)setTitle_: (const char* _Nonnull)title NS_SWIFT_NAME(setTitle(title:));
	-(void)setTitle_1: (const TSString* _Nonnull)title NS_SWIFT_NAME(setTitle(_:));
	-(void)setTitle_1_: (const TSString* _Nonnull)title NS_SWIFT_NAME(setTitle(title:));
	-(NSString* _Nonnull)getTitle NS_SWIFT_NAME(title());
	-(void)setMessage: (const char* _Nonnull)message NS_SWIFT_NAME(setMessage(_:));
	-(void)setMessage_: (const char* _Nonnull)message NS_SWIFT_NAME(setMessage(message:));
	-(void)setMessage_1: (const TSString* _Nonnull)message NS_SWIFT_NAME(setMessage(_:));
	-(void)setMessage_1_: (const TSString* _Nonnull)message NS_SWIFT_NAME(setMessage(message:));
	-(NSString* _Nonnull)getMessage NS_SWIFT_NAME(message());
	-(void)setUpdateCallback: (id<TSDialogMessageUpdateCallback> _Nullable)func NS_SWIFT_NAME(setUpdateCallback(_:));
	-(void)setUpdateCallback_: (id<TSDialogMessageUpdateCallback> _Nullable)func NS_SWIFT_NAME(setUpdateCallback(func:));
	-(TS_DialogMessageResult)run NS_SWIFT_NAME(run());
	-(TS_DialogMessageResult)run_1: (TS_DialogMessageFlags)flags NS_SWIFT_NAME(run(_:));
	-(TS_DialogMessageResult)run_1_: (TS_DialogMessageFlags)flags NS_SWIFT_NAME(run(flags:));
@end

/// Tellusim::DialogFileOpen::UpdateCallback
NS_SWIFT_NAME(DialogFileOpen.UpdateCallback)
@protocol TSDialogFileOpenUpdateCallback <NSObject>
	-(BOOL)run;
@end

/// Tellusim::DialogFileOpen
NS_SWIFT_NAME(DialogFileOpen)
TS_CAPI @interface TSDialogFileOpen : NSObject {
		void *impl;
	}
	-(id _Nonnull)init NS_SWIFT_NAME(init());
	-(id _Nonnull)init_1: (const char* _Nullable)title NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (const char* _Nullable)title NS_SWIFT_NAME(init(title:));
	-(id _Nonnull)init_2: (const char* _Nullable)title name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (const char* _Nullable)title name: (const char* _Nullable)name NS_SWIFT_NAME(init(title:name:));
	-(id _Nonnull)init_3: (const TSString* _Nonnull)title NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_3_: (const TSString* _Nonnull)title NS_SWIFT_NAME(init(title:));
	-(id _Nonnull)init_4: (const TSString* _Nonnull)title name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_4_: (const TSString* _Nonnull)title name: (const char* _Nullable)name NS_SWIFT_NAME(init(title:name:));
	-(id _Nonnull)init_5: (const char* _Nonnull)title name: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_5_: (const char* _Nonnull)title name: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(title:name:));
	-(id _Nonnull)init_6: (const TSString* _Nonnull)title name: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_6_: (const TSString* _Nonnull)title name: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(title:name:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::DialogFileOpen* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::DialogFileOpen&)p;
		-(Tellusim::DialogFileOpen* _Nonnull)pointer;
		-(Tellusim::DialogFileOpen&)ref;
	#endif
	-(BOOL)equalPtr: (const TSDialogFileOpen* _Nonnull)p;
	-(TSDialogFileOpen* _Nonnull)copyPtr;
	-(TSDialogFileOpen* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSDialogFileOpen* _Nonnull)null;
	-(void)setPosition: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setPosition(_:_:));
	-(void)setPosition_: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setPosition(x:y:));
	-(int32_t)getPositionX NS_SWIFT_NAME(positionX());
	-(int32_t)getPositionY NS_SWIFT_NAME(positionY());
	-(void)setTitle: (const char* _Nonnull)title NS_SWIFT_NAME(setTitle(_:));
	-(void)setTitle_: (const char* _Nonnull)title NS_SWIFT_NAME(setTitle(title:));
	-(void)setTitle_1: (const TSString* _Nonnull)title NS_SWIFT_NAME(setTitle(_:));
	-(void)setTitle_1_: (const TSString* _Nonnull)title NS_SWIFT_NAME(setTitle(title:));
	-(NSString* _Nonnull)getTitle NS_SWIFT_NAME(title());
	-(void)setFilter: (const char* _Nonnull)filter NS_SWIFT_NAME(setFilter(_:));
	-(void)setFilter_: (const char* _Nonnull)filter NS_SWIFT_NAME(setFilter(filter:));
	-(void)setFilter_1: (const TSString* _Nonnull)filter NS_SWIFT_NAME(setFilter(_:));
	-(void)setFilter_1_: (const TSString* _Nonnull)filter NS_SWIFT_NAME(setFilter(filter:));
	-(NSString* _Nonnull)getFilter NS_SWIFT_NAME(filter());
	-(void)setFile: (const char* _Nonnull)name NS_SWIFT_NAME(setFile(_:));
	-(void)setFile_: (const char* _Nonnull)name NS_SWIFT_NAME(setFile(name:));
	-(void)setFile_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(setFile(_:));
	-(void)setFile_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(setFile(name:));
	-(NSString* _Nonnull)getFile NS_SWIFT_NAME(file());
	-(void)setUpdateCallback: (id<TSDialogFileOpenUpdateCallback> _Nullable)func NS_SWIFT_NAME(setUpdateCallback(_:));
	-(void)setUpdateCallback_: (id<TSDialogFileOpenUpdateCallback> _Nullable)func NS_SWIFT_NAME(setUpdateCallback(func:));
	-(TS_DialogFileOpenResult)run NS_SWIFT_NAME(run());
	-(TS_DialogFileOpenResult)run_1: (TS_DialogFileOpenFlags)flags NS_SWIFT_NAME(run(_:));
	-(TS_DialogFileOpenResult)run_1_: (TS_DialogFileOpenFlags)flags NS_SWIFT_NAME(run(flags:));
@end

/// Tellusim::DialogFileSave::UpdateCallback
NS_SWIFT_NAME(DialogFileSave.UpdateCallback)
@protocol TSDialogFileSaveUpdateCallback <NSObject>
	-(BOOL)run;
@end

/// Tellusim::DialogFileSave
NS_SWIFT_NAME(DialogFileSave)
TS_CAPI @interface TSDialogFileSave : NSObject {
		void *impl;
	}
	-(id _Nonnull)init NS_SWIFT_NAME(init());
	-(id _Nonnull)init_1: (const char* _Nullable)title NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (const char* _Nullable)title NS_SWIFT_NAME(init(title:));
	-(id _Nonnull)init_2: (const char* _Nullable)title name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (const char* _Nullable)title name: (const char* _Nullable)name NS_SWIFT_NAME(init(title:name:));
	-(id _Nonnull)init_3: (const TSString* _Nonnull)title NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_3_: (const TSString* _Nonnull)title NS_SWIFT_NAME(init(title:));
	-(id _Nonnull)init_4: (const TSString* _Nonnull)title name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_4_: (const TSString* _Nonnull)title name: (const char* _Nullable)name NS_SWIFT_NAME(init(title:name:));
	-(id _Nonnull)init_5: (const char* _Nonnull)title name: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_5_: (const char* _Nonnull)title name: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(title:name:));
	-(id _Nonnull)init_6: (const TSString* _Nonnull)title name: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_6_: (const TSString* _Nonnull)title name: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(title:name:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::DialogFileSave* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::DialogFileSave&)p;
		-(Tellusim::DialogFileSave* _Nonnull)pointer;
		-(Tellusim::DialogFileSave&)ref;
	#endif
	-(BOOL)equalPtr: (const TSDialogFileSave* _Nonnull)p;
	-(TSDialogFileSave* _Nonnull)copyPtr;
	-(TSDialogFileSave* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSDialogFileSave* _Nonnull)null;
	-(void)setPosition: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setPosition(_:_:));
	-(void)setPosition_: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setPosition(x:y:));
	-(int32_t)getPositionX NS_SWIFT_NAME(positionX());
	-(int32_t)getPositionY NS_SWIFT_NAME(positionY());
	-(void)setTitle: (const char* _Nonnull)title NS_SWIFT_NAME(setTitle(_:));
	-(void)setTitle_: (const char* _Nonnull)title NS_SWIFT_NAME(setTitle(title:));
	-(void)setTitle_1: (const TSString* _Nonnull)title NS_SWIFT_NAME(setTitle(_:));
	-(void)setTitle_1_: (const TSString* _Nonnull)title NS_SWIFT_NAME(setTitle(title:));
	-(NSString* _Nonnull)getTitle NS_SWIFT_NAME(title());
	-(void)setFilter: (const char* _Nonnull)filter NS_SWIFT_NAME(setFilter(_:));
	-(void)setFilter_: (const char* _Nonnull)filter NS_SWIFT_NAME(setFilter(filter:));
	-(void)setFilter_1: (const TSString* _Nonnull)filter NS_SWIFT_NAME(setFilter(_:));
	-(void)setFilter_1_: (const TSString* _Nonnull)filter NS_SWIFT_NAME(setFilter(filter:));
	-(NSString* _Nonnull)getFilter NS_SWIFT_NAME(filter());
	-(void)setFile: (const char* _Nonnull)name NS_SWIFT_NAME(setFile(_:));
	-(void)setFile_: (const char* _Nonnull)name NS_SWIFT_NAME(setFile(name:));
	-(void)setFile_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(setFile(_:));
	-(void)setFile_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(setFile(name:));
	-(NSString* _Nonnull)getFile NS_SWIFT_NAME(file());
	-(void)setUpdateCallback: (id<TSDialogFileSaveUpdateCallback> _Nullable)func NS_SWIFT_NAME(setUpdateCallback(_:));
	-(void)setUpdateCallback_: (id<TSDialogFileSaveUpdateCallback> _Nullable)func NS_SWIFT_NAME(setUpdateCallback(func:));
	-(TS_DialogFileSaveResult)run NS_SWIFT_NAME(run());
	-(TS_DialogFileSaveResult)run_1: (TS_DialogFileSaveFlags)flags NS_SWIFT_NAME(run(_:));
	-(TS_DialogFileSaveResult)run_1_: (TS_DialogFileSaveFlags)flags NS_SWIFT_NAME(run(flags:));
@end

/// Tellusim::DialogDirectory::UpdateCallback
NS_SWIFT_NAME(DialogDirectory.UpdateCallback)
@protocol TSDialogDirectoryUpdateCallback <NSObject>
	-(BOOL)run;
@end

/// Tellusim::DialogDirectory
NS_SWIFT_NAME(DialogDirectory)
TS_CAPI @interface TSDialogDirectory : NSObject {
		void *impl;
	}
	-(id _Nonnull)init NS_SWIFT_NAME(init());
	-(id _Nonnull)init_1: (const char* _Nullable)title NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (const char* _Nullable)title NS_SWIFT_NAME(init(title:));
	-(id _Nonnull)init_2: (const char* _Nullable)title name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (const char* _Nullable)title name: (const char* _Nullable)name NS_SWIFT_NAME(init(title:name:));
	-(id _Nonnull)init_3: (const TSString* _Nonnull)title NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_3_: (const TSString* _Nonnull)title NS_SWIFT_NAME(init(title:));
	-(id _Nonnull)init_4: (const TSString* _Nonnull)title name: (const char* _Nullable)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_4_: (const TSString* _Nonnull)title name: (const char* _Nullable)name NS_SWIFT_NAME(init(title:name:));
	-(id _Nonnull)init_5: (const char* _Nonnull)title name: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_5_: (const char* _Nonnull)title name: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(title:name:));
	-(id _Nonnull)init_6: (const TSString* _Nonnull)title name: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_6_: (const TSString* _Nonnull)title name: (const TSString* _Nonnull)name NS_SWIFT_NAME(init(title:name:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::DialogDirectory* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::DialogDirectory&)p;
		-(Tellusim::DialogDirectory* _Nonnull)pointer;
		-(Tellusim::DialogDirectory&)ref;
	#endif
	-(BOOL)equalPtr: (const TSDialogDirectory* _Nonnull)p;
	-(TSDialogDirectory* _Nonnull)copyPtr;
	-(TSDialogDirectory* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSDialogDirectory* _Nonnull)null;
	-(void)setPosition: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setPosition(_:_:));
	-(void)setPosition_: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setPosition(x:y:));
	-(int32_t)getPositionX NS_SWIFT_NAME(positionX());
	-(int32_t)getPositionY NS_SWIFT_NAME(positionY());
	-(void)setTitle: (const char* _Nonnull)title NS_SWIFT_NAME(setTitle(_:));
	-(void)setTitle_: (const char* _Nonnull)title NS_SWIFT_NAME(setTitle(title:));
	-(void)setTitle_1: (const TSString* _Nonnull)title NS_SWIFT_NAME(setTitle(_:));
	-(void)setTitle_1_: (const TSString* _Nonnull)title NS_SWIFT_NAME(setTitle(title:));
	-(NSString* _Nonnull)getTitle NS_SWIFT_NAME(title());
	-(void)setDirectory: (const char* _Nonnull)name NS_SWIFT_NAME(setDirectory(_:));
	-(void)setDirectory_: (const char* _Nonnull)name NS_SWIFT_NAME(setDirectory(name:));
	-(void)setDirectory_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(setDirectory(_:));
	-(void)setDirectory_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(setDirectory(name:));
	-(NSString* _Nonnull)getDirectory NS_SWIFT_NAME(directory());
	-(void)setUpdateCallback: (id<TSDialogDirectoryUpdateCallback> _Nullable)func NS_SWIFT_NAME(setUpdateCallback(_:));
	-(void)setUpdateCallback_: (id<TSDialogDirectoryUpdateCallback> _Nullable)func NS_SWIFT_NAME(setUpdateCallback(func:));
	-(TS_DialogDirectoryResult)run NS_SWIFT_NAME(run());
	-(TS_DialogDirectoryResult)run_1: (TS_DialogDirectoryFlags)flags NS_SWIFT_NAME(run(_:));
	-(TS_DialogDirectoryResult)run_1_: (TS_DialogDirectoryFlags)flags NS_SWIFT_NAME(run(flags:));
@end

/// Tellusim::DialogProgress
NS_SWIFT_NAME(DialogProgress)
TS_CAPI @interface TSDialogProgress : NSObject {
		void *impl;
	}
	-(id _Nonnull)init NS_SWIFT_NAME(init());
	-(id _Nonnull)init_1: (const char* _Nullable)title NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (const char* _Nullable)title NS_SWIFT_NAME(init(title:));
	-(id _Nonnull)init_2: (const char* _Nullable)title message: (const char* _Nullable)message NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (const char* _Nullable)title message: (const char* _Nullable)message NS_SWIFT_NAME(init(title:message:));
	-(id _Nonnull)init_3: (const TSString* _Nonnull)title NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_3_: (const TSString* _Nonnull)title NS_SWIFT_NAME(init(title:));
	-(id _Nonnull)init_4: (const TSString* _Nonnull)title message: (const char* _Nullable)message NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_4_: (const TSString* _Nonnull)title message: (const char* _Nullable)message NS_SWIFT_NAME(init(title:message:));
	-(id _Nonnull)init_5: (const char* _Nonnull)title message: (const TSString* _Nonnull)message NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_5_: (const char* _Nonnull)title message: (const TSString* _Nonnull)message NS_SWIFT_NAME(init(title:message:));
	-(id _Nonnull)init_6: (const TSString* _Nonnull)title message: (const TSString* _Nonnull)message NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_6_: (const TSString* _Nonnull)title message: (const TSString* _Nonnull)message NS_SWIFT_NAME(init(title:message:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::DialogProgress* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::DialogProgress&)p;
		-(Tellusim::DialogProgress* _Nonnull)pointer;
		-(Tellusim::DialogProgress&)ref;
	#endif
	-(BOOL)equalPtr: (const TSDialogProgress* _Nonnull)p;
	-(TSDialogProgress* _Nonnull)copyPtr;
	-(TSDialogProgress* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSDialogProgress* _Nonnull)null;
	-(void)setPosition: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setPosition(_:_:));
	-(void)setPosition_: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setPosition(x:y:));
	-(int32_t)getPositionX NS_SWIFT_NAME(positionX());
	-(int32_t)getPositionY NS_SWIFT_NAME(positionY());
	-(void)setTitle: (const char* _Nonnull)title NS_SWIFT_NAME(setTitle(_:));
	-(void)setTitle_: (const char* _Nonnull)title NS_SWIFT_NAME(setTitle(title:));
	-(void)setTitle_1: (const TSString* _Nonnull)title NS_SWIFT_NAME(setTitle(_:));
	-(void)setTitle_1_: (const TSString* _Nonnull)title NS_SWIFT_NAME(setTitle(title:));
	-(NSString* _Nonnull)getTitle NS_SWIFT_NAME(title());
	-(void)setMessage: (const char* _Nonnull)message NS_SWIFT_NAME(setMessage(_:));
	-(void)setMessage_: (const char* _Nonnull)message NS_SWIFT_NAME(setMessage(message:));
	-(void)setMessage_1: (const TSString* _Nonnull)message NS_SWIFT_NAME(setMessage(_:));
	-(void)setMessage_1_: (const TSString* _Nonnull)message NS_SWIFT_NAME(setMessage(message:));
	-(NSString* _Nonnull)getMessage NS_SWIFT_NAME(message());
	-(void)setProgress: (uint32_t)progress NS_SWIFT_NAME(setProgress(_:));
	-(void)setProgress_: (uint32_t)progress NS_SWIFT_NAME(setProgress(progress:));
	-(uint32_t)getProgress NS_SWIFT_NAME(progress());
	-(TS_DialogProgressResult)run NS_SWIFT_NAME(run());
	-(TS_DialogProgressResult)run_1: (TS_DialogProgressFlags)flags NS_SWIFT_NAME(run(_:));
	-(TS_DialogProgressResult)run_1_: (TS_DialogProgressFlags)flags NS_SWIFT_NAME(run(flags:));
	-(void)close;
@end

/// Tellusim::DialogColor::ChangedCallback
NS_SWIFT_NAME(DialogColor.ChangedCallback)
@protocol TSDialogColorChangedCallback <NSObject>
	-(void)run: (TSColor)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::DialogColor::UpdateCallback
NS_SWIFT_NAME(DialogColor.UpdateCallback)
@protocol TSDialogColorUpdateCallback <NSObject>
	-(BOOL)run;
@end

/// Tellusim::DialogColor
NS_SWIFT_NAME(DialogColor)
TS_CAPI @interface TSDialogColor : NSObject {
		void *impl;
	}
	-(id _Nonnull)init NS_SWIFT_NAME(init());
	-(id _Nonnull)init_1: (const char* _Nullable)title NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (const char* _Nullable)title NS_SWIFT_NAME(init(title:));
	-(id _Nonnull)init_2: (const char* _Nullable)title color: (TSColor)color NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_2_: (const char* _Nullable)title color: (TSColor)color NS_SWIFT_NAME(init(title:color:));
	-(id _Nonnull)init_3: (const TSString* _Nonnull)title NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_3_: (const TSString* _Nonnull)title NS_SWIFT_NAME(init(title:));
	-(id _Nonnull)init_4: (const TSString* _Nonnull)title color: (TSColor)color NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_4_: (const TSString* _Nonnull)title color: (TSColor)color NS_SWIFT_NAME(init(title:color:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::DialogColor* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::DialogColor&)p;
		-(Tellusim::DialogColor* _Nonnull)pointer;
		-(Tellusim::DialogColor&)ref;
	#endif
	-(BOOL)equalPtr: (const TSDialogColor* _Nonnull)p;
	-(TSDialogColor* _Nonnull)copyPtr;
	-(TSDialogColor* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSDialogColor* _Nonnull)null;
	-(void)setPosition: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setPosition(_:_:));
	-(void)setPosition_: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setPosition(x:y:));
	-(int32_t)getPositionX NS_SWIFT_NAME(positionX());
	-(int32_t)getPositionY NS_SWIFT_NAME(positionY());
	-(void)setTitle: (const char* _Nonnull)title NS_SWIFT_NAME(setTitle(_:));
	-(void)setTitle_: (const char* _Nonnull)title NS_SWIFT_NAME(setTitle(title:));
	-(void)setTitle_1: (const TSString* _Nonnull)title NS_SWIFT_NAME(setTitle(_:));
	-(void)setTitle_1_: (const TSString* _Nonnull)title NS_SWIFT_NAME(setTitle(title:));
	-(NSString* _Nonnull)getTitle NS_SWIFT_NAME(title());
	-(void)setColor: (TSColor)color NS_SWIFT_NAME(setColor(_:));
	-(void)setColor_: (TSColor)color NS_SWIFT_NAME(setColor(color:));
	-(void)setColor_1: (TSColor)color callback: (BOOL)callback NS_SWIFT_NAME(setColor(_:_:));
	-(void)setColor_1_: (TSColor)color callback: (BOOL)callback NS_SWIFT_NAME(setColor(color:callback:));
	-(TSColor)getColor NS_SWIFT_NAME(color());
	-(void)setChangedCallback: (id<TSDialogColorChangedCallback> _Nullable)func NS_SWIFT_NAME(setChangedCallback(_:));
	-(void)setChangedCallback_: (id<TSDialogColorChangedCallback> _Nullable)func NS_SWIFT_NAME(setChangedCallback(func:));
	-(void)setUpdateCallback: (id<TSDialogColorUpdateCallback> _Nullable)func NS_SWIFT_NAME(setUpdateCallback(_:));
	-(void)setUpdateCallback_: (id<TSDialogColorUpdateCallback> _Nullable)func NS_SWIFT_NAME(setUpdateCallback(func:));
	-(TS_DialogColorResult)run NS_SWIFT_NAME(run());
	-(TS_DialogColorResult)run_1: (TS_DialogColorFlags)flags NS_SWIFT_NAME(run(_:));
	-(TS_DialogColorResult)run_1_: (TS_DialogColorFlags)flags NS_SWIFT_NAME(run(flags:));
@end

/// Tellusim::DialogMenu::ClickedCallback
NS_SWIFT_NAME(DialogMenu.ClickedCallback)
@protocol TSDialogMenuClickedCallback <NSObject>
	-(void)run;
@end

/// Tellusim::DialogMenu::ChangedCallback
NS_SWIFT_NAME(DialogMenu.ChangedCallback)
@protocol TSDialogMenuChangedCallback <NSObject>
	-(void)run: (BOOL)a0 NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::DialogMenu::UpdateCallback
NS_SWIFT_NAME(DialogMenu.UpdateCallback)
@protocol TSDialogMenuUpdateCallback <NSObject>
	-(BOOL)run;
@end

/// Tellusim::DialogMenu
NS_SWIFT_NAME(DialogMenu)
TS_CAPI @interface TSDialogMenu : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::DialogMenu* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::DialogMenu&)p;
		-(Tellusim::DialogMenu* _Nonnull)pointer;
		-(Tellusim::DialogMenu&)ref;
	#endif
	-(BOOL)equalPtr: (const TSDialogMenu* _Nonnull)p;
	-(TSDialogMenu* _Nonnull)copyPtr;
	-(TSDialogMenu* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSDialogMenu* _Nonnull)null;
	-(void)setPosition: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setPosition(_:_:));
	-(void)setPosition_: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setPosition(x:y:));
	-(int32_t)getPositionX NS_SWIFT_NAME(positionX());
	-(int32_t)getPositionY NS_SWIFT_NAME(positionY());
	-(uint32_t)getNumItems NS_SWIFT_NAME(numItems());
	-(void)setItemText: (uint32_t)index text: (const char* _Nonnull)text NS_SWIFT_NAME(setItemText(_:_:));
	-(void)setItemText_: (uint32_t)index text: (const char* _Nonnull)text NS_SWIFT_NAME(setItemText(index:text:));
	-(void)setItemText_1: (uint32_t)index text: (const TSString* _Nonnull)text NS_SWIFT_NAME(setItemText(_:_:));
	-(void)setItemText_1_: (uint32_t)index text: (const TSString* _Nonnull)text NS_SWIFT_NAME(setItemText(index:text:));
	-(NSString* _Nonnull)getItemText: (uint32_t)index NS_SWIFT_NAME(itemText(_:));
	-(NSString* _Nonnull)getItemText_: (uint32_t)index NS_SWIFT_NAME(itemText(index:));
	-(void)setItemKey: (uint32_t)index key: (const char* _Nonnull)key NS_SWIFT_NAME(setItemKey(_:_:));
	-(void)setItemKey_: (uint32_t)index key: (const char* _Nonnull)key NS_SWIFT_NAME(setItemKey(index:key:));
	-(NSString* _Nonnull)getItemKey: (uint32_t)index NS_SWIFT_NAME(itemKey(_:));
	-(NSString* _Nonnull)getItemKey_: (uint32_t)index NS_SWIFT_NAME(itemKey(index:));
	-(void)setItemImage: (uint32_t)index image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(setItemImage(_:_:));
	-(void)setItemImage_: (uint32_t)index image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(setItemImage(index:image:));
	-(TSImage* _Nonnull)getItemImage: (uint32_t)index NS_SWIFT_NAME(itemImage(_:));
	-(TSImage* _Nonnull)getItemImage_: (uint32_t)index NS_SWIFT_NAME(itemImage(index:));
	-(void)setItemChecked: (uint32_t)index checked: (BOOL)checked NS_SWIFT_NAME(setItemChecked(_:_:));
	-(void)setItemChecked_: (uint32_t)index checked: (BOOL)checked NS_SWIFT_NAME(setItemChecked(index:checked:));
	-(void)setItemChecked_1: (uint32_t)index checked: (BOOL)checked callback: (BOOL)callback NS_SWIFT_NAME(setItemChecked(_:_:_:));
	-(void)setItemChecked_1_: (uint32_t)index checked: (BOOL)checked callback: (BOOL)callback NS_SWIFT_NAME(setItemChecked(index:checked:callback:));
	-(BOOL)isItemChecked: (uint32_t)index NS_SWIFT_NAME(isItemChecked(_:));
	-(BOOL)isItemChecked_: (uint32_t)index NS_SWIFT_NAME(isItemChecked(index:));
	-(void)setItemEnabled: (uint32_t)index enabled: (BOOL)enabled NS_SWIFT_NAME(setItemEnabled(_:_:));
	-(void)setItemEnabled_: (uint32_t)index enabled: (BOOL)enabled NS_SWIFT_NAME(setItemEnabled(index:enabled:));
	-(BOOL)isItemEnabled: (uint32_t)index NS_SWIFT_NAME(isItemEnabled(_:));
	-(BOOL)isItemEnabled_: (uint32_t)index NS_SWIFT_NAME(isItemEnabled(index:));
	-(void)setItemHidden: (uint32_t)index hidden: (BOOL)hidden NS_SWIFT_NAME(setItemHidden(_:_:));
	-(void)setItemHidden_: (uint32_t)index hidden: (BOOL)hidden NS_SWIFT_NAME(setItemHidden(index:hidden:));
	-(BOOL)isItemHidden: (uint32_t)index NS_SWIFT_NAME(isItemHidden(_:));
	-(BOOL)isItemHidden_: (uint32_t)index NS_SWIFT_NAME(isItemHidden(index:));
	-(void)setItemsGroup: (uint32_t)index size: (uint32_t)size NS_SWIFT_NAME(setItemsGroup(_:_:));
	-(void)setItemsGroup_: (uint32_t)index size: (uint32_t)size NS_SWIFT_NAME(setItemsGroup(index:size:));
	-(uint32_t)getItemGroupIndex: (uint32_t)index NS_SWIFT_NAME(itemGroupIndex(_:));
	-(uint32_t)getItemGroupIndex_: (uint32_t)index NS_SWIFT_NAME(itemGroupIndex(index:));
	-(uint32_t)getItemGroupSize: (uint32_t)index NS_SWIFT_NAME(itemGroupSize(_:));
	-(uint32_t)getItemGroupSize_: (uint32_t)index NS_SWIFT_NAME(itemGroupSize(index:));
	-(uint32_t)addItem: (const char* _Nonnull)text NS_SWIFT_NAME(addItem(_:));
	-(uint32_t)addItem_: (const char* _Nonnull)text NS_SWIFT_NAME(addItem(text:));
	-(uint32_t)addItem_1: (const char* _Nonnull)text key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(_:_:));
	-(uint32_t)addItem_1_: (const char* _Nonnull)text key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(text:key:));
	-(uint32_t)addItem_2: (const TSString* _Nonnull)text NS_SWIFT_NAME(addItem(_:));
	-(uint32_t)addItem_2_: (const TSString* _Nonnull)text NS_SWIFT_NAME(addItem(text:));
	-(uint32_t)addItem_3: (const TSString* _Nonnull)text key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(_:_:));
	-(uint32_t)addItem_3_: (const TSString* _Nonnull)text key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(text:key:));
	-(uint32_t)addItem_4: (const char* _Nonnull)text image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(addItem(_:_:));
	-(uint32_t)addItem_4_: (const char* _Nonnull)text image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(addItem(text:image:));
	-(uint32_t)addItem_5: (const char* _Nonnull)text image: (const TSImage* _Nonnull)image key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(_:_:_:));
	-(uint32_t)addItem_5_: (const char* _Nonnull)text image: (const TSImage* _Nonnull)image key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(text:image:key:));
	-(uint32_t)addItem_6: (const TSString* _Nonnull)text image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(addItem(_:_:));
	-(uint32_t)addItem_6_: (const TSString* _Nonnull)text image: (const TSImage* _Nonnull)image NS_SWIFT_NAME(addItem(text:image:));
	-(uint32_t)addItem_7: (const TSString* _Nonnull)text image: (const TSImage* _Nonnull)image key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(_:_:_:));
	-(uint32_t)addItem_7_: (const TSString* _Nonnull)text image: (const TSImage* _Nonnull)image key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(text:image:key:));
	-(uint32_t)addItem_8: (const char* _Nonnull)text func: (id<TSDialogMenuClickedCallback> _Nullable)func NS_SWIFT_NAME(addItem(_:_:));
	-(uint32_t)addItem_8_: (const char* _Nonnull)text func: (id<TSDialogMenuClickedCallback> _Nullable)func NS_SWIFT_NAME(addItem(text:func:));
	-(uint32_t)addItem_9: (const char* _Nonnull)text func: (id<TSDialogMenuClickedCallback> _Nullable)func key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(_:_:_:));
	-(uint32_t)addItem_9_: (const char* _Nonnull)text func: (id<TSDialogMenuClickedCallback> _Nullable)func key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(text:func:key:));
	-(uint32_t)addItem_10: (const TSString* _Nonnull)text func: (id<TSDialogMenuClickedCallback> _Nullable)func NS_SWIFT_NAME(addItem(_:_:));
	-(uint32_t)addItem_10_: (const TSString* _Nonnull)text func: (id<TSDialogMenuClickedCallback> _Nullable)func NS_SWIFT_NAME(addItem(text:func:));
	-(uint32_t)addItem_11: (const TSString* _Nonnull)text func: (id<TSDialogMenuClickedCallback> _Nullable)func key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(_:_:_:));
	-(uint32_t)addItem_11_: (const TSString* _Nonnull)text func: (id<TSDialogMenuClickedCallback> _Nullable)func key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(text:func:key:));
	-(uint32_t)addItem_12: (const char* _Nonnull)text image: (const TSImage* _Nonnull)image func: (id<TSDialogMenuClickedCallback> _Nullable)func NS_SWIFT_NAME(addItem(_:_:_:));
	-(uint32_t)addItem_12_: (const char* _Nonnull)text image: (const TSImage* _Nonnull)image func: (id<TSDialogMenuClickedCallback> _Nullable)func NS_SWIFT_NAME(addItem(text:image:func:));
	-(uint32_t)addItem_13: (const char* _Nonnull)text image: (const TSImage* _Nonnull)image func: (id<TSDialogMenuClickedCallback> _Nullable)func key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(_:_:_:_:));
	-(uint32_t)addItem_13_: (const char* _Nonnull)text image: (const TSImage* _Nonnull)image func: (id<TSDialogMenuClickedCallback> _Nullable)func key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(text:image:func:key:));
	-(uint32_t)addItem_14: (const TSString* _Nonnull)text image: (const TSImage* _Nonnull)image func: (id<TSDialogMenuClickedCallback> _Nullable)func NS_SWIFT_NAME(addItem(_:_:_:));
	-(uint32_t)addItem_14_: (const TSString* _Nonnull)text image: (const TSImage* _Nonnull)image func: (id<TSDialogMenuClickedCallback> _Nullable)func NS_SWIFT_NAME(addItem(text:image:func:));
	-(uint32_t)addItem_15: (const TSString* _Nonnull)text image: (const TSImage* _Nonnull)image func: (id<TSDialogMenuClickedCallback> _Nullable)func key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(_:_:_:_:));
	-(uint32_t)addItem_15_: (const TSString* _Nonnull)text image: (const TSImage* _Nonnull)image func: (id<TSDialogMenuClickedCallback> _Nullable)func key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(text:image:func:key:));
	-(uint32_t)addItem_16: (const char* _Nonnull)text checked: (BOOL)checked func: (id<TSDialogMenuChangedCallback> _Nullable)func NS_SWIFT_NAME(addItem(_:_:_:));
	-(uint32_t)addItem_16_: (const char* _Nonnull)text checked: (BOOL)checked func: (id<TSDialogMenuChangedCallback> _Nullable)func NS_SWIFT_NAME(addItem(text:checked:func:));
	-(uint32_t)addItem_17: (const char* _Nonnull)text checked: (BOOL)checked func: (id<TSDialogMenuChangedCallback> _Nullable)func key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(_:_:_:_:));
	-(uint32_t)addItem_17_: (const char* _Nonnull)text checked: (BOOL)checked func: (id<TSDialogMenuChangedCallback> _Nullable)func key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(text:checked:func:key:));
	-(uint32_t)addItem_18: (const TSString* _Nonnull)text checked: (BOOL)checked func: (id<TSDialogMenuChangedCallback> _Nullable)func NS_SWIFT_NAME(addItem(_:_:_:));
	-(uint32_t)addItem_18_: (const TSString* _Nonnull)text checked: (BOOL)checked func: (id<TSDialogMenuChangedCallback> _Nullable)func NS_SWIFT_NAME(addItem(text:checked:func:));
	-(uint32_t)addItem_19: (const TSString* _Nonnull)text checked: (BOOL)checked func: (id<TSDialogMenuChangedCallback> _Nullable)func key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(_:_:_:_:));
	-(uint32_t)addItem_19_: (const TSString* _Nonnull)text checked: (BOOL)checked func: (id<TSDialogMenuChangedCallback> _Nullable)func key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(text:checked:func:key:));
	-(uint32_t)addItem_20: (const char* _Nonnull)text image: (const TSImage* _Nonnull)image checked: (BOOL)checked func: (id<TSDialogMenuChangedCallback> _Nullable)func NS_SWIFT_NAME(addItem(_:_:_:_:));
	-(uint32_t)addItem_20_: (const char* _Nonnull)text image: (const TSImage* _Nonnull)image checked: (BOOL)checked func: (id<TSDialogMenuChangedCallback> _Nullable)func NS_SWIFT_NAME(addItem(text:image:checked:func:));
	-(uint32_t)addItem_21: (const char* _Nonnull)text image: (const TSImage* _Nonnull)image checked: (BOOL)checked func: (id<TSDialogMenuChangedCallback> _Nullable)func key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(_:_:_:_:_:));
	-(uint32_t)addItem_21_: (const char* _Nonnull)text image: (const TSImage* _Nonnull)image checked: (BOOL)checked func: (id<TSDialogMenuChangedCallback> _Nullable)func key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(text:image:checked:func:key:));
	-(uint32_t)addItem_22: (const TSString* _Nonnull)text image: (const TSImage* _Nonnull)image checked: (BOOL)checked func: (id<TSDialogMenuChangedCallback> _Nullable)func NS_SWIFT_NAME(addItem(_:_:_:_:));
	-(uint32_t)addItem_22_: (const TSString* _Nonnull)text image: (const TSImage* _Nonnull)image checked: (BOOL)checked func: (id<TSDialogMenuChangedCallback> _Nullable)func NS_SWIFT_NAME(addItem(text:image:checked:func:));
	-(uint32_t)addItem_23: (const TSString* _Nonnull)text image: (const TSImage* _Nonnull)image checked: (BOOL)checked func: (id<TSDialogMenuChangedCallback> _Nullable)func key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(_:_:_:_:_:));
	-(uint32_t)addItem_23_: (const TSString* _Nonnull)text image: (const TSImage* _Nonnull)image checked: (BOOL)checked func: (id<TSDialogMenuChangedCallback> _Nullable)func key: (const char* _Nullable)key NS_SWIFT_NAME(addItem(text:image:checked:func:key:));
	-(void)setUpdateCallback: (id<TSDialogMenuUpdateCallback> _Nullable)func NS_SWIFT_NAME(setUpdateCallback(_:));
	-(void)setUpdateCallback_: (id<TSDialogMenuUpdateCallback> _Nullable)func NS_SWIFT_NAME(setUpdateCallback(func:));
	-(TS_DialogMenuResult)run NS_SWIFT_NAME(run());
	-(TS_DialogMenuResult)run_1: (TS_DialogMenuFlags)flags NS_SWIFT_NAME(run(_:));
	-(TS_DialogMenuResult)run_1_: (TS_DialogMenuFlags)flags NS_SWIFT_NAME(run(flags:));
@end

/// Tellusim::CubeFilter
NS_SWIFT_NAME(CubeFilter)
TS_CAPI @interface TSCubeFilter : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::CubeFilter* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::CubeFilter&)p;
		-(Tellusim::CubeFilter* _Nonnull)pointer;
		-(Tellusim::CubeFilter&)ref;
	#endif
	-(BOOL)equalPtr: (const TSCubeFilter* _Nonnull)p;
	-(TSCubeFilter* _Nonnull)copyPtr;
	-(TSCubeFilter* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSCubeFilter* _Nonnull)null;
	-(void)clear;
	-(BOOL)isCreated: (TS_CubeFilterMode)mode NS_SWIFT_NAME(isCreated(_:));
	-(BOOL)isCreated_: (TS_CubeFilterMode)mode NS_SWIFT_NAME(isCreated(mode:));
	-(uint32_t)getGroupSize NS_SWIFT_NAME(groupSize());
	-(uint32_t)getMaxOrder NS_SWIFT_NAME(maxOrder());
	-(uint32_t)getMaxSize NS_SWIFT_NAME(maxSize());
	-(uint32_t)getHarmonics NS_SWIFT_NAME(harmonics());
	-(BOOL)create: (const TSDevice* _Nonnull)device mode: (TS_CubeFilterMode)mode NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_: (const TSDevice* _Nonnull)device mode: (TS_CubeFilterMode)mode NS_SWIFT_NAME(create(device:mode:));
	-(BOOL)create_1: (const TSDevice* _Nonnull)device mode: (TS_CubeFilterMode)mode order: (uint32_t)order NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_1_: (const TSDevice* _Nonnull)device mode: (TS_CubeFilterMode)mode order: (uint32_t)order NS_SWIFT_NAME(create(device:mode:order:));
	-(BOOL)create_2: (const TSDevice* _Nonnull)device mode: (TS_CubeFilterMode)mode order: (uint32_t)order size: (uint32_t)size NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_2_: (const TSDevice* _Nonnull)device mode: (TS_CubeFilterMode)mode order: (uint32_t)order size: (uint32_t)size NS_SWIFT_NAME(create(device:mode:order:size:));
	-(BOOL)create_3: (const TSDevice* _Nonnull)device mode: (TS_CubeFilterMode)mode order: (uint32_t)order size: (uint32_t)size groups: (uint32_t)groups NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_3_: (const TSDevice* _Nonnull)device mode: (TS_CubeFilterMode)mode order: (uint32_t)order size: (uint32_t)size groups: (uint32_t)groups NS_SWIFT_NAME(create(device:mode:order:size:groups:));
	-(BOOL)create_4: (const TSDevice* _Nonnull)device flags: (TS_CubeFilterFlags)flags NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_4_: (const TSDevice* _Nonnull)device flags: (TS_CubeFilterFlags)flags NS_SWIFT_NAME(create(device:flags:));
	-(BOOL)create_5: (const TSDevice* _Nonnull)device flags: (TS_CubeFilterFlags)flags order: (uint32_t)order NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_5_: (const TSDevice* _Nonnull)device flags: (TS_CubeFilterFlags)flags order: (uint32_t)order NS_SWIFT_NAME(create(device:flags:order:));
	-(BOOL)create_6: (const TSDevice* _Nonnull)device flags: (TS_CubeFilterFlags)flags order: (uint32_t)order size: (uint32_t)size NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_6_: (const TSDevice* _Nonnull)device flags: (TS_CubeFilterFlags)flags order: (uint32_t)order size: (uint32_t)size NS_SWIFT_NAME(create(device:flags:order:size:));
	-(BOOL)create_7: (const TSDevice* _Nonnull)device flags: (TS_CubeFilterFlags)flags order: (uint32_t)order size: (uint32_t)size groups: (uint32_t)groups NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_7_: (const TSDevice* _Nonnull)device flags: (TS_CubeFilterFlags)flags order: (uint32_t)order size: (uint32_t)size groups: (uint32_t)groups NS_SWIFT_NAME(create(device:flags:order:size:groups:));
	-(BOOL)dispatch: (TSCompute* _Nonnull)compute buffer: (TSBuffer* _Nonnull)buffer offset: (uint32_t)offset texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_: (TSCompute* _Nonnull)compute buffer: (TSBuffer* _Nonnull)buffer offset: (uint32_t)offset texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice NS_SWIFT_NAME(dispatch(compute:buffer:offset:texture:slice:));
	-(BOOL)dispatch_1: (TSCompute* _Nonnull)compute buffer: (TSBuffer* _Nonnull)buffer offset: (uint32_t)offset texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(dispatch(_:_:_:_:));
	-(BOOL)dispatch_1_: (TSCompute* _Nonnull)compute buffer: (TSBuffer* _Nonnull)buffer offset: (uint32_t)offset texture: (TSTexture* _Nonnull)texture NS_SWIFT_NAME(dispatch(compute:buffer:offset:texture:));
	-(BOOL)dispatch_2: (TSCompute* _Nonnull)compute texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice buffer: (TSBuffer* _Nonnull)buffer offset: (uint32_t)offset NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_2_: (TSCompute* _Nonnull)compute texture: (TSTexture* _Nonnull)texture slice: (TSSlice)slice buffer: (TSBuffer* _Nonnull)buffer offset: (uint32_t)offset NS_SWIFT_NAME(dispatch(compute:texture:slice:buffer:offset:));
	-(BOOL)dispatch_3: (TSCompute* _Nonnull)compute texture: (TSTexture* _Nonnull)texture buffer: (TSBuffer* _Nonnull)buffer offset: (uint32_t)offset NS_SWIFT_NAME(dispatch(_:_:_:_:));
	-(BOOL)dispatch_3_: (TSCompute* _Nonnull)compute texture: (TSTexture* _Nonnull)texture buffer: (TSBuffer* _Nonnull)buffer offset: (uint32_t)offset NS_SWIFT_NAME(dispatch(compute:texture:buffer:offset:));
@end

/// Tellusim::DecoderJPEG
NS_SWIFT_NAME(DecoderJPEG)
TS_CAPI @interface TSDecoderJPEG : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::DecoderJPEG* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::DecoderJPEG&)p;
		-(Tellusim::DecoderJPEG* _Nonnull)pointer;
		-(Tellusim::DecoderJPEG&)ref;
	#endif
	-(BOOL)equalPtr: (const TSDecoderJPEG* _Nonnull)p;
	-(TSDecoderJPEG* _Nonnull)copyPtr;
	-(TSDecoderJPEG* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSDecoderJPEG* _Nonnull)null;
	-(void)clear;
	-(BOOL)isCreated: (TS_DecoderJPEGMode)mode NS_SWIFT_NAME(isCreated(_:));
	-(BOOL)isCreated_: (TS_DecoderJPEGMode)mode NS_SWIFT_NAME(isCreated(mode:));
	+(BOOL)isYUV: (TS_DecoderJPEGMode)mode NS_SWIFT_NAME(isYUV(_:));
	+(BOOL)isYUV_: (TS_DecoderJPEGMode)mode NS_SWIFT_NAME(isYUV(mode:));
	-(BOOL)create: (const TSDevice* _Nonnull)device mode: (TS_DecoderJPEGMode)mode NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_: (const TSDevice* _Nonnull)device mode: (TS_DecoderJPEGMode)mode NS_SWIFT_NAME(create(device:mode:));
	-(BOOL)create_1: (const TSDevice* _Nonnull)device flags: (TS_DecoderJPEGFlags)flags NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_1_: (const TSDevice* _Nonnull)device flags: (TS_DecoderJPEGFlags)flags NS_SWIFT_NAME(create(device:flags:));
	+(BOOL)load: (const char* _Nonnull)name image: (TSImage* _Nonnull)image mode: (TS_DecoderJPEGMode* _Nonnull)mode size: (TSSize* _Nonnull)size NS_SWIFT_NAME(load(_:_:_:_:));
	+(BOOL)load_: (const char* _Nonnull)name image: (TSImage* _Nonnull)image mode: (TS_DecoderJPEGMode* _Nonnull)mode size: (TSSize* _Nonnull)size NS_SWIFT_NAME(load(name:image:mode:size:));
	+(BOOL)load_1: (TSStream* _Nonnull)stream image: (TSImage* _Nonnull)image mode: (TS_DecoderJPEGMode* _Nonnull)mode size: (TSSize* _Nonnull)size NS_SWIFT_NAME(load(_:_:_:_:));
	+(BOOL)load_1_: (TSStream* _Nonnull)stream image: (TSImage* _Nonnull)image mode: (TS_DecoderJPEGMode* _Nonnull)mode size: (TSSize* _Nonnull)size NS_SWIFT_NAME(load(stream:image:mode:size:));
	-(TSTexture* _Nonnull)loadTexture: (const TSDevice* _Nonnull)device name: (const char* _Nonnull)name NS_SWIFT_NAME(loadTexture(_:_:));
	-(TSTexture* _Nonnull)loadTexture_: (const TSDevice* _Nonnull)device name: (const char* _Nonnull)name NS_SWIFT_NAME(loadTexture(device:name:));
	-(TSTexture* _Nonnull)loadTexture_1: (const TSDevice* _Nonnull)device name: (const char* _Nonnull)name flags: (TS_TextureFlags)flags NS_SWIFT_NAME(loadTexture(_:_:_:));
	-(TSTexture* _Nonnull)loadTexture_1_: (const TSDevice* _Nonnull)device name: (const char* _Nonnull)name flags: (TS_TextureFlags)flags NS_SWIFT_NAME(loadTexture(device:name:flags:));
	-(TSTexture* _Nonnull)loadTexture_2: (const TSDevice* _Nonnull)device stream: (TSStream* _Nonnull)stream NS_SWIFT_NAME(loadTexture(_:_:));
	-(TSTexture* _Nonnull)loadTexture_2_: (const TSDevice* _Nonnull)device stream: (TSStream* _Nonnull)stream NS_SWIFT_NAME(loadTexture(device:stream:));
	-(TSTexture* _Nonnull)loadTexture_3: (const TSDevice* _Nonnull)device stream: (TSStream* _Nonnull)stream flags: (TS_TextureFlags)flags NS_SWIFT_NAME(loadTexture(_:_:_:));
	-(TSTexture* _Nonnull)loadTexture_3_: (const TSDevice* _Nonnull)device stream: (TSStream* _Nonnull)stream flags: (TS_TextureFlags)flags NS_SWIFT_NAME(loadTexture(device:stream:flags:));
	-(BOOL)dispatch: (TSCompute* _Nonnull)compute mode: (TS_DecoderJPEGMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_: (TSCompute* _Nonnull)compute mode: (TS_DecoderJPEGMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(compute:mode:dest:src:dest_slice:src_slice:));
	-(BOOL)dispatch_1: (TSCompute* _Nonnull)compute mode: (TS_DecoderJPEGMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_1_: (TSCompute* _Nonnull)compute mode: (TS_DecoderJPEGMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(compute:mode:dest:src:src_slice:));
	-(BOOL)dispatch_2: (TSCompute* _Nonnull)compute mode: (TS_DecoderJPEGMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(dispatch(_:_:_:_:));
	-(BOOL)dispatch_2_: (TSCompute* _Nonnull)compute mode: (TS_DecoderJPEGMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(dispatch(compute:mode:dest:src:));
	-(BOOL)dispatchYUV: (TSCompute* _Nonnull)compute mode: (TS_DecoderJPEGMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatchYUV(_:_:_:_:_:_:));
	-(BOOL)dispatchYUV_: (TSCompute* _Nonnull)compute mode: (TS_DecoderJPEGMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatchYUV(compute:mode:dest:src:dest_slice:src_slice:));
	-(BOOL)dispatchYUV_1: (TSCompute* _Nonnull)compute mode: (TS_DecoderJPEGMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatchYUV(_:_:_:_:_:));
	-(BOOL)dispatchYUV_1_: (TSCompute* _Nonnull)compute mode: (TS_DecoderJPEGMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatchYUV(compute:mode:dest:src:src_slice:));
	-(BOOL)dispatchYUV_2: (TSCompute* _Nonnull)compute mode: (TS_DecoderJPEGMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(dispatchYUV(_:_:_:_:));
	-(BOOL)dispatchYUV_2_: (TSCompute* _Nonnull)compute mode: (TS_DecoderJPEGMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(dispatchYUV(compute:mode:dest:src:));
@end

/// Tellusim::EncoderBC15
NS_SWIFT_NAME(EncoderBC15)
TS_CAPI @interface TSEncoderBC15 : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::EncoderBC15* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::EncoderBC15&)p;
		-(Tellusim::EncoderBC15* _Nonnull)pointer;
		-(Tellusim::EncoderBC15&)ref;
	#endif
	-(BOOL)equalPtr: (const TSEncoderBC15* _Nonnull)p;
	-(TSEncoderBC15* _Nonnull)copyPtr;
	-(TSEncoderBC15* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSEncoderBC15* _Nonnull)null;
	-(void)clear;
	-(BOOL)isCreated: (TS_EncoderBC15Mode)mode NS_SWIFT_NAME(isCreated(_:));
	-(BOOL)isCreated_: (TS_EncoderBC15Mode)mode NS_SWIFT_NAME(isCreated(mode:));
	-(BOOL)create: (const TSDevice* _Nonnull)device mode: (TS_EncoderBC15Mode)mode NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_: (const TSDevice* _Nonnull)device mode: (TS_EncoderBC15Mode)mode NS_SWIFT_NAME(create(device:mode:));
	-(BOOL)create_1: (const TSDevice* _Nonnull)device flags: (TS_EncoderBC15Flags)flags NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_1_: (const TSDevice* _Nonnull)device flags: (TS_EncoderBC15Flags)flags NS_SWIFT_NAME(create(device:flags:));
	-(BOOL)dispatch: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC15Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC15Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(compute:mode:dest:src:dest_slice:src_slice:));
	-(BOOL)dispatch_1: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC15Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_1_: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC15Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(compute:mode:dest:src:src_slice:));
	-(BOOL)dispatch_2: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC15Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(dispatch(_:_:_:_:));
	-(BOOL)dispatch_2_: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC15Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(dispatch(compute:mode:dest:src:));
@end

/// Tellusim::EncoderBC67
NS_SWIFT_NAME(EncoderBC67)
TS_CAPI @interface TSEncoderBC67 : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::EncoderBC67* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::EncoderBC67&)p;
		-(Tellusim::EncoderBC67* _Nonnull)pointer;
		-(Tellusim::EncoderBC67&)ref;
	#endif
	-(BOOL)equalPtr: (const TSEncoderBC67* _Nonnull)p;
	-(TSEncoderBC67* _Nonnull)copyPtr;
	-(TSEncoderBC67* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSEncoderBC67* _Nonnull)null;
	-(void)clear;
	-(BOOL)isCreated: (TS_EncoderBC67Mode)mode NS_SWIFT_NAME(isCreated(_:));
	-(BOOL)isCreated_: (TS_EncoderBC67Mode)mode NS_SWIFT_NAME(isCreated(mode:));
	-(BOOL)create: (const TSDevice* _Nonnull)device mode: (TS_EncoderBC67Mode)mode NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_: (const TSDevice* _Nonnull)device mode: (TS_EncoderBC67Mode)mode NS_SWIFT_NAME(create(device:mode:));
	-(BOOL)create_1: (const TSDevice* _Nonnull)device flags: (TS_EncoderBC67Flags)flags NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_1_: (const TSDevice* _Nonnull)device flags: (TS_EncoderBC67Flags)flags NS_SWIFT_NAME(create(device:flags:));
	-(BOOL)dispatch: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC67Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC67Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(compute:mode:dest:src:dest_slice:src_slice:));
	-(BOOL)dispatch_1: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC67Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice components: (uint32_t)components NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:_:));
	-(BOOL)dispatch_1_: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC67Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice components: (uint32_t)components NS_SWIFT_NAME(dispatch(compute:mode:dest:src:dest_slice:src_slice:components:));
	-(BOOL)dispatch_2: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC67Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_2_: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC67Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(compute:mode:dest:src:src_slice:));
	-(BOOL)dispatch_3: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC67Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice components: (uint32_t)components NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_3_: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC67Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice components: (uint32_t)components NS_SWIFT_NAME(dispatch(compute:mode:dest:src:src_slice:components:));
	-(BOOL)dispatch_4: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC67Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(dispatch(_:_:_:_:));
	-(BOOL)dispatch_4_: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC67Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(dispatch(compute:mode:dest:src:));
	-(BOOL)dispatch_5: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC67Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src components: (uint32_t)components NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_5_: (TSCompute* _Nonnull)compute mode: (TS_EncoderBC67Mode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src components: (uint32_t)components NS_SWIFT_NAME(dispatch(compute:mode:dest:src:components:));
@end

/// Tellusim::EncoderASTC
NS_SWIFT_NAME(EncoderASTC)
TS_CAPI @interface TSEncoderASTC : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::EncoderASTC* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::EncoderASTC&)p;
		-(Tellusim::EncoderASTC* _Nonnull)pointer;
		-(Tellusim::EncoderASTC&)ref;
	#endif
	-(BOOL)equalPtr: (const TSEncoderASTC* _Nonnull)p;
	-(TSEncoderASTC* _Nonnull)copyPtr;
	-(TSEncoderASTC* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSEncoderASTC* _Nonnull)null;
	-(void)clear;
	-(BOOL)isCreated: (TS_EncoderASTCMode)mode NS_SWIFT_NAME(isCreated(_:));
	-(BOOL)isCreated_: (TS_EncoderASTCMode)mode NS_SWIFT_NAME(isCreated(mode:));
	-(BOOL)create: (const TSDevice* _Nonnull)device mode: (TS_EncoderASTCMode)mode NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_: (const TSDevice* _Nonnull)device mode: (TS_EncoderASTCMode)mode NS_SWIFT_NAME(create(device:mode:));
	-(BOOL)create_1: (const TSDevice* _Nonnull)device flags: (TS_EncoderASTCFlags)flags NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_1_: (const TSDevice* _Nonnull)device flags: (TS_EncoderASTCFlags)flags NS_SWIFT_NAME(create(device:flags:));
	-(BOOL)dispatch: (TSCompute* _Nonnull)compute mode: (TS_EncoderASTCMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_: (TSCompute* _Nonnull)compute mode: (TS_EncoderASTCMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(compute:mode:dest:src:dest_slice:src_slice:));
	-(BOOL)dispatch_1: (TSCompute* _Nonnull)compute mode: (TS_EncoderASTCMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice components: (uint32_t)components NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:_:));
	-(BOOL)dispatch_1_: (TSCompute* _Nonnull)compute mode: (TS_EncoderASTCMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice components: (uint32_t)components NS_SWIFT_NAME(dispatch(compute:mode:dest:src:dest_slice:src_slice:components:));
	-(BOOL)dispatch_2: (TSCompute* _Nonnull)compute mode: (TS_EncoderASTCMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_2_: (TSCompute* _Nonnull)compute mode: (TS_EncoderASTCMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(compute:mode:dest:src:src_slice:));
	-(BOOL)dispatch_3: (TSCompute* _Nonnull)compute mode: (TS_EncoderASTCMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice components: (uint32_t)components NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_3_: (TSCompute* _Nonnull)compute mode: (TS_EncoderASTCMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice components: (uint32_t)components NS_SWIFT_NAME(dispatch(compute:mode:dest:src:src_slice:components:));
	-(BOOL)dispatch_4: (TSCompute* _Nonnull)compute mode: (TS_EncoderASTCMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(dispatch(_:_:_:_:));
	-(BOOL)dispatch_4_: (TSCompute* _Nonnull)compute mode: (TS_EncoderASTCMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(dispatch(compute:mode:dest:src:));
	-(BOOL)dispatch_5: (TSCompute* _Nonnull)compute mode: (TS_EncoderASTCMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src components: (uint32_t)components NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_5_: (TSCompute* _Nonnull)compute mode: (TS_EncoderASTCMode)mode dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src components: (uint32_t)components NS_SWIFT_NAME(dispatch(compute:mode:dest:src:components:));
@end

/// Tellusim::MeshModel::CreateCallback
NS_SWIFT_NAME(MeshModel.CreateCallback)
@protocol TSMeshModelCreateCallback <NSObject>
	-(BOOL)run: (const void* _Nonnull)src size: (size_t)size owner: (BOOL)owner NS_SWIFT_NAME(run(_:_:_:));
@end

/// Tellusim::MeshModel
NS_SWIFT_NAME(MeshModel)
TS_CAPI @interface TSMeshModel : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::MeshModel* _Nullable)p;
		-(Tellusim::MeshModel* _Nonnull)pointer;
		-(Tellusim::MeshModel&)ref;
	#endif
	-(void)clear;
	-(BOOL)isCreated;
	-(TS_MeshModelFlags)getFlags NS_SWIFT_NAME(flags());
	-(BOOL)hasFlag: (TS_MeshModelFlags)flags NS_SWIFT_NAME(hasFlag(_:));
	-(BOOL)hasFlag_: (TS_MeshModelFlags)flags NS_SWIFT_NAME(hasFlag(flags:));
	-(BOOL)hasFlags: (TS_MeshModelFlags)flags NS_SWIFT_NAME(hasFlags(_:));
	-(BOOL)hasFlags_: (TS_MeshModelFlags)flags NS_SWIFT_NAME(hasFlags(flags:));
	-(BOOL)load: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline name: (const char* _Nonnull)name NS_SWIFT_NAME(load(_:_:_:));
	-(BOOL)load_: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline name: (const char* _Nonnull)name NS_SWIFT_NAME(load(device:pipeline:name:));
	-(BOOL)load_1: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline name: (const char* _Nonnull)name flags: (TS_MeshModelFlags)flags NS_SWIFT_NAME(load(_:_:_:_:));
	-(BOOL)load_1_: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline name: (const char* _Nonnull)name flags: (TS_MeshModelFlags)flags NS_SWIFT_NAME(load(device:pipeline:name:flags:));
	-(BOOL)load_2: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline name: (const char* _Nonnull)name flags: (TS_MeshModelFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(_:_:_:_:_:));
	-(BOOL)load_2_: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline name: (const char* _Nonnull)name flags: (TS_MeshModelFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(device:pipeline:name:flags:async:));
	-(BOOL)load_3: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline stream: (TSStream* _Nonnull)stream NS_SWIFT_NAME(load(_:_:_:));
	-(BOOL)load_3_: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline stream: (TSStream* _Nonnull)stream NS_SWIFT_NAME(load(device:pipeline:stream:));
	-(BOOL)load_4: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline stream: (TSStream* _Nonnull)stream flags: (TS_MeshModelFlags)flags NS_SWIFT_NAME(load(_:_:_:_:));
	-(BOOL)load_4_: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline stream: (TSStream* _Nonnull)stream flags: (TS_MeshModelFlags)flags NS_SWIFT_NAME(load(device:pipeline:stream:flags:));
	-(BOOL)load_5: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline stream: (TSStream* _Nonnull)stream flags: (TS_MeshModelFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(_:_:_:_:_:));
	-(BOOL)load_5_: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline stream: (TSStream* _Nonnull)stream flags: (TS_MeshModelFlags)flags async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(load(device:pipeline:stream:flags:async:));
	-(BOOL)create: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline name: (const char* _Nonnull)name NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline name: (const char* _Nonnull)name NS_SWIFT_NAME(create(device:pipeline:name:));
	-(BOOL)create_1: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline name: (const char* _Nonnull)name flags: (TS_MeshModelFlags)flags NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_1_: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline name: (const char* _Nonnull)name flags: (TS_MeshModelFlags)flags NS_SWIFT_NAME(create(device:pipeline:name:flags:));
	-(BOOL)create_2: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline mesh: (const TSMesh* _Nonnull)mesh NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_2_: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline mesh: (const TSMesh* _Nonnull)mesh NS_SWIFT_NAME(create(device:pipeline:mesh:));
	-(BOOL)create_3: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline mesh: (const TSMesh* _Nonnull)mesh flags: (TS_MeshModelFlags)flags NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_3_: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline mesh: (const TSMesh* _Nonnull)mesh flags: (TS_MeshModelFlags)flags NS_SWIFT_NAME(create(device:pipeline:mesh:flags:));
	-(BOOL)create_4: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline geometry: (const TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_4_: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline geometry: (const TSMeshGeometry* _Nonnull)geometry NS_SWIFT_NAME(create(device:pipeline:geometry:));
	-(BOOL)create_5: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline geometry: (const TSMeshGeometry* _Nonnull)geometry flags: (TS_MeshModelFlags)flags NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_5_: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline geometry: (const TSMeshGeometry* _Nonnull)geometry flags: (TS_MeshModelFlags)flags NS_SWIFT_NAME(create(device:pipeline:geometry:flags:));
	-(BOOL)create_6: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline geometries: (TSMeshGeometry* _Nonnull * _Nullable)geometries geometries_size: (uint32_t)geometries_size NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_6_: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline geometries: (TSMeshGeometry* _Nonnull * _Nullable)geometries geometries_size: (uint32_t)geometries_size NS_SWIFT_NAME(create(device:pipeline:geometries:geometries_size:));
	-(BOOL)create_7: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline geometries: (TSMeshGeometry* _Nonnull * _Nullable)geometries geometries_size: (uint32_t)geometries_size flags: (TS_MeshModelFlags)flags NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_7_: (const TSDevice* _Nonnull)device pipeline: (const TSPipeline* _Nonnull)pipeline geometries: (TSMeshGeometry* _Nonnull * _Nullable)geometries geometries_size: (uint32_t)geometries_size flags: (TS_MeshModelFlags)flags NS_SWIFT_NAME(create(device:pipeline:geometries:geometries_size:flags:));
	-(void)setVertexBufferCallback: (id<TSMeshModelCreateCallback> _Nullable)func NS_SWIFT_NAME(setVertexBufferCallback(_:));
	-(void)setVertexBufferCallback_: (id<TSMeshModelCreateCallback> _Nullable)func NS_SWIFT_NAME(setVertexBufferCallback(func:));
	-(void)setIndexBufferCallback: (id<TSMeshModelCreateCallback> _Nullable)func NS_SWIFT_NAME(setIndexBufferCallback(_:));
	-(void)setIndexBufferCallback_: (id<TSMeshModelCreateCallback> _Nullable)func NS_SWIFT_NAME(setIndexBufferCallback(func:));
	-(void)setMeshBufferCallback: (id<TSMeshModelCreateCallback> _Nullable)func NS_SWIFT_NAME(setMeshBufferCallback(_:));
	-(void)setMeshBufferCallback_: (id<TSMeshModelCreateCallback> _Nullable)func NS_SWIFT_NAME(setMeshBufferCallback(func:));
	-(void)setBuffers: (TSCommand* _Nonnull)command NS_SWIFT_NAME(setBuffers(_:));
	-(void)setBuffers_: (TSCommand* _Nonnull)command NS_SWIFT_NAME(setBuffers(command:));
	-(void)setBuffers_1: (TSCommand* _Nonnull)command index: (uint32_t)index NS_SWIFT_NAME(setBuffers(_:_:));
	-(void)setBuffers_1_: (TSCommand* _Nonnull)command index: (uint32_t)index NS_SWIFT_NAME(setBuffers(command:index:));
	-(void)setBuffers_2: (TSCommand* _Nonnull)command index: (uint32_t)index pipeline: (const TSPipeline* _Nonnull * _Nullable)pipeline NS_SWIFT_NAME(setBuffers(_:_:_:));
	-(void)setBuffers_2_: (TSCommand* _Nonnull)command index: (uint32_t)index pipeline: (const TSPipeline* _Nonnull * _Nullable)pipeline NS_SWIFT_NAME(setBuffers(command:index:pipeline:));
	-(void)draw: (TSCommand* _Nonnull)command NS_SWIFT_NAME(draw(_:));
	-(void)draw_: (TSCommand* _Nonnull)command NS_SWIFT_NAME(draw(command:));
	-(void)draw_1: (TSCommand* _Nonnull)command geometry: (uint32_t)geometry NS_SWIFT_NAME(draw(_:_:));
	-(void)draw_1_: (TSCommand* _Nonnull)command geometry: (uint32_t)geometry NS_SWIFT_NAME(draw(command:geometry:));
	-(void)draw_2: (TSCommand* _Nonnull)command geometry: (uint32_t)geometry material: (uint32_t)material NS_SWIFT_NAME(draw(_:_:_:));
	-(void)draw_2_: (TSCommand* _Nonnull)command geometry: (uint32_t)geometry material: (uint32_t)material NS_SWIFT_NAME(draw(command:geometry:material:));
	-(void)drawInstanced: (TSCommand* _Nonnull)command geometry: (uint32_t)geometry num_instances: (uint32_t)num_instances NS_SWIFT_NAME(drawInstanced(_:_:_:));
	-(void)drawInstanced_: (TSCommand* _Nonnull)command geometry: (uint32_t)geometry num_instances: (uint32_t)num_instances NS_SWIFT_NAME(drawInstanced(command:geometry:num_instances:));
	-(void)drawInstanced_1: (TSCommand* _Nonnull)command geometry: (uint32_t)geometry num_instances: (uint32_t)num_instances base_instance: (uint32_t)base_instance NS_SWIFT_NAME(drawInstanced(_:_:_:_:));
	-(void)drawInstanced_1_: (TSCommand* _Nonnull)command geometry: (uint32_t)geometry num_instances: (uint32_t)num_instances base_instance: (uint32_t)base_instance NS_SWIFT_NAME(drawInstanced(command:geometry:num_instances:base_instance:));
	-(void)drawInstanced_2: (TSCommand* _Nonnull)command geometry: (uint32_t)geometry material: (uint32_t)material num_instances: (uint32_t)num_instances base_instance: (uint32_t)base_instance NS_SWIFT_NAME(drawInstanced(_:_:_:_:_:));
	-(void)drawInstanced_2_: (TSCommand* _Nonnull)command geometry: (uint32_t)geometry material: (uint32_t)material num_instances: (uint32_t)num_instances base_instance: (uint32_t)base_instance NS_SWIFT_NAME(drawInstanced(command:geometry:material:num_instances:base_instance:));
	-(uint32_t)getNumVertices NS_SWIFT_NAME(numVertices());
	-(uint32_t)getNumVertexBuffers NS_SWIFT_NAME(numVertexBuffers());
	-(uint32_t)getVertexBufferStride: (uint32_t)index NS_SWIFT_NAME(vertexBufferStride(_:));
	-(uint32_t)getVertexBufferStride_: (uint32_t)index NS_SWIFT_NAME(vertexBufferStride(index:));
	-(size_t)getVertexBufferOffset: (uint32_t)index NS_SWIFT_NAME(vertexBufferOffset(_:));
	-(size_t)getVertexBufferOffset_: (uint32_t)index NS_SWIFT_NAME(vertexBufferOffset(index:));
	-(TSBuffer* _Nonnull)getVertexBuffer NS_SWIFT_NAME(vertexBuffer());
	-(uint32_t)getNumIndices NS_SWIFT_NAME(numIndices());
	-(TS_Format)getIndexFormat NS_SWIFT_NAME(indexFormat());
	-(TSBuffer* _Nonnull)getIndexBuffer NS_SWIFT_NAME(indexBuffer());
	-(uint32_t)getNumMeshlets NS_SWIFT_NAME(numMeshlets());
	-(TSBuffer* _Nonnull)getMeshletBuffer NS_SWIFT_NAME(meshletBuffer());
	-(uint32_t)getNumGeometries NS_SWIFT_NAME(numGeometries());
	-(uint32_t)getNumGeometryIndices: (uint32_t)geometry NS_SWIFT_NAME(numGeometryIndices(_:));
	-(uint32_t)getNumGeometryIndices_: (uint32_t)geometry NS_SWIFT_NAME(numGeometryIndices(geometry:));
	-(uint32_t)getNumGeometryVertices: (uint32_t)geometry NS_SWIFT_NAME(numGeometryVertices(_:));
	-(uint32_t)getNumGeometryVertices_: (uint32_t)geometry NS_SWIFT_NAME(numGeometryVertices(geometry:));
	-(uint32_t)getNumGeometryMeshlets: (uint32_t)geometry NS_SWIFT_NAME(numGeometryMeshlets(_:));
	-(uint32_t)getNumGeometryMeshlets_: (uint32_t)geometry NS_SWIFT_NAME(numGeometryMeshlets(geometry:));
	-(uint32_t)getGeometryBaseIndex: (uint32_t)geometry NS_SWIFT_NAME(geometryBaseIndex(_:));
	-(uint32_t)getGeometryBaseIndex_: (uint32_t)geometry NS_SWIFT_NAME(geometryBaseIndex(geometry:));
	-(uint32_t)getGeometryBaseVertex: (uint32_t)geometry NS_SWIFT_NAME(geometryBaseVertex(_:));
	-(uint32_t)getGeometryBaseVertex_: (uint32_t)geometry NS_SWIFT_NAME(geometryBaseVertex(geometry:));
	-(uint32_t)getGeometryBaseMeshlet: (uint32_t)geometry NS_SWIFT_NAME(geometryBaseMeshlet(_:));
	-(uint32_t)getGeometryBaseMeshlet_: (uint32_t)geometry NS_SWIFT_NAME(geometryBaseMeshlet(geometry:));
	-(uint32_t)getNumMaterials: (uint32_t)geometry NS_SWIFT_NAME(numMaterials(_:));
	-(uint32_t)getNumMaterials_: (uint32_t)geometry NS_SWIFT_NAME(numMaterials(geometry:));
	-(uint32_t)getNumMaterialIndices: (uint32_t)geometry material: (uint32_t)material NS_SWIFT_NAME(numMaterialIndices(_:_:));
	-(uint32_t)getNumMaterialIndices_: (uint32_t)geometry material: (uint32_t)material NS_SWIFT_NAME(numMaterialIndices(geometry:material:));
	-(uint32_t)getNumMaterialVertices: (uint32_t)geometry material: (uint32_t)material NS_SWIFT_NAME(numMaterialVertices(_:_:));
	-(uint32_t)getNumMaterialVertices_: (uint32_t)geometry material: (uint32_t)material NS_SWIFT_NAME(numMaterialVertices(geometry:material:));
	-(uint32_t)getNumMaterialMeshlets: (uint32_t)geometry material: (uint32_t)material NS_SWIFT_NAME(numMaterialMeshlets(_:_:));
	-(uint32_t)getNumMaterialMeshlets_: (uint32_t)geometry material: (uint32_t)material NS_SWIFT_NAME(numMaterialMeshlets(geometry:material:));
	-(uint32_t)getMaterialBaseIndex: (uint32_t)geometry material: (uint32_t)material NS_SWIFT_NAME(materialBaseIndex(_:_:));
	-(uint32_t)getMaterialBaseIndex_: (uint32_t)geometry material: (uint32_t)material NS_SWIFT_NAME(materialBaseIndex(geometry:material:));
	-(uint32_t)getMaterialBaseVertex: (uint32_t)geometry material: (uint32_t)material NS_SWIFT_NAME(materialBaseVertex(_:_:));
	-(uint32_t)getMaterialBaseVertex_: (uint32_t)geometry material: (uint32_t)material NS_SWIFT_NAME(materialBaseVertex(geometry:material:));
	-(uint32_t)getMaterialBaseMeshlet: (uint32_t)geometry material: (uint32_t)material NS_SWIFT_NAME(materialBaseMeshlet(_:_:));
	-(uint32_t)getMaterialBaseMeshlet_: (uint32_t)geometry material: (uint32_t)material NS_SWIFT_NAME(materialBaseMeshlet(geometry:material:));
	-(size_t)getMemory NS_SWIFT_NAME(memory());
@end

/// Tellusim::SeparableFilter
NS_SWIFT_NAME(SeparableFilter)
TS_CAPI @interface TSSeparableFilter : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::SeparableFilter* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::SeparableFilter&)p;
		-(Tellusim::SeparableFilter* _Nonnull)pointer;
		-(Tellusim::SeparableFilter&)ref;
	#endif
	-(BOOL)equalPtr: (const TSSeparableFilter* _Nonnull)p;
	-(TSSeparableFilter* _Nonnull)copyPtr;
	-(TSSeparableFilter* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSSeparableFilter* _Nonnull)null;
	-(void)clear;
	-(BOOL)isCreated: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(isCreated(_:_:));
	-(BOOL)isCreated_: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(isCreated(format:size:));
	-(void)setInputSource: (TS_SeparableFilterMode)mode src: (const char* _Nonnull)src NS_SWIFT_NAME(setInputSource(_:_:));
	-(void)setInputSource_: (TS_SeparableFilterMode)mode src: (const char* _Nonnull)src NS_SWIFT_NAME(setInputSource(mode:src:));
	-(NSString* _Nonnull)getInputSource: (TS_SeparableFilterMode)mode NS_SWIFT_NAME(inputSource(_:));
	-(NSString* _Nonnull)getInputSource_: (TS_SeparableFilterMode)mode NS_SWIFT_NAME(inputSource(mode:));
	-(void)setOutputSource: (TS_SeparableFilterMode)mode src: (const char* _Nonnull)src NS_SWIFT_NAME(setOutputSource(_:_:));
	-(void)setOutputSource_: (TS_SeparableFilterMode)mode src: (const char* _Nonnull)src NS_SWIFT_NAME(setOutputSource(mode:src:));
	-(NSString* _Nonnull)getOutputSource: (TS_SeparableFilterMode)mode NS_SWIFT_NAME(outputSource(_:));
	-(NSString* _Nonnull)getOutputSource_: (TS_SeparableFilterMode)mode NS_SWIFT_NAME(outputSource(mode:));
	-(BOOL)create: (const TSDevice* _Nonnull)device format: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_: (const TSDevice* _Nonnull)device format: (TS_Format)format size: (uint32_t)size NS_SWIFT_NAME(create(device:format:size:));
	-(BOOL)create_1: (const TSDevice* _Nonnull)device format: (TS_Format)format size: (uint32_t)size flags: (TS_SeparableFilterFlags)flags NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_1_: (const TSDevice* _Nonnull)device format: (TS_Format)format size: (uint32_t)size flags: (TS_SeparableFilterFlags)flags NS_SWIFT_NAME(create(device:format:size:flags:));
	-(void)setWeights: (TS_SeparableFilterMode)mode weights: (TSVector4f* _Nonnull)weights weights_size: (uint32_t)weights_size NS_SWIFT_NAME(setWeights(_:_:_:));
	-(void)setWeights_: (TS_SeparableFilterMode)mode weights: (TSVector4f* _Nonnull)weights weights_size: (uint32_t)weights_size NS_SWIFT_NAME(setWeights(mode:weights:weights_size:));
	-(void)setWeights_1: (TS_SeparableFilterMode)mode weights: (TSVector4f* _Nonnull)weights weights_size: (uint32_t)weights_size normalize: (BOOL)normalize NS_SWIFT_NAME(setWeights(_:_:_:_:));
	-(void)setWeights_1_: (TS_SeparableFilterMode)mode weights: (TSVector4f* _Nonnull)weights weights_size: (uint32_t)weights_size normalize: (BOOL)normalize NS_SWIFT_NAME(setWeights(mode:weights:weights_size:normalize:));
	-(void)setWeights_2: (TS_SeparableFilterMode)mode weights: (float32_t* _Nonnull)weights weights_size: (uint32_t)weights_size NS_SWIFT_NAME(setWeights(_:_:_:));
	-(void)setWeights_2_: (TS_SeparableFilterMode)mode weights: (float32_t* _Nonnull)weights weights_size: (uint32_t)weights_size NS_SWIFT_NAME(setWeights(mode:weights:weights_size:));
	-(void)setWeights_3: (TS_SeparableFilterMode)mode weights: (float32_t* _Nonnull)weights weights_size: (uint32_t)weights_size normalize: (BOOL)normalize NS_SWIFT_NAME(setWeights(_:_:_:_:));
	-(void)setWeights_3_: (TS_SeparableFilterMode)mode weights: (float32_t* _Nonnull)weights weights_size: (uint32_t)weights_size normalize: (BOOL)normalize NS_SWIFT_NAME(setWeights(mode:weights:weights_size:normalize:));
	-(void)setGaussianWeights: (uint32_t)size sigma: (TSVector4f)sigma NS_SWIFT_NAME(setGaussianWeights(_:_:));
	-(void)setGaussianWeights_: (uint32_t)size sigma: (TSVector4f)sigma NS_SWIFT_NAME(setGaussianWeights(size:sigma:));
	-(void)setGaussianWeights_1: (uint32_t)size sigma: (float32_t)sigma NS_SWIFT_NAME(setGaussianWeights(_:_:));
	-(void)setGaussianWeights_1_: (uint32_t)size sigma: (float32_t)sigma NS_SWIFT_NAME(setGaussianWeights(size:sigma:));
	-(void)setSobelXWeights: (uint32_t)size NS_SWIFT_NAME(setSobelXWeights(_:));
	-(void)setSobelXWeights_: (uint32_t)size NS_SWIFT_NAME(setSobelXWeights(size:));
	-(void)setSobelYWeights: (uint32_t)size NS_SWIFT_NAME(setSobelYWeights(_:));
	-(void)setSobelYWeights_: (uint32_t)size NS_SWIFT_NAME(setSobelYWeights(size:));
	-(void)setBoxWeights: (uint32_t)size NS_SWIFT_NAME(setBoxWeights(_:));
	-(void)setBoxWeights_: (uint32_t)size NS_SWIFT_NAME(setBoxWeights(size:));
	-(BOOL)dispatch: (TSCompute* _Nonnull)compute mode: (TS_SeparableFilterMode)mode size: (uint32_t)size dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:_:));
	-(BOOL)dispatch_: (TSCompute* _Nonnull)compute mode: (TS_SeparableFilterMode)mode size: (uint32_t)size dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(compute:mode:size:dest:src:dest_slice:src_slice:));
	-(BOOL)dispatch_1: (TSCompute* _Nonnull)compute mode: (TS_SeparableFilterMode)mode size: (uint32_t)size dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice parameters: (TSVector4f)parameters NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:_:_:));
	-(BOOL)dispatch_1_: (TSCompute* _Nonnull)compute mode: (TS_SeparableFilterMode)mode size: (uint32_t)size dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice parameters: (TSVector4f)parameters NS_SWIFT_NAME(dispatch(compute:mode:size:dest:src:dest_slice:src_slice:parameters:));
	-(BOOL)dispatch_2: (TSCompute* _Nonnull)compute mode: (TS_SeparableFilterMode)mode size: (uint32_t)size dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_2_: (TSCompute* _Nonnull)compute mode: (TS_SeparableFilterMode)mode size: (uint32_t)size dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(compute:mode:size:dest:src:src_slice:));
	-(BOOL)dispatch_3: (TSCompute* _Nonnull)compute mode: (TS_SeparableFilterMode)mode size: (uint32_t)size dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice parameters: (TSVector4f)parameters NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:_:));
	-(BOOL)dispatch_3_: (TSCompute* _Nonnull)compute mode: (TS_SeparableFilterMode)mode size: (uint32_t)size dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice parameters: (TSVector4f)parameters NS_SWIFT_NAME(dispatch(compute:mode:size:dest:src:src_slice:parameters:));
	-(BOOL)dispatch_4: (TSCompute* _Nonnull)compute mode: (TS_SeparableFilterMode)mode size: (uint32_t)size dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_4_: (TSCompute* _Nonnull)compute mode: (TS_SeparableFilterMode)mode size: (uint32_t)size dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(dispatch(compute:mode:size:dest:src:));
	-(BOOL)dispatch_5: (TSCompute* _Nonnull)compute mode: (TS_SeparableFilterMode)mode size: (uint32_t)size dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src parameters: (TSVector4f)parameters NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_5_: (TSCompute* _Nonnull)compute mode: (TS_SeparableFilterMode)mode size: (uint32_t)size dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src parameters: (TSVector4f)parameters NS_SWIFT_NAME(dispatch(compute:mode:size:dest:src:parameters:));
@end

/// Tellusim::PrefixScan
NS_SWIFT_NAME(PrefixScan)
TS_CAPI @interface TSPrefixScan : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::PrefixScan* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::PrefixScan&)p;
		-(Tellusim::PrefixScan* _Nonnull)pointer;
		-(Tellusim::PrefixScan&)ref;
	#endif
	-(BOOL)equalPtr: (const TSPrefixScan* _Nonnull)p;
	-(TSPrefixScan* _Nonnull)copyPtr;
	-(TSPrefixScan* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSPrefixScan* _Nonnull)null;
	-(void)clear;
	-(BOOL)isCreated: (TS_PrefixScanFlags)flags NS_SWIFT_NAME(isCreated(_:));
	-(BOOL)isCreated_: (TS_PrefixScanFlags)flags NS_SWIFT_NAME(isCreated(flags:));
	-(uint32_t)getGroupSize NS_SWIFT_NAME(groupSize());
	-(uint32_t)getScanElements NS_SWIFT_NAME(scanElements());
	-(uint32_t)getMaxElements NS_SWIFT_NAME(maxElements());
	-(uint32_t)getMaxRegions NS_SWIFT_NAME(maxRegions());
	-(BOOL)create: (const TSDevice* _Nonnull)device mode: (TS_PrefixScanMode)mode NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_: (const TSDevice* _Nonnull)device mode: (TS_PrefixScanMode)mode NS_SWIFT_NAME(create(device:mode:));
	-(BOOL)create_1: (const TSDevice* _Nonnull)device mode: (TS_PrefixScanMode)mode groups: (uint32_t)groups NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_1_: (const TSDevice* _Nonnull)device mode: (TS_PrefixScanMode)mode groups: (uint32_t)groups NS_SWIFT_NAME(create(device:mode:groups:));
	-(BOOL)create_2: (const TSDevice* _Nonnull)device mode: (TS_PrefixScanMode)mode groups: (uint32_t)groups regions: (uint32_t)regions NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_2_: (const TSDevice* _Nonnull)device mode: (TS_PrefixScanMode)mode groups: (uint32_t)groups regions: (uint32_t)regions NS_SWIFT_NAME(create(device:mode:groups:regions:));
	-(BOOL)create_3: (const TSDevice* _Nonnull)device mode: (TS_PrefixScanMode)mode groups: (uint32_t)groups regions: (uint32_t)regions async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_3_: (const TSDevice* _Nonnull)device mode: (TS_PrefixScanMode)mode groups: (uint32_t)groups regions: (uint32_t)regions async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(device:mode:groups:regions:async:));
	-(BOOL)create_4: (const TSDevice* _Nonnull)device flags: (TS_PrefixScanFlags)flags NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_4_: (const TSDevice* _Nonnull)device flags: (TS_PrefixScanFlags)flags NS_SWIFT_NAME(create(device:flags:));
	-(BOOL)create_5: (const TSDevice* _Nonnull)device flags: (TS_PrefixScanFlags)flags groups: (uint32_t)groups NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_5_: (const TSDevice* _Nonnull)device flags: (TS_PrefixScanFlags)flags groups: (uint32_t)groups NS_SWIFT_NAME(create(device:flags:groups:));
	-(BOOL)create_6: (const TSDevice* _Nonnull)device flags: (TS_PrefixScanFlags)flags groups: (uint32_t)groups regions: (uint32_t)regions NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_6_: (const TSDevice* _Nonnull)device flags: (TS_PrefixScanFlags)flags groups: (uint32_t)groups regions: (uint32_t)regions NS_SWIFT_NAME(create(device:flags:groups:regions:));
	-(BOOL)create_7: (const TSDevice* _Nonnull)device flags: (TS_PrefixScanFlags)flags groups: (uint32_t)groups regions: (uint32_t)regions async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_7_: (const TSDevice* _Nonnull)device flags: (TS_PrefixScanFlags)flags groups: (uint32_t)groups regions: (uint32_t)regions async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(device:flags:groups:regions:async:));
	-(BOOL)dispatch: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data offset: (uint32_t)offset size: (uint32_t)size NS_SWIFT_NAME(dispatch(_:_:_:_:));
	-(BOOL)dispatch_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data offset: (uint32_t)offset size: (uint32_t)size NS_SWIFT_NAME(dispatch(compute:data:offset:size:));
	-(BOOL)dispatch_1: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count offsets: (const uint32_t* _Nonnull)offsets sizes: (const uint32_t* _Nonnull)sizes NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_1_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count offsets: (const uint32_t* _Nonnull)offsets sizes: (const uint32_t* _Nonnull)sizes NS_SWIFT_NAME(dispatch(compute:data:count:offsets:sizes:));
	-(BOOL)dispatch_2: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count offsets: (const uint32_t* _Nonnull)offsets sizes: (const uint32_t* _Nonnull)sizes flags: (TS_PrefixScanFlags)flags NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_2_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count offsets: (const uint32_t* _Nonnull)offsets sizes: (const uint32_t* _Nonnull)sizes flags: (TS_PrefixScanFlags)flags NS_SWIFT_NAME(dispatch(compute:data:count:offsets:sizes:flags:));
	-(BOOL)dispatchIndirect: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:));
	-(BOOL)dispatchIndirect_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(compute:data:dispatch:offset:));
	-(BOOL)dispatchIndirect_1: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_PrefixScanFlags)flags NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:));
	-(BOOL)dispatchIndirect_1_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_PrefixScanFlags)flags NS_SWIFT_NAME(dispatchIndirect(compute:data:dispatch:offset:flags:));
	-(BOOL)dispatchIndirect_2: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_PrefixScanFlags)flags max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_2_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_PrefixScanFlags)flags max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(compute:data:dispatch:offset:flags:max_size:));
	-(BOOL)dispatchIndirect_3: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:));
	-(BOOL)dispatchIndirect_3_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:offset:));
	-(BOOL)dispatchIndirect_4: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_PrefixScanFlags)flags NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_4_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_PrefixScanFlags)flags NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:offset:flags:));
	-(BOOL)dispatchIndirect_5: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_PrefixScanFlags)flags max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_5_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_PrefixScanFlags)flags max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:offset:flags:max_size:));
	-(BOOL)dispatchIndirect_6: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_6_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:count_offset:dispatch_offset:));
	-(BOOL)dispatchIndirect_7: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset flags: (TS_PrefixScanFlags)flags NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_7_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset flags: (TS_PrefixScanFlags)flags NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:count_offset:dispatch_offset:flags:));
	-(BOOL)dispatchIndirect_8: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset flags: (TS_PrefixScanFlags)flags max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_8_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset flags: (TS_PrefixScanFlags)flags max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:count_offset:dispatch_offset:flags:max_size:));
@end

/// Tellusim::RadixSort
NS_SWIFT_NAME(RadixSort)
TS_CAPI @interface TSRadixSort : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::RadixSort* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::RadixSort&)p;
		-(Tellusim::RadixSort* _Nonnull)pointer;
		-(Tellusim::RadixSort&)ref;
	#endif
	-(BOOL)equalPtr: (const TSRadixSort* _Nonnull)p;
	-(TSRadixSort* _Nonnull)copyPtr;
	-(TSRadixSort* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSRadixSort* _Nonnull)null;
	-(void)clear;
	-(BOOL)isCreated: (TS_RadixSortFlags)flags NS_SWIFT_NAME(isCreated(_:));
	-(BOOL)isCreated_: (TS_RadixSortFlags)flags NS_SWIFT_NAME(isCreated(flags:));
	-(uint32_t)getDataSize NS_SWIFT_NAME(dataSize());
	-(uint32_t)getGroupSize NS_SWIFT_NAME(groupSize());
	-(uint32_t)getSortElements NS_SWIFT_NAME(sortElements());
	-(uint32_t)getUpdateElements NS_SWIFT_NAME(updateElements());
	-(uint32_t)getMaxElements NS_SWIFT_NAME(maxElements());
	-(uint32_t)getMaxRegions NS_SWIFT_NAME(maxRegions());
	-(TSPrefixScan* _Nonnull)getPrefixScan NS_SWIFT_NAME(prefixScan());
	-(TSBuffer* _Nonnull)getDataBuffer NS_SWIFT_NAME(dataBuffer());
	-(BOOL)create: (const TSDevice* _Nonnull)device mode: (TS_RadixSortMode)mode scan: (TSPrefixScan* _Nonnull)scan size: (uint32_t)size NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_: (const TSDevice* _Nonnull)device mode: (TS_RadixSortMode)mode scan: (TSPrefixScan* _Nonnull)scan size: (uint32_t)size NS_SWIFT_NAME(create(device:mode:scan:size:));
	-(BOOL)create_1: (const TSDevice* _Nonnull)device mode: (TS_RadixSortMode)mode scan: (TSPrefixScan* _Nonnull)scan size: (uint32_t)size groups: (uint32_t)groups NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_1_: (const TSDevice* _Nonnull)device mode: (TS_RadixSortMode)mode scan: (TSPrefixScan* _Nonnull)scan size: (uint32_t)size groups: (uint32_t)groups NS_SWIFT_NAME(create(device:mode:scan:size:groups:));
	-(BOOL)create_2: (const TSDevice* _Nonnull)device mode: (TS_RadixSortMode)mode scan: (TSPrefixScan* _Nonnull)scan size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions NS_SWIFT_NAME(create(_:_:_:_:_:_:));
	-(BOOL)create_2_: (const TSDevice* _Nonnull)device mode: (TS_RadixSortMode)mode scan: (TSPrefixScan* _Nonnull)scan size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions NS_SWIFT_NAME(create(device:mode:scan:size:groups:regions:));
	-(BOOL)create_3: (const TSDevice* _Nonnull)device mode: (TS_RadixSortMode)mode scan: (TSPrefixScan* _Nonnull)scan size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(_:_:_:_:_:_:_:));
	-(BOOL)create_3_: (const TSDevice* _Nonnull)device mode: (TS_RadixSortMode)mode scan: (TSPrefixScan* _Nonnull)scan size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(device:mode:scan:size:groups:regions:async:));
	-(BOOL)create_4: (const TSDevice* _Nonnull)device flags: (TS_RadixSortFlags)flags scan: (TSPrefixScan* _Nonnull)scan size: (uint32_t)size NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_4_: (const TSDevice* _Nonnull)device flags: (TS_RadixSortFlags)flags scan: (TSPrefixScan* _Nonnull)scan size: (uint32_t)size NS_SWIFT_NAME(create(device:flags:scan:size:));
	-(BOOL)create_5: (const TSDevice* _Nonnull)device flags: (TS_RadixSortFlags)flags scan: (TSPrefixScan* _Nonnull)scan size: (uint32_t)size groups: (uint32_t)groups NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_5_: (const TSDevice* _Nonnull)device flags: (TS_RadixSortFlags)flags scan: (TSPrefixScan* _Nonnull)scan size: (uint32_t)size groups: (uint32_t)groups NS_SWIFT_NAME(create(device:flags:scan:size:groups:));
	-(BOOL)create_6: (const TSDevice* _Nonnull)device flags: (TS_RadixSortFlags)flags scan: (TSPrefixScan* _Nonnull)scan size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions NS_SWIFT_NAME(create(_:_:_:_:_:_:));
	-(BOOL)create_6_: (const TSDevice* _Nonnull)device flags: (TS_RadixSortFlags)flags scan: (TSPrefixScan* _Nonnull)scan size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions NS_SWIFT_NAME(create(device:flags:scan:size:groups:regions:));
	-(BOOL)create_7: (const TSDevice* _Nonnull)device flags: (TS_RadixSortFlags)flags scan: (TSPrefixScan* _Nonnull)scan size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(_:_:_:_:_:_:_:));
	-(BOOL)create_7_: (const TSDevice* _Nonnull)device flags: (TS_RadixSortFlags)flags scan: (TSPrefixScan* _Nonnull)scan size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(device:flags:scan:size:groups:regions:async:));
	-(BOOL)dispatch: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data keys_offset: (uint32_t)keys_offset data_offset: (uint32_t)data_offset size: (uint32_t)size NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data keys_offset: (uint32_t)keys_offset data_offset: (uint32_t)data_offset size: (uint32_t)size NS_SWIFT_NAME(dispatch(compute:data:keys_offset:data_offset:size:));
	-(BOOL)dispatch_1: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data keys_offset: (uint32_t)keys_offset data_offset: (uint32_t)data_offset size: (uint32_t)size flags: (TS_RadixSortFlags)flags NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_1_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data keys_offset: (uint32_t)keys_offset data_offset: (uint32_t)data_offset size: (uint32_t)size flags: (TS_RadixSortFlags)flags NS_SWIFT_NAME(dispatch(compute:data:keys_offset:data_offset:size:flags:));
	-(BOOL)dispatch_2: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data keys_offset: (uint32_t)keys_offset data_offset: (uint32_t)data_offset size: (uint32_t)size flags: (TS_RadixSortFlags)flags bits: (uint32_t)bits NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:_:));
	-(BOOL)dispatch_2_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data keys_offset: (uint32_t)keys_offset data_offset: (uint32_t)data_offset size: (uint32_t)size flags: (TS_RadixSortFlags)flags bits: (uint32_t)bits NS_SWIFT_NAME(dispatch(compute:data:keys_offset:data_offset:size:flags:bits:));
	-(BOOL)dispatch_3: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count keys_offsets: (const uint32_t* _Nonnull)keys_offsets data_offsets: (const uint32_t* _Nonnull)data_offsets sizes: (const uint32_t* _Nonnull)sizes NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_3_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count keys_offsets: (const uint32_t* _Nonnull)keys_offsets data_offsets: (const uint32_t* _Nonnull)data_offsets sizes: (const uint32_t* _Nonnull)sizes NS_SWIFT_NAME(dispatch(compute:data:count:keys_offsets:data_offsets:sizes:));
	-(BOOL)dispatch_4: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count keys_offsets: (const uint32_t* _Nonnull)keys_offsets data_offsets: (const uint32_t* _Nonnull)data_offsets sizes: (const uint32_t* _Nonnull)sizes flags: (TS_RadixSortFlags)flags NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:_:));
	-(BOOL)dispatch_4_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count keys_offsets: (const uint32_t* _Nonnull)keys_offsets data_offsets: (const uint32_t* _Nonnull)data_offsets sizes: (const uint32_t* _Nonnull)sizes flags: (TS_RadixSortFlags)flags NS_SWIFT_NAME(dispatch(compute:data:count:keys_offsets:data_offsets:sizes:flags:));
	-(BOOL)dispatch_5: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count keys_offsets: (const uint32_t* _Nonnull)keys_offsets data_offsets: (const uint32_t* _Nonnull)data_offsets sizes: (const uint32_t* _Nonnull)sizes flags: (TS_RadixSortFlags)flags bits: (uint32_t)bits NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:_:_:));
	-(BOOL)dispatch_5_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count keys_offsets: (const uint32_t* _Nonnull)keys_offsets data_offsets: (const uint32_t* _Nonnull)data_offsets sizes: (const uint32_t* _Nonnull)sizes flags: (TS_RadixSortFlags)flags bits: (uint32_t)bits NS_SWIFT_NAME(dispatch(compute:data:count:keys_offsets:data_offsets:sizes:flags:bits:));
	-(BOOL)dispatchIndirect: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:));
	-(BOOL)dispatchIndirect_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(compute:data:dispatch:offset:));
	-(BOOL)dispatchIndirect_1: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_RadixSortFlags)flags NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:));
	-(BOOL)dispatchIndirect_1_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_RadixSortFlags)flags NS_SWIFT_NAME(dispatchIndirect(compute:data:dispatch:offset:flags:));
	-(BOOL)dispatchIndirect_2: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_RadixSortFlags)flags bits: (uint32_t)bits NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_2_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_RadixSortFlags)flags bits: (uint32_t)bits NS_SWIFT_NAME(dispatchIndirect(compute:data:dispatch:offset:flags:bits:));
	-(BOOL)dispatchIndirect_3: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_RadixSortFlags)flags bits: (uint32_t)bits max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_3_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_RadixSortFlags)flags bits: (uint32_t)bits max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(compute:data:dispatch:offset:flags:bits:max_size:));
	-(BOOL)dispatchIndirect_4: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:));
	-(BOOL)dispatchIndirect_4_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:offset:));
	-(BOOL)dispatchIndirect_5: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_RadixSortFlags)flags NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_5_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_RadixSortFlags)flags NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:offset:flags:));
	-(BOOL)dispatchIndirect_6: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_RadixSortFlags)flags bits: (uint32_t)bits NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_6_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_RadixSortFlags)flags bits: (uint32_t)bits NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:offset:flags:bits:));
	-(BOOL)dispatchIndirect_7: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_RadixSortFlags)flags bits: (uint32_t)bits max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_7_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_RadixSortFlags)flags bits: (uint32_t)bits max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:offset:flags:bits:max_size:));
	-(BOOL)dispatchIndirect_8: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_8_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:count_offset:dispatch_offset:));
	-(BOOL)dispatchIndirect_9: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset flags: (TS_RadixSortFlags)flags NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_9_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset flags: (TS_RadixSortFlags)flags NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:count_offset:dispatch_offset:flags:));
	-(BOOL)dispatchIndirect_10: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset flags: (TS_RadixSortFlags)flags bits: (uint32_t)bits NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_10_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset flags: (TS_RadixSortFlags)flags bits: (uint32_t)bits NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:count_offset:dispatch_offset:flags:bits:));
	-(BOOL)dispatchIndirect_11: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset flags: (TS_RadixSortFlags)flags bits: (uint32_t)bits max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_11_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset flags: (TS_RadixSortFlags)flags bits: (uint32_t)bits max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:count_offset:dispatch_offset:flags:bits:max_size:));
@end

/// Tellusim::BitonicSort
NS_SWIFT_NAME(BitonicSort)
TS_CAPI @interface TSBitonicSort : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::BitonicSort* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::BitonicSort&)p;
		-(Tellusim::BitonicSort* _Nonnull)pointer;
		-(Tellusim::BitonicSort&)ref;
	#endif
	-(BOOL)equalPtr: (const TSBitonicSort* _Nonnull)p;
	-(TSBitonicSort* _Nonnull)copyPtr;
	-(TSBitonicSort* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSBitonicSort* _Nonnull)null;
	-(void)clear;
	-(BOOL)isCreated: (TS_BitonicSortFlags)flags NS_SWIFT_NAME(isCreated(_:));
	-(BOOL)isCreated_: (TS_BitonicSortFlags)flags NS_SWIFT_NAME(isCreated(flags:));
	-(uint32_t)getDataSize NS_SWIFT_NAME(dataSize());
	-(uint32_t)getGroupSize NS_SWIFT_NAME(groupSize());
	-(uint32_t)getSortElements NS_SWIFT_NAME(sortElements());
	-(uint32_t)getMaxRegions NS_SWIFT_NAME(maxRegions());
	-(BOOL)create: (const TSDevice* _Nonnull)device mode: (TS_BitonicSortMode)mode size: (uint32_t)size NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_: (const TSDevice* _Nonnull)device mode: (TS_BitonicSortMode)mode size: (uint32_t)size NS_SWIFT_NAME(create(device:mode:size:));
	-(BOOL)create_1: (const TSDevice* _Nonnull)device mode: (TS_BitonicSortMode)mode size: (uint32_t)size groups: (uint32_t)groups NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_1_: (const TSDevice* _Nonnull)device mode: (TS_BitonicSortMode)mode size: (uint32_t)size groups: (uint32_t)groups NS_SWIFT_NAME(create(device:mode:size:groups:));
	-(BOOL)create_2: (const TSDevice* _Nonnull)device mode: (TS_BitonicSortMode)mode size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_2_: (const TSDevice* _Nonnull)device mode: (TS_BitonicSortMode)mode size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions NS_SWIFT_NAME(create(device:mode:size:groups:regions:));
	-(BOOL)create_3: (const TSDevice* _Nonnull)device mode: (TS_BitonicSortMode)mode size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(_:_:_:_:_:_:));
	-(BOOL)create_3_: (const TSDevice* _Nonnull)device mode: (TS_BitonicSortMode)mode size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(device:mode:size:groups:regions:async:));
	-(BOOL)create_4: (const TSDevice* _Nonnull)device flags: (TS_BitonicSortFlags)flags size: (uint32_t)size NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_4_: (const TSDevice* _Nonnull)device flags: (TS_BitonicSortFlags)flags size: (uint32_t)size NS_SWIFT_NAME(create(device:flags:size:));
	-(BOOL)create_5: (const TSDevice* _Nonnull)device flags: (TS_BitonicSortFlags)flags size: (uint32_t)size groups: (uint32_t)groups NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_5_: (const TSDevice* _Nonnull)device flags: (TS_BitonicSortFlags)flags size: (uint32_t)size groups: (uint32_t)groups NS_SWIFT_NAME(create(device:flags:size:groups:));
	-(BOOL)create_6: (const TSDevice* _Nonnull)device flags: (TS_BitonicSortFlags)flags size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_6_: (const TSDevice* _Nonnull)device flags: (TS_BitonicSortFlags)flags size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions NS_SWIFT_NAME(create(device:flags:size:groups:regions:));
	-(BOOL)create_7: (const TSDevice* _Nonnull)device flags: (TS_BitonicSortFlags)flags size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(_:_:_:_:_:_:));
	-(BOOL)create_7_: (const TSDevice* _Nonnull)device flags: (TS_BitonicSortFlags)flags size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(device:flags:size:groups:regions:async:));
	-(BOOL)dispatch: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data keys_offset: (uint32_t)keys_offset data_offset: (uint32_t)data_offset size: (uint32_t)size NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data keys_offset: (uint32_t)keys_offset data_offset: (uint32_t)data_offset size: (uint32_t)size NS_SWIFT_NAME(dispatch(compute:data:keys_offset:data_offset:size:));
	-(BOOL)dispatch_1: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data keys_offset: (uint32_t)keys_offset data_offset: (uint32_t)data_offset size: (uint32_t)size flags: (TS_BitonicSortFlags)flags NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_1_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data keys_offset: (uint32_t)keys_offset data_offset: (uint32_t)data_offset size: (uint32_t)size flags: (TS_BitonicSortFlags)flags NS_SWIFT_NAME(dispatch(compute:data:keys_offset:data_offset:size:flags:));
	-(BOOL)dispatch_2: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count keys_offsets: (const uint32_t* _Nonnull)keys_offsets data_offsets: (const uint32_t* _Nonnull)data_offsets sizes: (const uint32_t* _Nonnull)sizes NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_2_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count keys_offsets: (const uint32_t* _Nonnull)keys_offsets data_offsets: (const uint32_t* _Nonnull)data_offsets sizes: (const uint32_t* _Nonnull)sizes NS_SWIFT_NAME(dispatch(compute:data:count:keys_offsets:data_offsets:sizes:));
	-(BOOL)dispatch_3: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count keys_offsets: (const uint32_t* _Nonnull)keys_offsets data_offsets: (const uint32_t* _Nonnull)data_offsets sizes: (const uint32_t* _Nonnull)sizes flags: (TS_BitonicSortFlags)flags NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:_:));
	-(BOOL)dispatch_3_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count keys_offsets: (const uint32_t* _Nonnull)keys_offsets data_offsets: (const uint32_t* _Nonnull)data_offsets sizes: (const uint32_t* _Nonnull)sizes flags: (TS_BitonicSortFlags)flags NS_SWIFT_NAME(dispatch(compute:data:count:keys_offsets:data_offsets:sizes:flags:));
	-(BOOL)dispatchIndirect: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:));
	-(BOOL)dispatchIndirect_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(compute:data:dispatch:offset:));
	-(BOOL)dispatchIndirect_1: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_BitonicSortFlags)flags NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:));
	-(BOOL)dispatchIndirect_1_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_BitonicSortFlags)flags NS_SWIFT_NAME(dispatchIndirect(compute:data:dispatch:offset:flags:));
	-(BOOL)dispatchIndirect_2: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:));
	-(BOOL)dispatchIndirect_2_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:offset:));
	-(BOOL)dispatchIndirect_3: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_BitonicSortFlags)flags NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_3_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset flags: (TS_BitonicSortFlags)flags NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:offset:flags:));
	-(BOOL)dispatchIndirect_4: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_4_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:count_offset:dispatch_offset:));
	-(BOOL)dispatchIndirect_5: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset flags: (TS_BitonicSortFlags)flags NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_5_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data count: (TSBuffer* _Nonnull)count dispatch: (TSBuffer* _Nonnull)dispatch count_offset: (uint32_t)count_offset dispatch_offset: (uint32_t)dispatch_offset flags: (TS_BitonicSortFlags)flags NS_SWIFT_NAME(dispatchIndirect(compute:data:count:dispatch:count_offset:dispatch_offset:flags:));
@end

/// Tellusim::SpatialGrid
NS_SWIFT_NAME(SpatialGrid)
TS_CAPI @interface TSSpatialGrid : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::SpatialGrid* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::SpatialGrid&)p;
		-(Tellusim::SpatialGrid* _Nonnull)pointer;
		-(Tellusim::SpatialGrid&)ref;
	#endif
	-(BOOL)equalPtr: (const TSSpatialGrid* _Nonnull)p;
	-(TSSpatialGrid* _Nonnull)copyPtr;
	-(TSSpatialGrid* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSSpatialGrid* _Nonnull)null;
	-(void)clear;
	-(BOOL)isCreated;
	-(uint32_t)getGroupSize NS_SWIFT_NAME(groupSize());
	-(TSRadixSort* _Nonnull)getRadixSort NS_SWIFT_NAME(radixSort());
	-(BOOL)create: (const TSDevice* _Nonnull)device sort: (TSRadixSort* _Nonnull)sort NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_: (const TSDevice* _Nonnull)device sort: (TSRadixSort* _Nonnull)sort NS_SWIFT_NAME(create(device:sort:));
	-(BOOL)create_1: (const TSDevice* _Nonnull)device sort: (TSRadixSort* _Nonnull)sort groups: (uint32_t)groups NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_1_: (const TSDevice* _Nonnull)device sort: (TSRadixSort* _Nonnull)sort groups: (uint32_t)groups NS_SWIFT_NAME(create(device:sort:groups:));
	-(BOOL)dispatch: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data offset: (uint32_t)offset size: (uint32_t)size NS_SWIFT_NAME(dispatch(_:_:_:_:));
	-(BOOL)dispatch_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data offset: (uint32_t)offset size: (uint32_t)size NS_SWIFT_NAME(dispatch(compute:data:offset:size:));
	-(BOOL)dispatch_1: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data offset: (uint32_t)offset size: (uint32_t)size bits: (uint32_t)bits NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_1_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data offset: (uint32_t)offset size: (uint32_t)size bits: (uint32_t)bits NS_SWIFT_NAME(dispatch(compute:data:offset:size:bits:));
	-(BOOL)dispatchIndirect: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:));
	-(BOOL)dispatchIndirect_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(compute:data:dispatch:offset:));
	-(BOOL)dispatchIndirect_1: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:));
	-(BOOL)dispatchIndirect_1_: (TSCompute* _Nonnull)compute data: (TSBuffer* _Nonnull)data dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(compute:data:dispatch:offset:max_size:));
@end

/// Tellusim::SpatialTree
NS_SWIFT_NAME(SpatialTree)
TS_CAPI @interface TSSpatialTree : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::SpatialTree* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::SpatialTree&)p;
		-(Tellusim::SpatialTree* _Nonnull)pointer;
		-(Tellusim::SpatialTree&)ref;
	#endif
	-(BOOL)equalPtr: (const TSSpatialTree* _Nonnull)p;
	-(TSSpatialTree* _Nonnull)copyPtr;
	-(TSSpatialTree* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSSpatialTree* _Nonnull)null;
	-(void)clear;
	-(BOOL)isCreated: (TS_SpatialTreeFlags)flags NS_SWIFT_NAME(isCreated(_:));
	-(BOOL)isCreated_: (TS_SpatialTreeFlags)flags NS_SWIFT_NAME(isCreated(flags:));
	-(uint32_t)getGroupSize NS_SWIFT_NAME(groupSize());
	-(uint32_t)getBoundsNodes NS_SWIFT_NAME(boundsNodes());
	-(uint32_t)getMaxNodes NS_SWIFT_NAME(maxNodes());
	-(uint32_t)getMaxRegions NS_SWIFT_NAME(maxRegions());
	-(TSRadixSort* _Nonnull)getRadixSort NS_SWIFT_NAME(radixSort());
	-(TSBuffer* _Nonnull)getHashBuffer NS_SWIFT_NAME(hashBuffer());
	-(TSBuffer* _Nonnull)getParentsBuffer NS_SWIFT_NAME(parentsBuffer());
	-(TSBuffer* _Nonnull)getCounterBuffer NS_SWIFT_NAME(counterBuffer());
	-(BOOL)create: (const TSDevice* _Nonnull)device mode: (TS_SpatialTreeMode)mode sort: (TSRadixSort* _Nonnull)sort size: (uint32_t)size NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_: (const TSDevice* _Nonnull)device mode: (TS_SpatialTreeMode)mode sort: (TSRadixSort* _Nonnull)sort size: (uint32_t)size NS_SWIFT_NAME(create(device:mode:sort:size:));
	-(BOOL)create_1: (const TSDevice* _Nonnull)device mode: (TS_SpatialTreeMode)mode sort: (TSRadixSort* _Nonnull)sort size: (uint32_t)size groups: (uint32_t)groups NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_1_: (const TSDevice* _Nonnull)device mode: (TS_SpatialTreeMode)mode sort: (TSRadixSort* _Nonnull)sort size: (uint32_t)size groups: (uint32_t)groups NS_SWIFT_NAME(create(device:mode:sort:size:groups:));
	-(BOOL)create_2: (const TSDevice* _Nonnull)device mode: (TS_SpatialTreeMode)mode sort: (TSRadixSort* _Nonnull)sort size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions NS_SWIFT_NAME(create(_:_:_:_:_:_:));
	-(BOOL)create_2_: (const TSDevice* _Nonnull)device mode: (TS_SpatialTreeMode)mode sort: (TSRadixSort* _Nonnull)sort size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions NS_SWIFT_NAME(create(device:mode:sort:size:groups:regions:));
	-(BOOL)create_3: (const TSDevice* _Nonnull)device mode: (TS_SpatialTreeMode)mode sort: (TSRadixSort* _Nonnull)sort size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(_:_:_:_:_:_:_:));
	-(BOOL)create_3_: (const TSDevice* _Nonnull)device mode: (TS_SpatialTreeMode)mode sort: (TSRadixSort* _Nonnull)sort size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(device:mode:sort:size:groups:regions:async:));
	-(BOOL)create_4: (const TSDevice* _Nonnull)device flags: (TS_SpatialTreeFlags)flags sort: (TSRadixSort* _Nonnull)sort size: (uint32_t)size NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_4_: (const TSDevice* _Nonnull)device flags: (TS_SpatialTreeFlags)flags sort: (TSRadixSort* _Nonnull)sort size: (uint32_t)size NS_SWIFT_NAME(create(device:flags:sort:size:));
	-(BOOL)create_5: (const TSDevice* _Nonnull)device flags: (TS_SpatialTreeFlags)flags sort: (TSRadixSort* _Nonnull)sort size: (uint32_t)size groups: (uint32_t)groups NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_5_: (const TSDevice* _Nonnull)device flags: (TS_SpatialTreeFlags)flags sort: (TSRadixSort* _Nonnull)sort size: (uint32_t)size groups: (uint32_t)groups NS_SWIFT_NAME(create(device:flags:sort:size:groups:));
	-(BOOL)create_6: (const TSDevice* _Nonnull)device flags: (TS_SpatialTreeFlags)flags sort: (TSRadixSort* _Nonnull)sort size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions NS_SWIFT_NAME(create(_:_:_:_:_:_:));
	-(BOOL)create_6_: (const TSDevice* _Nonnull)device flags: (TS_SpatialTreeFlags)flags sort: (TSRadixSort* _Nonnull)sort size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions NS_SWIFT_NAME(create(device:flags:sort:size:groups:regions:));
	-(BOOL)create_7: (const TSDevice* _Nonnull)device flags: (TS_SpatialTreeFlags)flags sort: (TSRadixSort* _Nonnull)sort size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(_:_:_:_:_:_:_:));
	-(BOOL)create_7_: (const TSDevice* _Nonnull)device flags: (TS_SpatialTreeFlags)flags sort: (TSRadixSort* _Nonnull)sort size: (uint32_t)size groups: (uint32_t)groups regions: (uint32_t)regions async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(device:flags:sort:size:groups:regions:async:));
	-(BOOL)dispatch: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes offset: (uint32_t)offset size: (uint32_t)size NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes offset: (uint32_t)offset size: (uint32_t)size NS_SWIFT_NAME(dispatch(compute:hash:nodes:offset:size:));
	-(BOOL)dispatch_1: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes offset: (uint32_t)offset size: (uint32_t)size flags: (TS_SpatialTreeFlags)flags NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_1_: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes offset: (uint32_t)offset size: (uint32_t)size flags: (TS_SpatialTreeFlags)flags NS_SWIFT_NAME(dispatch(compute:hash:nodes:offset:size:flags:));
	-(BOOL)dispatch_2: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes count: (uint32_t)count offsets: (const uint32_t* _Nonnull)offsets sizes: (const uint32_t* _Nonnull)sizes NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_2_: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes count: (uint32_t)count offsets: (const uint32_t* _Nonnull)offsets sizes: (const uint32_t* _Nonnull)sizes NS_SWIFT_NAME(dispatch(compute:hash:nodes:count:offsets:sizes:));
	-(BOOL)dispatch_3: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes count: (uint32_t)count offsets: (const uint32_t* _Nonnull)offsets sizes: (const uint32_t* _Nonnull)sizes flags: (TS_SpatialTreeFlags)flags NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:_:));
	-(BOOL)dispatch_3_: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes count: (uint32_t)count offsets: (const uint32_t* _Nonnull)offsets sizes: (const uint32_t* _Nonnull)sizes flags: (TS_SpatialTreeFlags)flags NS_SWIFT_NAME(dispatch(compute:hash:nodes:count:offsets:sizes:flags:));
	-(BOOL)dispatchIndirect: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:));
	-(BOOL)dispatchIndirect_: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(compute:hash:nodes:dispatch:offset:));
	-(BOOL)dispatchIndirect_1: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_1_: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(compute:hash:nodes:dispatch:offset:max_size:));
	-(BOOL)dispatchIndirect_2: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset max_size: (uint32_t)max_size flags: (TS_SpatialTreeFlags)flags NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_2_: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset max_size: (uint32_t)max_size flags: (TS_SpatialTreeFlags)flags NS_SWIFT_NAME(dispatchIndirect(compute:hash:nodes:dispatch:offset:max_size:flags:));
	-(BOOL)dispatchIndirect_3: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_3_: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset NS_SWIFT_NAME(dispatchIndirect(compute:hash:nodes:count:dispatch:offset:));
	-(BOOL)dispatchIndirect_4: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_4_: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset max_size: (uint32_t)max_size NS_SWIFT_NAME(dispatchIndirect(compute:hash:nodes:count:dispatch:offset:max_size:));
	-(BOOL)dispatchIndirect_5: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset max_size: (uint32_t)max_size flags: (TS_SpatialTreeFlags)flags NS_SWIFT_NAME(dispatchIndirect(_:_:_:_:_:_:_:_:));
	-(BOOL)dispatchIndirect_5_: (TSCompute* _Nonnull)compute hash: (TS_SpatialTreeHash)hash nodes: (TSBuffer* _Nonnull)nodes count: (uint32_t)count dispatch: (TSBuffer* _Nonnull)dispatch offset: (uint32_t)offset max_size: (uint32_t)max_size flags: (TS_SpatialTreeFlags)flags NS_SWIFT_NAME(dispatchIndirect(compute:hash:nodes:count:dispatch:offset:max_size:flags:));
@end

/// Tellusim::FourierTransform
NS_SWIFT_NAME(FourierTransform)
TS_CAPI @interface TSFourierTransform : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::FourierTransform* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::FourierTransform&)p;
		-(Tellusim::FourierTransform* _Nonnull)pointer;
		-(Tellusim::FourierTransform&)ref;
	#endif
	-(BOOL)equalPtr: (const TSFourierTransform* _Nonnull)p;
	-(TSFourierTransform* _Nonnull)copyPtr;
	-(TSFourierTransform* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSFourierTransform* _Nonnull)null;
	-(void)clear;
	-(BOOL)isCreated: (TS_FourierTransformMode)mode NS_SWIFT_NAME(isCreated(_:));
	-(BOOL)isCreated_: (TS_FourierTransformMode)mode NS_SWIFT_NAME(isCreated(mode:));
	-(BOOL)isCreated_1: (TS_FourierTransformFlags)flags NS_SWIFT_NAME(isCreated(_:));
	-(BOOL)isCreated_1_: (TS_FourierTransformFlags)flags NS_SWIFT_NAME(isCreated(flags:));
	-(uint32_t)getMaxWidth NS_SWIFT_NAME(maxWidth());
	-(uint32_t)getMaxHeight NS_SWIFT_NAME(maxHeight());
	-(uint32_t)getAlignedSize: (uint32_t)size NS_SWIFT_NAME(alignedSize(_:));
	-(uint32_t)getAlignedSize_: (uint32_t)size NS_SWIFT_NAME(alignedSize(size:));
	-(BOOL)create: (const TSDevice* _Nonnull)device mode: (TS_FourierTransformMode)mode width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_: (const TSDevice* _Nonnull)device mode: (TS_FourierTransformMode)mode width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(create(device:mode:width:height:));
	-(BOOL)create_1: (const TSDevice* _Nonnull)device mode: (TS_FourierTransformMode)mode width: (uint32_t)width height: (uint32_t)height async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_1_: (const TSDevice* _Nonnull)device mode: (TS_FourierTransformMode)mode width: (uint32_t)width height: (uint32_t)height async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(device:mode:width:height:async:));
	-(BOOL)create_2: (const TSDevice* _Nonnull)device flags: (TS_FourierTransformFlags)flags width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_2_: (const TSDevice* _Nonnull)device flags: (TS_FourierTransformFlags)flags width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(create(device:flags:width:height:));
	-(BOOL)create_3: (const TSDevice* _Nonnull)device flags: (TS_FourierTransformFlags)flags width: (uint32_t)width height: (uint32_t)height async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(_:_:_:_:_:));
	-(BOOL)create_3_: (const TSDevice* _Nonnull)device flags: (TS_FourierTransformFlags)flags width: (uint32_t)width height: (uint32_t)height async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(device:flags:width:height:async:));
	-(BOOL)dispatch: (TSCompute* _Nonnull)compute mode: (TS_FourierTransformMode)mode op: (TS_FourierTransformOperation)op dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:_:));
	-(BOOL)dispatch_: (TSCompute* _Nonnull)compute mode: (TS_FourierTransformMode)mode op: (TS_FourierTransformOperation)op dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src dest_slice: (TSSlice)dest_slice src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(compute:mode:op:dest:src:dest_slice:src_slice:));
	-(BOOL)dispatch_1: (TSCompute* _Nonnull)compute mode: (TS_FourierTransformMode)mode op: (TS_FourierTransformOperation)op dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_1_: (TSCompute* _Nonnull)compute mode: (TS_FourierTransformMode)mode op: (TS_FourierTransformOperation)op dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src src_slice: (TSSlice)src_slice NS_SWIFT_NAME(dispatch(compute:mode:op:dest:src:src_slice:));
	-(BOOL)dispatch_2: (TSCompute* _Nonnull)compute mode: (TS_FourierTransformMode)mode op: (TS_FourierTransformOperation)op dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_2_: (TSCompute* _Nonnull)compute mode: (TS_FourierTransformMode)mode op: (TS_FourierTransformOperation)op dest: (TSTexture* _Nonnull)dest src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(dispatch(compute:mode:op:dest:src:));
@end

/// Tellusim::TensorGraph
NS_SWIFT_NAME(TensorGraph)
TS_CAPI @interface TSTensorGraph : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::TensorGraph* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::TensorGraph&)p;
		-(Tellusim::TensorGraph* _Nonnull)pointer;
		-(Tellusim::TensorGraph&)ref;
	#endif
	-(BOOL)equalPtr: (const TSTensorGraph* _Nonnull)p;
	-(TSTensorGraph* _Nonnull)copyPtr;
	-(TSTensorGraph* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSTensorGraph* _Nonnull)null;
	-(void)clear;
	-(BOOL)isCreated;
	-(BOOL)create: (const TSDevice* _Nonnull)device NS_SWIFT_NAME(create(_:));
	-(BOOL)create_: (const TSDevice* _Nonnull)device NS_SWIFT_NAME(create(device:));
	-(BOOL)create_1: (const TSDevice* _Nonnull)device flags: (TS_TensorGraphFlags)flags NS_SWIFT_NAME(create(_:_:));
	-(BOOL)create_1_: (const TSDevice* _Nonnull)device flags: (TS_TensorGraphFlags)flags NS_SWIFT_NAME(create(device:flags:));
	-(BOOL)create_2: (const TSDevice* _Nonnull)device flags: (TS_TensorGraphFlags)flags masks: (TS_TensorGraphMasks)masks NS_SWIFT_NAME(create(_:_:_:));
	-(BOOL)create_2_: (const TSDevice* _Nonnull)device flags: (TS_TensorGraphFlags)flags masks: (TS_TensorGraphMasks)masks NS_SWIFT_NAME(create(device:flags:masks:));
	-(BOOL)create_3: (const TSDevice* _Nonnull)device flags: (TS_TensorGraphFlags)flags masks: (TS_TensorGraphMasks)masks async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(_:_:_:_:));
	-(BOOL)create_3_: (const TSDevice* _Nonnull)device flags: (TS_TensorGraphFlags)flags masks: (TS_TensorGraphMasks)masks async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(device:flags:masks:async:));
	-(BOOL)dispatch: (TSCompute* _Nonnull)compute op: (TS_TensorGraphOperation)op dest: (TSTensor)dest NS_SWIFT_NAME(dispatch(_:_:_:));
	-(BOOL)dispatch_: (TSCompute* _Nonnull)compute op: (TS_TensorGraphOperation)op dest: (TSTensor)dest NS_SWIFT_NAME(dispatch(compute:op:dest:));
	-(BOOL)dispatch_1: (TSCompute* _Nonnull)compute op: (TS_TensorGraphOperation)op dest: (TSTensor)dest flags: (TS_TensorGraphFlags)flags NS_SWIFT_NAME(dispatch(_:_:_:_:));
	-(BOOL)dispatch_1_: (TSCompute* _Nonnull)compute op: (TS_TensorGraphOperation)op dest: (TSTensor)dest flags: (TS_TensorGraphFlags)flags NS_SWIFT_NAME(dispatch(compute:op:dest:flags:));
	-(BOOL)dispatch_2: (TSCompute* _Nonnull)compute op: (TS_TensorGraphOperation)op dest: (TSTensor* _Nonnull)dest src_0: (TSTensor)src_0 NS_SWIFT_NAME(dispatch(_:_:_:_:));
	-(BOOL)dispatch_2_: (TSCompute* _Nonnull)compute op: (TS_TensorGraphOperation)op dest: (TSTensor* _Nonnull)dest src_0: (TSTensor)src_0 NS_SWIFT_NAME(dispatch(compute:op:dest:src_0:));
	-(BOOL)dispatch_3: (TSCompute* _Nonnull)compute op: (TS_TensorGraphOperation)op dest: (TSTensor* _Nonnull)dest src_0: (TSTensor)src_0 flags: (TS_TensorGraphFlags)flags NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_3_: (TSCompute* _Nonnull)compute op: (TS_TensorGraphOperation)op dest: (TSTensor* _Nonnull)dest src_0: (TSTensor)src_0 flags: (TS_TensorGraphFlags)flags NS_SWIFT_NAME(dispatch(compute:op:dest:src_0:flags:));
	-(BOOL)dispatch_4: (TSCompute* _Nonnull)compute op: (TS_TensorGraphOperation)op dest: (TSTensor* _Nonnull)dest src_0: (TSTensor)src_0 src_1: (TSTensor)src_1 NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_4_: (TSCompute* _Nonnull)compute op: (TS_TensorGraphOperation)op dest: (TSTensor* _Nonnull)dest src_0: (TSTensor)src_0 src_1: (TSTensor)src_1 NS_SWIFT_NAME(dispatch(compute:op:dest:src_0:src_1:));
	-(BOOL)dispatch_5: (TSCompute* _Nonnull)compute op: (TS_TensorGraphOperation)op dest: (TSTensor* _Nonnull)dest src_0: (TSTensor)src_0 src_1: (TSTensor)src_1 flags: (TS_TensorGraphFlags)flags NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_5_: (TSCompute* _Nonnull)compute op: (TS_TensorGraphOperation)op dest: (TSTensor* _Nonnull)dest src_0: (TSTensor)src_0 src_1: (TSTensor)src_1 flags: (TS_TensorGraphFlags)flags NS_SWIFT_NAME(dispatch(compute:op:dest:src_0:src_1:flags:));
	-(BOOL)dispatch_6: (TSCompute* _Nonnull)compute op: (TS_TensorGraphOperation)op dest: (TSTensor* _Nonnull)dest src_0: (TSTensor)src_0 src_1: (TSTensor)src_1 src_2: (TSTensor)src_2 NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:));
	-(BOOL)dispatch_6_: (TSCompute* _Nonnull)compute op: (TS_TensorGraphOperation)op dest: (TSTensor* _Nonnull)dest src_0: (TSTensor)src_0 src_1: (TSTensor)src_1 src_2: (TSTensor)src_2 NS_SWIFT_NAME(dispatch(compute:op:dest:src_0:src_1:src_2:));
	-(BOOL)dispatch_7: (TSCompute* _Nonnull)compute op: (TS_TensorGraphOperation)op dest: (TSTensor* _Nonnull)dest src_0: (TSTensor)src_0 src_1: (TSTensor)src_1 src_2: (TSTensor)src_2 flags: (TS_TensorGraphFlags)flags NS_SWIFT_NAME(dispatch(_:_:_:_:_:_:_:));
	-(BOOL)dispatch_7_: (TSCompute* _Nonnull)compute op: (TS_TensorGraphOperation)op dest: (TSTensor* _Nonnull)dest src_0: (TSTensor)src_0 src_1: (TSTensor)src_1 src_2: (TSTensor)src_2 flags: (TS_TensorGraphFlags)flags NS_SWIFT_NAME(dispatch(compute:op:dest:src_0:src_1:src_2:flags:));
	-(BOOL)dispatch_8: (TSCompute* _Nonnull)compute dest: (TSTensor)dest src: (TSTexture* _Nonnull)src region: (TSRegion)region NS_SWIFT_NAME(dispatch(_:_:_:_:));
	-(BOOL)dispatch_8_: (TSCompute* _Nonnull)compute dest: (TSTensor)dest src: (TSTexture* _Nonnull)src region: (TSRegion)region NS_SWIFT_NAME(dispatch(compute:dest:src:region:));
	-(BOOL)dispatch_9: (TSCompute* _Nonnull)compute dest: (TSTensor)dest src: (TSTexture* _Nonnull)src region: (TSRegion)region slice: (TSSlice)slice NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_9_: (TSCompute* _Nonnull)compute dest: (TSTensor)dest src: (TSTexture* _Nonnull)src region: (TSRegion)region slice: (TSSlice)slice NS_SWIFT_NAME(dispatch(compute:dest:src:region:slice:));
	-(BOOL)dispatch_10: (TSCompute* _Nonnull)compute dest: (TSTensor)dest src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(dispatch(_:_:_:));
	-(BOOL)dispatch_10_: (TSCompute* _Nonnull)compute dest: (TSTensor)dest src: (TSTexture* _Nonnull)src NS_SWIFT_NAME(dispatch(compute:dest:src:));
	-(BOOL)dispatch_11: (TSCompute* _Nonnull)compute dest: (TSTensor)dest src: (TSTexture* _Nonnull)src slice: (TSSlice)slice NS_SWIFT_NAME(dispatch(_:_:_:_:));
	-(BOOL)dispatch_11_: (TSCompute* _Nonnull)compute dest: (TSTensor)dest src: (TSTexture* _Nonnull)src slice: (TSSlice)slice NS_SWIFT_NAME(dispatch(compute:dest:src:slice:));
	-(BOOL)dispatch_12: (TSCompute* _Nonnull)compute dest: (TSTexture* _Nonnull)dest src: (TSTensor)src region: (TSRegion)region NS_SWIFT_NAME(dispatch(_:_:_:_:));
	-(BOOL)dispatch_12_: (TSCompute* _Nonnull)compute dest: (TSTexture* _Nonnull)dest src: (TSTensor)src region: (TSRegion)region NS_SWIFT_NAME(dispatch(compute:dest:src:region:));
	-(BOOL)dispatch_13: (TSCompute* _Nonnull)compute dest: (TSTexture* _Nonnull)dest src: (TSTensor)src region: (TSRegion)region slice: (TSSlice)slice NS_SWIFT_NAME(dispatch(_:_:_:_:_:));
	-(BOOL)dispatch_13_: (TSCompute* _Nonnull)compute dest: (TSTexture* _Nonnull)dest src: (TSTensor)src region: (TSRegion)region slice: (TSSlice)slice NS_SWIFT_NAME(dispatch(compute:dest:src:region:slice:));
	-(BOOL)dispatch_14: (TSCompute* _Nonnull)compute dest: (TSTexture* _Nonnull)dest src: (TSTensor)src NS_SWIFT_NAME(dispatch(_:_:_:));
	-(BOOL)dispatch_14_: (TSCompute* _Nonnull)compute dest: (TSTexture* _Nonnull)dest src: (TSTensor)src NS_SWIFT_NAME(dispatch(compute:dest:src:));
	-(BOOL)dispatch_15: (TSCompute* _Nonnull)compute dest: (TSTexture* _Nonnull)dest src: (TSTensor)src slice: (TSSlice)slice NS_SWIFT_NAME(dispatch(_:_:_:_:));
	-(BOOL)dispatch_15_: (TSCompute* _Nonnull)compute dest: (TSTexture* _Nonnull)dest src: (TSTensor)src slice: (TSSlice)slice NS_SWIFT_NAME(dispatch(compute:dest:src:slice:));
@end

/// Tellusim::Controller::ButtonPressedCallback
NS_SWIFT_NAME(Controller.ButtonPressedCallback)
@protocol TSControllerButtonPressedCallback <NSObject>
	-(void)run: (TSController* _Nonnull)controller button: (TS_ControllerButton)button NS_SWIFT_NAME(run(_:_:));
@end

/// Tellusim::Controller::ButtonReleasedCallback
NS_SWIFT_NAME(Controller.ButtonReleasedCallback)
@protocol TSControllerButtonReleasedCallback <NSObject>
	-(void)run: (TSController* _Nonnull)controller button: (TS_ControllerButton)button NS_SWIFT_NAME(run(_:_:));
@end

/// Tellusim::Controller::ConnectedCallback
NS_SWIFT_NAME(Controller.ConnectedCallback)
@protocol TSControllerConnectedCallback <NSObject>
	-(void)run: (TSController* _Nonnull)controller NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::Controller::DisconnectedCallback
NS_SWIFT_NAME(Controller.DisconnectedCallback)
@protocol TSControllerDisconnectedCallback <NSObject>
	-(void)run: (TSController* _Nonnull)controller NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::Controller
NS_SWIFT_NAME(Controller)
TS_CAPI @interface TSController : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	-(id _Nonnull)init_1: (uint32_t)index NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_1_: (uint32_t)index NS_SWIFT_NAME(init(index:));
	-(id _Nonnull)init_2: (TS_ControllerType)type NS_SWIFT_NAME(init(_:));
	-(id _Nonnull)init_2_: (TS_ControllerType)type NS_SWIFT_NAME(init(type:));
	-(id _Nonnull)init_3: (TS_ControllerType)type index: (uint32_t)index NS_SWIFT_NAME(init(_:_:));
	-(id _Nonnull)init_3_: (TS_ControllerType)type index: (uint32_t)index NS_SWIFT_NAME(init(type:index:));
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Controller* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Controller&)p;
		-(Tellusim::Controller* _Nonnull)pointer;
		-(Tellusim::Controller&)ref;
	#endif
	-(BOOL)equalPtr: (const TSController* _Nonnull)p;
	-(TSController* _Nonnull)copyPtr;
	-(TSController* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSController* _Nonnull)null;
	+(uint32_t)getNumControllers NS_SWIFT_NAME(numControllers());
	+(uint32_t)findController: (const char* _Nonnull)name NS_SWIFT_NAME(findController(_:));
	+(uint32_t)findController_: (const char* _Nonnull)name NS_SWIFT_NAME(findController(name:));
	+(TSController* _Nonnull)getController: (uint32_t)index NS_SWIFT_NAME(controller(_:));
	+(TSController* _Nonnull)getController_: (uint32_t)index NS_SWIFT_NAME(controller(index:));
	+(void)update;
	-(void)setType: (TS_ControllerType)type NS_SWIFT_NAME(setType(_:));
	-(void)setType_: (TS_ControllerType)type NS_SWIFT_NAME(setType(type:));
	-(TS_ControllerType)getType NS_SWIFT_NAME(type());
	+(NSString* _Nonnull)getTypeName: (TS_ControllerType)type NS_SWIFT_NAME(typeName(_:));
	+(NSString* _Nonnull)getTypeName_: (TS_ControllerType)type NS_SWIFT_NAME(typeName(type:));
	-(NSString* _Nonnull)getTypeName_1 NS_SWIFT_NAME(typeName());
	-(BOOL)isUnknown;
	-(BOOL)isJoystick;
	-(BOOL)isGamePad;
	-(BOOL)isWheel;
	-(void)setIndex: (uint32_t)index NS_SWIFT_NAME(setIndex(_:));
	-(void)setIndex_: (uint32_t)index NS_SWIFT_NAME(setIndex(index:));
	-(uint32_t)getIndex NS_SWIFT_NAME(index());
	-(void)setName: (const char* _Nonnull)name NS_SWIFT_NAME(setName(_:));
	-(void)setName_: (const char* _Nonnull)name NS_SWIFT_NAME(setName(name:));
	-(NSString* _Nonnull)getName NS_SWIFT_NAME(name());
	-(void)setModel: (const char* _Nonnull)model NS_SWIFT_NAME(setModel(_:));
	-(void)setModel_: (const char* _Nonnull)model NS_SWIFT_NAME(setModel(model:));
	-(NSString* _Nonnull)getModel NS_SWIFT_NAME(model());
	-(BOOL)isConnected;
	-(BOOL)wasConnected;
	-(BOOL)connect NS_SWIFT_NAME(connect());
	-(BOOL)connect_1: (const char* _Nullable)name NS_SWIFT_NAME(connect(_:));
	-(BOOL)connect_1_: (const char* _Nullable)name NS_SWIFT_NAME(connect(name:));
	-(void)release_ NS_SWIFT_NAME(release());
	-(void)setStickName: (TS_ControllerStick)stick name: (const char* _Nonnull)name NS_SWIFT_NAME(setStickName(_:_:));
	-(void)setStickName_: (TS_ControllerStick)stick name: (const char* _Nonnull)name NS_SWIFT_NAME(setStickName(stick:name:));
	-(NSString* _Nonnull)getStickName: (TS_ControllerStick)stick NS_SWIFT_NAME(stickName(_:));
	-(NSString* _Nonnull)getStickName_: (TS_ControllerStick)stick NS_SWIFT_NAME(stickName(stick:));
	-(TS_ControllerStick)findStick: (const char* _Nonnull)name NS_SWIFT_NAME(findStick(_:));
	-(TS_ControllerStick)findStick_: (const char* _Nonnull)name NS_SWIFT_NAME(findStick(name:));
	-(void)setStick: (TS_ControllerStick)stick x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setStick(_:_:_:));
	-(void)setStick_: (TS_ControllerStick)stick x: (float32_t)x y: (float32_t)y NS_SWIFT_NAME(setStick(stick:x:y:));
	-(float32_t)getStickX: (TS_ControllerStick)stick NS_SWIFT_NAME(stickX(_:));
	-(float32_t)getStickX_: (TS_ControllerStick)stick NS_SWIFT_NAME(stickX(stick:));
	-(float32_t)getStickY: (TS_ControllerStick)stick NS_SWIFT_NAME(stickY(_:));
	-(float32_t)getStickY_: (TS_ControllerStick)stick NS_SWIFT_NAME(stickY(stick:));
	-(void)setAxisName: (TS_ControllerAxis)axis name: (const char* _Nonnull)name NS_SWIFT_NAME(setAxisName(_:_:));
	-(void)setAxisName_: (TS_ControllerAxis)axis name: (const char* _Nonnull)name NS_SWIFT_NAME(setAxisName(axis:name:));
	-(NSString* _Nonnull)getAxisName: (TS_ControllerAxis)axis NS_SWIFT_NAME(axisName(_:));
	-(NSString* _Nonnull)getAxisName_: (TS_ControllerAxis)axis NS_SWIFT_NAME(axisName(axis:));
	-(TS_ControllerAxis)findAxis: (const char* _Nonnull)name NS_SWIFT_NAME(findAxis(_:));
	-(TS_ControllerAxis)findAxis_: (const char* _Nonnull)name NS_SWIFT_NAME(findAxis(name:));
	-(void)setAxis: (TS_ControllerAxis)axis value: (float32_t)value NS_SWIFT_NAME(setAxis(_:_:));
	-(void)setAxis_: (TS_ControllerAxis)axis value: (float32_t)value NS_SWIFT_NAME(setAxis(axis:value:));
	-(float32_t)getAxis: (TS_ControllerAxis)axis NS_SWIFT_NAME(axis(_:));
	-(float32_t)getAxis_: (TS_ControllerAxis)axis NS_SWIFT_NAME(axis(axis:));
	-(void)setButtonName: (TS_ControllerButton)button name: (const char* _Nonnull)name NS_SWIFT_NAME(setButtonName(_:_:));
	-(void)setButtonName_: (TS_ControllerButton)button name: (const char* _Nonnull)name NS_SWIFT_NAME(setButtonName(button:name:));
	-(NSString* _Nonnull)getButtonName: (TS_ControllerButton)button NS_SWIFT_NAME(buttonName(_:));
	-(NSString* _Nonnull)getButtonName_: (TS_ControllerButton)button NS_SWIFT_NAME(buttonName(button:));
	-(TS_ControllerButton)findButton: (const char* _Nonnull)name NS_SWIFT_NAME(findButton(_:));
	-(TS_ControllerButton)findButton_: (const char* _Nonnull)name NS_SWIFT_NAME(findButton(name:));
	-(void)setButton: (TS_ControllerButton)button value: (BOOL)value NS_SWIFT_NAME(setButton(_:_:));
	-(void)setButton_: (TS_ControllerButton)button value: (BOOL)value NS_SWIFT_NAME(setButton(button:value:));
	-(BOOL)getButton: (TS_ControllerButton)button NS_SWIFT_NAME(button(_:));
	-(BOOL)getButton_: (TS_ControllerButton)button NS_SWIFT_NAME(button(button:));
	-(BOOL)getButton_1: (TS_ControllerButton)button clear: (BOOL)clear NS_SWIFT_NAME(button(_:_:));
	-(BOOL)getButton_1_: (TS_ControllerButton)button clear: (BOOL)clear NS_SWIFT_NAME(button(button:clear:));
	-(void)setButtonValue: (TS_ControllerButton)button value: (float32_t)value NS_SWIFT_NAME(setButtonValue(_:_:));
	-(void)setButtonValue_: (TS_ControllerButton)button value: (float32_t)value NS_SWIFT_NAME(setButtonValue(button:value:));
	-(float32_t)getButtonValue: (TS_ControllerButton)button NS_SWIFT_NAME(buttonValue(_:));
	-(float32_t)getButtonValue_: (TS_ControllerButton)button NS_SWIFT_NAME(buttonValue(button:));
	-(void)setMotorName: (TS_ControllerMotor)motor name: (const char* _Nonnull)name NS_SWIFT_NAME(setMotorName(_:_:));
	-(void)setMotorName_: (TS_ControllerMotor)motor name: (const char* _Nonnull)name NS_SWIFT_NAME(setMotorName(motor:name:));
	-(NSString* _Nonnull)getMotorName: (TS_ControllerMotor)motor NS_SWIFT_NAME(motorName(_:));
	-(NSString* _Nonnull)getMotorName_: (TS_ControllerMotor)motor NS_SWIFT_NAME(motorName(motor:));
	-(TS_ControllerMotor)findMotor: (const char* _Nonnull)name NS_SWIFT_NAME(findMotor(_:));
	-(TS_ControllerMotor)findMotor_: (const char* _Nonnull)name NS_SWIFT_NAME(findMotor(name:));
	-(void)setMotor: (TS_ControllerMotor)motor value: (float32_t)value NS_SWIFT_NAME(setMotor(_:_:));
	-(void)setMotor_: (TS_ControllerMotor)motor value: (float32_t)value NS_SWIFT_NAME(setMotor(motor:value:));
	-(float32_t)getMotor: (TS_ControllerMotor)motor NS_SWIFT_NAME(motor(_:));
	-(float32_t)getMotor_: (TS_ControllerMotor)motor NS_SWIFT_NAME(motor(motor:));
	-(void)setButtonPressedCallback: (id<TSControllerButtonPressedCallback> _Nullable)func NS_SWIFT_NAME(setButtonPressedCallback(_:));
	-(void)setButtonPressedCallback_: (id<TSControllerButtonPressedCallback> _Nullable)func NS_SWIFT_NAME(setButtonPressedCallback(func:));
	-(void)setButtonReleasedCallback: (id<TSControllerButtonReleasedCallback> _Nullable)func NS_SWIFT_NAME(setButtonReleasedCallback(_:));
	-(void)setButtonReleasedCallback_: (id<TSControllerButtonReleasedCallback> _Nullable)func NS_SWIFT_NAME(setButtonReleasedCallback(func:));
	-(void)setConnectedCallback: (id<TSControllerConnectedCallback> _Nullable)func NS_SWIFT_NAME(setConnectedCallback(_:));
	-(void)setConnectedCallback_: (id<TSControllerConnectedCallback> _Nullable)func NS_SWIFT_NAME(setConnectedCallback(func:));
	-(void)setDisconnectedCallback: (id<TSControllerDisconnectedCallback> _Nullable)func NS_SWIFT_NAME(setDisconnectedCallback(_:));
	-(void)setDisconnectedCallback_: (id<TSControllerDisconnectedCallback> _Nullable)func NS_SWIFT_NAME(setDisconnectedCallback(func:));
@end

NS_SWIFT_NAME(Controller.NameXbox)
TS_CAPI extern NSString* _Nonnull tsControllerNameXbox;

NS_SWIFT_NAME(Controller.NamePlayStation)
TS_CAPI extern NSString* _Nonnull tsControllerNamePlayStation;

NS_SWIFT_NAME(Controller.NameNintendo)
TS_CAPI extern NSString* _Nonnull tsControllerNameNintendo;

/// Tellusim::Desktop
NS_SWIFT_NAME(Desktop)
TS_CAPI @interface TSDesktop : NSObject {
		void *impl;
	}
	-(id _Nonnull)init;
	#if TS_OBJCPP
		-(id _Nonnull)init_ptr: (Tellusim::Desktop* _Nullable)p;
		-(id _Nonnull)init_ref: (const Tellusim::Desktop&)p;
		-(Tellusim::Desktop* _Nonnull)pointer;
		-(Tellusim::Desktop&)ref;
	#endif
	-(BOOL)equalPtr: (const TSDesktop* _Nonnull)p;
	-(TSDesktop* _Nonnull)copyPtr;
	-(TSDesktop* _Nonnull)clonePtr;
	-(void)clearPtr;
	-(void)destroyPtr;
	-(void)acquirePtr;
	-(void)unacquirePtr;
	-(BOOL)isValidPtr;
	-(BOOL)isOwnerPtr;
	-(BOOL)isConstPtr;
	-(uint32_t)getCountPtr;
	-(const void* _Nonnull)getInternalPtr;
	-(size_t)getSelfPtr;
	+(TSDesktop* _Nonnull)null;
	-(BOOL)update;
	-(uint32_t)getWidth NS_SWIFT_NAME(width());
	-(uint32_t)getHeight NS_SWIFT_NAME(height());
	-(int32_t)getPositionX NS_SWIFT_NAME(positionX());
	-(int32_t)getPositionY NS_SWIFT_NAME(positionY());
	-(float32_t)getScale NS_SWIFT_NAME(scale());
	-(uint32_t)getNumScreens NS_SWIFT_NAME(numScreens());
	-(NSString* _Nonnull)getScreenName: (uint32_t)index NS_SWIFT_NAME(screenName(_:));
	-(NSString* _Nonnull)getScreenName_: (uint32_t)index NS_SWIFT_NAME(screenName(index:));
	-(NSString* _Nonnull)getScreenDevice: (uint32_t)index NS_SWIFT_NAME(screenDevice(_:));
	-(NSString* _Nonnull)getScreenDevice_: (uint32_t)index NS_SWIFT_NAME(screenDevice(index:));
	-(uint32_t)getScreenWidth: (uint32_t)index NS_SWIFT_NAME(screenWidth(_:));
	-(uint32_t)getScreenWidth_: (uint32_t)index NS_SWIFT_NAME(screenWidth(index:));
	-(uint32_t)getScreenHeight: (uint32_t)index NS_SWIFT_NAME(screenHeight(_:));
	-(uint32_t)getScreenHeight_: (uint32_t)index NS_SWIFT_NAME(screenHeight(index:));
	-(int32_t)getScreenPositionX: (uint32_t)index NS_SWIFT_NAME(screenPositionX(_:));
	-(int32_t)getScreenPositionX_: (uint32_t)index NS_SWIFT_NAME(screenPositionX(index:));
	-(int32_t)getScreenPositionY: (uint32_t)index NS_SWIFT_NAME(screenPositionY(_:));
	-(int32_t)getScreenPositionY_: (uint32_t)index NS_SWIFT_NAME(screenPositionY(index:));
	-(uint32_t)getScreenFrequency: (uint32_t)index NS_SWIFT_NAME(screenFrequency(_:));
	-(uint32_t)getScreenFrequency_: (uint32_t)index NS_SWIFT_NAME(screenFrequency(index:));
	-(uint32_t)getNumModes: (uint32_t)index NS_SWIFT_NAME(numModes(_:));
	-(uint32_t)getNumModes_: (uint32_t)index NS_SWIFT_NAME(numModes(index:));
	-(uint32_t)getModeWidth: (uint32_t)index mode: (uint32_t)mode NS_SWIFT_NAME(modeWidth(_:_:));
	-(uint32_t)getModeWidth_: (uint32_t)index mode: (uint32_t)mode NS_SWIFT_NAME(modeWidth(index:mode:));
	-(uint32_t)getModeHeight: (uint32_t)index mode: (uint32_t)mode NS_SWIFT_NAME(modeHeight(_:_:));
	-(uint32_t)getModeHeight_: (uint32_t)index mode: (uint32_t)mode NS_SWIFT_NAME(modeHeight(index:mode:));
	-(uint32_t)getModeIndex: (uint32_t)index width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(modeIndex(_:_:_:));
	-(uint32_t)getModeIndex_: (uint32_t)index width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(modeIndex(index:width:height:));
	-(BOOL)setMode: (uint32_t)index width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setMode(_:_:_:));
	-(BOOL)setMode_: (uint32_t)index width: (uint32_t)width height: (uint32_t)height NS_SWIFT_NAME(setMode(index:width:height:));
	-(BOOL)restoreMode: (uint32_t)index NS_SWIFT_NAME(restoreMode(_:));
	-(BOOL)restoreMode_: (uint32_t)index NS_SWIFT_NAME(restoreMode(index:));
	-(uint32_t)getWidth_1: (uint32_t)index NS_SWIFT_NAME(width(_:));
	-(uint32_t)getWidth_1_: (uint32_t)index NS_SWIFT_NAME(width(index:));
	-(uint32_t)getHeight_1: (uint32_t)index NS_SWIFT_NAME(height(_:));
	-(uint32_t)getHeight_1_: (uint32_t)index NS_SWIFT_NAME(height(index:));
	-(int32_t)getPositionX_1: (uint32_t)index NS_SWIFT_NAME(positionX(_:));
	-(int32_t)getPositionX_1_: (uint32_t)index NS_SWIFT_NAME(positionX(index:));
	-(int32_t)getPositionY_1: (uint32_t)index NS_SWIFT_NAME(positionY(_:));
	-(int32_t)getPositionY_1_: (uint32_t)index NS_SWIFT_NAME(positionY(index:));
	-(uint32_t)getScreenIndex: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(screenIndex(_:_:));
	-(uint32_t)getScreenIndex_: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(screenIndex(x:y:));
	-(BOOL)setMouse: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setMouse(_:_:));
	-(BOOL)setMouse_: (int32_t)x y: (int32_t)y NS_SWIFT_NAME(setMouse(x:y:));
	-(BOOL)getMouse: (int32_t* _Nonnull)x y: (int32_t* _Nonnull)y NS_SWIFT_NAME(mouse(_:_:));
	-(BOOL)getMouse_: (int32_t* _Nonnull)x y: (int32_t* _Nonnull)y NS_SWIFT_NAME(mouse(x:y:));
@end

/// Tellusim
NS_SWIFT_NAME(Base)
TS_CAPI @interface TSBase : NSObject
	+(NSString* _Nonnull)getPlatformName: (TS_Platform)platform NS_SWIFT_NAME(platformName(_:));
	+(NSString* _Nonnull)getPlatformName_: (TS_Platform)platform NS_SWIFT_NAME(platformName(platform:));
	+(TS_Platform)findPlatformName: (const char* _Nonnull)name NS_SWIFT_NAME(findPlatformName(_:));
	+(TS_Platform)findPlatformName_: (const char* _Nonnull)name NS_SWIFT_NAME(findPlatformName(name:));
	+(BOOL)isPlatformAvailable: (TS_Platform)platform NS_SWIFT_NAME(isPlatformAvailable(_:));
	+(BOOL)isPlatformAvailable_: (TS_Platform)platform NS_SWIFT_NAME(isPlatformAvailable(platform:));
	+(NSString* _Nonnull)getFormatName: (TS_Format)format NS_SWIFT_NAME(formatName(_:));
	+(NSString* _Nonnull)getFormatName_: (TS_Format)format NS_SWIFT_NAME(formatName(format:));
	+(TS_Format)findFormatName: (const char* _Nonnull)name NS_SWIFT_NAME(findFormatName(_:));
	+(TS_Format)findFormatName_: (const char* _Nonnull)name NS_SWIFT_NAME(findFormatName(name:));
	+(NSString* _Nonnull)getGLSLFormatName: (TS_Format)format NS_SWIFT_NAME(GLSLFormatName(_:));
	+(NSString* _Nonnull)getGLSLFormatName_: (TS_Format)format NS_SWIFT_NAME(GLSLFormatName(format:));
	+(TS_Format)findGLSLFormatName: (const char* _Nonnull)name NS_SWIFT_NAME(findGLSLFormatName(_:));
	+(TS_Format)findGLSLFormatName_: (const char* _Nonnull)name NS_SWIFT_NAME(findGLSLFormatName(name:));
	+(BOOL)isColorFormat: (TS_Format)format NS_SWIFT_NAME(isColorFormat(_:));
	+(BOOL)isColorFormat_: (TS_Format)format NS_SWIFT_NAME(isColorFormat(format:));
	+(BOOL)isDepthFormat: (TS_Format)format NS_SWIFT_NAME(isDepthFormat(_:));
	+(BOOL)isDepthFormat_: (TS_Format)format NS_SWIFT_NAME(isDepthFormat(format:));
	+(BOOL)isPixelFormat: (TS_Format)format NS_SWIFT_NAME(isPixelFormat(_:));
	+(BOOL)isPixelFormat_: (TS_Format)format NS_SWIFT_NAME(isPixelFormat(format:));
	+(BOOL)isPlainFormat: (TS_Format)format NS_SWIFT_NAME(isPlainFormat(_:));
	+(BOOL)isPlainFormat_: (TS_Format)format NS_SWIFT_NAME(isPlainFormat(format:));
	+(BOOL)isMixedFormat: (TS_Format)format NS_SWIFT_NAME(isMixedFormat(_:));
	+(BOOL)isMixedFormat_: (TS_Format)format NS_SWIFT_NAME(isMixedFormat(format:));
	+(BOOL)isBlockFormat: (TS_Format)format NS_SWIFT_NAME(isBlockFormat(_:));
	+(BOOL)isBlockFormat_: (TS_Format)format NS_SWIFT_NAME(isBlockFormat(format:));
	+(BOOL)isStencilFormat: (TS_Format)format NS_SWIFT_NAME(isStencilFormat(_:));
	+(BOOL)isStencilFormat_: (TS_Format)format NS_SWIFT_NAME(isStencilFormat(format:));
	+(TS_Format)toPixelFormat: (TS_Format)format NS_SWIFT_NAME(toPixelFormat(_:));
	+(TS_Format)toPixelFormat_: (TS_Format)format NS_SWIFT_NAME(toPixelFormat(format:));
	+(BOOL)isNormFormat: (TS_Format)format NS_SWIFT_NAME(isNormFormat(_:));
	+(BOOL)isNormFormat_: (TS_Format)format NS_SWIFT_NAME(isNormFormat(format:));
	+(BOOL)isSRGBFormat: (TS_Format)format NS_SWIFT_NAME(isSRGBFormat(_:));
	+(BOOL)isSRGBFormat_: (TS_Format)format NS_SWIFT_NAME(isSRGBFormat(format:));
	+(BOOL)isSignedFormat: (TS_Format)format NS_SWIFT_NAME(isSignedFormat(_:));
	+(BOOL)isSignedFormat_: (TS_Format)format NS_SWIFT_NAME(isSignedFormat(format:));
	+(BOOL)isUnsignedFormat: (TS_Format)format NS_SWIFT_NAME(isUnsignedFormat(_:));
	+(BOOL)isUnsignedFormat_: (TS_Format)format NS_SWIFT_NAME(isUnsignedFormat(format:));
	+(BOOL)isIntegerFormat: (TS_Format)format NS_SWIFT_NAME(isIntegerFormat(_:));
	+(BOOL)isIntegerFormat_: (TS_Format)format NS_SWIFT_NAME(isIntegerFormat(format:));
	+(BOOL)isFloatFormat: (TS_Format)format NS_SWIFT_NAME(isFloatFormat(_:));
	+(BOOL)isFloatFormat_: (TS_Format)format NS_SWIFT_NAME(isFloatFormat(format:));
	+(TS_Format)toNormFormat: (TS_Format)format NS_SWIFT_NAME(toNormFormat(_:));
	+(TS_Format)toNormFormat_: (TS_Format)format NS_SWIFT_NAME(toNormFormat(format:));
	+(TS_Format)toSRGBFormat: (TS_Format)format NS_SWIFT_NAME(toSRGBFormat(_:));
	+(TS_Format)toSRGBFormat_: (TS_Format)format NS_SWIFT_NAME(toSRGBFormat(format:));
	+(TS_Format)toSignedFormat: (TS_Format)format NS_SWIFT_NAME(toSignedFormat(_:));
	+(TS_Format)toSignedFormat_: (TS_Format)format NS_SWIFT_NAME(toSignedFormat(format:));
	+(TS_Format)toUnsignedFormat: (TS_Format)format NS_SWIFT_NAME(toUnsignedFormat(_:));
	+(TS_Format)toUnsignedFormat_: (TS_Format)format NS_SWIFT_NAME(toUnsignedFormat(format:));
	+(TS_Format)toFloatFormat: (TS_Format)format NS_SWIFT_NAME(toFloatFormat(_:));
	+(TS_Format)toFloatFormat_: (TS_Format)format NS_SWIFT_NAME(toFloatFormat(format:));
	+(BOOL)isi8Format: (TS_Format)format NS_SWIFT_NAME(isi8Format(_:));
	+(BOOL)isi8Format_: (TS_Format)format NS_SWIFT_NAME(isi8Format(format:));
	+(BOOL)isu8Format: (TS_Format)format NS_SWIFT_NAME(isu8Format(_:));
	+(BOOL)isu8Format_: (TS_Format)format NS_SWIFT_NAME(isu8Format(format:));
	+(BOOL)is8BitFormat: (TS_Format)format NS_SWIFT_NAME(is8BitFormat(_:));
	+(BOOL)is8BitFormat_: (TS_Format)format NS_SWIFT_NAME(is8BitFormat(format:));
	+(TS_Format)to8BitFormat: (TS_Format)format NS_SWIFT_NAME(to8BitFormat(_:));
	+(TS_Format)to8BitFormat_: (TS_Format)format NS_SWIFT_NAME(to8BitFormat(format:));
	+(BOOL)isi16Format: (TS_Format)format NS_SWIFT_NAME(isi16Format(_:));
	+(BOOL)isi16Format_: (TS_Format)format NS_SWIFT_NAME(isi16Format(format:));
	+(BOOL)isu16Format: (TS_Format)format NS_SWIFT_NAME(isu16Format(_:));
	+(BOOL)isu16Format_: (TS_Format)format NS_SWIFT_NAME(isu16Format(format:));
	+(BOOL)isf16Format: (TS_Format)format NS_SWIFT_NAME(isf16Format(_:));
	+(BOOL)isf16Format_: (TS_Format)format NS_SWIFT_NAME(isf16Format(format:));
	+(BOOL)is16BitFormat: (TS_Format)format NS_SWIFT_NAME(is16BitFormat(_:));
	+(BOOL)is16BitFormat_: (TS_Format)format NS_SWIFT_NAME(is16BitFormat(format:));
	+(TS_Format)to16BitFormat: (TS_Format)format NS_SWIFT_NAME(to16BitFormat(_:));
	+(TS_Format)to16BitFormat_: (TS_Format)format NS_SWIFT_NAME(to16BitFormat(format:));
	+(BOOL)isi32Format: (TS_Format)format NS_SWIFT_NAME(isi32Format(_:));
	+(BOOL)isi32Format_: (TS_Format)format NS_SWIFT_NAME(isi32Format(format:));
	+(BOOL)isu32Format: (TS_Format)format NS_SWIFT_NAME(isu32Format(_:));
	+(BOOL)isu32Format_: (TS_Format)format NS_SWIFT_NAME(isu32Format(format:));
	+(BOOL)isf32Format: (TS_Format)format NS_SWIFT_NAME(isf32Format(_:));
	+(BOOL)isf32Format_: (TS_Format)format NS_SWIFT_NAME(isf32Format(format:));
	+(BOOL)is32BitFormat: (TS_Format)format NS_SWIFT_NAME(is32BitFormat(_:));
	+(BOOL)is32BitFormat_: (TS_Format)format NS_SWIFT_NAME(is32BitFormat(format:));
	+(TS_Format)to32BitFormat: (TS_Format)format NS_SWIFT_NAME(to32BitFormat(_:));
	+(TS_Format)to32BitFormat_: (TS_Format)format NS_SWIFT_NAME(to32BitFormat(format:));
	+(BOOL)isi64Format: (TS_Format)format NS_SWIFT_NAME(isi64Format(_:));
	+(BOOL)isi64Format_: (TS_Format)format NS_SWIFT_NAME(isi64Format(format:));
	+(BOOL)isu64Format: (TS_Format)format NS_SWIFT_NAME(isu64Format(_:));
	+(BOOL)isu64Format_: (TS_Format)format NS_SWIFT_NAME(isu64Format(format:));
	+(BOOL)isf64Format: (TS_Format)format NS_SWIFT_NAME(isf64Format(_:));
	+(BOOL)isf64Format_: (TS_Format)format NS_SWIFT_NAME(isf64Format(format:));
	+(BOOL)is64BitFormat: (TS_Format)format NS_SWIFT_NAME(is64BitFormat(_:));
	+(BOOL)is64BitFormat_: (TS_Format)format NS_SWIFT_NAME(is64BitFormat(format:));
	+(BOOL)isBC15Format: (TS_Format)format NS_SWIFT_NAME(isBC15Format(_:));
	+(BOOL)isBC15Format_: (TS_Format)format NS_SWIFT_NAME(isBC15Format(format:));
	+(BOOL)isBC67Format: (TS_Format)format NS_SWIFT_NAME(isBC67Format(_:));
	+(BOOL)isBC67Format_: (TS_Format)format NS_SWIFT_NAME(isBC67Format(format:));
	+(BOOL)isETC2Format: (TS_Format)format NS_SWIFT_NAME(isETC2Format(_:));
	+(BOOL)isETC2Format_: (TS_Format)format NS_SWIFT_NAME(isETC2Format(format:));
	+(BOOL)isASTCFormat: (TS_Format)format NS_SWIFT_NAME(isASTCFormat(_:));
	+(BOOL)isASTCFormat_: (TS_Format)format NS_SWIFT_NAME(isASTCFormat(format:));
	+(uint32_t)getFormatComponents: (TS_Format)format NS_SWIFT_NAME(formatComponents(_:));
	+(uint32_t)getFormatComponents_: (TS_Format)format NS_SWIFT_NAME(formatComponents(format:));
	+(TS_Format)toFormatComponents: (TS_Format)format components: (uint32_t)components NS_SWIFT_NAME(toFormatComponents(_:_:));
	+(TS_Format)toFormatComponents_: (TS_Format)format components: (uint32_t)components NS_SWIFT_NAME(toFormatComponents(format:components:));
	+(uint32_t)getFormatPixelSize: (TS_Format)format NS_SWIFT_NAME(formatPixelSize(_:));
	+(uint32_t)getFormatPixelSize_: (TS_Format)format NS_SWIFT_NAME(formatPixelSize(format:));
	+(uint32_t)getFormatBlockSize: (TS_Format)format NS_SWIFT_NAME(formatBlockSize(_:));
	+(uint32_t)getFormatBlockSize_: (TS_Format)format NS_SWIFT_NAME(formatBlockSize(format:));
	+(uint32_t)getFormatBlockWidth: (TS_Format)format NS_SWIFT_NAME(formatBlockWidth(_:));
	+(uint32_t)getFormatBlockWidth_: (TS_Format)format NS_SWIFT_NAME(formatBlockWidth(format:));
	+(uint32_t)getFormatBlockHeight: (TS_Format)format NS_SWIFT_NAME(formatBlockHeight(_:));
	+(uint32_t)getFormatBlockHeight_: (TS_Format)format NS_SWIFT_NAME(formatBlockHeight(format:));
	+(uint32_t)getPixelFormatValue: (TS_Format)format value: (float32_t[ _Nonnull 4])value src: (const void* _Nonnull)src NS_SWIFT_NAME(pixelFormatValue(_:_:_:));
	+(uint32_t)getPixelFormatValue_: (TS_Format)format value: (float32_t[ _Nonnull 4])value src: (const void* _Nonnull)src NS_SWIFT_NAME(pixelFormatValue(format:value:src:));
	+(uint32_t)getPixelFormatValue_1: (TS_Format)format value: (float32_t[ _Nonnull 4])value src: (const void* _Nonnull)src stride: (uint32_t)stride NS_SWIFT_NAME(pixelFormatValue(_:_:_:_:));
	+(uint32_t)getPixelFormatValue_1_: (TS_Format)format value: (float32_t[ _Nonnull 4])value src: (const void* _Nonnull)src stride: (uint32_t)stride NS_SWIFT_NAME(pixelFormatValue(format:value:src:stride:));
	+(uint32_t)setPixelFormatValue: (TS_Format)format dest: (void* _Nonnull)dest value: (const float32_t[ _Nonnull 4])value NS_SWIFT_NAME(setPixelFormatValue(_:_:_:));
	+(uint32_t)setPixelFormatValue_: (TS_Format)format dest: (void* _Nonnull)dest value: (const float32_t[ _Nonnull 4])value NS_SWIFT_NAME(setPixelFormatValue(format:dest:value:));
	+(uint32_t)setPixelFormatValue_1: (TS_Format)format dest: (void* _Nonnull)dest value: (const float32_t[ _Nonnull 4])value stride: (uint32_t)stride NS_SWIFT_NAME(setPixelFormatValue(_:_:_:_:));
	+(uint32_t)setPixelFormatValue_1_: (TS_Format)format dest: (void* _Nonnull)dest value: (const float32_t[ _Nonnull 4])value stride: (uint32_t)stride NS_SWIFT_NAME(setPixelFormatValue(format:dest:value:stride:));
@end

/// Tellusim::Allocator
NS_SWIFT_NAME(Allocator)
TS_CAPI @interface TSAllocator : NSObject
	+(void* _Nonnull)allocate: (size_t)size NS_SWIFT_NAME(allocate(_:));
	+(void* _Nonnull)allocate_: (size_t)size NS_SWIFT_NAME(allocate(size:));
	+(void* _Nonnull)reallocate: (void* _Nonnull)ptr old_size: (size_t)old_size new_size: (size_t)new_size NS_SWIFT_NAME(reallocate(_:_:_:));
	+(void* _Nonnull)reallocate_: (void* _Nonnull)ptr old_size: (size_t)old_size new_size: (size_t)new_size NS_SWIFT_NAME(reallocate(ptr:old_size:new_size:));
	+(void)free: (const void* _Nonnull)ptr size: (size_t)size NS_SWIFT_NAME(free(_:_:));
	+(void)free_: (const void* _Nonnull)ptr size: (size_t)size NS_SWIFT_NAME(free(ptr:size:));
	+(size_t)getMemory NS_SWIFT_NAME(memory());
	+(size_t)getAllocations NS_SWIFT_NAME(allocations());
@end

/// Tellusim::Log
NS_SWIFT_NAME(Log)
TS_CAPI @interface TSLog : NSObject
	+(void)setLevel: (TS_LogLevel)level NS_SWIFT_NAME(setLevel(_:));
	+(void)setLevel_: (TS_LogLevel)level NS_SWIFT_NAME(setLevel(level:));
	+(TS_LogLevel)getLevel NS_SWIFT_NAME(level());
	+(void)unlockCallback;
	+(void)lockCallback;
	+(void)print: (const char* _Nonnull)str NS_SWIFT_NAME(print(_:));
	+(void)print_: (const char* _Nonnull)str NS_SWIFT_NAME(print(str:));
	+(void)vprintf: (const char* _Nonnull)str args: (va_list)args NS_SWIFT_NAME(vprintf(_:_:));
	+(void)vprintf_: (const char* _Nonnull)str args: (va_list)args NS_SWIFT_NAME(vprintf(str:args:));
	+(void)print_1: (TS_LogLevel)level str: (const char* _Nonnull)str NS_SWIFT_NAME(print(_:_:));
	+(void)print_1_: (TS_LogLevel)level str: (const char* _Nonnull)str NS_SWIFT_NAME(print(level:str:));
	+(void)printe: (TS_LogLevel)level str: (const char* _Nonnull)str NS_SWIFT_NAME(printe(_:_:));
	+(void)printe_: (TS_LogLevel)level str: (const char* _Nonnull)str NS_SWIFT_NAME(printe(level:str:));
	+(void)vprintf_1: (TS_LogLevel)level str: (const char* _Nonnull)str args: (va_list)args NS_SWIFT_NAME(vprintf(_:_:_:));
	+(void)vprintf_1_: (TS_LogLevel)level str: (const char* _Nonnull)str args: (va_list)args NS_SWIFT_NAME(vprintf(level:str:args:));
	+(void)vprintef: (TS_LogLevel)level str: (const char* _Nonnull)str args: (va_list)args NS_SWIFT_NAME(vprintef(_:_:_:));
	+(void)vprintef_: (TS_LogLevel)level str: (const char* _Nonnull)str args: (va_list)args NS_SWIFT_NAME(vprintef(level:str:args:));
@end

/// Tellusim::Time
NS_SWIFT_NAME(Time)
TS_CAPI @interface TSTime_ : NSObject
	+(uint64_t)current;
	+(float64_t)seconds;
	+(void)sleep: (uint32_t)usec NS_SWIFT_NAME(sleep(_:));
	+(void)sleep_: (uint32_t)usec NS_SWIFT_NAME(sleep(usec:));
@end

/// Tellusim::System
NS_SWIFT_NAME(System)
TS_CAPI @interface TSSystem : NSObject
	+(uint32_t)getThreadID NS_SWIFT_NAME(threadID());
	+(BOOL)setEnvironment: (const char* _Nonnull)name value: (const char* _Nonnull)value NS_SWIFT_NAME(setEnvironment(_:_:));
	+(BOOL)setEnvironment_: (const char* _Nonnull)name value: (const char* _Nonnull)value NS_SWIFT_NAME(setEnvironment(name:value:));
	+(BOOL)setEnvironment_1: (const TSString* _Nonnull)name value: (const char* _Nonnull)value NS_SWIFT_NAME(setEnvironment(_:_:));
	+(BOOL)setEnvironment_1_: (const TSString* _Nonnull)name value: (const char* _Nonnull)value NS_SWIFT_NAME(setEnvironment(name:value:));
	+(NSString* _Nonnull)getEnvironment: (const char* _Nonnull)name NS_SWIFT_NAME(environment(_:));
	+(NSString* _Nonnull)getEnvironment_: (const char* _Nonnull)name NS_SWIFT_NAME(environment(name:));
	+(NSString* _Nonnull)getEnvironment_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(environment(_:));
	+(NSString* _Nonnull)getEnvironment_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(environment(name:));
	+(void* _Nonnull)loadLibrary: (const char* _Nonnull)name NS_SWIFT_NAME(loadLibrary(_:));
	+(void* _Nonnull)loadLibrary_: (const char* _Nonnull)name NS_SWIFT_NAME(loadLibrary(name:));
	+(void* _Nonnull)loadLibrary_1: (const TSString* _Nonnull)name NS_SWIFT_NAME(loadLibrary(_:));
	+(void* _Nonnull)loadLibrary_1_: (const TSString* _Nonnull)name NS_SWIFT_NAME(loadLibrary(name:));
	+(void* _Nonnull)getFunction: (void* _Nonnull)handle name: (const char* _Nonnull)name NS_SWIFT_NAME(function(_:_:));
	+(void* _Nonnull)getFunction_: (void* _Nonnull)handle name: (const char* _Nonnull)name NS_SWIFT_NAME(function(handle:name:));
	+(void* _Nonnull)getFunction_1: (void* _Nonnull)handle name: (const TSString* _Nonnull)name NS_SWIFT_NAME(function(_:_:));
	+(void* _Nonnull)getFunction_1_: (void* _Nonnull)handle name: (const TSString* _Nonnull)name NS_SWIFT_NAME(function(handle:name:));
	+(void)closeLibrary: (void* _Nonnull)handle NS_SWIFT_NAME(closeLibrary(_:));
	+(void)closeLibrary_: (void* _Nonnull)handle NS_SWIFT_NAME(closeLibrary(handle:));
	+(BOOL)exec: (const char* _Nonnull)command NS_SWIFT_NAME(exec(_:));
	+(BOOL)exec_: (const char* _Nonnull)command NS_SWIFT_NAME(exec(command:));
	+(BOOL)exec_1: (const char* _Nonnull)command wait: (BOOL)wait NS_SWIFT_NAME(exec(_:_:));
	+(BOOL)exec_1_: (const char* _Nonnull)command wait: (BOOL)wait NS_SWIFT_NAME(exec(command:wait:));
	+(BOOL)exec_2: (const char* _Nonnull)command wait: (BOOL)wait console: (BOOL)console NS_SWIFT_NAME(exec(_:_:_:));
	+(BOOL)exec_2_: (const char* _Nonnull)command wait: (BOOL)wait console: (BOOL)console NS_SWIFT_NAME(exec(command:wait:console:));
	+(BOOL)exec_3: (const TSString* _Nonnull)command NS_SWIFT_NAME(exec(_:));
	+(BOOL)exec_3_: (const TSString* _Nonnull)command NS_SWIFT_NAME(exec(command:));
	+(BOOL)exec_4: (const TSString* _Nonnull)command wait: (BOOL)wait NS_SWIFT_NAME(exec(_:_:));
	+(BOOL)exec_4_: (const TSString* _Nonnull)command wait: (BOOL)wait NS_SWIFT_NAME(exec(command:wait:));
	+(BOOL)exec_5: (const TSString* _Nonnull)command wait: (BOOL)wait console: (BOOL)console NS_SWIFT_NAME(exec(_:_:_:));
	+(BOOL)exec_5_: (const TSString* _Nonnull)command wait: (BOOL)wait console: (BOOL)console NS_SWIFT_NAME(exec(command:wait:console:));
	+(BOOL)open: (const char* _Nonnull)command NS_SWIFT_NAME(open(_:));
	+(BOOL)open_: (const char* _Nonnull)command NS_SWIFT_NAME(open(command:));
	+(BOOL)open_1: (const TSString* _Nonnull)command NS_SWIFT_NAME(open(_:));
	+(BOOL)open_1_: (const TSString* _Nonnull)command NS_SWIFT_NAME(open(command:));
@end

/// Tellusim::MeshGraph::ProgressCallback
NS_SWIFT_NAME(MeshGraph.ProgressCallback)
@protocol TSMeshGraphProgressCallback <NSObject>
	-(BOOL)run: (uint32_t)progress NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::MeshGraph
NS_SWIFT_NAME(MeshGraph)
TS_CAPI @interface TSMeshGraph : NSObject
	+(BOOL)create: (TSMesh* _Nonnull)dest src: (TSMesh* _Nonnull)src max_attributes: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives NS_SWIFT_NAME(create(_:_:_:_:));
	+(BOOL)create_: (TSMesh* _Nonnull)dest src: (TSMesh* _Nonnull)src max_attributes: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives NS_SWIFT_NAME(create(dest:src:max_attributes:max_primitives:));
	+(BOOL)create_1: (TSMesh* _Nonnull)dest src: (TSMesh* _Nonnull)src max_attributes: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives func: (id<TSMeshGraphProgressCallback> _Nullable)func NS_SWIFT_NAME(create(_:_:_:_:_:));
	+(BOOL)create_1_: (TSMesh* _Nonnull)dest src: (TSMesh* _Nonnull)src max_attributes: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives func: (id<TSMeshGraphProgressCallback> _Nullable)func NS_SWIFT_NAME(create(dest:src:max_attributes:max_primitives:func:));
	+(BOOL)create_2: (TSMesh* _Nonnull)dest src: (TSMesh* _Nonnull)src max_attributes: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives func: (id<TSMeshGraphProgressCallback> _Nullable)func async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(_:_:_:_:_:_:));
	+(BOOL)create_2_: (TSMesh* _Nonnull)dest src: (TSMesh* _Nonnull)src max_attributes: (uint32_t)max_attributes max_primitives: (uint32_t)max_primitives func: (id<TSMeshGraphProgressCallback> _Nullable)func async: (TSAsync* _Nonnull * _Nullable)async NS_SWIFT_NAME(create(dest:src:max_attributes:max_primitives:func:async:));
@end

/// Tellusim::MeshReduce::ProgressCallback
NS_SWIFT_NAME(MeshReduce.ProgressCallback)
@protocol TSMeshReduceProgressCallback <NSObject>
	-(BOOL)run: (uint32_t)progress NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::MeshReduce
NS_SWIFT_NAME(MeshReduce)
TS_CAPI @interface TSMeshReduce : NSObject
	+(BOOL)collapse: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src ratio: (float32_t)ratio NS_SWIFT_NAME(collapse(_:_:_:));
	+(BOOL)collapse_: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src ratio: (float32_t)ratio NS_SWIFT_NAME(collapse(dest:src:ratio:));
	+(BOOL)collapse_1: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold NS_SWIFT_NAME(collapse(_:_:_:_:));
	+(BOOL)collapse_1_: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold NS_SWIFT_NAME(collapse(dest:src:ratio:threshold:));
	+(BOOL)collapse_2: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold func: (id<TSMeshReduceProgressCallback> _Nullable)func NS_SWIFT_NAME(collapse(_:_:_:_:_:));
	+(BOOL)collapse_2_: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold func: (id<TSMeshReduceProgressCallback> _Nullable)func NS_SWIFT_NAME(collapse(dest:src:ratio:threshold:func:));
	+(BOOL)collapse_3: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src ratio: (float32_t)ratio NS_SWIFT_NAME(collapse(_:_:_:));
	+(BOOL)collapse_3_: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src ratio: (float32_t)ratio NS_SWIFT_NAME(collapse(dest:src:ratio:));
	+(BOOL)collapse_4: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold NS_SWIFT_NAME(collapse(_:_:_:_:));
	+(BOOL)collapse_4_: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold NS_SWIFT_NAME(collapse(dest:src:ratio:threshold:));
	+(BOOL)collapse_5: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold func: (id<TSMeshReduceProgressCallback> _Nullable)func NS_SWIFT_NAME(collapse(_:_:_:_:_:));
	+(BOOL)collapse_5_: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold func: (id<TSMeshReduceProgressCallback> _Nullable)func NS_SWIFT_NAME(collapse(dest:src:ratio:threshold:func:));
	+(BOOL)collapse_6: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold func: (id<TSMeshReduceProgressCallback> _Nullable)func position: (uint32_t)position NS_SWIFT_NAME(collapse(_:_:_:_:_:_:));
	+(BOOL)collapse_6_: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold func: (id<TSMeshReduceProgressCallback> _Nullable)func position: (uint32_t)position NS_SWIFT_NAME(collapse(dest:src:ratio:threshold:func:position:));
@end

/// Tellusim::MeshRefine
NS_SWIFT_NAME(MeshRefine)
TS_CAPI @interface TSMeshRefine : NSObject
	+(BOOL)subdiv: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src steps: (uint32_t)steps NS_SWIFT_NAME(subdiv(_:_:_:));
	+(BOOL)subdiv_: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src steps: (uint32_t)steps NS_SWIFT_NAME(subdiv(dest:src:steps:));
	+(BOOL)subdiv_1: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src steps: (uint32_t)steps weight: (float32_t)weight NS_SWIFT_NAME(subdiv(_:_:_:_:));
	+(BOOL)subdiv_1_: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src steps: (uint32_t)steps weight: (float32_t)weight NS_SWIFT_NAME(subdiv(dest:src:steps:weight:));
	+(BOOL)subdiv_2: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src steps: (uint32_t)steps NS_SWIFT_NAME(subdiv(_:_:_:));
	+(BOOL)subdiv_2_: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src steps: (uint32_t)steps NS_SWIFT_NAME(subdiv(dest:src:steps:));
	+(BOOL)subdiv_3: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src steps: (uint32_t)steps weight: (float32_t)weight NS_SWIFT_NAME(subdiv(_:_:_:_:));
	+(BOOL)subdiv_3_: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src steps: (uint32_t)steps weight: (float32_t)weight NS_SWIFT_NAME(subdiv(dest:src:steps:weight:));
	+(BOOL)subdiv_4: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src steps: (uint32_t)steps weight: (float32_t)weight position: (uint32_t)position NS_SWIFT_NAME(subdiv(_:_:_:_:_:));
	+(BOOL)subdiv_4_: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src steps: (uint32_t)steps weight: (float32_t)weight position: (uint32_t)position NS_SWIFT_NAME(subdiv(dest:src:steps:weight:position:));
@end

/// Tellusim::MeshSolid::ProgressCallback
NS_SWIFT_NAME(MeshSolid.ProgressCallback)
@protocol TSMeshSolidProgressCallback <NSObject>
	-(BOOL)run: (uint32_t)progress NS_SWIFT_NAME(run(_:));
@end

/// Tellusim::MeshSolid
NS_SWIFT_NAME(MeshSolid)
TS_CAPI @interface TSMeshSolid : NSObject
	+(BOOL)create: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src NS_SWIFT_NAME(create(_:_:));
	+(BOOL)create_: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src NS_SWIFT_NAME(create(dest:src:));
	+(BOOL)create_1: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src ratio: (float32_t)ratio NS_SWIFT_NAME(create(_:_:_:));
	+(BOOL)create_1_: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src ratio: (float32_t)ratio NS_SWIFT_NAME(create(dest:src:ratio:));
	+(BOOL)create_2: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold NS_SWIFT_NAME(create(_:_:_:_:));
	+(BOOL)create_2_: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold NS_SWIFT_NAME(create(dest:src:ratio:threshold:));
	+(BOOL)create_3: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold func: (id<TSMeshSolidProgressCallback> _Nullable)func NS_SWIFT_NAME(create(_:_:_:_:_:));
	+(BOOL)create_3_: (TSMesh* _Nonnull)dest src: (const TSMesh* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold func: (id<TSMeshSolidProgressCallback> _Nullable)func NS_SWIFT_NAME(create(dest:src:ratio:threshold:func:));
	+(BOOL)create_4: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src NS_SWIFT_NAME(create(_:_:));
	+(BOOL)create_4_: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src NS_SWIFT_NAME(create(dest:src:));
	+(BOOL)create_5: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src ratio: (float32_t)ratio NS_SWIFT_NAME(create(_:_:_:));
	+(BOOL)create_5_: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src ratio: (float32_t)ratio NS_SWIFT_NAME(create(dest:src:ratio:));
	+(BOOL)create_6: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold NS_SWIFT_NAME(create(_:_:_:_:));
	+(BOOL)create_6_: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold NS_SWIFT_NAME(create(dest:src:ratio:threshold:));
	+(BOOL)create_7: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold func: (id<TSMeshSolidProgressCallback> _Nullable)func NS_SWIFT_NAME(create(_:_:_:_:_:));
	+(BOOL)create_7_: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold func: (id<TSMeshSolidProgressCallback> _Nullable)func NS_SWIFT_NAME(create(dest:src:ratio:threshold:func:));
	+(BOOL)create_8: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold func: (id<TSMeshSolidProgressCallback> _Nullable)func position: (uint32_t)position NS_SWIFT_NAME(create(_:_:_:_:_:_:));
	+(BOOL)create_8_: (TSMeshGeometry* _Nonnull)dest src: (const TSMeshGeometry* _Nonnull)src ratio: (float32_t)ratio threshold: (float32_t)threshold func: (id<TSMeshSolidProgressCallback> _Nullable)func position: (uint32_t)position NS_SWIFT_NAME(create(dest:src:ratio:threshold:func:position:));
@end

#ifdef __cplusplus
}
#endif

#endif /* __TELLUSIM_OBJC_API_H__ */
